define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompatibleExperimentalFeatures = void 0;
    /**
     * Experimental feature flags
     */
    // eslint-disable-next-line etc/no-const-enum
    var CompatibleExperimentalFeatures;
    (function (CompatibleExperimentalFeatures) {
        // #region Graduated and deprecated features.
        // These features will be removed in next major release
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["NewIndentation"] = "NewIndentation";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["NewBullet"] = "NewBullet";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["NewNumbering"] = "NewNumbering";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["ListChain"] = "ListChain";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["MergePastedLine"] = "MergePastedLine";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["SingleDirectionResize"] = "SingleDirectionResize";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["PasteWithLinkPreview"] = "PasteWithLinkPreview";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["ImageRotate"] = "ImageRotate";
        /**
         * @deprecated This feature is always enabled
         */
        CompatibleExperimentalFeatures["ImageCrop"] = "ImageCrop";
        /**
         * @deprecated This feature is always enabled
         * Check if the element has a style attribute, if not, apply the default format
         */
        CompatibleExperimentalFeatures["AlwaysApplyDefaultFormat"] = "AlwaysApplyDefaultFormat";
        /**
         * @deprecated This feature can be enabled/disabled using Paste Plugin contructor param
         * Paste the Html instead of the Img when the Html Body only have one IMG Child node
         */
        CompatibleExperimentalFeatures["ConvertSingleImageBody"] = "ConvertSingleImageBody";
        /**
         * @deprecated This feature is always enabled
         * Align table elements to left, center and right using setAlignment API
         */
        CompatibleExperimentalFeatures["TableAlignment"] = "TableAlignment";
        /**
         * @deprecated this feature is always enabled
         * Provide a circular resize handles that adaptive the number od handles to the size of the image
         */
        CompatibleExperimentalFeatures["AdaptiveHandlesResizer"] = "AdaptiveHandlesResizer";
        /**
         * @deprecated this feature is always disabled
         * Automatically transform -- into hyphen, if typed between two words.
         */
        CompatibleExperimentalFeatures["AutoHyphen"] = "AutoHyphen";
        /**
         * @deprecated this feature is always disabled
         * Use pending format strategy to do style based format, e.g. Font size, Color.
         * With this feature enabled, we don't need to insert temp ZeroWidthSpace character to hold pending format
         * when selection is collapsed. Instead, we will hold the pending format in memory and only apply it when type something
         */
        CompatibleExperimentalFeatures["PendingStyleBasedFormat"] = "PendingStyleBasedFormat";
        /**
         * @deprecated this feature is always disabled
         * Normalize list to make sure it can be displayed correctly in other client
         * e.g. We will move list items with "display: block" into previous list item and change tag to be DIV
         */
        CompatibleExperimentalFeatures["NormalizeList"] = "NormalizeList";
        /**
         * @deprecated this feature is always enabled
         * When a html image is selected, the selected image data will be stored by editor core.
         */
        CompatibleExperimentalFeatures["ImageSelection"] = "ImageSelection";
        /**
         * @deprecated this feature is always enabled
         * Use variable-based dark mode solution rather than dataset-based solution.
         * When enable this feature, need to pass in a DarkModelHandler object to each call of setColor and applyFormat
         * if you need them work for dark mode
         */
        CompatibleExperimentalFeatures["VariableBasedDarkColor"] = "VariableBasedDarkColor";
        /**
         * @deprecated this feature is always enabled
         * Align list elements elements to left, center and right using setAlignment API
         */
        CompatibleExperimentalFeatures["ListItemAlignment"] = "ListItemAlignment";
        /**
         * @deprecated
         */
        CompatibleExperimentalFeatures["DefaultFormatInSpan"] = "DefaultFormatInSpan";
        /**
         * @deprecated
         */
        CompatibleExperimentalFeatures["DefaultFormatOnContainer"] = "DefaultFormatOnContainer";
        /**
         * @deprecated This feature is always enabled
         * Reuse existing DOM structure if possible when convert Content Model back to DOM tree
         */
        CompatibleExperimentalFeatures["ReusableContentModel"] = "ReusableContentModel";
        /**
         * @deprecated This feature is always enabled
         * Handle keyboard editing event with Content Model
         */
        CompatibleExperimentalFeatures["EditWithContentModel"] = "EditWithContentModel";
        /**
         * @deprecated This feature is always enabled
         * Trigger formatting by a especial characters. Ex: (A), 1. i).
         */
        CompatibleExperimentalFeatures["AutoFormatList"] = "AutoFormatList";
        /**
         * @deprecated This feature is always enabled
         * Add entities around a Read Only  Inline entity to prevent cursor to be hidden when cursor is next of it.
         */
        CompatibleExperimentalFeatures["InlineEntityReadOnlyDelimiters"] = "InlineEntityReadOnlyDelimiters";
        /**
         * @deprecated This feature is always enabled
         * Paste with Content model
         */
        CompatibleExperimentalFeatures["ContentModelPaste"] = "ContentModelPaste";
        //#endregion
        /**
         * Provide additional Tab Key Features. Requires Text Features Content Editable Features
         */
        CompatibleExperimentalFeatures["TabKeyTextFeatures"] = "TabKeyTextFeatures";
        /**
         * With this feature enabled, when writing back a list item we will re-use all
         * ancestor list elements, even if they don't match the types currently in the
         * listTypes array for that item. The only list that we will ensure is correct
         * is the one closest to the item.
         */
        CompatibleExperimentalFeatures["ReuseAllAncestorListElements"] = "ReuseAllAncestorListElements";
        /**
         * Delete table with Backspace key with the whole was selected with table selector
         */
        CompatibleExperimentalFeatures["DeleteTableWithBackspace"] = "DeleteTableWithBackspace";
        /**
         * Disable list chain functionality
         */
        CompatibleExperimentalFeatures["DisableListChain"] = "DisableListChain";
    })(CompatibleExperimentalFeatures = exports.CompatibleExperimentalFeatures || (exports.CompatibleExperimentalFeatures = {}));
});
//# sourceMappingURL=ExperimentalFeatures.js.map