define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompatibleDocumentCommand = void 0;
    /**
     * Command strings for Document.execCommand() API
     * https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand
     */
    // eslint-disable-next-line etc/no-const-enum
    var CompatibleDocumentCommand;
    (function (CompatibleDocumentCommand) {
        /**
         * Changes the browser auto-link behavior (Internet Explorer only)
         */
        CompatibleDocumentCommand["AutoUrlDetect"] = "AutoUrlDetect";
        /**
         * Changes the document background color. In styleWithCss mode, it affects the background color of the containing block instead.
         * This requires a &lt;color&gt; value string to be passed in as a value argument. Note that Internet Explorer uses this to set the
         * text background color.
         */
        CompatibleDocumentCommand["BackColor"] = "backColor";
        /**
         * Toggles bold on/off for the selection or at the insertion point. Internet Explorer uses the &lt;strong&gt; tag instead of &lt;b&gt;.
         */
        CompatibleDocumentCommand["Bold"] = "bold";
        /**
         * Clears all authentication credentials from the cache.
         */
        CompatibleDocumentCommand["ClearAuthenticationCache"] = "ClearAuthenticationCache";
        /**
         * Makes the content document either read-only or editable. This requires a boolean true/false as the value argument.
         * (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["ContentReadOnly"] = "contentReadOnly";
        /**
         * Copies the current selection to the clipboard. Conditions of having this behavior enabled vary from one browser to another,
         * and have evolved over time. Check the compatibility table to determine if you can use it in your case.
         */
        CompatibleDocumentCommand["Copy"] = "copy";
        /**
         * Creates an hyperlink from the selection, but only if there is a selection. Requires a URI string as a value argument for the
         * hyperlink's href. The URI must contain at least a single character, which may be whitespace.
         * (Internet Explorer will create a link with a null value.)
         */
        CompatibleDocumentCommand["CreateLink"] = "createLink";
        /**
         * Removes the current selection and copies it to the clipboard. When this behavior is enabled varies between browsers,
         * and its conditions have evolved over time. Check the compatibility table for usage details.
         */
        CompatibleDocumentCommand["Cut"] = "cut";
        /**
         * Adds a &lt;small&gt; tag around the selection or at the insertion point. (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["DecreaseFontSize"] = "decreaseFontSize";
        /**
         * Changes the paragraph separator used when new paragraphs are created in editable text regions. See Differences in markup
         * generation for more details.
         */
        CompatibleDocumentCommand["DefaultParagraphSeparator"] = "defaultParagraphSeparator";
        /**
         * Deletes the current selection.
         */
        CompatibleDocumentCommand["Delete"] = "delete";
        /**
         * Enables or disables the table row/column insertion and deletion controls. (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["EnableInlineTableEditing"] = "enableInlineTableEditing";
        /**
         * Enables or disables the resize handles on images and other resizable objects. (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["EnableObjectResizing"] = "enableObjectResizing";
        /**
         * Changes the font name for the selection or at the insertion point. This requires a font name string (like "Arial")
         * as a value argument.
         */
        CompatibleDocumentCommand["FontName"] = "fontName";
        /**
         * Changes the font size for the selection or at the insertion point. This requires an integer from 1-7 as a value argument.
         */
        CompatibleDocumentCommand["FontSize"] = "fontSize";
        /**
         * Changes a font color for the selection or at the insertion point. This requires a hexadecimal color value string
         * as a value argument.
         */
        CompatibleDocumentCommand["ForeColor"] = "foreColor";
        /**
         * Adds an HTML block-level element around the line containing the current selection, replacing the block element containing
         * the line if one exists (in Firefox, &lt;blockquote&gt; is the exception — it will wrap any containing block element).
         * Requires a tag-name string as a value argument. Virtually all block-level elements can be used.
         * (Internet Explorer supports only heading tags H1–H6, ADDRESS, and PRE, which must be wrapped in angle brackets, such as "&lt;H1&gt;".)
         */
        CompatibleDocumentCommand["FormatBlock"] = "formatBlock";
        /**
         * Deletes the character ahead of the cursor's position, identical to hitting the Delete key on a Windows keyboard.
         */
        CompatibleDocumentCommand["ForwardDelete"] = "forwardDelete";
        /**
         * Adds a heading element around a selection or insertion point line. Requires the tag-name strings a value argument (i.e. "H1", "H6").
         * (Not supported by Internet Explorer and Safari.)
         */
        CompatibleDocumentCommand["Heading"] = "heading";
        /**
         * Changes the background color for the selection or at the insertion point. Requires a color value string as a value argument.
         * useCSS must be true for this to function. (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["HiliteColor"] = "hiliteColor";
        /**
         * Adds a &lt;big&gt; tag around the selection or at the insertion point. (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["IncreaseFontSize"] = "increaseFontSize";
        /**
         * Indents the line containing the selection or insertion point. In Firefox, if the selection spans multiple lines at different
         * levels of indentation, only the least indented lines in the selection will be indented.
         */
        CompatibleDocumentCommand["Indent"] = "indent";
        /**
         * Controls whether the Enter key inserts a &lt;br&gt; element, or splits the current block element into two.
         * (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["InsertBrOnReturn"] = "insertBrOnReturn";
        /**
         * Inserts a &lt;hr&gt; element at the insertion point, or replaces the selection with it.
         */
        CompatibleDocumentCommand["InsertHorizontalRule"] = "insertHorizontalRule";
        /**
         * Inserts an HTML string at the insertion point (deletes selection). Requires a valid HTML string as a value argument.
         * (Not supported by Internet Explorer.)
         */
        CompatibleDocumentCommand["InsertHTML"] = "insertHTML";
        /**
         * Inserts an image at the insertion point (deletes selection). Requires a URL string for the image's src as a value argument.
         * The requirements for this string are the same as createLink.
         */
        CompatibleDocumentCommand["InsertImage"] = "insertImage";
        /**
         * Creates a numbered ordered list for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["InsertOrderedList"] = "insertOrderedList";
        /**
         * Creates a bulleted unordered list for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["InsertUnorderedList"] = "insertUnorderedList";
        /**
         * Inserts a paragraph around the selection or the current line.
         * (Internet Explorer inserts a paragraph at the insertion point and deletes the selection.)
         */
        CompatibleDocumentCommand["InsertParagraph"] = "insertParagraph";
        /**
         * Inserts the given plain text at the insertion point (deletes selection).
         */
        CompatibleDocumentCommand["InsertText"] = "insertText";
        /**
         * Toggles italics on/off for the selection or at the insertion point.
         * (Internet Explorer uses the &lt;em&gt; element instead of &lt;i&gt;.)
         */
        CompatibleDocumentCommand["Italic"] = "italic";
        /**
         * Centers the selection or insertion point.
         */
        CompatibleDocumentCommand["JustifyCenter"] = "justifyCenter";
        /**
         * Justifies the selection or insertion point.
         */
        CompatibleDocumentCommand["JustifyFull"] = "justifyFull";
        /**
         * Justifies the selection or insertion point to the left.
         */
        CompatibleDocumentCommand["JustifyLeft"] = "justifyLeft";
        /**
         * Right-justifies the selection or the insertion point.
         */
        CompatibleDocumentCommand["JustifyRight"] = "justifyRight";
        /**
         * Outdents the line containing the selection or insertion point.
         */
        CompatibleDocumentCommand["Outdent"] = "outdent";
        /**
         * Pastes the clipboard contents at the insertion point (replaces current selection). Disabled for web content. See [1].
         */
        CompatibleDocumentCommand["Paste"] = "paste";
        /**
         * Redoes the previous undo command.
         */
        CompatibleDocumentCommand["Redo"] = "redo";
        /**
         * Removes all formatting from the current selection.
         */
        CompatibleDocumentCommand["RemoveFormat"] = "removeFormat";
        /**
         * Selects all of the content of the editable region.
         */
        CompatibleDocumentCommand["SelectAll"] = "selectAll";
        /**
         * Toggles strikethrough on/off for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["StrikeThrough"] = "strikeThrough";
        /**
         * Toggles subscript on/off for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["Subscript"] = "subscript";
        /**
         * Toggles superscript on/off for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["Superscript"] = "superscript";
        /**
         * Toggles underline on/off for the selection or at the insertion point.
         */
        CompatibleDocumentCommand["Underline"] = "underline";
        /**
         * Undoes the last executed command.
         */
        CompatibleDocumentCommand["Undo"] = "undo";
        /**
         * Removes the anchor element from a selected hyperlink.
         */
        CompatibleDocumentCommand["Unlink"] = "unlink";
        /**
         * Replaces the useCSS command. true modifies/generates style attributes in markup, false generates presentational elements.
         */
        CompatibleDocumentCommand["StyleWithCSS"] = "styleWithCSS";
    })(CompatibleDocumentCommand = exports.CompatibleDocumentCommand || (exports.CompatibleDocumentCommand = {}));
});
//# sourceMappingURL=DocumentCommand.js.map