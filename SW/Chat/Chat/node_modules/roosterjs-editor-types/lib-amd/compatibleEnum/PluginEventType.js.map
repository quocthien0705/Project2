{"version":3,"file":"PluginEventType.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/compatibleEnum/PluginEventType.ts"],"names":[],"mappings":";;;;IAAA;;OAEG;IACH,6CAA6C;IAC7C,IAAY,yBAgIX;IAhID,WAAY,yBAAyB;QAEjC;;WAEG;QACH,+EAAW,CAAA;QAEX;;WAEG;QACH,iFAAY,CAAA;QAEZ;;WAEG;QACH,2EAAS,CAAA;QAET;;WAEG;QACH,2EAAS,CAAA;QAET;;WAEG;QACH,6FAAkB,CAAA;QAElB;;WAEG;QACH,mFAAa,CAAA;QAEb;;WAEG;QACH,+EAAW,CAAA;QAEX;;WAEG;QACH,6FAAkB,CAAA;QAElB;;;;;WAKG;QACH,2GAAyB,CAAA;QAEzB;;WAEG;QACH,2FAAiB,CAAA;QAEjB;;WAEG;QACH,wFAAgB,CAAA;QAEhB;;WAEG;QACH,wFAAgB,CAAA;QAEhB;;WAEG;QACH,4FAAkB,CAAA;QAElB;;WAEG;QACH,oHAA8B,CAAA;QAE9B;;WAEG;QACH,8EAAW,CAAA;QAEX;;WAEG;QACH,gGAAoB,CAAA;QAEpB;;WAEG;QACH,wFAAgB,CAAA;QAEhB;;WAEG;QACH,oGAAsB,CAAA;QAEtB;;WAEG;QACH,oGAAsB,CAAA;QAEtB;;WAEG;QACH,oFAAc,CAAA;QAEd;;;WAGG;QACH,kGAAqB,CAAA;QAErB;;WAEG;QACH,wFAAgB,CAAA;QAEhB;;;WAGG;QACH,kGAAqB,CAAA;QAErB;;;;WAIG;QACH,4GAA0B,CAAA;IAC9B,CAAC,EAhIW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAgIpC","sourcesContent":["/**\n * Editor plugin event type\n */\r\n// eslint-disable-next-line etc/no-const-enum\r\nexport enum CompatiblePluginEventType {\r\n\n    /**\n     * HTML KeyDown event\n     */\n    KeyDown = 0,\n\n    /**\n     * HTML KeyPress event\n     */\n    KeyPress = 1,\n\n    /**\n     * HTML KeyUp event\n     */\n    KeyUp = 2,\n\n    /**\n     * HTML Input / TextInput event\n     */\n    Input = 3,\n\n    /**\n     * HTML CompositionEnd event\n     */\n    CompositionEnd = 4,\n\n    /**\n     * HTML MouseDown event\n     */\n    MouseDown = 5,\n\n    /**\n     * HTML MouseUp event\n     */\n    MouseUp = 6,\n\n    /**\n     * Content changed event\n     */\n    ContentChanged = 7,\n\n    /**\n     * Extract Content with a DOM tree event\n     * This event is triggered when getContent() is called with triggerExtractContentEvent = true\n     * Plugin can handle this event to remove the UI only markups to return clean HTML\n     * by operating on a cloned DOM tree\n     */\n    ExtractContentWithDom = 8,\n\n    /**\n     * Before Paste event, provide a chance to change copied content\n     */\n    BeforeCutCopy = 9,\n\n    /**\n     * Before Paste event, provide a chance to change paste content\n     */\n    BeforePaste = 10,\n\n    /**\n     * Let plugin know editor is ready now\n     */\n    EditorReady = 11,\n\n    /**\n     * Let plugin know editor is about to dispose\n     */\n    BeforeDispose = 12,\n\n    /**\n     * Pending format state (bold, italic, underline, ... with collapsed selection) is changed\n     */\n    PendingFormatStateChanged = 13,\n\n    /**\n     * Scroll event triggered by scroll container\n     */\n    Scroll = 14,\n\n    /**\n     * Operating on an entity. See enum EntityOperation for more details about each operation\n     */\n    EntityOperation = 15,\n\n    /**\n     * HTML ContextMenu event\n     */\n    ContextMenu = 16,\n\n    /**\n     * Editor has entered shadow edit mode\n     */\n    EnteredShadowEdit = 17,\n\n    /**\n     * Editor is about to leave shadow edit mode\n     */\n    LeavingShadowEdit = 18,\n\n    /**\n     * Content of image is being changed from client side\n     */\n    EditImage = 19,\n\n    /**\n     * Content of editor is about to be cleared by SetContent API, handle this event to cache anything you need\n     * before it is gone\n     */\n    BeforeSetContent = 20,\n\n    /**\n     * Zoom scale value is changed, triggered by Editor.setZoomScale() when set a different scale number\n     */\n    ZoomChanged = 21,\n\n    /**\n     * EXPERIMENTAL FEATURE\n     * Editor changed the selection.\n     */\n    SelectionChanged = 22,\n\n    /**\n     * EXPERIMENTAL FEATURE\n     * Editor content is about to be changed by keyboard event.\n     * This is only used by Content Model editing\n     */\n    BeforeKeyboardEditing = 23,\n}\r\n"]}