{"version":3,"file":"FormatState.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/FormatState.ts"],"names":[],"mappings":"","sourcesContent":["import type ModeIndependentColor from './ModeIndependentColor';\r\nimport type TableFormat from './TableFormat';\r\n\r\n/**\r\n * Format states that can have pending state.\r\n *\r\n * e.g., When using execCommand('bold') target to a collapsed selection, browser will enter bold state,\r\n * but there isn't a &lt;B&gt; tag until user type something, or the state will be rollback if selection\r\n * is changed.\r\n */\r\nexport interface PendableFormatState {\r\n    /**\r\n     * Whether the text is bolded\r\n     */\r\n    isBold?: boolean;\r\n\r\n    /**\r\n     * Whether the text is italic\r\n     */\r\n    isItalic?: boolean;\r\n\r\n    /**\r\n     * Whether the text has underline\r\n     */\r\n    isUnderline?: boolean;\r\n\r\n    /**\r\n     * Whether the text has strike through line\r\n     */\r\n    isStrikeThrough?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in subscript mode\r\n     */\r\n    isSubscript?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in superscript mode\r\n     */\r\n    isSuperscript?: boolean;\r\n}\r\n\r\n/**\r\n * Format state represented by DOM element\r\n */\r\nexport interface ElementBasedFormatState {\r\n    /**\r\n     * Whether the text is in bullet mode\r\n     */\r\n    isBullet?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in numbering mode\r\n     */\r\n    isNumbering?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in block quote\r\n     */\r\n    isBlockQuote?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in Code element\r\n     */\r\n    isCodeInline?: boolean;\r\n\r\n    /**\r\n     * Whether the text is in Code block\r\n     */\r\n    isCodeBlock?: boolean;\r\n\r\n    /**\r\n     * Whether unlink command can be called to the text\r\n     */\r\n    canUnlink?: boolean;\r\n\r\n    /**\r\n     * Whether the selected text is multiline\r\n     */\r\n    isMultilineSelection?: boolean;\r\n\r\n    /**\r\n     * Whether add image alt text command can be called to the text\r\n     */\r\n    canAddImageAltText?: boolean;\r\n\r\n    /**\r\n     * Heading level (0-6, 0 means no heading)\r\n     */\r\n    headingLevel?: number;\r\n\r\n    /**\r\n     * @deprecated Use headingLevel instead\r\n     * Heading level (0-6, 0 means no heading)\r\n     */\r\n    headerLevel?: number;\r\n\r\n    /**\r\n     * Whether the cursor is in table\r\n     */\r\n    isInTable?: boolean;\r\n\r\n    /**\r\n     * Format of table, if there is table at cursor position\r\n     */\r\n    tableFormat?: TableFormat;\r\n\r\n    /**\r\n     * If there is a table, whether the table has header row\r\n     */\r\n    tableHasHeader?: boolean;\r\n\r\n    /**\r\n     * Whether we can execute table cell merge operation\r\n     */\r\n    canMergeTableCell?: boolean;\r\n}\r\n\r\n/**\r\n * Format states represented by CSS style\r\n */\r\nexport interface StyleBasedFormatState {\r\n    /**\r\n     * Font name\r\n     */\r\n    fontName?: string;\r\n\r\n    /**\r\n     * Font size\r\n     */\r\n    fontSize?: string;\r\n\r\n    /**\r\n     * Background color\r\n     */\r\n    backgroundColor?: string;\r\n\r\n    /**\r\n     * Mode independent background color for dark mode\r\n     */\r\n    backgroundColors?: ModeIndependentColor;\r\n\r\n    /**\r\n     * Text color\r\n     */\r\n    textColor?: string;\r\n\r\n    /**\r\n     * Mode independent background color for dark mode\r\n     */\r\n    textColors?: ModeIndependentColor;\r\n\r\n    /**\r\n     * Line height\r\n     */\r\n    lineHeight?: string;\r\n\r\n    /**\r\n     * Margin Top\r\n     */\r\n    marginTop?: string;\r\n\r\n    /**\r\n     * Margin Bottom\r\n     */\r\n    marginBottom?: string;\r\n\r\n    /**\r\n     * Text Align\r\n     */\r\n    textAlign?: string;\r\n\r\n    /**\r\n     * Direction of the element ('ltr' or 'rtl')\r\n     */\r\n    direction?: string;\r\n\r\n    /**\r\n     * Font weight\r\n     */\r\n    fontWeight?: string;\r\n}\r\n\r\n/**\r\n * Specify if editor can undo/redo an editing operation\r\n */\r\nexport interface EditorUndoState {\r\n    /**\r\n     * Whether the content can be undone\r\n     */\r\n    canUndo?: boolean;\r\n\r\n    /**\r\n     * Whether the content ca nbe redone\r\n     */\r\n    canRedo?: boolean;\r\n}\r\n\r\n/**\r\n * The format state\r\n */\r\nexport default interface FormatState\r\n    extends PendableFormatState,\r\n        ElementBasedFormatState,\r\n        StyleBasedFormatState,\r\n        EditorUndoState {\r\n    /**\r\n     * Whether editor is in dark mode\r\n     */\r\n    isDarkMode?: boolean;\r\n\r\n    /**\r\n     * Current zoom scale of editor\r\n     */\r\n    zoomScale?: number;\r\n}\r\n"]}