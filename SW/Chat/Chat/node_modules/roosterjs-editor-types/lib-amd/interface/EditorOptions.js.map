{"version":3,"file":"EditorOptions.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/EditorOptions.ts"],"names":[],"mappings":"","sourcesContent":["import type CorePlugins from './CorePlugins';\nimport type DarkColorHandler from './DarkColorHandler';\nimport type DefaultFormat from './DefaultFormat';\nimport type EditorPlugin from './EditorPlugin';\nimport type Rect from './Rect';\nimport type Snapshot from './Snapshot';\nimport type UndoSnapshotsService from './UndoSnapshotsService';\nimport type { CoreApiMap } from './EditorCore';\nimport type { ExperimentalFeatures } from '../enum/ExperimentalFeatures';\nimport type { SizeTransformer } from '../type/SizeTransformer';\nimport type { TrustedHTMLHandler } from '../type/TrustedHTMLHandler';\nimport type { CompatibleExperimentalFeatures } from '../compatibleEnum/ExperimentalFeatures';\n\n/**\n * The options to specify parameters customizing an editor, used by ctor of Editor class\n */\nexport default interface EditorOptions {\n    /**\n     * List of plugins.\n     * The order of plugins here determines in what order each event will be dispatched.\n     * Plugins not appear in this list will not be added to editor, including built-in plugins.\n     * Default value is empty array.\n     */\n    plugins?: EditorPlugin[];\n\n    /**\n     * Default format of editor content. This will be applied to empty content.\n     * If there is already content inside editor, format of existing content will not be changed.\n     * Default value is the computed style of editor content DIV\n     */\n    defaultFormat?: DefaultFormat;\n\n    /**\n     * @deprecated Use undoMetadataSnapshotService instead\n     * Undo snapshot service. Use this parameter to customize the undo snapshot service.\n     */\n    undoSnapshotService?: UndoSnapshotsService<string>;\n\n    /**\n     * Undo snapshot service based on content metadata. Use this parameter to customize the undo snapshot service.\n     * When this property is set, value of undoSnapshotService will be ignored.\n     */\n    undoMetadataSnapshotService?: UndoSnapshotsService<Snapshot>;\n\n    /**\n     * Initial HTML content\n     * Default value is whatever already inside the editor content DIV\n     */\n    initialContent?: string;\n\n    /**\n     * A function map to override default core API implementation\n     * Default value is null\n     */\n    coreApiOverride?: Partial<CoreApiMap>;\n\n    /**\n     * A plugin map to override default core Plugin implementation\n     * Default value is null\n     */\n    corePluginOverride?: Partial<CorePlugins>;\n\n    /**\n     * If the editor is currently in dark mode\n     */\n    inDarkMode?: boolean;\n\n    /**\n     * @deprecated\n     * RoosterJS provides an experimental \"external content handler\" that transforms text\n     * This is used when content is pasted or inserted via a method we can hook into.\n     * This transform is currently \"lossy\" and will eliminate color information.\n     * If you want to change this behavior, you may define a different function here.\n     * It takes in the impacted HTMLElement\n     */\n    onExternalContentTransform?: (\n        element: HTMLElement,\n        fromDarkMode: boolean,\n        toDarkMode: boolean,\n        darkColorHandler: DarkColorHandler\n    ) => void;\n\n    /**\n     * A util function to transform light mode color to dark mode color\n     * Default value is to return the original light color\n     */\n    getDarkColor?: (lightColor: string) => string;\n\n    /**\n     * Whether to skip the adjust editor process when for light/dark mode\n     */\n    doNotAdjustEditorColor?: boolean;\n\n    /**\n     * The scroll container to get scroll event from.\n     * By default, the scroll container will be the same with editor content DIV\n     */\n    scrollContainer?: HTMLElement;\n\n    /**\n     * Specify the enabled experimental features\n     */\n    experimentalFeatures?: (ExperimentalFeatures | CompatibleExperimentalFeatures)[];\n\n    /**\n     * By default, we will stop propagation of a printable keyboard event\n     * (a keyboard event which is caused by printable char input).\n     * Set this option to true to override this behavior in case you still need the event\n     * to be handled by ancestor nodes of editor.\n     */\n    allowKeyboardEventPropagation?: boolean;\n\n    /**\n     * Allowed custom content type when paste besides text/plain, text/html and images\n     * Only text types are supported, and do not add \"text/\" prefix to the type values\n     */\n    allowedCustomPasteType?: string[];\n\n    /**\n     * Customized trusted type handler used for sanitizing HTML string before assign to DOM tree\n     * This is required when trusted-type Content-Security-Policy (CSP) is enabled.\n     * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\n     */\n    trustedHTMLHandler?: TrustedHTMLHandler;\n\n    /**\n     * Current zoom scale, @default value is 1\n     * When editor is put under a zoomed container, need to pass the zoom scale number using this property\n     * to let editor behave correctly especially for those mouse drag/drop behaviors\n     */\n    zoomScale?: number;\n\n    /**\n     * @deprecated Use zoomScale instead\n     */\n    sizeTransformer?: SizeTransformer;\n\n    /**\n     * Retrieves the visible viewport of the Editor. The default viewport is the Rect of the scrollContainer.\n     */\n    getVisibleViewport?: () => Rect | null;\n\n    /**\n     * Color of the border of a selectedImage. Default color: '#DB626C'\n     */\n    imageSelectionBorderColor?: string;\n\n    /**\n     * A callback to be invoked when any exception is thrown during disposing editor\n     * @param plugin The plugin that causes exception\n     * @param error The error object we got\n     */\n    disposeErrorHandler?: (plugin: EditorPlugin, error: Error) => void;\n}\n"]}