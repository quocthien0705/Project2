{"version":3,"file":"BlockElement.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/BlockElement.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * This refers to a \"content block\" in editor that serves as a content parsing boundary\r\n * It is most those html block like tags, i.e. &lt;p&gt;, &lt;div&gt;, &lt;li&gt;, &lt;td&gt; etc.\r\n * but can also be just a text node, followed by a &lt;br&gt;, i.e.\r\n * for html fragment &lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;, abc&lt;br&gt; is a block, 123 is another block\r\n */\r\nexport default interface BlockElement {\r\n    /**\r\n     * Collapse this block element to a single DOM element.\r\n     */\r\n    collapseToSingleElement(): HTMLElement;\r\n\r\n    /**\r\n     * Get start node of this block element\r\n     */\r\n    getStartNode(): Node;\r\n\r\n    /**\r\n     * Get end node of this block element\r\n     */\r\n    getEndNode(): Node;\r\n\r\n    /**\r\n     * Check whether this block element equals to the given block element\r\n     */\r\n    equals(blockElement: BlockElement): boolean;\r\n\r\n    /**\r\n     * Checks if this block element is after another block element\r\n     */\r\n    isAfter(blockElement: BlockElement): boolean;\r\n\r\n    /**\r\n     * Check if the given node is within this block element\r\n     */\r\n    contains(node: Node): boolean;\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    getTextContent(): string;\r\n}\r\n"]}