{"version":3,"file":"EditorCore.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/EditorCore.ts"],"names":[],"mappings":"","sourcesContent":["import type ClipboardData from './ClipboardData';\nimport type ContentChangedData from './ContentChangedData';\nimport type DarkColorHandler from './DarkColorHandler';\nimport type EditorPlugin from './EditorPlugin';\nimport type NodePosition from './NodePosition';\nimport type Rect from './Rect';\nimport type SelectionPath from './SelectionPath';\nimport type TableSelection from './TableSelection';\nimport type { ChangeSource } from '../enum/ChangeSource';\nimport type { ColorTransformDirection } from '../enum/ColorTransformDirection';\nimport type { ContentMetadata } from './ContentMetadata';\nimport type { DOMEventHandler } from '../type/domEventHandler';\nimport type { GetContentMode } from '../enum/GetContentMode';\nimport type {\n    ImageSelectionRange,\n    SelectionRangeEx,\n    TableSelectionRange,\n} from './SelectionRangeEx';\nimport type { InsertOption } from './InsertOption';\nimport type { PendableFormatState, StyleBasedFormatState } from './FormatState';\nimport type { PluginEvent } from '../event/PluginEvent';\nimport type { PluginState } from './CorePlugins';\nimport type { PositionType } from '../enum/PositionType';\nimport type { SizeTransformer } from '../type/SizeTransformer';\nimport type { TrustedHTMLHandler } from '../type/TrustedHTMLHandler';\nimport type { CompatibleChangeSource } from '../compatibleEnum/ChangeSource';\nimport type { CompatibleColorTransformDirection } from '../compatibleEnum/ColorTransformDirection';\nimport type { CompatibleGetContentMode } from '../compatibleEnum/GetContentMode';\n/**\n * Represents the core data structure of an editor\n */\nexport default interface EditorCore extends PluginState {\n    /**\n     * The content DIV element of this editor\n     */\n    readonly contentDiv: HTMLDivElement;\n\n    /**\n     * An array of editor plugins.\n     */\n    readonly plugins: EditorPlugin[];\n\n    /**\n     * Core API map of this editor\n     */\n    readonly api: CoreApiMap;\n\n    /**\n     * Original API map of this editor. Overridden core API can use API from this map to call the original version of core API.\n     */\n    readonly originalApi: CoreApiMap;\n\n    /**\n     * A handler to convert HTML string to a trust HTML string.\n     * By default it will just return the original HTML string directly.\n     * To override, pass your own trusted HTML handler to EditorOptions.trustedHTMLHandler\n     */\n    readonly trustedHTMLHandler: TrustedHTMLHandler;\n\n    /*\n     * Current zoom scale, default value is 1\n     * When editor is put under a zoomed container, need to pass the zoom scale number using this property\n     * to let editor behave correctly especially for those mouse drag/drop behaviors\n     */\n    zoomScale: number;\n\n    /**\n     * @deprecated Use zoomScale instead\n     */\n    sizeTransformer: SizeTransformer;\n\n    /**\n     * Retrieves the Visible Viewport of the editor.\n     */\n    getVisibleViewport: () => Rect | null;\n\n    /**\n     * Color of the border of a selectedImage. Default color: '#DB626C'\n     */\n    imageSelectionBorderColor?: string;\n\n    /**\n     * Dark model handler for the editor, used for variable-based solution.\n     * If keep it null, editor will still use original dataset-based dark mode solution.\n     */\n    darkColorHandler: DarkColorHandler;\n\n    /**\n     * A callback to be invoked when any exception is thrown during disposing editor\n     * @param plugin The plugin that causes exception\n     * @param error The error object we got\n     */\n    disposeErrorHandler?: (plugin: EditorPlugin, error: Error) => void;\n}\n\n/**\n * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\n * Undo snapshot will not be added if this call is nested inside another addUndoSnapshot() call.\n * @param core The EditorCore object\n * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\n * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\n * @param canUndoByBackspace True if this action can be undone when user press Backspace key (aka Auto Complete).\n * @param additionalData Optional parameter to provide additional data related to the ContentChanged Event.\n */\nexport type AddUndoSnapshot = (\n    core: EditorCore,\n    callback: ((start: NodePosition | null, end: NodePosition | null) => any) | null,\n    changeSource: ChangeSource | CompatibleChangeSource | string | null,\n    canUndoByBackspace: boolean,\n    additionalData?: ContentChangedData\n) => void;\n\n/**\n * Attach a DOM event to the editor content DIV\n * @param core The EditorCore object\n * @param eventMap A map from event name to its handler\n */\nexport type AttachDomEvent = (\n    core: EditorCore,\n    eventMap: Record<string, DOMEventHandler>\n) => () => void;\n\n/**\n * Create a DocumentFragment for paste from a ClipboardData\n * @param core The EditorCore object.\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param position The position to paste to\n * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any\n * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n * false to keep original format\n */\nexport type CreatePasteFragment = (\n    core: EditorCore,\n    clipboardData: ClipboardData,\n    position: NodePosition | null,\n    pasteAsText: boolean,\n    applyCurrentStyle: boolean,\n    pasteAsImage: boolean\n) => DocumentFragment | null;\n\n/**\n * Ensure user will type into a container element rather than into the editor content DIV directly\n * @param core The EditorCore object.\n * @param position The position that user is about to type to\n * @param keyboardEvent Optional keyboard event object\n * @param deprecated Deprecated parameter, not used\n */\nexport type EnsureTypeInContainer = (\n    core: EditorCore,\n    position: NodePosition,\n    keyboardEvent?: KeyboardEvent,\n    deprecated?: boolean\n) => void;\n\n/**\n * Focus to editor. If there is a cached selection range, use it as current selection\n * @param core The EditorCore object\n */\nexport type Focus = (core: EditorCore) => void;\n\n/**\n * Get current editor content as HTML string\n * @param core The EditorCore object\n * @param mode specify what kind of HTML content to retrieve\n * @returns HTML string representing current editor content\n */\nexport type GetContent = (\n    core: EditorCore,\n    mode: GetContentMode | CompatibleGetContentMode\n) => string;\n\n/**\n * Get current or cached selection range\n * @param core The EditorCore object\n * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\n * @returns A Range object of the selection range\n */\nexport type GetSelectionRange = (core: EditorCore, tryGetFromCache: boolean) => Range | null;\n\n/**\n * Get current selection range\n * @param core The EditorCore object\n * @returns A Range object of the selection range\n */\nexport type GetSelectionRangeEx = (core: EditorCore) => SelectionRangeEx;\n\n/**\n * Get style based format state from current selection, including font name/size and colors\n * @param core The EditorCore objects\n * @param node The node to get style from\n */\nexport type GetStyleBasedFormatState = (\n    core: EditorCore,\n    node: Node | null\n) => StyleBasedFormatState;\n\n/**\n * Get the pendable format such as underline and bold\n * @param core The EditorCore object\n * @param forceGetStateFromDOM If set to true, will force get the format state from DOM tree.\n * @return The pending format state of editor.\n */\nexport type GetPendableFormatState = (\n    core: EditorCore,\n    forceGetStateFromDOM: boolean\n) => PendableFormatState;\n\n/**\n * Check if the editor has focus now\n * @param core The EditorCore object\n * @returns True if the editor has focus, otherwise false\n */\nexport type HasFocus = (core: EditorCore) => boolean;\n\n/**\n * Insert a DOM node into editor content\n * @param core The EditorCore object. No op if null.\n * @param option An insert option object to specify how to insert the node\n */\nexport type InsertNode = (core: EditorCore, node: Node, option: InsertOption | null) => boolean;\n\n/**\n * Restore an undo snapshot into editor\n * @param core The editor core object\n * @param step Steps to move, can be 0, positive or negative\n */\nexport type RestoreUndoSnapshot = (core: EditorCore, step: number) => void;\n\n/**\n * Select content according to the given information.\n * There are a bunch of allowed combination of parameters. See IEditor.select for more details\n * @param core The editor core object\n * @param arg1 A DOM Range, or SelectionRangeEx, or NodePosition, or Node, or Selection Path\n * @param arg2 (optional) A NodePosition, or an offset number, or a PositionType, or a TableSelection, or null\n * @param arg3 (optional) A Node\n * @param arg4 (optional) An offset number, or a PositionType\n */\nexport type Select = (\n    core: EditorCore,\n    arg1: Range | SelectionRangeEx | NodePosition | Node | SelectionPath | null,\n    arg2?: NodePosition | number | PositionType | TableSelection | null,\n    arg3?: Node,\n    arg4?: number | PositionType\n) => boolean;\n\n/**\n * Change the editor selection to the given range\n * @param core The EditorCore object\n * @param range The range to select\n * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\n * in editor, otherwise it will always remove current selection range and set to the given one.\n * This parameter is always treated as true in Edge to avoid some weird runtime exception.\n */\nexport type SelectRange = (core: EditorCore, range: Range, skipSameRange?: boolean) => boolean;\n\n/**\n * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n * if triggerContentChangedEvent is set to true\n * @param core The EditorCore object\n * @param content HTML content to set in\n * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n */\nexport type SetContent = (\n    core: EditorCore,\n    content: string,\n    triggerContentChangedEvent: boolean,\n    metadata?: ContentMetadata\n) => void;\n\n/**\n * Switch the Shadow Edit mode of editor On/Off\n * @param core The EditorCore object\n * @param isOn True to switch On, False to switch Off\n */\nexport type SwitchShadowEdit = (core: EditorCore, isOn: boolean) => void;\n\n/**\n * Edit and transform color of elements between light mode and dark mode\n * @param core The EditorCore object\n * @param rootNode The root HTML node to transform\n * @param includeSelf True to transform the root node as well, otherwise false\n * @param callback The callback function to invoke before do color transformation\n * @param direction To specify the transform direction, light to dark, or dark to light\n * @param forceTransform By default this function will only work when editor core is in dark mode.\n * Pass true to this value to force do color transformation even editor core is in light mode\n * @param fromDarkModel Whether the given content is already in dark mode\n */\nexport type TransformColor = (\n    core: EditorCore,\n    rootNode: Node | null,\n    includeSelf: boolean,\n    callback: (() => void) | null,\n    direction: ColorTransformDirection | CompatibleColorTransformDirection,\n    forceTransform?: boolean,\n    fromDarkMode?: boolean\n) => void;\n\n/**\n * Trigger a plugin event\n * @param core The EditorCore object\n * @param pluginEvent The event object to trigger\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\n */\nexport type TriggerEvent = (core: EditorCore, pluginEvent: PluginEvent, broadcast: boolean) => void;\n\n/**\n * Select a table and save data of the selected range\n * @param core The EditorCore object\n * @param table table to select\n * @param coordinates first and last cell of the selection, if this parameter is null, instead of\n * selecting, will unselect the table.\n * @returns true if successful\n */\nexport type SelectTable = (\n    core: EditorCore,\n    table: HTMLTableElement | null,\n    coordinates?: TableSelection\n) => TableSelectionRange | null;\n\n/**\n * Select a table and save data of the selected range\n * @param core The EditorCore object\n * @param image image to select\n * @returns true if successful\n */\nexport type SelectImage = (\n    core: EditorCore,\n    image: HTMLImageElement | null\n) => ImageSelectionRange | null;\n\n/**\n * The interface for the map of core API.\n * Editor can call call API from this map under EditorCore object\n */\nexport interface CoreApiMap {\n    /**\n     * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\n     * Undo snapshot will not be added if this call is nested inside another addUndoSnapshot() call.\n     * @param core The EditorCore object\n     * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\n     * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\n     * @param canUndoByBackspace True if this action can be undone when user presses Backspace key (aka Auto Complete).\n     */\n    addUndoSnapshot: AddUndoSnapshot;\n\n    /**\n     * Attach a DOM event to the editor content DIV\n     * @param core The EditorCore object\n     * @param eventName The DOM event name\n     * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\n     * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\n     */\n    attachDomEvent: AttachDomEvent;\n\n    /**\n     * Create a DocumentFragment for paste from a ClipboardData\n     * @param core The EditorCore object.\n     * @param clipboardData Clipboard data retrieved from clipboard\n     * @param position The position to paste to\n     * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any\n     * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n     * false to keep original format\n     */\n    createPasteFragment: CreatePasteFragment;\n\n    /**\n     * Ensure user will type into a container element rather than into the editor content DIV directly\n     * @param core The EditorCore object.\n     * @param position The position that user is about to type to\n     * @param keyboardEvent Optional keyboard event object\n     * @param deprecated Deprecated parameter, not used\n     */\n    ensureTypeInContainer: EnsureTypeInContainer;\n\n    /**\n     * Focus to editor. If there is a cached selection range, use it as current selection\n     * @param core The EditorCore object\n     */\n    focus: Focus;\n\n    /**\n     * Get current editor content as HTML string\n     * @param core The EditorCore object\n     * @param mode specify what kind of HTML content to retrieve\n     * @returns HTML string representing current editor content\n     */\n    getContent: GetContent;\n\n    /**\n     * Get current or cached selection range\n     * @param core The EditorCore object\n     * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\n     * @returns A Range object of the selection range\n     */\n    getSelectionRange: GetSelectionRange;\n\n    /**\n     * Get current or cached selection range\n     * @param core The EditorCore object\n     * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\n     * @returns A Range object of the selection range\n     */\n    getSelectionRangeEx: GetSelectionRangeEx;\n\n    /**\n     * Get style based format state from current selection, including font name/size and colors\n     * @param core The EditorCore objects\n     * @param node The node to get style from\n     */\n    getStyleBasedFormatState: GetStyleBasedFormatState;\n\n    /**\n     * Get the pendable format such as underline and bold\n     * @param core The EditorCore object\n     *@param forceGetStateFromDOM If set to true, will force get the format state from DOM tree.\n     * @return The pending format state of editor.\n     */\n    getPendableFormatState: GetPendableFormatState;\n\n    /**\n     * Check if the editor has focus now\n     * @param core The EditorCore object\n     * @returns True if the editor has focus, otherwise false\n     */\n    hasFocus: HasFocus;\n\n    /**\n     * Insert a DOM node into editor content\n     * @param core The EditorCore object. No op if null.\n     * @param option An insert option object to specify how to insert the node\n     */\n    insertNode: InsertNode;\n\n    /**\n     * Restore an undo snapshot into editor\n     * @param core The editor core object\n     * @param step Steps to move, can be 0, positive or negative\n     */\n    restoreUndoSnapshot: RestoreUndoSnapshot;\n\n    /**\n     * Select content according to the given information.\n     * There are a bunch of allowed combination of parameters. See IEditor.select for more details\n     * @param core The editor core object\n     * @param arg1 A DOM Range, or SelectionRangeEx, or NodePosition, or Node, or Selection Path\n     * @param arg2 (optional) A NodePosition, or an offset number, or a PositionType, or a TableSelection, or null\n     * @param arg3 (optional) A Node\n     * @param arg4 (optional) An offset number, or a PositionType\n     */\n    select: Select;\n\n    /**\n     * Change the editor selection to the given range\n     * @param core The EditorCore object\n     * @param range The range to select\n     * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\n     * in editor, otherwise it will always remove current selection range and set to the given one.\n     * This parameter is always treated as true in Edge to avoid some weird runtime exception.\n     */\n    selectRange: SelectRange;\n\n    /**\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n     * if triggerContentChangedEvent is set to true\n     * @param core The EditorCore object\n     * @param content HTML content to set in\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n     */\n    setContent: SetContent;\n\n    /**\n     * Switch the Shadow Edit mode of editor On/Off\n     * @param core The EditorCore object\n     * @param isOn True to switch On, False to switch Off\n     */\n    switchShadowEdit: SwitchShadowEdit;\n\n    /**\n     * Edit and transform color of elements between light mode and dark mode\n     * @param core The EditorCore object\n     * @param rootNode The root HTML element to transform\n     * @param includeSelf True to transform the root node as well, otherwise false\n     * @param callback The callback function to invoke before do color transformation\n     * @param direction To specify the transform direction, light to dark, or dark to light\n     * @param forceTransform By default this function will only work when editor core is in dark mode.\n     * Pass true to this value to force do color transformation even editor core is in light mode\n     * @param fromDarkModel Whether the given content is already in dark mode\n     */\n    transformColor: TransformColor;\n\n    /**\n     * Trigger a plugin event\n     * @param core The EditorCore object\n     * @param pluginEvent The event object to trigger\n     * @param broadcast Set to true to skip the shouldHandleEventExclusively check\n     */\n    triggerEvent: TriggerEvent;\n\n    /**\n     * Select a table and save data of the selected range\n     * @param core The EditorCore object\n     * @param table table to select\n     * @param coordinates first and last cell of the selection, if this parameter is null, instead of\n     * selecting, will unselect the table.\n     * @param shouldAddStyles Whether need to update the style elements\n     * @returns true if successful\n     */\n    selectTable: SelectTable;\n\n    /**\n     * Select a image and save data of the selected range\n     * @param core The EditorCore object\n     * @param image image to select\n     * @param imageId the id of the image element\n     * @returns true if successful\n     */\n    selectImage: SelectImage;\n}\n"]}