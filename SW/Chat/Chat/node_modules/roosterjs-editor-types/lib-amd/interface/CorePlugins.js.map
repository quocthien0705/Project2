{"version":3,"file":"CorePlugins.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/CorePlugins.ts"],"names":[],"mappings":"","sourcesContent":["import type CopyPastePluginState from '../corePluginState/CopyPastePluginState';\nimport type DOMEventPluginState from '../corePluginState/DOMEventPluginState';\nimport type EditorPlugin from './EditorPlugin';\nimport type EditPluginState from '../corePluginState/EditPluginState';\nimport type EntityPluginState from '../corePluginState/EntityPluginState';\nimport type LifecyclePluginState from '../corePluginState/LifecyclePluginState';\nimport type PendingFormatStatePluginState from '../corePluginState/PendingFormatStatePluginState';\nimport type PluginWithState from './PluginWithState';\nimport type UndoPluginState from '../corePluginState/UndoPluginState';\n\n/**\n * An interface for editor core plugins.\n * These plugins are built-in and most of them are not able to be replaced\n */\nexport default interface CorePlugins {\n    /**\n     * Edit plugin handles ContentEditFeatures\n     */\n    readonly edit: PluginWithState<EditPluginState>;\n\n    /**\n     * Undo plugin provides the ability to undo/redo\n     */\n    readonly undo: PluginWithState<UndoPluginState>;\n\n    /**\n     * TypeInContainer plugin makes sure user is always type under a container element under editor DIV\n     */\n    readonly typeInContainer: EditorPlugin;\n\n    /**\n     * DomEvent plugin helps handle additional DOM events such as IME composition, cut, drop.\n     */\n    readonly domEvent: PluginWithState<DOMEventPluginState>;\n\n    /**\n     * PendingFormatStatePlugin handles pending format state management\n     */\n    readonly pendingFormatState: PluginWithState<PendingFormatStatePluginState>;\n\n    /**\n     * MouseUpPlugin help trigger MouseUp event even when mouse up happens outside editor\n     * as long as the mouse was pressed within Editor before\n     */\n    readonly mouseUp: EditorPlugin;\n\n    /**\n     * @deprecated after Firefox update\n     * TypeAfterLinkPlugin plugin helps workaround a Firefox bug to allow type outside a hyperlink\n     */\n    readonly typeAfterLink: EditorPlugin;\n\n    /**\n     * Copy and paste plugin for handling onCopy and onPaste event\n     */\n    readonly copyPaste: PluginWithState<CopyPastePluginState>;\n\n    /**\n     * Entity Plugin handles all operations related to an entity and generate entity specified events\n     */\n    readonly entity: PluginWithState<EntityPluginState>;\n\n    /**\n     * Image selection Plugin detects image selection and help highlight the image\n     */\n    readonly imageSelection: EditorPlugin;\n\n    /**\n     * NormalizeTable plugin makes sure each table in editor has TBODY/THEAD/TFOOT tag around TR tags\n     */\n    readonly normalizeTable: EditorPlugin;\n\n    /**\n     * Lifecycle plugin handles editor initialization and disposing\n     */\n    readonly lifecycle: PluginWithState<LifecyclePluginState>;\n}\n\n/**\n * Names of core plugins\n */\nexport type PluginKey = keyof CorePlugins;\n\n/**\n * Names of the core plugins that have plugin state\n */\nexport type KeyOfStatePlugin<Key extends PluginKey> = CorePlugins[Key] extends PluginWithState<\n    infer U\n>\n    ? Key\n    : never;\n\n/**\n * Get type of a plugin with state\n */\nexport type TypeOfStatePlugin<Key extends PluginKey> = CorePlugins[Key] extends PluginWithState<\n    infer U\n>\n    ? U\n    : never;\n\n/**\n * All names of plugins with plugin state\n */\nexport type StatePluginKeys<Key extends PluginKey> = { [P in Key]: KeyOfStatePlugin<P> }[Key];\n\n/**\n * A type map from name of plugin with state to its plugin type\n */\nexport type GenericPluginState<Key extends PluginKey> = {\n    [P in StatePluginKeys<Key>]: TypeOfStatePlugin<P>;\n};\n\n/**\n * Auto-calculated State object type for plugin with states\n */\nexport type PluginState = GenericPluginState<PluginKey>;\n"]}