{"version":3,"file":"Definition.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/type/Definition.ts"],"names":[],"mappings":"","sourcesContent":["import type { DefinitionType } from '../enum/DefinitionType';\nimport type { CompatibleDefinitionType } from '../compatibleEnum/DefinitionType';\n\n/**\n * A type template to get item type of an array\n */\nexport type ArrayItemType<T extends any[]> = T extends (infer U)[] ? U : never;\n\n/**\n * Base interface of property definition\n */\nexport interface DefinitionBase<T extends DefinitionType | CompatibleDefinitionType> {\n    /**\n     * Type of this property\n     */\n    type: T;\n\n    /**\n     * Whether this property is optional\n     */\n    isOptional?: boolean;\n\n    /**\n     * Whether this property is allowed to be null\n     */\n    allowNull?: boolean;\n}\n\n/**\n * String property definition. This definition can also be used for string based enum property\n */\nexport interface StringDefinition\n    extends DefinitionBase<DefinitionType.String | CompatibleDefinitionType.String> {\n    /**\n     * An optional value of this property. When specified, the given property must have exactly same value of this value\n     */\n    value?: string;\n}\n\n/**\n * Number property definition. This definition can also be used for number based enum property\n */\nexport interface NumberDefinition\n    extends DefinitionBase<DefinitionType.Number | CompatibleDefinitionType.Number> {\n    /**\n     * An optional value of this property. When specified, the given property must have same value of this value\n     */\n    value?: number;\n\n    /**\n     * An optional minimum value of this property. When specified, the given property must be greater or equal to this value\n     */\n    minValue?: number;\n\n    /**\n     * An optional maximum value of this property. When specified, the given property must be less or equal to this value\n     */\n    maxValue?: number;\n}\n\n/**\n * Boolean property definition\n */\nexport interface BooleanDefinition\n    extends DefinitionBase<DefinitionType.Boolean | CompatibleDefinitionType.Boolean> {\n    /**\n     * An optional value of this property. When specified, the given property must have same value of this value\n     */\n    value?: boolean;\n}\n\n/**\n * Array property definition.\n */\nexport interface ArrayDefinition<T extends any[]>\n    extends DefinitionBase<DefinitionType.Array | CompatibleDefinitionType.Array> {\n    /**\n     * Definition of each item of this array. All items of the given array must have the same type. Otherwise, use CustomizeDefinition instead.\n     */\n    itemDef: Definition<ArrayItemType<T>>;\n\n    /**\n     * An optional minimum length of this array. When specified, the given array must have at least this value of items\n     */\n    minLength?: number;\n\n    /**\n     * An optional maximum length of this array. When specified, the given array must have at most this value of items\n     */\n    maxLength?: number;\n}\n\n/**\n * Object property definition type used by Object Definition\n */\nexport type ObjectPropertyDefinition<T extends Object> = {\n    [Key in keyof T]: Definition<T[Key]>;\n};\n\n/**\n * Object property definition.\n */\nexport interface ObjectDefinition<T extends Object>\n    extends DefinitionBase<DefinitionType.Object | CompatibleDefinitionType.Object> {\n    /**\n     * A key-value map to specify the definition of each possible property of this object\n     */\n    propertyDef: ObjectPropertyDefinition<T>;\n}\n\n/**\n * Customize property definition. When all other property definition type cannot satisfy your requirement,\n * use this definition with a customized validator function to do property validation.\n */\nexport interface CustomizeDefinition\n    extends DefinitionBase<DefinitionType.Customize | CompatibleDefinitionType.Customize> {\n    /**\n     * The customized validator function to do customized validation\n     * @param input The value to validate\n     * @returns True means the given value is of the specified type, otherwise false\n     */\n    validator: (input: any) => boolean;\n}\n\n/**\n * A combination of all definition types\n */\nexport type Definition<T> =\n    | CustomizeDefinition\n    | (T extends any[]\n          ? ArrayDefinition<T>\n          : T extends Record<string, any>\n          ? ObjectDefinition<T>\n          : T extends String\n          ? StringDefinition\n          : T extends Number\n          ? NumberDefinition\n          : T extends Boolean\n          ? BooleanDefinition\n          : never);\n"]}