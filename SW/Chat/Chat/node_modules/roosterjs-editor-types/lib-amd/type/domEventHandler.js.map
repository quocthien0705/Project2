{"version":3,"file":"domEventHandler.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/type/domEventHandler.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginEventType } from '../enum/PluginEventType';\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\n\n/**\n * Handler function type of DOM event\n */\nexport type DOMEventHandlerFunction<E = Event> = (event: E) => void;\n\n/**\n * DOM event handler object with mapped plugin event type and handler function\n */\nexport interface DOMEventHandlerObject {\n    /**\n     * Type of plugin event. The DOM event will be mapped with this plugin event type\n     */\n    pluginEventType: PluginEventType | CompatiblePluginEventType | null;\n\n    /**\n     * Handler function. Besides the mapped plugin event type, this function will also be triggered\n     * when correlated DOM event is fired\n     */\n    beforeDispatch: DOMEventHandlerFunction | null;\n}\n\n/**\n * Combined event handler type with all 3 possibilities\n */\nexport type DOMEventHandler<E = Event> =\n    | PluginEventType\n    | CompatiblePluginEventType\n    | DOMEventHandlerFunction<E>\n    | DOMEventHandlerObject;\n"]}