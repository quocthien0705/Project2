{"version":3,"file":"PluginEventData.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/PluginEventData.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\r\nimport type { PluginEvent } from './PluginEvent';\r\nimport type { PluginEventType } from '../enum/PluginEventType';\r\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\r\n\r\n/**\r\n * A type to get specify plugin event type from eventType parameter.\r\n * This type is a middle result and only used by PluginEventFromType type\r\n */\r\nexport type PluginEventFromTypeGeneric<\r\n    E extends PluginEvent,\r\n    T extends PluginEventType | CompatiblePluginEventType\r\n> = E extends BasePluginEvent<T> ? E : never;\r\n\r\n/**\r\n * A type to get specify plugin event type from eventType parameter.\r\n */\r\nexport type PluginEventFromType<\r\n    T extends PluginEventType | CompatiblePluginEventType\r\n> = PluginEventFromTypeGeneric<PluginEvent, T>;\r\n\r\n/**\r\n * A type to extract data part of a plugin event type. Data part is the plugin event without eventType field.\r\n * This type is a middle result and only used by PluginEventData type\r\n */\r\nexport type PluginEventDataGeneric<\r\n    E extends PluginEvent,\r\n    T extends PluginEventType | CompatiblePluginEventType\r\n> = E extends BasePluginEvent<T> ? Pick<E, Exclude<keyof E, 'eventType'>> : never;\r\n\r\n/**\r\n * A type to extract data part of a plugin event type. Data part is the plugin event without eventType field.\r\n */\r\nexport type PluginEventData<\r\n    T extends PluginEventType | CompatiblePluginEventType\r\n> = PluginEventDataGeneric<PluginEvent, T>;\r\n"]}