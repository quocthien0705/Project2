{"version":3,"file":"PickerDataProvider.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/PickerDataProvider.ts"],"names":[],"mappings":"","sourcesContent":["import type IEditor from './IEditor';\n\n/**\n * Data provider for PickerPlugin\n */\nexport default interface PickerDataProvider {\n    // TODO: Rename to \"onInitialize\"\n    /**\n     * Function called when the plugin is initialized to register two callbacks with the\n     * data provider and to provide a reference to the Editor. The first callback, insertNodeCallback,\n     * may be called in order to \"commit\" a new element to the editor body that isn't handled\n     * automatically by the editor plugin. The second callback, setIsSuggestingCallback, sets\n     * the isSuggesting value in the plugin. The isSuggesting value determines whether the picker\n     * is shown (true) or hidden (false). In most cases, this value is managed by the plugin, but\n     * the setIsSuggestingCallback may be used for situations where the UX needs to manipulate the\n     * suggesting state on its own.\n     */\n    onInitalize: (\n        insertNodeCallback: (nodeToInsert: HTMLElement) => void,\n        setIsSuggestingCallback: (isSuggesting: boolean) => void,\n        editor?: IEditor\n    ) => void;\n\n    /**\n     * Function called when the plugin is disposed for the data provider to do any cleanup.\n     */\n    onDispose: () => void;\n\n    /**\n     * Function called when the picker changes suggesting state\n     * (isSuggesting - true: Plugin is being shown; false: Plugin is being hidden).\n     */\n    onIsSuggestingChanged: (isSuggesting: boolean) => void;\n\n    /**\n     * Function called when the query string (text after the trigger symbol) is updated.\n     */\n    queryStringUpdated: (queryString: string, isExactMatch: boolean) => void;\n\n    /**\n     * Function called when a keypress is issued that would \"select\" a currently highlighted option.\n     */\n    selectOption?: () => void;\n\n    /**\n     * Function called when a keypress is issued that would move the highlight on any picker UX.\n     */\n    shiftHighlight?: (isIncrement: boolean) => void;\n\n    /**\n     * Function that is called when a delete command is issued.\n     * Returns the intended replacement node (if partial delete) or null (if full delete)\n     */\n    onRemove: (nodeRemoved: Node, isBackwards: boolean) => Node;\n\n    /**\n     * Function that is called by the plugin to set the current cursor position as an\n     * anchor point for where to show UX.\n     */\n    setCursorPoint?: (targetPoint: { x: number; y: number }, buffer: number) => void;\n\n    /**\n     * Function that is called when the plugin detects the editor's content has changed.\n     * Provides a list of current picker placed elements in the document.\n     */\n    onContentChanged?: (elementIds: string[]) => void;\n\n    /**\n     * Function that returns the index of the option currently selected in the picker.\n     */\n    getSelectedIndex?: () => number;\n\n    /**\n     * Handler of scroll event from scroll container of editor\n     */\n    onScroll?: (scrollContainer: HTMLElement) => void;\n}\n"]}