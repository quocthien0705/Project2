{"version":3,"file":"Snapshot.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/Snapshot.ts"],"names":[],"mappings":"","sourcesContent":["import type ModeIndependentColor from './ModeIndependentColor';\nimport type { ContentMetadata } from './ContentMetadata';\n\n/**\n * State for an entity. This is used for storing entity undo snapshot\n */\nexport interface EntityState {\n    /**\n     * Type of the entity\n     */\n    type: string;\n\n    /**\n     * Id of the entity\n     */\n    id: string;\n\n    /**\n     * The state of this entity to store into undo snapshot.\n     * The state can be any string, or a serialized JSON object.\n     * We are using string here instead of a JSON object to make sure the whole state is serializable.\n     */\n    state: string;\n}\n\n/**\n * A serializable snapshot of editor content, including the html content and metadata\n */\nexport default interface Snapshot {\n    /**\n     * HTML content string\n     */\n    html: string;\n\n    /**\n     * Metadata of the editor content state\n     */\n    metadata: ContentMetadata | null;\n\n    /**\n     * Known colors for dark mode\n     */\n    knownColors: Readonly<ModeIndependentColor>[];\n\n    /**\n     * Entity states related to this undo snapshots. When undo/redo to this snapshot, each entity state will trigger\n     * an EntityOperation event with operation = EntityOperation.UpdateEntityState\n     */\n    entityStates?: EntityState[];\n}\n"]}