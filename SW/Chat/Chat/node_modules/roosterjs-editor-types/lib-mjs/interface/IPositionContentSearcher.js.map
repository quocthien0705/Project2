{"version":3,"file":"IPositionContentSearcher.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/IPositionContentSearcher.ts"],"names":[],"mappings":"","sourcesContent":["import type InlineElement from './InlineElement';\n\n/**\n * The class that helps search content around a position\n */\nexport default interface IPositionContentSearcher {\n    /**\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\n     * between position and the white space is the word before position\n     * @returns The word before position\n     */\n    getWordBefore(): string;\n\n    /**\n     * Get the inline element before position\n     * @returns The inlineElement before position\n     */\n    getInlineElementBefore(): InlineElement | null;\n\n    /**\n     * Get the inline element after position\n     * @returns The inline element after position\n     */\n    getInlineElementAfter(): InlineElement | null;\n\n    /**\n     * Get X number of chars before position\n     * The actual returned chars may be less than what is requested.\n     * @param length The length of string user want to get, the string always ends at the position,\n     * so this length determines the start position of the string\n     * @returns The actual string we get as a sub string, or the whole string before position when\n     * there is not enough chars in the string\n     */\n    getSubStringBefore(length: number): string;\n\n    /**\n     * Try to get a range matches the given text before the position\n     * @param text The text to match against\n     * @param exactMatch Whether it is an exact match\n     * @returns The range for the matched text, null if unable to find a match\n     */\n    getRangeFromText(text: string, exactMatch: boolean): Range | null;\n\n    /**\n     * Get text section before position till stop condition is met.\n     * This offers consumers to retrieve text section by section\n     * The section essentially is just an inline element which has Container element\n     * so that the consumer can remember it for anchoring popup or verification purpose\n     * when position moves out of context etc.\n     * @param stopFunc The callback stop function\n     */\n    forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any): void;\n\n    /**\n     * Get first non textual inline element before position\n     * @returns First non textual inline element before position or null if no such element exists\n     */\n    getNearestNonTextInlineElement(): InlineElement | null;\n}\n"]}