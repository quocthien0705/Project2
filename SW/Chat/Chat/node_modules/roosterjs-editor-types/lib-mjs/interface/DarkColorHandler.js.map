{"version":3,"file":"DarkColorHandler.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/DarkColorHandler.ts"],"names":[],"mappings":"","sourcesContent":["import type ModeIndependentColor from './ModeIndependentColor';\n\n/**\n * Represents a combination of color key, light color and dark color, parsed from existing color value\n */\nexport interface ColorKeyAndValue {\n    /**\n     * Key of color, if found, otherwise undefined\n     */\n    key?: string;\n\n    /**\n     * Light mode color value\n     */\n    lightModeColor: string;\n\n    /**\n     * Dark mode color value, if found, otherwise undefined\n     */\n    darkModeColor?: string;\n}\n\n/**\n * A handler object for dark color, used for variable-based dark color solution\n */\nexport default interface DarkColorHandler {\n    /**\n     * Given a light mode color value and an optional dark mode color value, register this color\n     * so that editor can handle it, then return the CSS color value for current color mode.\n     * @param lightModeColor Light mode color value\n     * @param isDarkMode Whether current color mode is dark mode\n     * @param darkModeColor Optional dark mode color value. If not passed, we will calculate one.\n     */\n    registerColor(lightModeColor: string, isDarkMode: boolean, darkModeColor?: string): string;\n\n    /**\n     * Reset known color record, clean up registered color variables.\n     */\n    reset(): void;\n\n    /**\n     * Parse an existing color value, if it is in variable-based color format, extract color key,\n     * light color and query related dark color if any\n     * @param color The color string to parse\n     * @param isInDarkMode Whether current content is in dark mode. When set to true, if the color value is not in dark var format,\n     * we will treat is as a dark mode color and try to find a matched dark mode color.\n     */\n    parseColorValue(color: string | null | undefined, isInDarkMode?: boolean): ColorKeyAndValue;\n\n    /**\n     * Get a copy of known colors\n     */\n    getKnownColorsCopy(): Readonly<ModeIndependentColor>[];\n\n    /**\n     * Find related light mode color from dark mode color.\n     * @param darkColor The existing dark color\n     */\n    findLightColorFromDarkColor(darkColor: string): string | null;\n\n    /**\n     * Transform element color, from dark to light or from light to dark\n     * @param element The element to transform color\n     * @param fromDarkMode Whether this is transforming color from dark mode\n     * @param toDarkMode Whether this is transforming color to dark mode\n     */\n    transformElementColor(element: HTMLElement, fromDarkMode: boolean, toDarkMode: boolean): void;\n}\n"]}