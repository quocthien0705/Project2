{"version":3,"file":"ContentEditFeature.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/interface/ContentEditFeature.ts"],"names":[],"mappings":"","sourcesContent":["import type IEditor from './IEditor';\nimport type { CompatiblePluginKeyboardEvent, PluginKeyboardEvent } from '../event/PluginDomEvent';\nimport type { PluginEvent } from '../event/PluginEvent';\n\n/**\n * Generic ContentEditFeature interface\n */\nexport interface GenericContentEditFeature<TEvent extends PluginEvent> {\n    /**\n     * Keys of this edit feature to handle\n     */\n    keys: number[];\n\n    /**\n     * Check if the event should be handled by this edit feature\n     * @param event The plugin event to check\n     * @param editor The editor object\n     * @param ctrlOrMeta If Ctrl key (for Windows) or Meta key (for Mac) is pressed\n     */\n    shouldHandleEvent: (event: TEvent, editor: IEditor, ctrlOrMeta: boolean) => any;\n\n    /**\n     * Handle this event\n     * @param event The event to handle\n     * @param editor The editor object\n     */\n    handleEvent: (event: TEvent, editor: IEditor) => any;\n\n    /**\n     * Whether function keys (Ctrl/Meta or Alt) is allowed for this edit feature, default value is false.\n     * When set to false, this edit feature won't be triggered if user has pressed Ctrl/Meta/Alt key\n     */\n    allowFunctionKeys?: boolean;\n}\n\n/**\n * ContentEditFeature interface that handles keyboard event\n */\nexport type ContentEditFeature = GenericContentEditFeature<\n    PluginKeyboardEvent | CompatiblePluginKeyboardEvent\n>;\n\n/**\n * RoosterJs build in content edit feature\n */\nexport interface BuildInEditFeature<TEvent extends PluginEvent>\n    extends GenericContentEditFeature<TEvent> {\n    /**\n     * Whether this edit feature is disabled by default\n     */\n    defaultDisabled?: boolean;\n}\n"]}