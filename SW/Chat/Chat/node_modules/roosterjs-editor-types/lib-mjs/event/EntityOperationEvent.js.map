{"version":3,"file":"EntityOperationEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/EntityOperationEvent.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\nimport type Entity from '../interface/Entity';\nimport type { EntityOperation } from '../enum/EntityOperation';\nimport type { PluginEventType } from '../enum/PluginEventType';\nimport type { CompatibleEntityOperation } from '../compatibleEnum/EntityOperation';\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\n\n/**\n * Data of EntityOperationEvent\n */\nexport interface EntityOperationEventData {\n    /**\n     * Operation to this entity\n     */\n    operation: EntityOperation | CompatibleEntityOperation;\n\n    /**\n     * The entity that editor is operating on\n     */\n    entity: Entity;\n\n    /**\n     * Optional raw event. Need to do null check before use its value\n     */\n    rawEvent?: Event;\n\n    /**\n     * For EntityOperation.UpdateEntityState, we use this object to pass the new entity state to plugin.\n     * For other operation types, it is not used.\n     */\n    state?: string;\n\n    /**\n     * For EntityOperation.NewEntity, plugin can set this property to true then the entity will be persisted.\n     * A persisted entity won't be touched during undo/redo, unless it does not exist after undo/redo.\n     * For other operation types, this value will be ignored.\n     */\n    shouldPersist?: boolean;\n\n    /**\n     * @deprecated\n     */\n    contentForShadowEntity?: DocumentFragment;\n}\n\n/**\n * Provide a chance for plugins to handle entity related events.\n * See enum EntityOperation for more details about each operation\n */\nexport default interface EntityOperationEvent\n    extends EntityOperationEventData,\n        BasePluginEvent<PluginEventType.EntityOperation> {}\n\n/**\n * Provide a chance for plugins to handle entity related events.\n * See enum EntityOperation for more details about each operation\n */\nexport interface CompatibleEntityOperationEvent\n    extends EntityOperationEventData,\n        BasePluginEvent<CompatiblePluginEventType.EntityOperation> {}\n"]}