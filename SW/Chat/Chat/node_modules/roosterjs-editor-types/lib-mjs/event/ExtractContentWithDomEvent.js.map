{"version":3,"file":"ExtractContentWithDomEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/ExtractContentWithDomEvent.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\nimport type { PluginEventType } from '../enum/PluginEventType';\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\n\n/**\n * Data of ExtractContentWithDomEvent\n */\nexport interface ExtractContentWithDomEventData {\n    /**\n     * Cloned root element of editor\n     * Plugin can change this DOM tree to clean up the markups it added before\n     */\n    clonedRoot: HTMLElement;\n}\n\n/**\n * Extract Content with a DOM tree event\n * This event is triggered when getContent() is called with triggerExtractContentEvent = true\n * Plugin can handle this event to remove the UI only markups to return clean HTML\n * by operating on a cloned DOM tree\n */\nexport default interface ExtractContentWithDomEvent\n    extends ExtractContentWithDomEventData,\n        BasePluginEvent<PluginEventType.ExtractContentWithDom> {}\n\n/**\n * Extract Content with a DOM tree event\n * This event is triggered when getContent() is called with triggerExtractContentEvent = true\n * Plugin can handle this event to remove the UI only markups to return clean HTML\n * by operating on a cloned DOM tree\n */\nexport interface CompatibleExtractContentWithDomEvent\n    extends ExtractContentWithDomEventData,\n        BasePluginEvent<CompatiblePluginEventType.ExtractContentWithDom> {}\n"]}