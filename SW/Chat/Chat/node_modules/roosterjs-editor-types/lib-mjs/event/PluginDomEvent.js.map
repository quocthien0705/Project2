{"version":3,"file":"PluginDomEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/PluginDomEvent.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\r\nimport type { PluginEventType } from '../enum/PluginEventType';\r\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\r\n\r\n/**\r\n * Data of PluginMouseUpEvent\r\n */\r\nexport interface PluginMouseUpEventData {\r\n    /**\r\n     * Whether this is a mouse click event (mouse up and down on the same position)\r\n     */\r\n    isClicking?: boolean;\r\n}\r\n\r\n/**\r\n * Data of PluginContextMenuEvent\r\n */\r\nexport interface PluginContextMenuEventData {\r\n    /**\r\n     * A callback array to let editor retrieve context menu item related to this event.\r\n     * Plugins can add their own getter callback to this array,\r\n     * items from each getter will be separated by a splitter item represented by null\r\n     */\r\n    items: any[];\r\n}\r\n\r\n/**\r\n * Data of PluginScrollEvent\r\n */\r\nexport interface PluginScrollEventData {\r\n    /**\r\n     * Current scroll container that triggers this scroll event\r\n     */\r\n    scrollContainer: HTMLElement;\r\n}\r\n\r\n/**\r\n * Data of PluginKeyDownEvent\r\n */\r\nexport interface PluginKeyDownEventData {\r\n    /**\r\n     * Whether this event is handled by edit feature\r\n     */\r\n    handledByEditFeature?: boolean;\r\n}\r\n\r\n/**\r\n * A base interface of all DOM events\r\n */\r\nexport interface PluginDomEventBase<\r\n    TEventType extends PluginEventType | CompatiblePluginEventType,\r\n    TRawEvent extends Event\r\n> extends BasePluginEvent<TEventType> {\r\n    rawEvent: TRawEvent;\r\n}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native CompositionEnd event\r\n */\r\nexport interface PluginCompositionEvent\r\n    extends PluginDomEventBase<PluginEventType.CompositionEnd, CompositionEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native MouseDown event\r\n */\r\nexport interface PluginMouseDownEvent\r\n    extends PluginDomEventBase<PluginEventType.MouseDown, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native MouseUp event\r\n */\r\nexport interface PluginMouseUpEvent\r\n    extends PluginMouseUpEventData,\r\n        PluginDomEventBase<PluginEventType.MouseUp, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native ContextMenu event\r\n */\r\nexport interface PluginContextMenuEvent\r\n    extends PluginContextMenuEventData,\r\n        PluginDomEventBase<PluginEventType.ContextMenu, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native Mouse event\r\n */\r\nexport type PluginMouseEvent = PluginMouseDownEvent | PluginMouseUpEvent | PluginContextMenuEvent;\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyDown event\r\n */\r\nexport interface PluginKeyDownEvent\r\n    extends PluginKeyDownEventData,\r\n        PluginDomEventBase<PluginEventType.KeyDown, KeyboardEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyPress event\r\n */\r\nexport interface PluginKeyPressEvent\r\n    extends PluginDomEventBase<PluginEventType.KeyPress, KeyboardEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyUp event\r\n */\r\nexport interface PluginKeyUpEvent\r\n    extends PluginDomEventBase<PluginEventType.KeyUp, KeyboardEvent> {}\r\n\r\n/**\r\n * The interface represents a PluginEvent wrapping native Keyboard event\r\n */\r\nexport type PluginKeyboardEvent = PluginKeyDownEvent | PluginKeyPressEvent | PluginKeyUpEvent;\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native input / textinput event\r\n */\r\nexport interface PluginInputEvent extends PluginDomEventBase<PluginEventType.Input, InputEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native scroll event\r\n */\r\nexport interface PluginScrollEvent\r\n    extends PluginScrollEventData,\r\n        PluginDomEventBase<PluginEventType.Scroll, Event> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native CompositionEnd event\r\n */\r\nexport interface CompatiblePluginCompositionEvent\r\n    extends PluginDomEventBase<CompatiblePluginEventType.CompositionEnd, CompositionEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native MouseDown event\r\n */\r\nexport interface CompatiblePluginMouseDownEvent\r\n    extends PluginDomEventBase<CompatiblePluginEventType.MouseDown, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native MouseUp event\r\n */\r\nexport interface CompatiblePluginMouseUpEvent\r\n    extends PluginMouseUpEventData,\r\n        PluginDomEventBase<CompatiblePluginEventType.MouseUp, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native ContextMenu event\r\n */\r\nexport interface CompatiblePluginContextMenuEvent\r\n    extends PluginContextMenuEventData,\r\n        PluginDomEventBase<CompatiblePluginEventType.ContextMenu, MouseEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native Mouse event\r\n */\r\nexport type CompatiblePluginMouseEvent =\r\n    | CompatiblePluginMouseDownEvent\r\n    | CompatiblePluginMouseUpEvent\r\n    | CompatiblePluginContextMenuEvent;\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyDown event\r\n */\r\nexport interface CompatiblePluginKeyDownEvent\r\n    extends PluginKeyDownEventData,\r\n        PluginDomEventBase<CompatiblePluginEventType.KeyDown, KeyboardEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyPress event\r\n */\r\nexport interface CompatiblePluginKeyPressEvent\r\n    extends PluginDomEventBase<CompatiblePluginEventType.KeyPress, KeyboardEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native KeyUp event\r\n */\r\nexport interface CompatiblePluginKeyUpEvent\r\n    extends PluginDomEventBase<CompatiblePluginEventType.KeyUp, KeyboardEvent> {}\r\n\r\n/**\r\n * The interface represents a PluginEvent wrapping native Keyboard event\r\n */\r\nexport type CompatiblePluginKeyboardEvent =\r\n    | CompatiblePluginKeyDownEvent\r\n    | CompatiblePluginKeyPressEvent\r\n    | CompatiblePluginKeyUpEvent;\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native input / textinput event\r\n */\r\nexport interface CompatiblePluginInputEvent\r\n    extends PluginDomEventBase<CompatiblePluginEventType.Input, InputEvent> {}\r\n\r\n/**\r\n * This interface represents a PluginEvent wrapping native scroll event\r\n */\r\nexport interface CompatiblePluginScrollEvent\r\n    extends PluginScrollEventData,\r\n        PluginDomEventBase<CompatiblePluginEventType.Scroll, UIEvent> {}\r\n\r\n/**\r\n * This represents a PluginEvent wrapping native browser event\r\n */\r\nexport type PluginDomEvent =\r\n    | PluginCompositionEvent\r\n    | PluginMouseEvent\r\n    | PluginKeyboardEvent\r\n    | PluginInputEvent\r\n    | PluginScrollEvent;\r\n\r\n/**\r\n * This represents a PluginEvent wrapping native browser event\r\n */\r\nexport type CompatiblePluginDomEvent =\r\n    | CompatiblePluginCompositionEvent\r\n    | CompatiblePluginMouseEvent\r\n    | CompatiblePluginKeyboardEvent\r\n    | CompatiblePluginInputEvent\r\n    | CompatiblePluginScrollEvent;\r\n"]}