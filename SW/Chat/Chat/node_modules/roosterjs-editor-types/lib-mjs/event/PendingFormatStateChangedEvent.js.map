{"version":3,"file":"PendingFormatStateChangedEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/PendingFormatStateChangedEvent.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\r\nimport type { PendableFormatState } from '../interface/FormatState';\r\nimport type { PluginEventType } from '../enum/PluginEventType';\r\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\r\n\r\n/**\r\n * An event fired when pending format state (bold, italic, underline, ... with collapsed selection) is changed\r\n */\r\nexport default interface PendingFormatStateChangedEvent\r\n    extends BasePluginEvent<PluginEventType.PendingFormatStateChanged> {\r\n    /**\r\n     * The new format state to apply. If null is passed, clear existing pending format state if any\r\n     */\r\n    formatState: PendableFormatState;\r\n\r\n    /**\r\n     * A callback to do format change to a temp element. This is used for style-based format such as font and color\r\n     */\r\n    formatCallback?: (element: HTMLElement, isInnerNode?: boolean) => any;\r\n}\r\n\r\n/**\r\n * An event fired when pending format state (bold, italic, underline, ... with collapsed selection) is changed\r\n */\r\nexport interface CompatiblePendingFormatStateChangedEvent\r\n    extends BasePluginEvent<CompatiblePluginEventType.PendingFormatStateChanged> {\r\n    /**\r\n     * The new format state to apply. If null is passed, clear existing pending format state if any\r\n     */\r\n    formatState: PendableFormatState;\r\n\r\n    /**\r\n     * A callback to do format change to a temp element. This is used for style-based format such as font and color\r\n     */\r\n    formatCallback?: (element: HTMLElement, isInnerNode?: boolean) => any;\r\n}\r\n"]}