{"version":3,"file":"EditImageEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-types/lib/event/EditImageEvent.ts"],"names":[],"mappings":"","sourcesContent":["import type BasePluginEvent from './BasePluginEvent';\nimport type { PluginEventType } from '../enum/PluginEventType';\nimport type { CompatiblePluginEventType } from '../compatibleEnum/PluginEventType';\n\n/**\n * Data of EditImageEvent\n */\nexport interface EditImageEventData {\n    /**\n     * The image element that is being changed\n     */\n    readonly image: HTMLImageElement;\n\n    /**\n     * Original src of the image before all editing in current editor session.\n     */\n    readonly originalSrc: string;\n\n    /**\n     * Src of the image before current batch of editing\n     * Plugin can check this value to know which image is not used after the change.\n     */\n    readonly previousSrc: string;\n\n    /**\n     * New src of the changed image, in DataUri format.\n     * Plugin can modify this string so that the modified one will be set to the image element\n     */\n    newSrc: string;\n}\n\n/**\n * Represents an event that will be fired when an inline image is edited by user, and the src\n * attribute of the image is about to be changed\n */\nexport default interface EditImageEvent\n    extends EditImageEventData,\n        BasePluginEvent<PluginEventType.EditImage> {}\n\n/**\n * Represents an event that will be fired when an inline image is edited by user, and the src\n * attribute of the image is about to be changed\n */\nexport interface CompatibleEditImageEvent\n    extends EditImageEventData,\n        BasePluginEvent<CompatiblePluginEventType.EditImage> {}\n"]}