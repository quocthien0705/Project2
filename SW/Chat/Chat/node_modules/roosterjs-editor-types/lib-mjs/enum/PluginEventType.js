/**
 * Editor plugin event type
 */
// eslint-disable-next-line etc/no-const-enum
export var PluginEventType;
(function (PluginEventType) {
    /**
     * HTML KeyDown event
     */
    PluginEventType[PluginEventType["KeyDown"] = 0] = "KeyDown";
    /**
     * HTML KeyPress event
     */
    PluginEventType[PluginEventType["KeyPress"] = 1] = "KeyPress";
    /**
     * HTML KeyUp event
     */
    PluginEventType[PluginEventType["KeyUp"] = 2] = "KeyUp";
    /**
     * HTML Input / TextInput event
     */
    PluginEventType[PluginEventType["Input"] = 3] = "Input";
    /**
     * HTML CompositionEnd event
     */
    PluginEventType[PluginEventType["CompositionEnd"] = 4] = "CompositionEnd";
    /**
     * HTML MouseDown event
     */
    PluginEventType[PluginEventType["MouseDown"] = 5] = "MouseDown";
    /**
     * HTML MouseUp event
     */
    PluginEventType[PluginEventType["MouseUp"] = 6] = "MouseUp";
    /**
     * Content changed event
     */
    PluginEventType[PluginEventType["ContentChanged"] = 7] = "ContentChanged";
    /**
     * Extract Content with a DOM tree event
     * This event is triggered when getContent() is called with triggerExtractContentEvent = true
     * Plugin can handle this event to remove the UI only markups to return clean HTML
     * by operating on a cloned DOM tree
     */
    PluginEventType[PluginEventType["ExtractContentWithDom"] = 8] = "ExtractContentWithDom";
    /**
     * Before Paste event, provide a chance to change copied content
     */
    PluginEventType[PluginEventType["BeforeCutCopy"] = 9] = "BeforeCutCopy";
    /**
     * Before Paste event, provide a chance to change paste content
     */
    PluginEventType[PluginEventType["BeforePaste"] = 10] = "BeforePaste";
    /**
     * Let plugin know editor is ready now
     */
    PluginEventType[PluginEventType["EditorReady"] = 11] = "EditorReady";
    /**
     * Let plugin know editor is about to dispose
     */
    PluginEventType[PluginEventType["BeforeDispose"] = 12] = "BeforeDispose";
    /**
     * Pending format state (bold, italic, underline, ... with collapsed selection) is changed
     */
    PluginEventType[PluginEventType["PendingFormatStateChanged"] = 13] = "PendingFormatStateChanged";
    /**
     * Scroll event triggered by scroll container
     */
    PluginEventType[PluginEventType["Scroll"] = 14] = "Scroll";
    /**
     * Operating on an entity. See enum EntityOperation for more details about each operation
     */
    PluginEventType[PluginEventType["EntityOperation"] = 15] = "EntityOperation";
    /**
     * HTML ContextMenu event
     */
    PluginEventType[PluginEventType["ContextMenu"] = 16] = "ContextMenu";
    /**
     * Editor has entered shadow edit mode
     */
    PluginEventType[PluginEventType["EnteredShadowEdit"] = 17] = "EnteredShadowEdit";
    /**
     * Editor is about to leave shadow edit mode
     */
    PluginEventType[PluginEventType["LeavingShadowEdit"] = 18] = "LeavingShadowEdit";
    /**
     * Content of image is being changed from client side
     */
    PluginEventType[PluginEventType["EditImage"] = 19] = "EditImage";
    /**
     * Content of editor is about to be cleared by SetContent API, handle this event to cache anything you need
     * before it is gone
     */
    PluginEventType[PluginEventType["BeforeSetContent"] = 20] = "BeforeSetContent";
    /**
     * Zoom scale value is changed, triggered by Editor.setZoomScale() when set a different scale number
     */
    PluginEventType[PluginEventType["ZoomChanged"] = 21] = "ZoomChanged";
    /**
     * EXPERIMENTAL FEATURE
     * Editor changed the selection.
     */
    PluginEventType[PluginEventType["SelectionChanged"] = 22] = "SelectionChanged";
    /**
     * EXPERIMENTAL FEATURE
     * Editor content is about to be changed by keyboard event.
     * This is only used by Content Model editing
     */
    PluginEventType[PluginEventType["BeforeKeyboardEditing"] = 23] = "BeforeKeyboardEditing";
})(PluginEventType || (PluginEventType = {}));
//# sourceMappingURL=PluginEventType.js.map