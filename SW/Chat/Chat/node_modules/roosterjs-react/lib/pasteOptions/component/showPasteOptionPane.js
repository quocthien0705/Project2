"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var buttons_1 = require("../utils/buttons");
var Callout_1 = require("@fluentui/react/lib/Callout");
var index_1 = require("../../common/index");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
var Icon_1 = require("@fluentui/react/lib/Icon");
var Button_1 = require("@fluentui/react/lib/Button");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var Styling_1 = require("@fluentui/react/lib/Styling");
var renderReactComponent_1 = require("../../common/utils/renderReactComponent");
var Theme_1 = require("@fluentui/react/lib/Theme");
var getPasteOptionClassNames = (0, Utilities_1.memoizeFunction)(function (theme) {
    var palette = theme.palette;
    return (0, Styling_1.mergeStyleSets)({
        pastePane: {
            paddingLeft: '4px',
            minWidth: '72px',
        },
        optionPane: {
            textAlign: 'center',
            padding: '4px',
        },
        icon: {
            fontSize: '14px',
        },
        buttonsContainer: {
            justifyContent: 'center',
            display: 'flex',
        },
        button: {
            width: '32px',
            height: '32px',
            margin: '0 4px 4px 0',
            borderRadius: '2px',
            flex: '0 0 auto',
            '&:hover': {
                backgroundColor: palette.themeLighter,
            },
        },
        isChecked: {
            backgroundColor: palette.themeLight,
            '&:hover': {
                backgroundColor: palette.themeLighter,
            },
        },
    });
});
function PasteOptionButton(props) {
    var buttonName = props.buttonName, paste = props.paste, strings = props.strings, className = props.className;
    var button = buttons_1.Buttons[buttonName];
    var onClick = React.useCallback(function () {
        paste(buttonName);
    }, [paste, buttonName]);
    return (React.createElement(Button_1.IconButton, { className: className, onClick: onClick, title: (0, index_1.getLocalizedString)(strings, buttonName, button.unlocalizedText) +
            (button.shortcut ? " (" + button.shortcut + ")" : ''), iconProps: { iconName: button.icon } }));
}
var PasteOptionComponent = React.forwardRef(function PasteOptionFunc(props, ref) {
    var strings = props.strings, position = props.position, paste = props.paste, dismiss = props.dismiss, isRtl = props.isRtl;
    var theme = (0, Theme_1.useTheme)();
    var classNames = getPasteOptionClassNames(theme);
    var _a = (0, tslib_1.__read)(React.useState(null), 2), selectedKey = _a[0], setSelectedKey = _a[1];
    var rect = position && (0, roosterjs_editor_dom_1.getPositionRect)(position);
    var target = rect && { x: props.isRtl ? rect.left : rect.right, y: rect.bottom };
    React.useImperativeHandle(ref, function () { return ({
        dismiss: dismiss,
        setSelectedKey: setSelectedKey,
        getSelectedKey: function () { return selectedKey; },
    }); }, [dismiss, paste, isRtl, selectedKey, setSelectedKey]);
    var buttonPane = React.useRef(null);
    var onDismiss = React.useCallback(function (evt) {
        var target = evt instanceof FocusEvent && evt.relatedTarget instanceof Node
            ? evt.relatedTarget
            : null;
        var clickOnButtonPane = target &&
            buttonPane.current &&
            (buttonPane.current == target || buttonPane.current.contains(target));
        if (!clickOnButtonPane) {
            dismiss();
        }
    }, [dismiss]);
    var onClickShowSubMenu = React.useCallback(function (event) {
        setSelectedKey(buttons_1.ButtonKeys[0]);
        event.preventDefault();
        event.stopPropagation();
    }, [setSelectedKey]);
    return (React.createElement(Callout_1.Callout, { gapSpace: 10, isBeakVisible: false, target: target, directionalHint: isRtl ? Callout_1.DirectionalHint.bottomRightEdge : Callout_1.DirectionalHint.bottomLeftEdge, directionalHintForRTL: Callout_1.DirectionalHint.bottomRightEdge, preventDismissOnScroll: true, onDismiss: onDismiss },
        React.createElement("div", { ref: buttonPane, className: classNames.pastePane },
            React.createElement("div", { onClick: onClickShowSubMenu, className: classNames.optionPane },
                React.createElement(Icon_1.Icon, { iconName: 'Paste', className: classNames.icon }),
                (0, index_1.getLocalizedString)(strings, 'pasteOptionPaneText', '(Ctrl)')),
            selectedKey && (React.createElement("div", { className: classNames.buttonsContainer }, (0, roosterjs_editor_dom_1.getObjectKeys)(buttons_1.Buttons).map(function (key) { return (React.createElement(PasteOptionButton, { key: key, strings: strings, paste: paste, buttonName: key, className: classNames.button +
                    ' ' +
                    (selectedKey == key ? classNames.isChecked : '') })); }))))));
});
/**
 * @internal Show paste open pane component
 * @param uiUtilities The UI utilities object to help render component
 * @param position Target position
 * @param strings Localize string for this component
 * @param onPaste A callback to be called when user click on a paste button
 * @param ref Reference object for this component
 */
function showPasteOptionPane(uiUtilities, position, onPaste, ref, strings) {
    var disposer = null;
    var onDismiss = function () {
        disposer === null || disposer === void 0 ? void 0 : disposer();
        disposer = null;
    };
    disposer = (0, renderReactComponent_1.renderReactComponent)(uiUtilities, React.createElement(PasteOptionComponent, { ref: ref, position: position, strings: strings, isRtl: uiUtilities.isRightToLeft(), dismiss: onDismiss, paste: onPaste }));
}
exports.default = showPasteOptionPane;
//# sourceMappingURL=showPasteOptionPane.js.map