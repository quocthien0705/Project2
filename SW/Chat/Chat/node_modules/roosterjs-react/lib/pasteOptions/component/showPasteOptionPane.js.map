{"version":3,"file":"showPasteOptionPane.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/pasteOptions/component/showPasteOptionPane.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ButtonKeys, Buttons } from '../utils/buttons';\nimport { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';\nimport { getLocalizedString } from '../../common/index';\nimport { getObjectKeys, getPositionRect } from 'roosterjs-editor-dom';\nimport { Icon } from '@fluentui/react/lib/Icon';\nimport { IconButton } from '@fluentui/react/lib/Button';\nimport { memoizeFunction } from '@fluentui/react/lib/Utilities';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { renderReactComponent } from '../../common/utils/renderReactComponent';\nimport { useTheme } from '@fluentui/react/lib/Theme';\nimport type { LocalizedStrings, UIUtilities } from '../../common/index';\nimport type { Theme } from '@fluentui/react/lib/Theme';\nimport type { PasteOptionButtonKeys, PasteOptionStringKeys } from '../type/PasteOptionStringKeys';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\nconst getPasteOptionClassNames = memoizeFunction((theme: Theme) => {\n    const palette = theme.palette;\n\n    return mergeStyleSets({\n        pastePane: {\n            paddingLeft: '4px',\n            minWidth: '72px',\n        },\n        optionPane: {\n            textAlign: 'center',\n            padding: '4px',\n        },\n        icon: {\n            fontSize: '14px',\n        },\n        buttonsContainer: {\n            justifyContent: 'center',\n            display: 'flex',\n        },\n        button: {\n            width: '32px',\n            height: '32px',\n            margin: '0 4px 4px 0',\n            borderRadius: '2px',\n            flex: '0 0 auto',\n            '&:hover': {\n                backgroundColor: palette.themeLighter,\n            },\n        },\n        isChecked: {\n            backgroundColor: palette.themeLight,\n            '&:hover': {\n                backgroundColor: palette.themeLighter,\n            },\n        },\n    });\n});\n\ninterface PasteOptionButtonProps {\n    buttonName: PasteOptionButtonKeys;\n    className: string;\n    paste: (key: PasteOptionButtonKeys) => void;\n    strings?: LocalizedStrings<PasteOptionStringKeys>;\n}\n\nfunction PasteOptionButton(props: PasteOptionButtonProps) {\n    const { buttonName, paste, strings, className } = props;\n    const button = Buttons[buttonName];\n    const onClick = React.useCallback(() => {\n        paste(buttonName);\n    }, [paste, buttonName]);\n\n    return (\n        <IconButton\n            className={className}\n            onClick={onClick}\n            title={\n                getLocalizedString(strings, buttonName, button.unlocalizedText) +\n                (button.shortcut ? ` (${button.shortcut})` : '')\n            }\n            iconProps={{ iconName: button.icon }}\n        />\n    );\n}\n\ninterface PasteOptionProps {\n    strings?: LocalizedStrings<PasteOptionStringKeys>;\n    position: NodePosition;\n    isRtl: boolean;\n    paste: (key: PasteOptionButtonKeys) => void;\n    dismiss: () => void;\n}\n\n/**\n * @internal\n */\nexport interface PasteOptionPane {\n    getSelectedKey: () => PasteOptionButtonKeys | null;\n    setSelectedKey: (index: PasteOptionButtonKeys) => void;\n    dismiss: () => void;\n}\n\nconst PasteOptionComponent = React.forwardRef(function PasteOptionFunc(\n    props: PasteOptionProps,\n    ref: React.Ref<PasteOptionPane>\n) {\n    const { strings, position, paste, dismiss, isRtl } = props;\n    const theme = useTheme();\n    const classNames = getPasteOptionClassNames(theme);\n    const [selectedKey, setSelectedKey] = React.useState<PasteOptionButtonKeys | null>(null);\n\n    const rect = position && getPositionRect(position);\n    const target = rect && { x: props.isRtl ? rect.left : rect.right, y: rect.bottom };\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            dismiss,\n            setSelectedKey,\n            getSelectedKey: () => selectedKey,\n        }),\n        [dismiss, paste, isRtl, selectedKey, setSelectedKey]\n    );\n\n    const buttonPane = React.useRef<HTMLDivElement>(null);\n    const onDismiss = React.useCallback(\n        (evt?: Event | React.MouseEvent | React.KeyboardEvent) => {\n            const target =\n                evt instanceof FocusEvent && evt.relatedTarget instanceof Node\n                    ? evt.relatedTarget\n                    : null;\n            const clickOnButtonPane =\n                target &&\n                buttonPane.current &&\n                (buttonPane.current == target || buttonPane.current.contains(target));\n            if (!clickOnButtonPane) {\n                dismiss();\n            }\n        },\n        [dismiss]\n    );\n\n    const onClickShowSubMenu = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            setSelectedKey(ButtonKeys[0]);\n            event.preventDefault();\n            event.stopPropagation();\n        },\n        [setSelectedKey]\n    );\n\n    return (\n        <Callout\n            gapSpace={10}\n            isBeakVisible={false}\n            target={target}\n            directionalHint={\n                isRtl ? DirectionalHint.bottomRightEdge : DirectionalHint.bottomLeftEdge\n            }\n            directionalHintForRTL={DirectionalHint.bottomRightEdge}\n            preventDismissOnScroll={true}\n            onDismiss={onDismiss}>\n            <div ref={buttonPane} className={classNames.pastePane}>\n                <div onClick={onClickShowSubMenu} className={classNames.optionPane}>\n                    <Icon iconName={'Paste'} className={classNames.icon} />\n                    {getLocalizedString(strings, 'pasteOptionPaneText', '(Ctrl)')}\n                </div>\n                {selectedKey && (\n                    <div className={classNames.buttonsContainer}>\n                        {getObjectKeys(Buttons).map(key => (\n                            <PasteOptionButton\n                                key={key}\n                                strings={strings}\n                                paste={paste}\n                                buttonName={key}\n                                className={\n                                    classNames.button +\n                                    ' ' +\n                                    (selectedKey == key ? classNames.isChecked : '')\n                                }\n                            />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </Callout>\n    );\n});\n\n/**\n * @internal Show paste open pane component\n * @param uiUtilities The UI utilities object to help render component\n * @param position Target position\n * @param strings Localize string for this component\n * @param onPaste A callback to be called when user click on a paste button\n * @param ref Reference object for this component\n */\nexport default function showPasteOptionPane(\n    uiUtilities: UIUtilities,\n    position: NodePosition,\n    onPaste: (key: PasteOptionButtonKeys) => void,\n    ref: React.RefObject<PasteOptionPane>,\n    strings?: LocalizedStrings<PasteOptionStringKeys>\n) {\n    let disposer: (() => void) | null = null;\n    const onDismiss = () => {\n        disposer?.();\n        disposer = null;\n    };\n\n    disposer = renderReactComponent(\n        uiUtilities,\n        <PasteOptionComponent\n            ref={ref}\n            position={position}\n            strings={strings}\n            isRtl={uiUtilities.isRightToLeft()}\n            dismiss={onDismiss}\n            paste={onPaste}\n        />\n    );\n}\n"]}