{"version":3,"file":"createContextMenuProvider.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/contextMenu/utils/createContextMenuProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import getLocalizedString from '../../common/utils/getLocalizedString';\nimport { getObjectKeys } from 'roosterjs-editor-dom';\nimport type ContextMenuItem from '../types/ContextMenuItem';\nimport type { ContextMenuProvider, EditorPlugin, IEditor } from 'roosterjs-editor-types';\nimport type { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport type { LocalizedStrings, ReactEditorPlugin, UIUtilities } from '../../common/index';\n\n/**\n * A plugin of editor to provide context menu items\n */\nclass ContextMenuProviderImpl<TString extends string, TContext>\n    implements ContextMenuProvider<IContextualMenuItem>, ReactEditorPlugin {\n    private editor: IEditor | null = null;\n    private targetNode: Node | null = null;\n    private uiUtilities: UIUtilities | null = null;\n\n    /**\n     * Create a new instance of ContextMenuProviderImpl class\n     * @param menuName Name of this group of menus\n     * @param items Menu items that will be show\n     * @param strings Localized strings of these menu items\n     * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items\n     */\n    constructor(\n        private menuName: string,\n        private items: ContextMenuItem<TString, TContext>[],\n        private strings?: LocalizedStrings<TString>,\n        private shouldAddMenuItems?: (editor: IEditor, node: Node) => boolean,\n        private context?: TContext\n    ) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return this.menuName;\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    getContextMenuItems(node: Node) {\n        this.targetNode = node;\n\n        return this.editor && this.shouldAddMenuItems?.(this.editor, node)\n            ? this.items\n                  .filter(\n                      item => !item.shouldShow || item.shouldShow(this.editor!, node, this.context)\n                  )\n                  .map(item => this.convertMenuItems(item, node))\n            : [];\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    private convertMenuItems(\n        item: ContextMenuItem<TString, TContext>,\n        node: Node\n    ): IContextualMenuItem {\n        const selectedId = item.getSelectedId?.(this.editor!, node);\n        return {\n            key: item.key,\n            data: item,\n            text: getLocalizedString(this.strings, item.key, item.unlocalizedText),\n            ariaLabel: getLocalizedString(this.strings, item.key, item.unlocalizedText),\n            onClick: () => this.onClick(item, item.key),\n            iconProps: item.iconProps,\n            subMenuProps: item.subItems\n                ? {\n                      onItemClick: (_, menuItem) => menuItem && this.onClick(item, menuItem.data),\n                      items: getObjectKeys(item.subItems).map(key => ({\n                          key: key,\n                          data: key,\n                          text: getLocalizedString(this.strings, key, item.subItems?.[key]),\n                          className: item.itemClassName,\n                          onRender: item.itemRender\n                              ? subItem => item.itemRender?.(subItem, () => this.onClick(item, key))\n                              : undefined,\n                          iconProps:\n                              key == selectedId\n                                  ? {\n                                        iconName: 'Checkmark',\n                                    }\n                                  : undefined,\n                      })),\n                      ...(item.commandBarSubMenuProperties || {}),\n                  }\n                : undefined,\n        };\n    }\n\n    private onClick(item: ContextMenuItem<TString, TContext>, key: TString) {\n        if (this.editor && this.targetNode && this.uiUtilities) {\n            item.onClick(\n                key,\n                this.editor,\n                this.targetNode,\n                this.strings,\n                this.uiUtilities,\n                this.context\n            );\n        }\n    }\n}\n\n/**\n * Create a new instance of ContextMenuProviderImpl class\n * @param menuName Name of this group of menus\n * @param items Menu items that will be show\n * @param strings Localized strings of these menu items\n * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items\n */\nexport default function createContextMenuProvider<TString extends string, TContext>(\n    menuName: string,\n    items: ContextMenuItem<TString, TContext>[],\n    strings?: LocalizedStrings<TString>,\n    shouldAddMenuItems?: (editor: IEditor, node: Node) => boolean,\n    context?: TContext\n): EditorPlugin {\n    return new ContextMenuProviderImpl<TString, TContext>(\n        menuName,\n        items,\n        strings,\n        shouldAddMenuItems,\n        context\n    );\n}\n"]}