"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createContextMenuProvider_1 = require("../utils/createContextMenuProvider");
var showInputDialog_1 = require("../../inputDialog/utils/showInputDialog");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
var roosterjs_editor_api_1 = require("roosterjs-editor-api");
var ListNumberResetMenuItem = {
    key: 'menuNameListNumberReset',
    unlocalizedText: 'Restart at 1',
    onClick: function (_, editor, node) {
        var li = editor.getElementAtCursor('LI', node);
        (0, roosterjs_editor_api_1.setOrderedListNumbering)(editor, li, 1);
    },
};
var ListNumberEditMenuItem = {
    key: 'menuNameListNumberEdit',
    unlocalizedText: 'Set numbering value',
    onClick: function (_, editor, node, strings, uiUtilities) {
        var listAndLi = getEditingList(editor, node);
        if (listAndLi) {
            var list = listAndLi.list, li_1 = listAndLi.li;
            var startNumber_1 = list.start;
            for (var child = list.firstChild; child; child = child.nextSibling) {
                if (child === li_1) {
                    break;
                }
                else if ((0, roosterjs_editor_dom_1.safeInstanceOf)(child, 'HTMLLIElement')) {
                    startNumber_1 += 1;
                }
            }
            (0, showInputDialog_1.default)(uiUtilities, 'menuNameListNumberEdit', 'Set numbering value', {
                value: {
                    labelKey: 'dialogTextSetListNumber',
                    unlocalizedLabel: 'Set value to',
                    initValue: startNumber_1.toString(),
                },
            }, strings).then(function (values) {
                editor.focus();
                if (values) {
                    var result = parseInt(values.value);
                    if (result > 0 && result != startNumber_1) {
                        (0, roosterjs_editor_api_1.setOrderedListNumbering)(editor, li_1, Math.floor(result));
                    }
                }
            });
        }
    },
};
function getEditingList(editor, node) {
    var li = editor.getElementAtCursor('LI', node);
    var list = li && editor.getElementAtCursor('ol', li);
    return (list === null || list === void 0 ? void 0 : list.isContentEditable) ? { list: list, li: li } : null;
}
/**
 * Create a new instance of ContextMenuProvider to support list number editing functionalities in context menu
 * @returns A new ContextMenuProvider
 */
function createListEditMenuProvider(strings) {
    return (0, createContextMenuProvider_1.default)('listEdit', [ListNumberResetMenuItem, ListNumberEditMenuItem], strings, function (editor, node) { return !!getEditingList(editor, node); });
}
exports.default = createListEditMenuProvider;
//# sourceMappingURL=createListEditMenuProvider.js.map