"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Callout_1 = require("@fluentui/react/lib/Callout");
var renderReactComponent_1 = require("../../common/utils/renderReactComponent");
var EmojiPane_1 = require("./EmojiPane");
var EmojiICallout = React.forwardRef(function EmojiCalloutFunc(props, ref) {
    var cursorRect = props.cursorRect, strings = props.strings, onSelectFromPane = props.onSelectFromPane, onHideCallout = props.onHideCallout, searchBoxString = props.searchBoxString, dismiss = props.dismiss, paneRef = props.paneRef, baseId = props.baseId;
    var _a = (0, tslib_1.__read)(React.useState(true), 2), isCalloutVisible = _a[0], toggleIsCalloutVisible = _a[1];
    React.useImperativeHandle(ref, function () { return ({
        dismiss: dismiss,
    }); }, [dismiss]);
    var point = {
        x: cursorRect.left,
        y: (cursorRect.top + cursorRect.bottom) / 2,
    };
    var gap = (cursorRect.bottom - cursorRect.top) / 2 + 5;
    if (!isCalloutVisible) {
        onHideCallout();
    }
    var toogleCallout = React.useCallback(function () {
        toggleIsCalloutVisible(false);
        dismiss();
    }, [dismiss]);
    return (React.createElement(React.Fragment, null, isCalloutVisible && (React.createElement(Callout_1.Callout, { target: point, directionalHint: Callout_1.DirectionalHint.bottomAutoEdge, isBeakVisible: false, gapSpace: gap, onDismiss: toogleCallout }, (0, EmojiPane_1.showEmojiPane)(onSelectFromPane, strings, paneRef, baseId, searchBoxString)))));
});
/**
 * @internal
 * Enable emoji callout
 */
function showEmojiCallout(uiUtilities, cursorRect, strings, onSelectFromPane, paneRef, emojiCalloutRef, onHideCallout, baseId, searchBoxString) {
    var disposer = null;
    var onDismiss = function () {
        disposer === null || disposer === void 0 ? void 0 : disposer();
        disposer = null;
    };
    disposer = (0, renderReactComponent_1.renderReactComponent)(uiUtilities, React.createElement(EmojiICallout, { ref: emojiCalloutRef, cursorRect: cursorRect, strings: strings, onSelectFromPane: onSelectFromPane, paneRef: paneRef, onHideCallout: onHideCallout, searchBoxString: searchBoxString, baseId: baseId, dismiss: onDismiss }));
}
exports.default = showEmojiCallout;
//# sourceMappingURL=showEmojiCallout.js.map