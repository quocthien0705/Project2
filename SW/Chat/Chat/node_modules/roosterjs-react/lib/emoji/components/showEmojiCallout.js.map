{"version":3,"file":"showEmojiCallout.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/emoji/components/showEmojiCallout.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,uDAAuE;AACvE,gFAA+E;AAC/E,yCAA4C;AAqB5C,IAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,gBAAgB,CAC5D,KAAyB,EACzB,GAA6B;IAGzB,IAAA,UAAU,GAQV,KAAK,WARK,EACV,OAAO,GAOP,KAAK,QAPE,EACP,gBAAgB,GAMhB,KAAK,iBANW,EAChB,aAAa,GAKb,KAAK,cALQ,EACb,eAAe,GAIf,KAAK,gBAJU,EACf,OAAO,GAGP,KAAK,QAHE,EACP,OAAO,GAEP,KAAK,QAFE,EACP,MAAM,GACN,KAAK,OADC,CACA;IACJ,IAAA,KAAA,oBAA6C,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAA,EAAhE,gBAAgB,QAAA,EAAE,sBAAsB,QAAwB,CAAC;IAExE,KAAK,CAAC,mBAAmB,CACrB,GAAG,EACH,cAAM,OAAA,CAAC;QACH,OAAO,SAAA;KACV,CAAC,EAFI,CAEJ,EACF,CAAC,OAAO,CAAC,CACZ,CAAC;IAEF,IAAM,KAAK,GAAG;QACV,CAAC,EAAE,UAAU,CAAC,IAAI;QAClB,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC;KAC9C,CAAC;IACF,IAAM,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzD,IAAI,CAAC,gBAAgB,EAAE;QACnB,aAAa,EAAE,CAAC;KACnB;IACD,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC;QACpC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,EAAE,CAAC;IACd,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,OAAO,CACH,0CACK,gBAAgB,IAAI,CACjB,oBAAC,iBAAO,IACJ,MAAM,EAAE,KAAK,EACb,eAAe,EAAE,yBAAe,CAAC,cAAc,EAC/C,aAAa,EAAE,KAAK,EACpB,QAAQ,EAAE,GAAG,EACb,SAAS,EAAE,aAAa,IACvB,IAAA,yBAAa,EAAC,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,eAAe,CAAC,CACrE,CACb,CACF,CACN,CAAC;AACN,CAAC,CAAC,CAAC;AASH;;;GAGG;AACH,SAAwB,gBAAgB,CACpC,WAAwB,EACxB,UAAmB,EACnB,OAA+B,EAC/B,gBAAkE,EAClE,OAAmC,EACnC,eAA+C,EAC/C,aAAyB,EACzB,MAAc,EACd,eAAmD;IAEnD,IAAI,QAAQ,GAAwB,IAAI,CAAC;IACzC,IAAM,SAAS,GAAG;QACd,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC;QACb,QAAQ,GAAG,IAAI,CAAC;IACpB,CAAC,CAAC;IAEF,QAAQ,GAAG,IAAA,2CAAoB,EAC3B,WAAW,EACX,oBAAC,aAAa,IACV,GAAG,EAAE,eAAe,EACpB,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,gBAAgB,EAAE,gBAAgB,EAClC,OAAO,EAAE,OAAO,EAChB,aAAa,EAAE,aAAa,EAC5B,eAAe,EAAE,eAAe,EAChC,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,SAAS,GACpB,CACL,CAAC;AACN,CAAC;AA/BD,mCA+BC","sourcesContent":["import * as React from 'react';\nimport { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';\nimport { renderReactComponent } from '../../common/utils/renderReactComponent';\nimport { showEmojiPane } from './EmojiPane';\nimport type { Emoji } from '../type/Emoji';\nimport type { EmojiPane } from './EmojiPane';\nimport type { EmojiStringKeys } from '../type/EmojiStringKeys';\nimport type { LocalizedStrings, UIUtilities } from '../../common/index';\n\n/**\n * @internal\n * Emoji callout data\n */\ninterface EmojiICallOutProps {\n    cursorRect: DOMRect;\n    strings: Record<string, string>;\n    onSelectFromPane: (emoji: Emoji, wordBeforeCursor: string) => void;\n    paneRef: React.RefObject<EmojiPane>;\n    onHideCallout: () => void;\n    searchBoxString?: LocalizedStrings<EmojiStringKeys>;\n    dismiss: () => void;\n    baseId: number;\n}\n\nconst EmojiICallout = React.forwardRef(function EmojiCalloutFunc(\n    props: EmojiICallOutProps,\n    ref: React.Ref<EmojiICallout>\n) {\n    const {\n        cursorRect,\n        strings,\n        onSelectFromPane,\n        onHideCallout,\n        searchBoxString,\n        dismiss,\n        paneRef,\n        baseId,\n    } = props;\n    const [isCalloutVisible, toggleIsCalloutVisible] = React.useState(true);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            dismiss,\n        }),\n        [dismiss]\n    );\n\n    const point = {\n        x: cursorRect.left,\n        y: (cursorRect.top + cursorRect.bottom) / 2,\n    };\n    const gap = (cursorRect.bottom - cursorRect.top) / 2 + 5;\n    if (!isCalloutVisible) {\n        onHideCallout();\n    }\n    const toogleCallout = React.useCallback(() => {\n        toggleIsCalloutVisible(false);\n        dismiss();\n    }, [dismiss]);\n\n    return (\n        <>\n            {isCalloutVisible && (\n                <Callout\n                    target={point}\n                    directionalHint={DirectionalHint.bottomAutoEdge}\n                    isBeakVisible={false}\n                    gapSpace={gap}\n                    onDismiss={toogleCallout}>\n                    {showEmojiPane(onSelectFromPane, strings, paneRef, baseId, searchBoxString)}\n                </Callout>\n            )}\n        </>\n    );\n});\n\n/**\n * @internal\n */\nexport interface EmojiICallout {\n    dismiss: () => void;\n}\n\n/**\n * @internal\n * Enable emoji callout\n */\nexport default function showEmojiCallout(\n    uiUtilities: UIUtilities,\n    cursorRect: DOMRect,\n    strings: Record<string, string>,\n    onSelectFromPane: (emoji: Emoji, wordBeforeCursor: string) => void,\n    paneRef: React.RefObject<EmojiPane>,\n    emojiCalloutRef: React.RefObject<EmojiICallout>,\n    onHideCallout: () => void,\n    baseId: number,\n    searchBoxString?: LocalizedStrings<EmojiStringKeys>\n) {\n    let disposer: (() => void) | null = null;\n    const onDismiss = () => {\n        disposer?.();\n        disposer = null;\n    };\n\n    disposer = renderReactComponent(\n        uiUtilities,\n        <EmojiICallout\n            ref={emojiCalloutRef}\n            cursorRect={cursorRect}\n            strings={strings}\n            onSelectFromPane={onSelectFromPane}\n            paneRef={paneRef}\n            onHideCallout={onHideCallout}\n            searchBoxString={searchBoxString}\n            baseId={baseId}\n            dismiss={onDismiss}\n        />\n    );\n}\n"]}