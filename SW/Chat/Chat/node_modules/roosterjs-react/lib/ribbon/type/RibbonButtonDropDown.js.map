{"version":3,"file":"RibbonButtonDropDown.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/ribbon/type/RibbonButtonDropDown.ts"],"names":[],"mappings":"","sourcesContent":["import type { FormatState } from 'roosterjs-editor-types';\nimport type { IContextualMenuItem, IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';\n\n/**\n * Represent a drop down menu of a ribbon button\n */\nexport default interface RibbonButtonDropDown {\n    /**\n     * A key-value map for child items.\n     * When click on a child item, onClick handler will be triggered with the key of the clicked child item passed in as the second parameter\n     */\n    items: Record<string, string>;\n\n    /**\n     * CSS class name for drop down menu item\n     */\n    itemClassName?: string;\n\n    /**\n     * Whether live preview feature is enabled for this plugin.\n     * When live preview is enabled, hovering on a sub item will show the format result immediately in editor.\n     * This option needs dropDownItems to have values\n     */\n    allowLivePreview?: boolean;\n\n    /**\n     * Custom render of drop down item\n     * @param item This menu item\n     * @param onClick click handler of this menu item\n     */\n    itemRender?: (\n        item: IContextualMenuItem,\n        onClick: (\n            e: React.MouseEvent<Element> | React.KeyboardEvent<Element>,\n            item: IContextualMenuItem\n        ) => void\n    ) => React.ReactNode;\n\n    /**\n     * Get the key of current selected item\n     * @param formatState The current formatState of editor\n     * @returns the key of selected item, it needs to be the same with the key in dropDownItems\n     */\n    getSelectedItemKey?: (formatState: FormatState) => string | null;\n\n    /**\n     * Use this property to pass in Fluent UI ContextMenu property directly. It will overwrite the values of other conflict properties\n     */ commandBarSubMenuProperties?: Partial<IContextualMenuProps>;\n}\n"]}