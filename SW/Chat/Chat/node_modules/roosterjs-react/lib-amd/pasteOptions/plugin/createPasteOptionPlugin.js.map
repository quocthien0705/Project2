{"version":3,"file":"createPasteOptionPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/pasteOptions/plugin/createPasteOptionPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport showPasteOptionPane from '../component/showPasteOptionPane';\nimport { ButtonKeys, Buttons } from '../utils/buttons';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type { PasteOptionPane } from '../component/showPasteOptionPane';\nimport type { ClipboardData, IEditor, PluginEvent } from 'roosterjs-editor-types';\nimport type { LocalizedStrings, ReactEditorPlugin, UIUtilities } from '../../common/index';\nimport type { PasteOptionButtonKeys, PasteOptionStringKeys } from '../type/PasteOptionStringKeys';\n\nclass PasteOptionPlugin implements ReactEditorPlugin {\n    private clipboardData: ClipboardData | null = null;\n    private editor: IEditor | null = null;\n    private uiUtilities: UIUtilities | null = null;\n    private pasteOptionRef = React.createRef<PasteOptionPane>();\n\n    constructor(private strings?: LocalizedStrings<PasteOptionStringKeys>) {}\n\n    getName() {\n        return 'PasteOption';\n    }\n\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.pasteOptionRef.current?.dismiss();\n        this.editor = null;\n    }\n\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.Scroll) {\n            if (this.pasteOptionRef.current) {\n                this.showPasteOptionPane();\n            }\n        } else if (this.pasteOptionRef.current) {\n            this.handlePasteOptionPaneEvent(event);\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            if (event.source == 'Paste') {\n                const clipboardData = event.data as ClipboardData;\n\n                // Only show paste option when we pasted HTML with some format\n                if (clipboardData?.text && clipboardData.types?.indexOf('text/html') >= 0) {\n                    this.clipboardData = clipboardData;\n                    this.showPasteOptionPane();\n                }\n            }\n        }\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    private handlePasteOptionPaneEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyDown && this.pasteOptionRef.current) {\n            const selectedKey = this.pasteOptionRef.current.getSelectedKey();\n\n            if (!selectedKey) {\n                switch (event.rawEvent.which) {\n                    case Keys.CTRL_LEFT:\n                        this.pasteOptionRef.current.setSelectedKey(ButtonKeys[0]);\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.current.dismiss();\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    default:\n                        this.pasteOptionRef.current.dismiss();\n                        break;\n                }\n            } else {\n                const keyboardEvent = event.rawEvent;\n\n                if (keyboardEvent.which != Keys.CTRL_LEFT && keyboardEvent.ctrlKey) {\n                    // Dismiss the paste option when pressing hotkey CTRL+<any key>\n                    this.pasteOptionRef.current.dismiss();\n                    return;\n                }\n\n                for (let i = 0; i < ButtonKeys.length; i++) {\n                    const key = ButtonKeys[i];\n                    const button = Buttons[key];\n                    if (button.shortcut == String.fromCharCode(keyboardEvent.which)) {\n                        this.onPaste(key);\n                        cancelEvent(keyboardEvent);\n                        return;\n                    }\n                }\n\n                switch (keyboardEvent.which) {\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.current.dismiss();\n                        break;\n                    case Keys.LEFT:\n                    case Keys.RIGHT:\n                        const buttonCount = ButtonKeys.length;\n                        const diff =\n                            (keyboardEvent.which == Keys.RIGHT) == this.uiUtilities?.isRightToLeft()\n                                ? -1\n                                : 1;\n                        this.pasteOptionRef.current.setSelectedKey(\n                            ButtonKeys[\n                                (ButtonKeys.indexOf(selectedKey) + diff + buttonCount) % buttonCount\n                            ]\n                        );\n                        break;\n                    case Keys.ENTER:\n                        this.onPaste(selectedKey);\n                        break;\n                    case Keys.CTRL_LEFT:\n                        // Noop\n                        break;\n                    default:\n                        this.pasteOptionRef.current.dismiss();\n                        return;\n                }\n\n                cancelEvent(keyboardEvent);\n            }\n        }\n    }\n\n    private onPaste = (key: PasteOptionButtonKeys) => {\n        if (this.clipboardData && this.editor) {\n            this.editor.focus();\n\n            switch (key) {\n                case 'pasteOptionPasteAsIs':\n                    this.editor.paste(this.clipboardData);\n                    break;\n\n                case 'pasteOptionPasteText':\n                    this.editor.paste(this.clipboardData, true /*pasteAsText*/);\n                    break;\n\n                case 'pasteOptionMergeFormat':\n                    this.editor.paste(\n                        this.clipboardData,\n                        false /*pasteAsText*/,\n                        true /*applyCurrentFormat*/\n                    );\n                    break;\n                case 'pasteOptionPasteAsImage':\n                    this.editor.paste(\n                        this.clipboardData,\n                        false /*pasteAsText*/,\n                        false /*applyCurrentFormat*/,\n                        true /** pasteAsImage **/\n                    );\n            }\n\n            this.pasteOptionRef.current?.setSelectedKey(key);\n        }\n    };\n\n    private showPasteOptionPane() {\n        this.pasteOptionRef.current?.dismiss();\n\n        const focusedPosition = this.editor?.getFocusedPosition();\n\n        if (focusedPosition && this.uiUtilities) {\n            showPasteOptionPane(\n                this.uiUtilities,\n                focusedPosition,\n                this.onPaste,\n                this.pasteOptionRef,\n                this.strings\n            );\n        }\n    }\n}\n\nfunction cancelEvent(event: UIEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\n/**\n * Create a new instance of PasteOption plugin to show an option pane when paste, so that user can choose\n * an option to change the paste result, including:\n * - Paste as is\n * - Paste as text\n * - Paste and merge format\n * @param strings Localized string for this plugin\n * @returns A paste option plugin\n */\nexport default function createPasteOptionPlugin(\n    strings?: LocalizedStrings<PasteOptionStringKeys>\n): ReactEditorPlugin {\n    return new PasteOptionPlugin(strings);\n}\n"]}