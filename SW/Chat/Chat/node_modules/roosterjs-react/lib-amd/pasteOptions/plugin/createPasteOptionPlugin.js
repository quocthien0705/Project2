define(["require", "exports", "react", "../component/showPasteOptionPane", "../utils/buttons"], function (require, exports, React, showPasteOptionPane_1, buttons_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PasteOptionPlugin = /** @class */ (function () {
        function PasteOptionPlugin(strings) {
            var _this = this;
            this.strings = strings;
            this.clipboardData = null;
            this.editor = null;
            this.uiUtilities = null;
            this.pasteOptionRef = React.createRef();
            this.onPaste = function (key) {
                var _a;
                if (_this.clipboardData && _this.editor) {
                    _this.editor.focus();
                    switch (key) {
                        case 'pasteOptionPasteAsIs':
                            _this.editor.paste(_this.clipboardData);
                            break;
                        case 'pasteOptionPasteText':
                            _this.editor.paste(_this.clipboardData, true /*pasteAsText*/);
                            break;
                        case 'pasteOptionMergeFormat':
                            _this.editor.paste(_this.clipboardData, false /*pasteAsText*/, true /*applyCurrentFormat*/);
                            break;
                        case 'pasteOptionPasteAsImage':
                            _this.editor.paste(_this.clipboardData, false /*pasteAsText*/, false /*applyCurrentFormat*/, true /** pasteAsImage **/);
                    }
                    (_a = _this.pasteOptionRef.current) === null || _a === void 0 ? void 0 : _a.setSelectedKey(key);
                }
            };
        }
        PasteOptionPlugin.prototype.getName = function () {
            return 'PasteOption';
        };
        PasteOptionPlugin.prototype.initialize = function (editor) {
            this.editor = editor;
        };
        PasteOptionPlugin.prototype.dispose = function () {
            var _a;
            (_a = this.pasteOptionRef.current) === null || _a === void 0 ? void 0 : _a.dismiss();
            this.editor = null;
        };
        PasteOptionPlugin.prototype.onPluginEvent = function (event) {
            var _a;
            if (event.eventType == 14 /* Scroll */) {
                if (this.pasteOptionRef.current) {
                    this.showPasteOptionPane();
                }
            }
            else if (this.pasteOptionRef.current) {
                this.handlePasteOptionPaneEvent(event);
            }
            else if (event.eventType == 7 /* ContentChanged */) {
                if (event.source == 'Paste') {
                    var clipboardData = event.data;
                    // Only show paste option when we pasted HTML with some format
                    if ((clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.text) && ((_a = clipboardData.types) === null || _a === void 0 ? void 0 : _a.indexOf('text/html')) >= 0) {
                        this.clipboardData = clipboardData;
                        this.showPasteOptionPane();
                    }
                }
            }
        };
        PasteOptionPlugin.prototype.setUIUtilities = function (uiUtilities) {
            this.uiUtilities = uiUtilities;
        };
        PasteOptionPlugin.prototype.handlePasteOptionPaneEvent = function (event) {
            var _a;
            if (event.eventType == 0 /* KeyDown */ && this.pasteOptionRef.current) {
                var selectedKey = this.pasteOptionRef.current.getSelectedKey();
                if (!selectedKey) {
                    switch (event.rawEvent.which) {
                        case 17 /* CTRL_LEFT */:
                            this.pasteOptionRef.current.setSelectedKey(buttons_1.ButtonKeys[0]);
                            cancelEvent(event.rawEvent);
                            break;
                        case 27 /* ESCAPE */:
                            this.pasteOptionRef.current.dismiss();
                            cancelEvent(event.rawEvent);
                            break;
                        default:
                            this.pasteOptionRef.current.dismiss();
                            break;
                    }
                }
                else {
                    var keyboardEvent = event.rawEvent;
                    if (keyboardEvent.which != 17 /* CTRL_LEFT */ && keyboardEvent.ctrlKey) {
                        // Dismiss the paste option when pressing hotkey CTRL+<any key>
                        this.pasteOptionRef.current.dismiss();
                        return;
                    }
                    for (var i = 0; i < buttons_1.ButtonKeys.length; i++) {
                        var key = buttons_1.ButtonKeys[i];
                        var button = buttons_1.Buttons[key];
                        if (button.shortcut == String.fromCharCode(keyboardEvent.which)) {
                            this.onPaste(key);
                            cancelEvent(keyboardEvent);
                            return;
                        }
                    }
                    switch (keyboardEvent.which) {
                        case 27 /* ESCAPE */:
                            this.pasteOptionRef.current.dismiss();
                            break;
                        case 37 /* LEFT */:
                        case 39 /* RIGHT */:
                            var buttonCount = buttons_1.ButtonKeys.length;
                            var diff = (keyboardEvent.which == 39 /* RIGHT */) == ((_a = this.uiUtilities) === null || _a === void 0 ? void 0 : _a.isRightToLeft())
                                ? -1
                                : 1;
                            this.pasteOptionRef.current.setSelectedKey(buttons_1.ButtonKeys[(buttons_1.ButtonKeys.indexOf(selectedKey) + diff + buttonCount) % buttonCount]);
                            break;
                        case 13 /* ENTER */:
                            this.onPaste(selectedKey);
                            break;
                        case 17 /* CTRL_LEFT */:
                            // Noop
                            break;
                        default:
                            this.pasteOptionRef.current.dismiss();
                            return;
                    }
                    cancelEvent(keyboardEvent);
                }
            }
        };
        PasteOptionPlugin.prototype.showPasteOptionPane = function () {
            var _a, _b;
            (_a = this.pasteOptionRef.current) === null || _a === void 0 ? void 0 : _a.dismiss();
            var focusedPosition = (_b = this.editor) === null || _b === void 0 ? void 0 : _b.getFocusedPosition();
            if (focusedPosition && this.uiUtilities) {
                (0, showPasteOptionPane_1.default)(this.uiUtilities, focusedPosition, this.onPaste, this.pasteOptionRef, this.strings);
            }
        };
        return PasteOptionPlugin;
    }());
    function cancelEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * Create a new instance of PasteOption plugin to show an option pane when paste, so that user can choose
     * an option to change the paste result, including:
     * - Paste as is
     * - Paste as text
     * - Paste and merge format
     * @param strings Localized string for this plugin
     * @returns A paste option plugin
     */
    function createPasteOptionPlugin(strings) {
        return new PasteOptionPlugin(strings);
    }
    exports.default = createPasteOptionPlugin;
});
//# sourceMappingURL=createPasteOptionPlugin.js.map