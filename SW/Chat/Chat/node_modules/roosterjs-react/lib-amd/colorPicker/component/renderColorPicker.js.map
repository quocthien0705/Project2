{"version":3,"file":"renderColorPicker.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/colorPicker/component/renderColorPicker.tsx"],"names":[],"mappings":";;;;IAKA,IAAM,UAAU,GAAG,IAAA,wBAAc,EAAC;QAC9B,WAAW,EAAE;YACT,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,KAAK;YACb,WAAW,EAAE,OAAO;YACpB,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE;gBACP,WAAW,EAAE,KAAK;aACrB;SACJ;QACD,iBAAiB,EAAE;YACf,WAAW,EAAE,aAAa;SAC7B;QACD,sBAAsB,EAAE;YACpB,WAAW,EAAE,SAAS;SACzB;KACJ,CAAC,CAAC;IAEH;;OAEG;IACH,SAAgB,iBAAiB,CAC7B,IAAyB,EACzB,QAA+C,EAC/C,OAGS;QAET,IAAM,GAAG,GAAG,IAAI,CAAC,GAAc,CAAC;QAChC,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;QAEjD,OAAO,CACH,gCAAQ,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,EAAhB,CAAgB,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI;YACpD,6BACI,SAAS,EACL,UAAU,CAAC,WAAW;oBACtB,GAAG;oBACH,CAAC,GAAG,IAAI,gBAAgB,IAAI,GAAG,IAAI,sBAAsB;wBACrD,CAAC,CAAC,UAAU,CAAC,sBAAsB;wBACnC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAEvC,KAAK,EAAE;oBACH,eAAe,EAAE,WAAW;iBAC/B,GAAQ,CACR,CACZ,CAAC;IACN,CAAC;IA1BD,8CA0BC","sourcesContent":["import * as React from 'react';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport type { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport type { ModeIndependentColor } from 'roosterjs-editor-types';\n\nconst classNames = mergeStyleSets({\n    colorSquare: {\n        width: '20px',\n        height: '20px',\n        margin: '4px',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n        '&:hover': {\n            borderColor: 'red',\n        },\n    },\n    colorSquareBorder: {\n        borderColor: 'transparent',\n    },\n    colorSquareBorderWhite: {\n        borderColor: '#bebebe',\n    },\n});\n\n/**\n * @internal\n */\nexport function renderColorPicker<Strings extends string>(\n    item: IContextualMenuItem,\n    colorDef: Record<Strings, ModeIndependentColor>,\n    onClick: (\n        e: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>,\n        item: IContextualMenuItem\n    ) => void\n) {\n    const key = item.key as Strings;\n    const buttonColor = colorDef[key].lightModeColor;\n\n    return (\n        <button onClick={e => onClick(e, item)} title={item.text}>\n            <div\n                className={\n                    classNames.colorSquare +\n                    ' ' +\n                    (key == 'textColorWhite' || key == 'backgroundColorWhite'\n                        ? classNames.colorSquareBorderWhite\n                        : classNames.colorSquareBorder)\n                }\n                style={{\n                    backgroundColor: buttonColor,\n                }}></div>\n        </button>\n    );\n}\n"]}