{"version":3,"file":"heading.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-react/lib/ribbon/component/buttons/heading.ts"],"names":[],"mappings":";;;;IAKA,IAAM,QAAQ,GAAoD;QAC9D,kBAAkB,EAAE,WAAW;QAC/B,kBAAkB,EAAE,WAAW;QAC/B,kBAAkB,EAAE,WAAW;QAC/B,kBAAkB,EAAE,WAAW;QAC/B,kBAAkB,EAAE,WAAW;QAC/B,kBAAkB,EAAE,WAAW;QAC/B,GAAG,EAAE,GAAG;QACR,mBAAmB,EAAE,YAAY;KACpC,CAAC;IAEF;;;OAGG;IACU,QAAA,OAAO,GAAyC;QACzD,GAAG,EAAE,mBAAmB;QACxB,eAAe,EAAE,SAAS;QAC1B,QAAQ,EAAE,SAAS;QACnB,YAAY,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,kBAAkB,EAAE,UAAA,WAAW;;gBAC3B,OAAO,CAAC,MAAA,WAAW,CAAC,YAAY,mCAAI,CAAC,CAAC,GAAG,CAAC;oBACtC,CAAC,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY;oBACtC,CAAC,CAAC,WAAW,CAAC;YACtB,CAAC;SACJ;QACD,OAAO,EAAE,UAAC,MAAM,EAAE,GAAG;YACjB,IAAM,KAAK,GAAG,IAAA,oCAAa,EAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEvD,IAAI,KAAK,GAAG,CAAC,EAAE;gBACX,IAAA,sCAAe,EAAC,MAAM,EAAE,CAAC,CAAC,CAAC;aAC9B;iBAAM,IAAI,KAAK,GAAG,CAAC,EAAE;gBAClB,IAAA,sCAAe,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAClC;QACL,CAAC;KACJ,CAAC","sourcesContent":["import { getObjectKeys } from 'roosterjs-editor-dom';\nimport { setHeadingLevel } from 'roosterjs-editor-api';\nimport type RibbonButton from '../../type/RibbonButton';\nimport type { HeadingButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\nconst headings: Partial<Record<HeadingButtonStringKey, string>> = {\n    buttonNameHeading1: 'Heading 1',\n    buttonNameHeading2: 'Heading 2',\n    buttonNameHeading3: 'Heading 3',\n    buttonNameHeading4: 'Heading 4',\n    buttonNameHeading5: 'Heading 5',\n    buttonNameHeading6: 'Heading 6',\n    '-': '-',\n    buttonNameNoHeading: 'No heading',\n};\n\n/**\n * @internal\n * \"Heading\" button on the format ribbon\n */\nexport const heading: RibbonButton<HeadingButtonStringKey> = {\n    key: 'buttonNameHeading',\n    unlocalizedText: 'Heading',\n    iconName: 'Header1',\n    dropDownMenu: {\n        items: headings,\n        getSelectedItemKey: formatState => {\n            return (formatState.headingLevel ?? 0) > 0\n                ? 'heading' + formatState.headingLevel\n                : 'noHeading';\n        },\n    },\n    onClick: (editor, key) => {\n        const index = getObjectKeys(headings).indexOf(key) + 1;\n\n        if (index > 6) {\n            setHeadingLevel(editor, 0);\n        } else if (index > 0) {\n            setHeadingLevel(editor, index);\n        }\n    },\n};\n"]}