define(["require", "exports", "tslib", "react", "@fluentui/react/lib/FocusZone", "roosterjs-editor-api", "@fluentui/react/lib/Styling", "roosterjs-editor-dom"], function (require, exports, tslib_1, React, FocusZone_1, roosterjs_editor_api_1, Styling_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.insertTable = void 0;
    var MaxRows = 10;
    var MaxCols = 10;
    var classNames = (0, Styling_1.mergeStyleSets)({
        tableButton: {
            width: '15px',
            height: '15px',
            margin: '1px 1px 0 0',
            border: 'solid 1px #a19f9d',
            display: 'inline-block',
            cursor: 'pointer',
            backgroundColor: 'transparent',
        },
        hovered: {
            border: 'solid 1px #DB626C',
        },
        tablePane: {
            width: '160px',
            minWidth: 'auto',
            padding: '4px',
            boxSizing: 'content-box',
        },
        tablePaneInner: {
            lineHeight: '12px',
        },
        title: {
            margin: '5px 0',
        },
    });
    /**
     * @internal
     * "Insert table" button on the format ribbon
     */
    exports.insertTable = {
        key: 'buttonNameInsertTable',
        unlocalizedText: 'Insert table',
        iconName: 'Table',
        onClick: function (editor, key) {
            var _a = parseKey(key), row = _a.row, col = _a.col;
            (0, roosterjs_editor_api_1.insertTable)(editor, col, row);
        },
        dropDownMenu: {
            items: {
                insertTablePane: '{0} x {1} table',
            },
            itemRender: function (item, onClick) {
                return React.createElement(InsertTablePane, { item: item, onClick: onClick });
            },
            commandBarSubMenuProperties: {
                className: classNames.tablePane,
            },
        },
    };
    function InsertTablePane(props) {
        var _a;
        var item = props.item, onClick = props.onClick;
        var _b = (0, tslib_1.__read)(React.useState(1), 2), col = _b[0], setCol = _b[1];
        var _c = (0, tslib_1.__read)(React.useState(1), 2), row = _c[0], setRow = _c[1];
        var updateSize = React.useCallback(function (t) {
            var _a, _b;
            if ((0, roosterjs_editor_dom_1.safeInstanceOf)(t, 'HTMLElement')) {
                var col_1 = parseInt((_a = t.dataset.col) !== null && _a !== void 0 ? _a : '-1');
                var row_1 = parseInt((_b = t.dataset.row) !== null && _b !== void 0 ? _b : '-1');
                if (col_1 > 0 && col_1 <= MaxCols && row_1 > 0 && row_1 <= MaxRows) {
                    setCol(col_1);
                    setRow(row_1);
                }
            }
        }, [setCol, setRow]);
        var onMouseEnter = React.useCallback(function (e) {
            updateSize(e.target);
        }, [updateSize]);
        var onClickButton = React.useCallback(function (e) {
            onClick(e, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, item), { key: createKey(row, col) }));
        }, [row, col, onClick]);
        var ariaLabels = React.useMemo(function () {
            var _a;
            var result = [];
            for (var i = 1; i <= MaxCols; i++) {
                var col_2 = [];
                for (var j = 1; j <= MaxRows; j++) {
                    col_2[j] = formatText((_a = item.text) !== null && _a !== void 0 ? _a : '', i, j);
                }
                result[i] = col_2;
            }
            return result;
        }, [item.text]);
        var items = React.useMemo(function () {
            var items = [];
            for (var i = 1; i <= MaxRows; i++) {
                for (var j = 1; j <= MaxCols; j++) {
                    var key = "cell_" + i + "_" + j;
                    var isSelected = j <= col && i <= row;
                    items.push(React.createElement("button", { className: classNames.tableButton + ' ' + (isSelected ? classNames.hovered : ''), onClick: onClickButton, key: key, id: key, "data-col": j, "data-row": i, "data-is-focusable": true, onMouseEnter: onMouseEnter, "aria-label": ariaLabels[i][j] }));
                }
            }
            return items;
        }, [col, row]);
        var text = formatText((_a = item.text) !== null && _a !== void 0 ? _a : '', row, col);
        return (React.createElement("div", { className: classNames.tablePaneInner },
            React.createElement("div", { className: classNames.title }, text),
            React.createElement(FocusZone_1.FocusZone, { defaultActiveElement: "cell_1_1", direction: FocusZone_1.FocusZoneDirection.bidirectional, onActiveElementChanged: updateSize }, items)));
    }
    function formatText(text, row, col) {
        return text.replace('{0}', col.toString()).replace('{1}', row.toString());
    }
    function createKey(row, col) {
        return row + "," + col;
    }
    function parseKey(key) {
        var _a = (0, tslib_1.__read)(key.split(','), 2), row = _a[0], col = _a[1];
        return {
            row: parseInt(row),
            col: parseInt(col),
        };
    }
});
//# sourceMappingURL=insertTable.js.map