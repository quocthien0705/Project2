{"version":3,"file":"insertTable.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-react/lib/ribbon/component/buttons/insertTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { insertTable as insertTableApi } from 'roosterjs-editor-api';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\nimport type RibbonButton from '../../type/RibbonButton';\nimport type { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport type { InsertTableButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\nconst MaxRows = 10;\nconst MaxCols = 10;\nconst classNames = mergeStyleSets({\n    tableButton: {\n        width: '15px',\n        height: '15px',\n        margin: '1px 1px 0 0',\n        border: 'solid 1px #a19f9d',\n        display: 'inline-block',\n        cursor: 'pointer',\n        backgroundColor: 'transparent',\n    },\n    hovered: {\n        border: 'solid 1px #DB626C',\n    },\n    tablePane: {\n        width: '160px',\n        minWidth: 'auto',\n        padding: '4px',\n        boxSizing: 'content-box',\n    },\n    tablePaneInner: {\n        lineHeight: '12px',\n    },\n    title: {\n        margin: '5px 0',\n    },\n});\n\n/**\n * @internal\n * \"Insert table\" button on the format ribbon\n */\nexport const insertTable: RibbonButton<InsertTableButtonStringKey> = {\n    key: 'buttonNameInsertTable',\n    unlocalizedText: 'Insert table',\n    iconName: 'Table',\n    onClick: (editor, key) => {\n        const { row, col } = parseKey(key);\n        insertTableApi(editor, col, row);\n    },\n    dropDownMenu: {\n        items: {\n            insertTablePane: '{0} x {1} table',\n        },\n        itemRender: (item, onClick) => {\n            return <InsertTablePane item={item} onClick={onClick} />;\n        },\n        commandBarSubMenuProperties: {\n            className: classNames.tablePane,\n        },\n    },\n};\n\nfunction InsertTablePane(props: {\n    item: IContextualMenuItem;\n    onClick: (\n        e: React.MouseEvent<Element> | React.KeyboardEvent<Element>,\n        item: IContextualMenuItem\n    ) => void;\n}) {\n    const { item, onClick } = props;\n    const [col, setCol] = React.useState(1);\n    const [row, setRow] = React.useState(1);\n\n    const updateSize = React.useCallback(\n        (t?: HTMLElement | EventTarget) => {\n            if (safeInstanceOf(t, 'HTMLElement')) {\n                const col = parseInt(t.dataset.col ?? '-1');\n                const row = parseInt(t.dataset.row ?? '-1');\n\n                if (col > 0 && col <= MaxCols && row > 0 && row <= MaxRows) {\n                    setCol(col);\n                    setRow(row);\n                }\n            }\n        },\n        [setCol, setRow]\n    );\n\n    const onMouseEnter = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            updateSize(e.target);\n        },\n        [updateSize]\n    );\n\n    const onClickButton = React.useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            onClick(e, {\n                ...item,\n                key: createKey(row, col),\n            });\n        },\n        [row, col, onClick]\n    );\n\n    const ariaLabels = React.useMemo<string[][]>(() => {\n        const result: string[][] = [];\n        for (let i = 1; i <= MaxCols; i++) {\n            const col: string[] = [];\n            for (let j = 1; j <= MaxRows; j++) {\n                col[j] = formatText(item.text ?? '', i, j);\n            }\n            result[i] = col;\n        }\n        return result;\n    }, [item.text]);\n\n    const items = React.useMemo(() => {\n        const items: JSX.Element[] = [];\n\n        for (let i = 1; i <= MaxRows; i++) {\n            for (let j = 1; j <= MaxCols; j++) {\n                const key = `cell_${i}_${j}`;\n                const isSelected = j <= col && i <= row;\n                items.push(\n                    <button\n                        className={\n                            classNames.tableButton + ' ' + (isSelected ? classNames.hovered : '')\n                        }\n                        onClick={onClickButton}\n                        key={key}\n                        id={key}\n                        data-col={j}\n                        data-row={i}\n                        data-is-focusable={true}\n                        onMouseEnter={onMouseEnter}\n                        aria-label={ariaLabels[i][j]}\n                    />\n                );\n            }\n        }\n\n        return items;\n    }, [col, row]);\n\n    const text = formatText(item.text ?? '', row, col);\n\n    return (\n        <div className={classNames.tablePaneInner}>\n            <div className={classNames.title}>{text}</div>\n            <FocusZone\n                defaultActiveElement=\"cell_1_1\"\n                direction={FocusZoneDirection.bidirectional}\n                onActiveElementChanged={updateSize}>\n                {items}\n            </FocusZone>\n        </div>\n    );\n}\n\nfunction formatText(text: string, row: number, col: number) {\n    return text.replace('{0}', col.toString()).replace('{1}', row.toString());\n}\n\nfunction createKey(row: number, col: number) {\n    return `${row},${col}`;\n}\n\nfunction parseKey(key: string): { row: number; col: number } {\n    const [row, col] = key.split(',');\n    return {\n        row: parseInt(row),\n        col: parseInt(col),\n    };\n}\n"]}