{"version":3,"file":"backgroundColor.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-react/lib/ribbon/component/buttons/backgroundColor.ts"],"names":[],"mappings":";;;;IAcA,IAAM,GAAG,GAAgC,2BAA2B,CAAC;IAErE;;;OAGG;IACU,QAAA,eAAe,GAAiD;QACzE,YAAY,EAAE;YACV,KAAK,EAAE,+CAA4B;YACnC,aAAa,EAAE,IAAA,yDAA2B,GAAE;YAC5C,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,UAAC,IAAI,EAAE,OAAO,IAAK,OAAA,IAAA,qCAAiB,EAAC,IAAI,EAAE,mCAAgB,EAAE,OAAO,CAAC,EAAlD,CAAkD;YACjF,2BAA2B,EAAE;gBACzB,SAAS,EAAE,IAAA,8DAAgC,GAAE;aAChD;SACJ;QACD,GAAG,EAAE,GAAG;QACR,eAAe,EAAE,kBAAkB;QACnC,QAAQ,EAAE,qBAAqB;QAC/B,OAAO,EAAE,UAAC,MAAM,EAAE,GAAG;YACjB,uEAAuE;YACvE,IAAI,GAAG,IAAI,GAAG,EAAE;gBACZ,IAAA,yCAAkB,EAAC,MAAM,EAAE,IAAA,0CAAuB,EAAC,GAAG,CAAC,CAAC,CAAC;aAC5D;QACL,CAAC;KACJ,CAAC","sourcesContent":["import { renderColorPicker } from '../../../colorPicker/component/renderColorPicker';\nimport { setBackgroundColor } from 'roosterjs-editor-api';\nimport type RibbonButton from '../../type/RibbonButton';\nimport type { BackgroundColorButtonStringKey } from '../../type/RibbonButtonStringKeys';\nimport {\n    getColorPickerContainerClassName,\n    getColorPickerItemClassName,\n} from '../../../colorPicker/utils/getClassNamesForColorPicker';\nimport {\n    BackgroundColorDropDownItems,\n    BackgroundColors,\n    getBackgroundColorValue,\n} from '../../../colorPicker/utils/backgroundColors';\n\nconst Key: 'buttonNameBackgroundColor' = 'buttonNameBackgroundColor';\n\n/**\n * @internal\n * \"Background color\" button on the format ribbon\n */\nexport const backgroundColor: RibbonButton<BackgroundColorButtonStringKey> = {\n    dropDownMenu: {\n        items: BackgroundColorDropDownItems,\n        itemClassName: getColorPickerItemClassName(),\n        allowLivePreview: true,\n        itemRender: (item, onClick) => renderColorPicker(item, BackgroundColors, onClick),\n        commandBarSubMenuProperties: {\n            className: getColorPickerContainerClassName(),\n        },\n    },\n    key: Key,\n    unlocalizedText: 'Background color',\n    iconName: 'FabricTextHighlight',\n    onClick: (editor, key) => {\n        // This check will always be true, add it here just to satisfy compiler\n        if (key != Key) {\n            setBackgroundColor(editor, getBackgroundColorValue(key));\n        }\n    },\n};\n"]}