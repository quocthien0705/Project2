{"version":3,"file":"insertLink.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-react/lib/ribbon/component/buttons/insertLink.ts"],"names":[],"mappings":";;;;IAMA;;;OAGG;IACU,QAAA,UAAU,GAA4C;QAC/D,GAAG,EAAE,sBAAsB;QAC3B,eAAe,EAAE,aAAa;QAC9B,QAAQ,EAAE,MAAM;QAChB,UAAU,EAAE,UAAA,WAAW,IAAI,OAAA,CAAC,CAAC,WAAW,CAAC,oBAAoB,EAAlC,CAAkC;QAC7D,OAAO,EAAE,UAAC,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW;;YACrC,IAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CACrC,SAAS,sBAEZ,CAAC,CAAC,CAAC,CAAC;YACL,IAAM,GAAG,GAAG,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,KAAI,EAAE,CAAC;YACrC,IAAM,WAAW,GACb,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,MAAI,MAAA,MAAM,CAAC,iBAAiB,EAAE,0CAAE,QAAQ,EAAE,CAAA,IAAI,EAAE,CAAC;YAC9E,IAAM,KAAK,GAAG;gBACV,GAAG,EAAE;oBACD,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,qBAA8B;oBACxC,gBAAgB,EAAE,mBAAmB;oBACrC,SAAS,EAAE,GAAG;iBACjB;gBACD,WAAW,EAAE;oBACT,QAAQ,EAAE,2BAAoC;oBAC9C,gBAAgB,EAAE,YAAY;oBAC9B,SAAS,EAAE,WAAW;iBACzB;aACJ,CAAC;YAEF,IAAA,yBAAe,EACX,WAAW,EACX,iBAAiB,EACjB,aAAa,EACb,KAAK,EACL,OAAO,EACP,UAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM;gBACvB,IAAI,QAAQ,IAAI,KAAK,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,GAAG,EAAE;oBACvD,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;oBAC9B,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC;oBACtB,OAAO,MAAM,CAAC;iBACjB;qBAAM;oBACH,OAAO,IAAI,CAAC;iBACf;YACL,CAAC,CACJ,CAAC,IAAI,CAAC,UAAA,MAAM;gBACT,MAAM,CAAC,KAAK,EAAE,CAAC;gBAEf,IACI,MAAM;oBACN,MAAM,CAAC,WAAW;oBAClB,MAAM,CAAC,GAAG;oBACV,CAAC,MAAM,CAAC,WAAW,IAAI,WAAW,IAAI,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,EAC1D;oBACE,IAAA,iCAAU,EAAC,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;iBAClE;YACL,CAAC,CAAC,CAAC;QACP,CAAC;KACJ,CAAC","sourcesContent":["import showInputDialog from '../../../inputDialog/utils/showInputDialog';\nimport { createLink } from 'roosterjs-editor-api';\nimport { QueryScope } from 'roosterjs-editor-types';\nimport type RibbonButton from '../../type/RibbonButton';\nimport type { InsertLinkButtonStringKey } from '../../type/RibbonButtonStringKeys';\n\n/**\n * @internal\n * \"Insert link\" button on the format ribbon\n */\nexport const insertLink: RibbonButton<InsertLinkButtonStringKey> = {\n    key: 'buttonNameInsertLink',\n    unlocalizedText: 'Insert link',\n    iconName: 'Link',\n    isDisabled: formatState => !!formatState.isMultilineSelection,\n    onClick: (editor, _, strings, uiUtilities) => {\n        const existingLink = editor.queryElements<HTMLAnchorElement>(\n            'a[href]',\n            QueryScope.OnSelection\n        )[0];\n        const url = existingLink?.href || '';\n        const displayText =\n            existingLink?.textContent || editor.getSelectionRange()?.toString() || '';\n        const items = {\n            url: {\n                autoFocus: true,\n                labelKey: 'insertLinkDialogUrl' as const,\n                unlocalizedLabel: 'Web address (URL)',\n                initValue: url,\n            },\n            displayText: {\n                labelKey: 'insertLinkDialogDisplayAs' as const,\n                unlocalizedLabel: 'Display as',\n                initValue: displayText,\n            },\n        };\n\n        showInputDialog(\n            uiUtilities,\n            'insertLinkTitle',\n            'Insert link',\n            items,\n            strings,\n            (itemName, newValue, values) => {\n                if (itemName == 'url' && values.displayText == values.url) {\n                    values.displayText = newValue;\n                    values.url = newValue;\n                    return values;\n                } else {\n                    return null;\n                }\n            }\n        ).then(result => {\n            editor.focus();\n\n            if (\n                result &&\n                result.displayText &&\n                result.url &&\n                (result.displayText != displayText || result.url != url)\n            ) {\n                createLink(editor, result.url, result.url, result.displayText);\n            }\n        });\n    },\n};\n"]}