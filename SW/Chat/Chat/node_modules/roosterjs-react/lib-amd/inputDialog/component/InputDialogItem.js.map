{"version":3,"file":"InputDialogItem.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/inputDialog/component/InputDialogItem.tsx"],"names":[],"mappings":";;;IAoBA,IAAM,UAAU,GAAG,IAAA,wBAAc,EAAC;QAC9B,QAAQ,EAAE;YACN,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,OAAO;YACjB,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,YAAY;YACpB,YAAY,EAAE,KAAK;SACtB;KACJ,CAAC,CAAC;IAEH;;OAEG;IACH,SAAwB,eAAe,CACnC,KAA+C;QAEvC,IAAA,QAAQ,GAA2D,KAAK,SAAhE,EAAE,OAAO,GAAkD,KAAK,QAAvD,EAAE,KAAK,GAA2C,KAAK,MAAhD,EAAE,aAAa,GAA4B,KAAK,cAAjC,EAAE,SAAS,GAAiB,KAAK,UAAtB,EAAE,UAAU,GAAK,KAAK,WAAV,CAAW;QAC3E,IAAA,KAA4C,KAAK,CAAC,QAAQ,CAAC,EAAzD,QAAQ,cAAA,EAAE,gBAAgB,sBAAA,EAAE,SAAS,eAAoB,CAAC;QAClE,IAAM,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACnC,UAAC,CAAC,EAAE,QAAQ;YACR,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,EACD,CAAC,QAAQ,EAAE,SAAS,CAAC,CACxB,CAAC;QAEF,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAChC,UAAC,CAAwC;YACrC,IAAI,CAAC,CAAC,KAAK,kBAAc,EAAE;gBACvB,UAAU,EAAE,CAAC;aAChB;QACL,CAAC,EACD,CAAC,UAAU,CAAC,CACf,CAAC;QAEF,OAAO,CACH;YACK,QAAQ,CAAC,CAAC,CAAC,iCAAM,IAAA,0BAAkB,EAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAO,CAAC,CAAC,CAAC,IAAI;YACvF;gBACI,oBAAC,qBAAS,IACN,IAAI,EAAC,SAAS,EACd,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,UAAU,CAAC,QAAQ,EAC9B,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,aAAa,EACvB,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,GACtB,CACA,CACJ,CACT,CAAC;IACN,CAAC;IAtCD,kCAsCC","sourcesContent":["import * as React from 'react';\nimport { getLocalizedString } from '../../common/index';\nimport { Keys } from 'roosterjs-editor-types';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport type DialogItem from '../type/DialogItem';\nimport type { LocalizedStrings } from '../../common/index';\n\n/**\n * @internal\n */\nexport interface InputDialogItemProps<Strings extends string, ItemNames extends string> {\n    itemName: ItemNames;\n    strings: LocalizedStrings<Strings> | undefined;\n    items: Record<ItemNames, DialogItem<Strings>>;\n    currentValues: Record<ItemNames, string>;\n    onEnterKey: () => void;\n    onChanged: (itemName: ItemNames, newValue: string) => void;\n}\n\nconst classNames = mergeStyleSets({\n    inputBox: {\n        width: '100%',\n        minWidth: '250px',\n        height: '32px',\n        margin: '5px 0 16px',\n        borderRadius: '2px',\n    },\n});\n\n/**\n * @internal\n */\nexport default function InputDialogItem<Strings extends string, ItemNames extends string>(\n    props: InputDialogItemProps<Strings, ItemNames>\n) {\n    const { itemName, strings, items, currentValues, onChanged, onEnterKey } = props;\n    const { labelKey, unlocalizedLabel, autoFocus } = items[itemName];\n    const value = currentValues[itemName];\n    const onValueChange = React.useCallback(\n        (_, newValue) => {\n            onChanged(itemName, newValue);\n        },\n        [itemName, onChanged]\n    );\n\n    const onKeyPress = React.useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.which == Keys.ENTER) {\n                onEnterKey();\n            }\n        },\n        [onEnterKey]\n    );\n\n    return (\n        <div>\n            {labelKey ? <div>{getLocalizedString(strings, labelKey, unlocalizedLabel)}</div> : null}\n            <div>\n                <TextField\n                    role=\"textbox\"\n                    type=\"text\"\n                    className={classNames.inputBox}\n                    value={value}\n                    onChange={onValueChange}\n                    onKeyPress={onKeyPress}\n                    autoFocus={autoFocus}\n                />\n            </div>\n        </div>\n    );\n}\n"]}