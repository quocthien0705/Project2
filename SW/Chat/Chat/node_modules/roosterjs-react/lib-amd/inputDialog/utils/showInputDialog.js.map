{"version":3,"file":"showInputDialog.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/inputDialog/utils/showInputDialog.tsx"],"names":[],"mappings":";;;IAWA;;;;;;;;OAQG;IACH,SAAwB,eAAe,CACnC,WAAwB,EACxB,cAAuB,EACvB,gBAAwB,EACxB,KAA6C,EAC7C,OAA+E,EAC/E,QAIqC;QAErC,OAAO,IAAI,OAAO,CAAmC,UAAA,OAAO;YACxD,IAAI,QAAQ,GAAwB,IAAI,CAAC;YACzC,IAAM,IAAI,GAAG,UAAC,MAAiC;gBAC3C,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC;gBACb,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC;YACF,IAAM,QAAQ,GAAG;gBACb,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC;gBACb,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC;YACF,IAAM,SAAS,GAAG,CACd,oBAAC,qBAAW,IACR,cAAc,EAAE,cAAc,EAC9B,gBAAgB,EAAE,gBAAgB,EAClC,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,GACpB,CACL,CAAC;YAEF,QAAQ,GAAG,IAAA,2CAAoB,EAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC;IApCD,kCAoCC","sourcesContent":["import * as React from 'react';\nimport InputDialog from '../component/InputDialog';\nimport { renderReactComponent } from '../../common/utils/renderReactComponent';\nimport type DialogItem from '../type/DialogItem';\nimport type {\n    CancelButtonStringKey,\n    LocalizedStrings,\n    OkButtonStringKey,\n    UIUtilities,\n} from '../../common/index';\n\n/**\n * Show a dialog with input items\n * @param uiUtilities UI utilities to help render the dialog\n * @param dialogTitleKey Localized string key for title of this dialog\n * @param unlocalizedTitle Unlocalized title string of this dialog. It will be used if a valid localized string is not found using dialogTitleKey\n * @param items Input items in this dialog\n * @param strings Localized strings\n * @param onChange An optional callback that will be invoked when input item value is changed\n */\nexport default function showInputDialog<Strings extends string, ItemNames extends string>(\n    uiUtilities: UIUtilities,\n    dialogTitleKey: Strings,\n    unlocalizedTitle: string,\n    items: Record<ItemNames, DialogItem<Strings>>,\n    strings?: LocalizedStrings<Strings | OkButtonStringKey | CancelButtonStringKey>,\n    onChange?: (\n        changedItemName: ItemNames,\n        newValue: string,\n        currentValues: Record<ItemNames, string>\n    ) => Record<ItemNames, string> | null\n): Promise<Record<ItemNames, string> | null> {\n    return new Promise<Record<ItemNames, string> | null>(resolve => {\n        let disposer: null | (() => void) = null;\n        const onOk = (result: Record<ItemNames, string>) => {\n            disposer?.();\n            resolve(result);\n        };\n        const onCancel = () => {\n            disposer?.();\n            resolve(null);\n        };\n        const component = (\n            <InputDialog\n                dialogTitleKey={dialogTitleKey}\n                unlocalizedTitle={unlocalizedTitle}\n                items={items}\n                strings={strings}\n                onOk={onOk}\n                onCancel={onCancel}\n                onChange={onChange}\n            />\n        );\n\n        disposer = renderReactComponent(uiUtilities, component);\n    });\n}\n"]}