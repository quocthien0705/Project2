define(["require", "exports", "react", "@fluentui/react/lib/Utilities", "../utils/emojiList", "@fluentui/react/lib/FocusZone", "roosterjs-editor-dom", "@fluentui/react/lib/Icon", "@fluentui/react/lib/Tooltip"], function (require, exports, React, Utilities_1, emojiList_1, FocusZone_1, roosterjs_editor_dom_1, Icon_1, Tooltip_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @internal
     */
    function EmojiNavBar(props) {
        var currentSelected = props.currentSelected, getTabId = props.getTabId, _a = props.strings, strings = _a === void 0 ? {} : _a, classNames = props.classNames;
        var keys = (0, roosterjs_editor_dom_1.getObjectKeys)(emojiList_1.EmojiList);
        var onFamilyClick = function (key) {
            if (props.onClick) {
                props.onClick(key);
            }
        };
        return (
        // for each emoji family key, create a button to use as nav bar
        React.createElement("div", { className: classNames.navBar, role: "tablist" },
            React.createElement(FocusZone_1.FocusZone, { direction: FocusZone_1.FocusZoneDirection.horizontal }, keys.map(function (key, index) {
                var _a;
                var selected = key === currentSelected;
                var friendlyName = strings[key];
                return (React.createElement(Tooltip_1.TooltipHost, { hostClassName: classNames.navBarTooltip, content: friendlyName, key: key },
                    React.createElement("button", { className: (0, Utilities_1.css)(classNames.navBarButton, (_a = {},
                            _a[classNames.selected] = selected,
                            _a)), key: key, onClick: onFamilyClick.bind(onclick, key), id: getTabId === null || getTabId === void 0 ? void 0 : getTabId(key), role: "tab", "aria-selected": selected, "aria-label": friendlyName, "data-is-focusable": "true", "aria-posinset": index + 1, tabIndex: 0, "aria-setsize": keys.length },
                        React.createElement(Icon_1.Icon, { iconName: emojiList_1.EmojiFabricIconCharacterMap[key] }))));
            }))));
    }
    exports.default = EmojiNavBar;
});
//# sourceMappingURL=EmojiNavBar.js.map