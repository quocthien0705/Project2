{"version":3,"file":"EmojiIcon.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/emoji/components/EmojiIcon.tsx"],"names":[],"mappings":";;;IAoBA;;;OAGG;IACH,SAAwB,SAAS,CAAC,KAAqB;;QAC3C,IAAA,KAAK,GAAyE,KAAK,MAA9E,EAAE,OAAO,GAAgE,KAAK,QAArE,EAAE,UAAU,GAAoD,KAAK,WAAzD,EAAE,WAAW,GAAuC,KAAK,YAA5C,EAAE,OAAO,GAA8B,KAAK,QAAnC,EAAE,OAAO,GAAqB,KAAK,QAA1B,EAAE,EAAE,GAAiB,KAAK,GAAtB,EAAE,UAAU,GAAK,KAAK,WAAV,CAAW;QAC5F,IAAM,OAAO,GAAG,KAAK,CAAC,WAAW,IAAI,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEhE,OAAO,CACH,sDACI,EAAE,EAAE,EAAE,EACN,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,IAAA,eAAG,EAAC,UAAU,CAAC,KAAK;gBAC3B,GAAC,UAAU,CAAC,aAAa,IAAG,UAAU;oBACxC,EACF,OAAO,EAAE,OAAO,EAChB,WAAW,EAAE,WAAW,EACxB,OAAO,EAAE,OAAO,uBACG,IAAI,gBACX,OAAO,mBACJ,UAAU,IACrB,mBAAmB,CAAC,KAAK,CAAC,GAC7B,KAAK,CAAC,SAAS,IAAI,GAAG,CAClB,CACZ,CAAC;IACN,CAAC;IArBD,4BAqBC;IAED,SAAS,YAAY,CAAI,MAAW,EAAE,QAAkC;QACpE,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,MAAW,EAAE,GAAW;YACvD,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACf,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;aAC7B;YACD,OAAO,MAAM,CAAC;QAClB,CAAC,EAAE,EAAO,CAAC,CAAC;IAChB,CAAC;IAED,SAAS,mBAAmB,CAAI,KAAqB;QACjD,OAAO,YAAY,CACf,KAAK,IAAI,EAAE,EACX,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAlE,CAAkE,CACjF,CAAC;IACN,CAAC","sourcesContent":["import * as React from 'react';\nimport { css } from '@fluentui/react/lib/Utilities';\nimport type { Emoji } from '../type/Emoji';\nimport type { EmojiPaneStyle } from '../type/EmojiPaneStyles';\nimport type { IProcessedStyleSet, IStyleSet } from '@fluentui/react/lib/Styling';\n/**\n * @internal\n * Emoji icon data\n */\nexport interface EmojiIconProps {\n    id: string;\n    emoji: Emoji;\n    strings: Record<string, string>;\n    classNames: IProcessedStyleSet<IStyleSet<EmojiPaneStyle>>;\n    onClick?: (e: React.MouseEvent<EventTarget>) => void;\n    onMouseOver?: (e: React.MouseEvent<EventTarget>) => void;\n    onFocus?: React.FocusEventHandler<HTMLButtonElement>;\n    isSelected?: boolean;\n}\n\n/**\n * @internal\n * Emoji icon component\n */\nexport default function EmojiIcon(props: EmojiIconProps) {\n    const { emoji, onClick, isSelected, onMouseOver, onFocus, strings, id, classNames } = props;\n    const content = emoji.description && strings[emoji.description];\n\n    return (\n        <button\n            id={id}\n            role=\"option\"\n            className={css(classNames.emoji, {\n                [classNames.emojiSelected]: isSelected,\n            })}\n            onClick={onClick}\n            onMouseOver={onMouseOver}\n            onFocus={onFocus}\n            data-is-focusable={true}\n            aria-label={content}\n            aria-selected={isSelected}\n            {...getDataAndAriaProps(props)}>\n            {emoji.codePoint || 'â€¦'}\n        </button>\n    );\n}\n\nfunction reduceObject<T>(object: any, callback: (key: string) => boolean): T {\n    if (!object) {\n        return object;\n    }\n\n    return Object.keys(object).reduce((result: any, key: string) => {\n        if (callback(key)) {\n            result[key] = object[key];\n        }\n        return result;\n    }, {} as T);\n}\n\nfunction getDataAndAriaProps<T>(props: EmojiIconProps): T {\n    return reduceObject(\n        props || {},\n        propName => propName.indexOf('data-') === 0 || propName.indexOf('aria-') === 0\n    );\n}\n"]}