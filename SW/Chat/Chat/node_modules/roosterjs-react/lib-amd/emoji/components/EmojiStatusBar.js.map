{"version":3,"file":"EmojiStatusBar.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/emoji/components/EmojiStatusBar.tsx"],"names":[],"mappings":";;;IAgBA,IAAM,cAAc,GAAG,kBAAkB,CAAC;IAE1C;;;OAGG;IACH,SAAwB,cAAc,CAAC,KAA0B;QACrD,IAAA,KAAK,GAAqC,KAAK,MAA1C,EAAE,OAAO,GAA4B,KAAK,QAAjC,EAAE,SAAS,GAAiB,KAAK,UAAtB,EAAE,UAAU,GAAK,KAAK,WAAV,CAAW;QAExD,IAAI,CAAC,SAAS,EAAE;YACZ,IAAM,mBAAmB,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;YACpD,OAAO,CACH,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS;gBAChC,6BAAK,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,eAAY,QAAQ,IAC9C,mBAAmB,CAClB;gBACN,6BAAK,SAAS,EAAE,UAAU,CAAC,iCAAiC;oBACxD,oBAAC,qBAAW,IACR,OAAO,EAAE,mBAAmB,EAC5B,YAAY,EAAE,6BAAmB,CAAC,MAAM;wBACxC,8BAAM,IAAI,EAAC,OAAO,IAAE,mBAAmB,CAAQ,CACrC,CACZ,CACJ,CACT,CAAC;SACL;QAED,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1C,IAAM,WAAW,GAAG,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,EAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEzE,OAAO,CACH,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS;YAChC,2BAAG,SAAS,EAAE,UAAU,CAAC,aAAa,EAAE,IAAI,EAAC,cAAc,iBAAa,MAAM,IACzE,IAAI,CACL;YAEJ,6BAAK,SAAS,EAAE,UAAU,CAAC,yBAAyB;gBAChD,6BAAK,SAAS,EAAE,UAAU,CAAC,gBAAgB;oBACvC,oBAAC,qBAAW,IAAC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,6BAAmB,CAAC,MAAM,IACtE,WAAW,CACF,CACZ,CACJ,CACJ,CACT,CAAC;IACN,CAAC;IAvCD,iCAuCC","sourcesContent":["import * as React from 'react';\nimport { TooltipHost, TooltipOverflowMode } from '@fluentui/react/lib/Tooltip';\nimport type { Emoji } from '../type/Emoji';\nimport type { EmojiPaneStyle } from '../type/EmojiPaneStyles';\nimport type { IProcessedStyleSet, IStyleSet } from '@fluentui/react/lib/Styling';\n/**\n * @internal\n * Emoji Status Bar data\n */\nexport interface EmojiStatusBarProps {\n    emoji: Emoji;\n    strings: Record<string, string>;\n    hasResult: boolean;\n    classNames: IProcessedStyleSet<IStyleSet<EmojiPaneStyle>>;\n}\n\nconst NO_SUGGESTIONS = 'emjDNoSuggetions';\n\n/**\n * @internal\n * Emoji status bar component\n */\nexport default function EmojiStatusBar(props: EmojiStatusBarProps) {\n    const { emoji, strings, hasResult, classNames } = props;\n\n    if (!hasResult) {\n        const noResultDescription = strings[NO_SUGGESTIONS];\n        return (\n            <div className={classNames.statusBar}>\n                <div style={{ display: 'none' }} aria-live=\"polite\">\n                    {noResultDescription}\n                </div>\n                <div className={classNames.statusBarNoResultDetailsContainer}>\n                    <TooltipHost\n                        content={noResultDescription}\n                        overflowMode={TooltipOverflowMode.Parent}>\n                        <span role=\"alert\">{noResultDescription}</span>\n                    </TooltipHost>\n                </div>\n            </div>\n        );\n    }\n\n    const icon = emoji ? emoji.codePoint : '';\n    const description = emoji?.description ? strings[emoji.description] : '';\n\n    return (\n        <div className={classNames.statusBar}>\n            <i className={classNames.statusBarIcon} role=\"presentation\" aria-hidden=\"true\">\n                {icon}\n            </i>\n\n            <div className={classNames.statusBarDetailsContainer}>\n                <div className={classNames.statusBarDetails}>\n                    <TooltipHost content={description} overflowMode={TooltipOverflowMode.Parent}>\n                        {description}\n                    </TooltipHost>\n                </div>\n            </div>\n        </div>\n    );\n}\n"]}