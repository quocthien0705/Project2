define(["require", "exports", "../type/UpdateMode"], function (require, exports, UpdateMode_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A plugin to help get HTML content from editor
     */
    var UpdateContentPluginImpl = /** @class */ (function () {
        /**
         * Create a new instance of UpdateContentPlugin class
         * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values
         * @param onUpdate A callback to be invoked when update happens
         */
        function UpdateContentPluginImpl(updateMode, onUpdate) {
            var _this = this;
            this.updateMode = updateMode;
            this.onUpdate = onUpdate;
            this.editor = null;
            this.disposer = null;
            this.onBlur = function () {
                _this.update(UpdateMode_1.UpdateMode.OnBlur);
            };
        }
        /**
         * Get a friendly name of this plugin
         */
        UpdateContentPluginImpl.prototype.getName = function () {
            return 'UpdateContent';
        };
        /**
         * Initialize this plugin
         * @param editor The editor instance
         */
        UpdateContentPluginImpl.prototype.initialize = function (editor) {
            this.editor = editor;
            this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);
        };
        /**
         * Dispose this plugin
         */
        UpdateContentPluginImpl.prototype.dispose = function () {
            var _a;
            (_a = this.disposer) === null || _a === void 0 ? void 0 : _a.call(this);
            this.disposer = null;
            this.editor = null;
        };
        /**
         * Handle events triggered from editor
         * @param event PluginEvent object
         */
        UpdateContentPluginImpl.prototype.onPluginEvent = function (event) {
            switch (event.eventType) {
                case 11 /* EditorReady */:
                    this.update(UpdateMode_1.UpdateMode.OnInitialize);
                    break;
                case 12 /* BeforeDispose */:
                    this.update(UpdateMode_1.UpdateMode.OnDispose);
                    break;
                case 7 /* ContentChanged */:
                    this.update(UpdateMode_1.UpdateMode.OnContentChangedEvent);
                    break;
                case 3 /* Input */:
                    this.update(UpdateMode_1.UpdateMode.OnUserInput);
                    break;
            }
        };
        /**
         * Trigger a force update. onUpdate callback will be invoked with HTML content of editor
         */
        UpdateContentPluginImpl.prototype.forceUpdate = function () {
            this.update(UpdateMode_1.UpdateMode.Force);
        };
        UpdateContentPluginImpl.prototype.update = function (mode) {
            if (this.editor &&
                (mode == UpdateMode_1.UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&
                this.onUpdate) {
                var content = this.editor.getContent();
                this.onUpdate(content, mode);
            }
        };
        return UpdateContentPluginImpl;
    }());
    /**
     * Create a new instance of UpdateContentPlugin class
     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values
     * @param onUpdate A callback to be invoked when update happens
     */
    function createUpdateContentPlugin(updateMode, onUpdate) {
        return new UpdateContentPluginImpl(updateMode, onUpdate);
    }
    exports.default = createUpdateContentPlugin;
});
//# sourceMappingURL=createUpdateContentPlugin.js.map