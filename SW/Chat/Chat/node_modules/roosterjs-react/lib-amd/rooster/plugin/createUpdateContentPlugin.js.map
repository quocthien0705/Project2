{"version":3,"file":"createUpdateContentPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/rooster/plugin/createUpdateContentPlugin.ts"],"names":[],"mappings":";;;IAKA;;OAEG;IACH;QAII;;;;WAIG;QACH,iCACY,UAAsB,EACtB,QAAkD;YAF9D,iBAGI;YAFQ,eAAU,GAAV,UAAU,CAAY;YACtB,aAAQ,GAAR,QAAQ,CAA0C;YAVtD,WAAM,GAAmB,IAAI,CAAC;YAC9B,aAAQ,GAAwB,IAAI,CAAC;YAoErC,WAAM,GAAG;gBACb,KAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,MAAM,CAAC,CAAC;YACnC,CAAC,CAAC;QA5DC,CAAC;QAEJ;;WAEG;QACH,yCAAO,GAAP;YACI,OAAO,eAAe,CAAC;QAC3B,CAAC;QAED;;;WAGG;QACH,4CAAU,GAAV,UAAW,MAAe;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC;QAED;;WAEG;QACH,yCAAO,GAAP;;YACI,MAAA,IAAI,CAAC,QAAQ,+CAAb,IAAI,CAAa,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED;;;WAGG;QACH,+CAAa,GAAb,UAAc,KAAkB;YAC5B,QAAQ,KAAK,CAAC,SAAS,EAAE;gBACrB;oBACI,IAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,YAAY,CAAC,CAAC;oBACrC,MAAM;gBAEV;oBACI,IAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,SAAS,CAAC,CAAC;oBAClC,MAAM;gBAEV;oBACI,IAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,qBAAqB,CAAC,CAAC;oBAC9C,MAAM;gBAEV;oBACI,IAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,WAAW,CAAC,CAAC;oBACpC,MAAM;aACb;QACL,CAAC;QAED;;WAEG;QACH,6CAAW,GAAX;YACI,IAAI,CAAC,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAMO,wCAAM,GAAd,UAAe,IAAgB;YAC3B,IACI,IAAI,CAAC,MAAM;gBACX,CAAC,IAAI,IAAI,uBAAU,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;gBACrE,IAAI,CAAC,QAAQ,EACf;gBACE,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAChC;QACL,CAAC;QACL,8BAAC;IAAD,CAAC,AApFD,IAoFC;IAED;;;;OAIG;IACH,SAAwB,yBAAyB,CAC7C,UAAsB,EACtB,QAAkD;QAElD,OAAO,IAAI,uBAAuB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IALD,4CAKC","sourcesContent":["import { PluginEventType } from 'roosterjs-editor-types';\nimport { UpdateMode } from '../type/UpdateMode';\nimport type UpdateContentPlugin from '../type/UpdateContentPlugin';\nimport type { IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * A plugin to help get HTML content from editor\n */\nclass UpdateContentPluginImpl implements UpdateContentPlugin {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Create a new instance of UpdateContentPlugin class\n     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n     * @param onUpdate A callback to be invoked when update happens\n     */\n    constructor(\n        private updateMode: UpdateMode,\n        private onUpdate: (html: string, mode: UpdateMode) => void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'UpdateContent';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                this.update(UpdateMode.OnInitialize);\n                break;\n\n            case PluginEventType.BeforeDispose:\n                this.update(UpdateMode.OnDispose);\n                break;\n\n            case PluginEventType.ContentChanged:\n                this.update(UpdateMode.OnContentChangedEvent);\n                break;\n\n            case PluginEventType.Input:\n                this.update(UpdateMode.OnUserInput);\n                break;\n        }\n    }\n\n    /**\n     * Trigger a force update. onUpdate callback will be invoked with HTML content of editor\n     */\n    forceUpdate() {\n        this.update(UpdateMode.Force);\n    }\n\n    private onBlur = () => {\n        this.update(UpdateMode.OnBlur);\n    };\n\n    private update(mode: UpdateMode) {\n        if (\n            this.editor &&\n            (mode == UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&\n            this.onUpdate\n        ) {\n            const content = this.editor.getContent();\n            this.onUpdate(content, mode);\n        }\n    }\n}\n\n/**\n * Create a new instance of UpdateContentPlugin class\n * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n * @param onUpdate A callback to be invoked when update happens\n */\nexport default function createUpdateContentPlugin(\n    updateMode: UpdateMode,\n    onUpdate: (html: string, mode: UpdateMode) => void\n): UpdateContentPlugin {\n    return new UpdateContentPluginImpl(updateMode, onUpdate);\n}\n"]}