{"version":3,"file":"createTableEditMenuProvider.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/contextMenu/menus/createTableEditMenuProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import createContextMenuProvider from '../utils/createContextMenuProvider';\nimport { applyCellShading, editTable } from 'roosterjs-editor-api';\nimport { renderColorPicker } from '../../colorPicker/component/renderColorPicker';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type ContextMenuItem from '../types/ContextMenuItem';\nimport type { EditorPlugin, IEditor, ModeIndependentColor } from 'roosterjs-editor-types';\nimport type { LocalizedStrings } from '../../common/type/LocalizedStrings';\nimport {\n    getColorPickerContainerClassName,\n    getColorPickerItemClassName,\n} from '../../colorPicker/utils/getClassNamesForColorPicker';\nimport type {\n    TableEditMenuItemStringKey,\n    TableEditInsertMenuItemStringKey,\n    TableEditDeleteMenuItemStringKey,\n    TableEditMergeMenuItemStringKey,\n    TableEditSplitMenuItemStringKey,\n    TableEditAlignMenuItemStringKey,\n    TableEditShadeMenuItemStringKey,\n    TableEditAlignTableMenuItemStringKey,\n} from '../types/ContextMenuItemStringKeys';\nimport {\n    BackgroundColorDropDownItems,\n    BackgroundColors,\n} from '../../colorPicker/utils/backgroundColors';\n\nconst TableEditOperationMap: Partial<Record<TableEditMenuItemStringKey, TableOperation>> = {\n    menuNameTableInsertAbove: TableOperation.InsertAbove,\n    menuNameTableInsertBelow: TableOperation.InsertBelow,\n    menuNameTableInsertLeft: TableOperation.InsertLeft,\n    menuNameTableInsertRight: TableOperation.InsertRight,\n    menuNameTableDeleteTable: TableOperation.DeleteTable,\n    menuNameTableDeleteColumn: TableOperation.DeleteColumn,\n    menuNameTableDeleteRow: TableOperation.DeleteRow,\n    menuNameTableMergeAbove: TableOperation.MergeAbove,\n    menuNameTableMergeBelow: TableOperation.MergeBelow,\n    menuNameTableMergeLeft: TableOperation.MergeLeft,\n    menuNameTableMergeRight: TableOperation.MergeRight,\n    menuNameTableMergeCells: TableOperation.MergeCells,\n    menuNameTableSplitHorizontally: TableOperation.SplitHorizontally,\n    menuNameTableSplitVertically: TableOperation.SplitVertically,\n    menuNameTableAlignLeft: TableOperation.AlignCellLeft,\n    menuNameTableAlignCenter: TableOperation.AlignCellCenter,\n    menuNameTableAlignRight: TableOperation.AlignCellRight,\n    menuNameTableAlignTop: TableOperation.AlignCellTop,\n    menuNameTableAlignMiddle: TableOperation.AlignCellMiddle,\n    menuNameTableAlignBottom: TableOperation.AlignCellBottom,\n    menuNameTableAlignTableLeft: TableOperation.AlignLeft,\n    menuNameTableAlignTableCenter: TableOperation.AlignCenter,\n    menuNameTableAlignTableRight: TableOperation.AlignRight,\n};\n\nconst ColorValues = {\n    ...BackgroundColors,\n    // Add this value to satisfy compiler\n    menuNameTableCellShade: <ModeIndependentColor>(<unknown>null),\n};\n\nfunction onClick(key: TableEditMenuItemStringKey, editor: IEditor) {\n    editor.focus();\n    const operation = TableEditOperationMap[key];\n    if (typeof operation === 'number') {\n        editTable(editor, operation);\n    }\n}\n\nconst TableEditInsertMenuItem: ContextMenuItem<TableEditInsertMenuItemStringKey> = {\n    key: 'menuNameTableInsert',\n    unlocalizedText: 'Insert',\n    subItems: {\n        menuNameTableInsertAbove: 'Insert above',\n        menuNameTableInsertBelow: 'Insert below',\n        menuNameTableInsertLeft: 'Insert left',\n        menuNameTableInsertRight: 'Insert right',\n    },\n    onClick,\n};\n\nconst TableEditDeleteMenuItem: ContextMenuItem<TableEditDeleteMenuItemStringKey> = {\n    key: 'menuNameTableDelete',\n    unlocalizedText: 'Delete',\n    subItems: {\n        menuNameTableDeleteColumn: 'Delete column',\n        menuNameTableDeleteRow: 'Delete row',\n        menuNameTableDeleteTable: 'Delete table',\n    },\n    onClick,\n};\n\nconst TableEditMergeMenuItem: ContextMenuItem<TableEditMergeMenuItemStringKey> = {\n    key: 'menuNameTableMerge',\n    unlocalizedText: 'Merge',\n    subItems: {\n        menuNameTableMergeAbove: 'Merge above',\n        menuNameTableMergeBelow: 'Merge below',\n        menuNameTableMergeLeft: 'Merge left',\n        menuNameTableMergeRight: 'Merge right',\n        '-': '-',\n        menuNameTableMergeCells: 'Merge selected cells',\n    },\n    onClick,\n};\n\nconst TableEditSplitMenuItem: ContextMenuItem<TableEditSplitMenuItemStringKey> = {\n    key: 'menuNameTableSplit',\n    unlocalizedText: 'Split',\n    subItems: {\n        menuNameTableSplitHorizontally: 'Split horizontally',\n        menuNameTableSplitVertically: 'Split vertically',\n    },\n    onClick,\n};\n\nconst TableEditAlignMenuItem: ContextMenuItem<TableEditAlignMenuItemStringKey> = {\n    key: 'menuNameTableAlign',\n    unlocalizedText: 'Align cell',\n    subItems: {\n        menuNameTableAlignLeft: 'Align left',\n        menuNameTableAlignCenter: 'Align center',\n        menuNameTableAlignRight: 'Align right',\n        '-': '-',\n        menuNameTableAlignTop: 'Align top',\n        menuNameTableAlignMiddle: 'Align middle',\n        menuNameTableAlignBottom: 'Align bottom',\n    },\n    onClick,\n};\n\nconst TableEditAlignTableMenuItem: ContextMenuItem<TableEditAlignTableMenuItemStringKey> = {\n    key: 'menuNameTableAlignTable',\n    unlocalizedText: 'Align table',\n    subItems: {\n        menuNameTableAlignTableLeft: 'Align left',\n        menuNameTableAlignTableCenter: 'Align center',\n        menuNameTableAlignTableRight: 'Align right',\n    },\n    onClick,\n};\n\nconst TableEditCellShadeMenuItem: ContextMenuItem<TableEditShadeMenuItemStringKey> = {\n    key: 'menuNameTableCellShade',\n    unlocalizedText: 'Shading',\n    subItems: BackgroundColorDropDownItems,\n    onClick: (key, editor) => {\n        applyCellShading(editor, ColorValues[key]);\n    },\n    itemRender: (item, click) => renderColorPicker(item, ColorValues, click),\n    itemClassName: getColorPickerItemClassName(),\n    commandBarSubMenuProperties: {\n        className: getColorPickerContainerClassName(),\n    },\n};\n\nfunction getEditingTable(editor: IEditor, node: Node) {\n    const td = editor.getElementAtCursor('TD,TH', node) as HTMLTableCellElement;\n    const table = td && (editor.getElementAtCursor('table', td) as HTMLTableElement);\n\n    return table?.isContentEditable ? { table, td } : null;\n}\n\n/**\n * Create a new instance of ContextMenuProvider to support table editing functionalities in context menu\n * @returns A new ContextMenuProvider\n */\nexport default function createTableEditMenuProvider(\n    strings?: LocalizedStrings<TableEditMenuItemStringKey>\n): EditorPlugin {\n    return createContextMenuProvider(\n        'tableEdit',\n        <ContextMenuItem<TableEditMenuItemStringKey>[]>[\n            TableEditInsertMenuItem,\n            TableEditDeleteMenuItem,\n            TableEditMergeMenuItem,\n            TableEditSplitMenuItem,\n            TableEditAlignMenuItem,\n            TableEditAlignTableMenuItem,\n            TableEditCellShadeMenuItem,\n        ],\n        strings,\n        (editor, node) => !!getEditingTable(editor, node)\n    );\n}\n"]}