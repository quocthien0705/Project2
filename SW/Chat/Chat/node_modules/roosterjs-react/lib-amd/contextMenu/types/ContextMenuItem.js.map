{"version":3,"file":"ContextMenuItem.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/contextMenu/types/ContextMenuItem.ts"],"names":[],"mappings":"","sourcesContent":["import type { IContextualMenuItem, IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';\nimport type { IIconProps } from '@fluentui/react/lib/Icon';\nimport type { IEditor } from 'roosterjs-editor-types';\nimport type { LocalizedStrings, UIUtilities } from '../../common/index';\n\n/**\n * Represent a context menu item\n */\nexport default interface ContextMenuItem<TString extends string, TContext = never> {\n    /**\n     * key of this button, needs to be unique\n     */\n    key: TString;\n\n    /**\n     * Text of the button. This text is not localized. To show a localized text, pass a dictionary to Ribbon component via RibbonProps.strings.\n     */\n    unlocalizedText: string;\n\n    /**\n     * Click event handler\n     * @param key Key of the menu item that is clicked\n     * @param editor The editor object that triggers this event\n     * @param targetNode The node that user is clicking onto\n     * @param strings The strings object used by getLocalizedString() function\n     * @param uiUtilities UI Utilities to help render additional react component from this click event\n     * @param context A context object that passed in from context menu provider, can be anything\n     */\n    onClick: (\n        key: TString,\n        editor: IEditor,\n        targetNode: Node,\n        strings: LocalizedStrings<TString> | undefined,\n        uiUtilities: UIUtilities,\n        context?: TContext\n    ) => void;\n\n    /**\n     * A callback function to check whether this menu item should show now\n     * @param editor The editor object that triggers this event\n     * @param targetNode The node that user is clicking onto\n     * @param context A context object that passed in from context menu provider, can be anything\n     */\n    shouldShow?: (editor: IEditor, targetNode: Node, context?: TContext) => boolean;\n\n    /**\n     * A callback function to verify which subitem ID should have a checkmark\n     * @param editor The editor object that triggers this event\n     * @param targetNode The node that user is clicking onto\n     * @returns ID to be shown as selected, null for none\n     */\n    getSelectedId?: (editor: IEditor, targetNode: Node) => TString | null;\n\n    /**\n     * A key-value map for sub menu items, key is the key of menu item, value is unlocalized string\n     * When click on a child item, onClick handler will be triggered with the key of the clicked child item passed in as the second parameter\n     */\n    subItems?: { [key in TString]?: string };\n\n    /**\n     * Custom render of drop down item\n     * @param item This menu item\n     * @param onClick click handler of this menu item\n     */\n    itemRender?: (\n        item: IContextualMenuItem,\n        onClick: (\n            e: React.MouseEvent<Element> | React.KeyboardEvent<Element>,\n            item: IContextualMenuItem\n        ) => void\n    ) => React.ReactNode;\n\n    /**\n     * CSS class name for drop down menu item\n     */\n    itemClassName?: string;\n\n    /**\n     * Icon props for the context menu item\n     */\n    iconProps?: IIconProps;\n\n    /**\n     * Use this property to pass in Fluent UI ContextMenu property directly. It will overwrite the values of other conflict properties\n     */\n    commandBarSubMenuProperties?: Partial<IContextualMenuProps>;\n}\n"]}