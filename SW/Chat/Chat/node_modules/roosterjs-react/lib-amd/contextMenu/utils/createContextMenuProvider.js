define(["require", "exports", "tslib", "../../common/utils/getLocalizedString", "roosterjs-editor-dom"], function (require, exports, tslib_1, getLocalizedString_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A plugin of editor to provide context menu items
     */
    var ContextMenuProviderImpl = /** @class */ (function () {
        /**
         * Create a new instance of ContextMenuProviderImpl class
         * @param menuName Name of this group of menus
         * @param items Menu items that will be show
         * @param strings Localized strings of these menu items
         * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items
         */
        function ContextMenuProviderImpl(menuName, items, strings, shouldAddMenuItems, context) {
            this.menuName = menuName;
            this.items = items;
            this.strings = strings;
            this.shouldAddMenuItems = shouldAddMenuItems;
            this.context = context;
            this.editor = null;
            this.targetNode = null;
            this.uiUtilities = null;
        }
        /**
         * Get a friendly name of  this plugin
         */
        ContextMenuProviderImpl.prototype.getName = function () {
            return this.menuName;
        };
        /**
         * Initialize this plugin. This should only be called from Editor
         * @param editor Editor instance
         */
        ContextMenuProviderImpl.prototype.initialize = function (editor) {
            this.editor = editor;
        };
        /**
         * Dispose this plugin
         */
        ContextMenuProviderImpl.prototype.dispose = function () {
            this.editor = null;
        };
        ContextMenuProviderImpl.prototype.getContextMenuItems = function (node) {
            var _this = this;
            var _a;
            this.targetNode = node;
            return this.editor && ((_a = this.shouldAddMenuItems) === null || _a === void 0 ? void 0 : _a.call(this, this.editor, node))
                ? this.items
                    .filter(function (item) { return !item.shouldShow || item.shouldShow(_this.editor, node, _this.context); })
                    .map(function (item) { return _this.convertMenuItems(item, node); })
                : [];
        };
        ContextMenuProviderImpl.prototype.setUIUtilities = function (uiUtilities) {
            this.uiUtilities = uiUtilities;
        };
        ContextMenuProviderImpl.prototype.convertMenuItems = function (item, node) {
            var _this = this;
            var _a;
            var selectedId = (_a = item.getSelectedId) === null || _a === void 0 ? void 0 : _a.call(item, this.editor, node);
            return {
                key: item.key,
                data: item,
                text: (0, getLocalizedString_1.default)(this.strings, item.key, item.unlocalizedText),
                ariaLabel: (0, getLocalizedString_1.default)(this.strings, item.key, item.unlocalizedText),
                onClick: function () { return _this.onClick(item, item.key); },
                iconProps: item.iconProps,
                subMenuProps: item.subItems
                    ? (0, tslib_1.__assign)({ onItemClick: function (_, menuItem) { return menuItem && _this.onClick(item, menuItem.data); }, items: (0, roosterjs_editor_dom_1.getObjectKeys)(item.subItems).map(function (key) {
                            var _a;
                            return ({
                                key: key,
                                data: key,
                                text: (0, getLocalizedString_1.default)(_this.strings, key, (_a = item.subItems) === null || _a === void 0 ? void 0 : _a[key]),
                                className: item.itemClassName,
                                onRender: item.itemRender
                                    ? function (subItem) { var _a; return (_a = item.itemRender) === null || _a === void 0 ? void 0 : _a.call(item, subItem, function () { return _this.onClick(item, key); }); }
                                    : undefined,
                                iconProps: key == selectedId
                                    ? {
                                        iconName: 'Checkmark',
                                    }
                                    : undefined,
                            });
                        }) }, (item.commandBarSubMenuProperties || {})) : undefined,
            };
        };
        ContextMenuProviderImpl.prototype.onClick = function (item, key) {
            if (this.editor && this.targetNode && this.uiUtilities) {
                item.onClick(key, this.editor, this.targetNode, this.strings, this.uiUtilities, this.context);
            }
        };
        return ContextMenuProviderImpl;
    }());
    /**
     * Create a new instance of ContextMenuProviderImpl class
     * @param menuName Name of this group of menus
     * @param items Menu items that will be show
     * @param strings Localized strings of these menu items
     * @param shouldAddMenuItems A general checker to decide if we should add this group of menu items
     */
    function createContextMenuProvider(menuName, items, strings, shouldAddMenuItems, context) {
        return new ContextMenuProviderImpl(menuName, items, strings, shouldAddMenuItems, context);
    }
    exports.default = createContextMenuProvider;
});
//# sourceMappingURL=createContextMenuProvider.js.map