import { __assign } from "tslib";
import * as React from 'react';
import { createUIUtilities } from '../../common/index';
import { divProperties, getNativeProps } from '@fluentui/react/lib/Utilities';
import { Editor } from 'roosterjs-editor-core';
import { useTheme } from '@fluentui/react/lib/Theme';
/**
 * Main component of react wrapper for roosterjs
 * @param props Properties of this component
 * @returns The react component
 */
export default function Rooster(props) {
    var editorDiv = React.useRef(null);
    var editor = React.useRef(null);
    var theme = useTheme();
    var focusOnInit = props.focusOnInit, editorCreator = props.editorCreator, zoomScale = props.zoomScale, inDarkMode = props.inDarkMode, plugins = props.plugins;
    React.useEffect(function () {
        if (plugins && editorDiv.current) {
            var uiUtilities_1 = createUIUtilities(editorDiv.current, theme);
            plugins.forEach(function (plugin) {
                if (isReactEditorPlugin(plugin)) {
                    plugin.setUIUtilities(uiUtilities_1);
                }
            });
        }
    }, [theme, editorCreator]);
    React.useEffect(function () {
        var _a;
        if (editorDiv.current) {
            editor.current = (editorCreator || defaultEditorCreator)(editorDiv.current, props);
        }
        if (focusOnInit) {
            (_a = editor.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        return function () {
            if (editor.current) {
                editor.current.dispose();
                editor.current = null;
            }
        };
    }, [editorCreator]);
    React.useEffect(function () {
        var _a;
        (_a = editor.current) === null || _a === void 0 ? void 0 : _a.setDarkModeState(!!inDarkMode);
    }, [inDarkMode]);
    React.useEffect(function () {
        var _a;
        if (zoomScale) {
            (_a = editor.current) === null || _a === void 0 ? void 0 : _a.setZoomScale(zoomScale);
        }
    }, [zoomScale]);
    var divProps = getNativeProps(props, divProperties);
    return React.createElement("div", __assign({ ref: editorDiv, tabIndex: 0 }, (divProps || {})));
}
function defaultEditorCreator(div, options) {
    return new Editor(div, options);
}
function isReactEditorPlugin(plugin) {
    var _a;
    return !!((_a = plugin) === null || _a === void 0 ? void 0 : _a.setUIUtilities);
}
//# sourceMappingURL=Rooster.js.map