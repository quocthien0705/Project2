{"version":3,"file":"createUpdateContentPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/rooster/plugin/createUpdateContentPlugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAIhD;;GAEG;AACH;IAII;;;;OAIG;IACH,iCACY,UAAsB,EACtB,QAAkD;QAF9D,iBAGI;QAFQ,eAAU,GAAV,UAAU,CAAY;QACtB,aAAQ,GAAR,QAAQ,CAA0C;QAVtD,WAAM,GAAmB,IAAI,CAAC;QAC9B,aAAQ,GAAwB,IAAI,CAAC;QAoErC,WAAM,GAAG;YACb,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC;IA5DC,CAAC;IAEJ;;OAEG;IACH,yCAAO,GAAP;QACI,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,4CAAU,GAAV,UAAW,MAAe;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,yCAAO,GAAP;;QACI,MAAA,IAAI,CAAC,QAAQ,+CAAb,IAAI,CAAa,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,+CAAa,GAAb,UAAc,KAAkB;QAC5B,QAAQ,KAAK,CAAC,SAAS,EAAE;YACrB;gBACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBACrC,MAAM;YAEV;gBACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAClC,MAAM;YAEV;gBACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;gBAC9C,MAAM;YAEV;gBACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBACpC,MAAM;SACb;IACL,CAAC;IAED;;OAEG;IACH,6CAAW,GAAX;QACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAMO,wCAAM,GAAd,UAAe,IAAgB;QAC3B,IACI,IAAI,CAAC,MAAM;YACX,CAAC,IAAI,IAAI,UAAU,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;YACrE,IAAI,CAAC,QAAQ,EACf;YACE,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SAChC;IACL,CAAC;IACL,8BAAC;AAAD,CAAC,AApFD,IAoFC;AAED;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,yBAAyB,CAC7C,UAAsB,EACtB,QAAkD;IAElD,OAAO,IAAI,uBAAuB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["import { PluginEventType } from 'roosterjs-editor-types';\nimport { UpdateMode } from '../type/UpdateMode';\nimport type UpdateContentPlugin from '../type/UpdateContentPlugin';\nimport type { IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * A plugin to help get HTML content from editor\n */\nclass UpdateContentPluginImpl implements UpdateContentPlugin {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Create a new instance of UpdateContentPlugin class\n     * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n     * @param onUpdate A callback to be invoked when update happens\n     */\n    constructor(\n        private updateMode: UpdateMode,\n        private onUpdate: (html: string, mode: UpdateMode) => void\n    ) {}\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'UpdateContent';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('blur', this.onBlur);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.EditorReady:\n                this.update(UpdateMode.OnInitialize);\n                break;\n\n            case PluginEventType.BeforeDispose:\n                this.update(UpdateMode.OnDispose);\n                break;\n\n            case PluginEventType.ContentChanged:\n                this.update(UpdateMode.OnContentChangedEvent);\n                break;\n\n            case PluginEventType.Input:\n                this.update(UpdateMode.OnUserInput);\n                break;\n        }\n    }\n\n    /**\n     * Trigger a force update. onUpdate callback will be invoked with HTML content of editor\n     */\n    forceUpdate() {\n        this.update(UpdateMode.Force);\n    }\n\n    private onBlur = () => {\n        this.update(UpdateMode.OnBlur);\n    };\n\n    private update(mode: UpdateMode) {\n        if (\n            this.editor &&\n            (mode == UpdateMode.Force || ((this.updateMode || 0) & mode) == mode) &&\n            this.onUpdate\n        ) {\n            const content = this.editor.getContent();\n            this.onUpdate(content, mode);\n        }\n    }\n}\n\n/**\n * Create a new instance of UpdateContentPlugin class\n * @param updateMode Mode of automatic update. It can be a combination of multiple UpdateMode values\n * @param onUpdate A callback to be invoked when update happens\n */\nexport default function createUpdateContentPlugin(\n    updateMode: UpdateMode,\n    onUpdate: (html: string, mode: UpdateMode) => void\n): UpdateContentPlugin {\n    return new UpdateContentPluginImpl(updateMode, onUpdate);\n}\n"]}