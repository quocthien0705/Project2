{"version":3,"file":"EmojiPane.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/emoji/components/EmojiPane.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport EmojiIcon from './EmojiIcon';\nimport EmojiNavBar from './EmojiNavBar';\nimport EmojiStatusBar from './EmojiStatusBar';\nimport { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';\nimport { CommonEmojis, EmojiFamilyKeys, EmojiList, MoreEmoji } from '../utils/emojiList';\nimport { css, KeyCodes, memoizeFunction } from '@fluentui/react/lib/Utilities';\nimport { FocusZone } from '@fluentui/react/lib/FocusZone';\nimport { getLocalizedString } from '../../common/index';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { searchEmojis } from '../utils/searchEmojis';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { useTheme } from '@fluentui/react/lib/Theme';\nimport type { EmojiIconProps } from './EmojiIcon';\nimport type { EmojiNavBarProps } from './EmojiNavBar';\nimport type { EmojiStatusBarProps } from './EmojiStatusBar';\nimport type { ICalloutProps } from '@fluentui/react/lib/Callout';\nimport type { Emoji } from '../type/Emoji';\nimport type { EmojiStringKeys } from '../type/EmojiStringKeys';\nimport type { LocalizedStrings } from '../../common/index';\nimport type { ITextField } from '@fluentui/react/lib/TextField';\nimport type { Theme } from '@fluentui/react/lib/Theme';\n\n// \"When a div contains an element that is bigger (either taller or wider) than the parent and has the property\n// overflow-x or overflow-y set to any value, then it can receive the focus.\"\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1069739\nconst TabIndexForFirefoxBug = -1;\nconst EmojisPerRow = 7;\nconst EmojiVisibleRowCount = 5;\nconst EmojiVisibleWithoutNavBarRowCount = 6;\nconst EmojiHeightPx = 40;\nconst VerticalDirectionKeys: number[] = [KeyCodes.up, KeyCodes.down];\nconst DirectionKeys: number[] = [\n    KeyCodes.left,\n    KeyCodes.right,\n    KeyCodes.up,\n    KeyCodes.down,\n    KeyCodes.home,\n    KeyCodes.end,\n];\n\nconst TooltipCalloutProps: ICalloutProps = {\n    isBeakVisible: true,\n    beakWidth: 16,\n    gapSpace: 0,\n    setInitialFocus: true,\n    doNotLayer: false,\n    directionalHint: DirectionalHint.bottomCenter,\n};\n\n/**\n * @internal\n * Types of emoji pane size\n */\n// eslint-disable-next-line etc/no-const-enum\nexport const enum EmojiPaneMode {\n    Quick,\n    Partial,\n    Full,\n}\n\n/**\n * @internal\n * Types of emoji Navigation direction\n */\n// eslint-disable-next-line etc/no-const-enum\nexport const enum EmojiPaneNavigateDirection {\n    Horizontal,\n    Vertical,\n}\n\n/**\n * @internal\n * Emoji Pane data\n */\nexport interface EmojiPaneState {\n    index: number;\n    mode: EmojiPaneMode;\n    currentEmojiList: Emoji[];\n    currentFamily: EmojiFamilyKeys;\n    search: string;\n    searchInBox: string;\n}\n\n/**\n * @internal\n * Emoji Pane customizable data\n */\nexport interface EmojiPaneProps {\n    searchDisabled?: boolean;\n    hideStatusBar?: boolean;\n    navBarProps?: Partial<EmojiNavBarProps>;\n    statusBarProps?: Partial<EmojiStatusBarProps>;\n    emojiIconProps?: Partial<EmojiIconProps>;\n    searchBoxString?: LocalizedStrings<EmojiStringKeys>;\n    onSelect: (emoji: Emoji, wordBeforeCursor: string) => void;\n    baseId: number;\n    strings: Record<string, string>;\n}\n\nconst AriaAttributes = {\n    ActiveDescendant: 'aria-activedescendant',\n    AutoComplete: 'aria-autocomplete',\n    Controls: 'aria-controls',\n    Expanded: 'aria-expanded',\n    HasPopup: 'aria-haspopup',\n    Owns: 'aria-owns',\n    Pressed: 'aria-pressed',\n};\n\n/**\n * @internal\n * Emoji pane component functions\n */\nexport interface EmojiPane {\n    navigate: (change: number, direction?: EmojiPaneNavigateDirection) => number;\n    getEmojiElementIdByIndex: (index: number) => string | null;\n    getSelectedEmoji: () => Emoji;\n    showFullPicker: (fullSearchText: string) => void;\n    setSearch: (value: string) => void;\n    normalizeSearchText: (text: string, colonIncluded: boolean) => string;\n    getSearchResult: (searchValue: string, mode: EmojiPaneMode) => Emoji[];\n    getEmojiIconId: (emoji: Emoji) => string;\n}\n\nconst EmojiPane = React.forwardRef(function EmojiPaneFunc(\n    props: EmojiPaneProps,\n    ref: React.Ref<EmojiPane>\n) {\n    let searchBox: ITextField;\n    let emojiBody: HTMLElement;\n    let input: HTMLInputElement;\n\n    const [index, setIndex] = React.useState<number>(0);\n    const [mode, setMode] = React.useState<EmojiPaneMode>(EmojiPaneMode.Quick);\n    const [currentEmojiList, setCurrentEmojiList] = React.useState<Emoji[]>(CommonEmojis);\n    const [currentFamily, setCurrentFamily] = React.useState<EmojiFamilyKeys>(\n        EmojiFamilyKeys.People\n    );\n    const [search, setSearchString] = React.useState<string>(':');\n    const [searchInBox, setSearchInBox] = React.useState<string>('');\n\n    const theme = useTheme();\n    const classNames = getEmojiPaneClassName(theme);\n    const listId = `EmojiPane${props.baseId}`;\n\n    const navigate = React.useCallback(\n        (change: number, direction?: EmojiPaneNavigateDirection): number => {\n            if (!direction) {\n                direction = EmojiPaneNavigateDirection.Horizontal;\n            }\n\n            if (direction === EmojiPaneNavigateDirection.Vertical && index !== -1) {\n                change *= EmojisPerRow;\n            }\n\n            const newIndex = index + change;\n            const length = currentEmojiList.length;\n            if (newIndex >= 0 && newIndex < length) {\n                setIndex(newIndex);\n                return newIndex;\n            }\n\n            return -1;\n        },\n        [index]\n    );\n\n    const normalizeSearchText = React.useCallback(\n        (text: string, colonIncluded: boolean): string => {\n            if (text == null) {\n                return '';\n            }\n\n            if (colonIncluded) {\n                text = text.substr(1);\n            }\n            return text.trim();\n        },\n        []\n    );\n\n    const getEmojiElementIdByIndex = React.useCallback(\n        (index: number): string | null => {\n            const emoji = currentEmojiList[index];\n            if (emoji) {\n                return getEmojiIconId(emoji);\n            }\n\n            return null;\n        },\n        [currentEmojiList]\n    );\n\n    const getSelectedEmoji = React.useCallback((): Emoji => {\n        return currentEmojiList[index];\n    }, [currentEmojiList, index]);\n\n    const showFullPicker = React.useCallback(\n        (fullSearchText: string): void => {\n            const normalizedSearchValue = normalizeSearchText(fullSearchText, true);\n            const newMode =\n                normalizedSearchValue.length === 0 ? EmojiPaneMode.Full : EmojiPaneMode.Partial;\n            setIndex(newMode === EmojiPaneMode.Full ? -1 : 0);\n            setMode(newMode);\n            setCurrentEmojiList(getSearchResult(normalizedSearchValue, newMode));\n            setSearchString(fullSearchText);\n            setSearchInBox(normalizedSearchValue);\n        },\n        [mode]\n    );\n\n    const setSearch = React.useCallback(\n        (value: string): void => {\n            const normalizedSearchValue = normalizeSearchText(value, false);\n            setIndex(0);\n            setCurrentEmojiList(getSearchResult(normalizedSearchValue, mode));\n            setSearchString(value);\n        },\n        [index, search, currentEmojiList]\n    );\n\n    const getSearchResult = React.useCallback(\n        (searchValue: string, mode: EmojiPaneMode): Emoji[] => {\n            const isQuickMode = mode === EmojiPaneMode.Quick;\n            if (!searchValue) {\n                return isQuickMode ? currentEmojiList : EmojiList[currentFamily];\n            }\n\n            const emojiList = searchEmojis(searchValue, props.strings);\n            return isQuickMode ? emojiList.slice(0, 5).concat([MoreEmoji]) : emojiList;\n        },\n        [mode, currentFamily, currentEmojiList]\n    );\n\n    const getEmojiIconId = React.useCallback(\n        (emoji: Emoji) => (emoji ? `${listId}-${emoji.key}` : ''),\n        [listId]\n    );\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            navigate,\n            getEmojiElementIdByIndex,\n            showFullPicker,\n            getSearchResult,\n            setSearch,\n            getSelectedEmoji,\n            normalizeSearchText,\n            getEmojiIconId,\n        }),\n        [\n            navigate,\n            getEmojiElementIdByIndex,\n            showFullPicker,\n            getSearchResult,\n            setSearch,\n            getEmojiIconId,\n            getSelectedEmoji,\n            normalizeSearchText,\n        ]\n    );\n\n    const renderQuickPicker = (\n        props: EmojiPaneProps,\n        index: number,\n        currentEmojiList: Emoji[]\n    ): JSX.Element => {\n        const { strings } = props;\n        const selectedEmoji = getSelectedEmoji();\n        const target = selectedEmoji ? `#${getEmojiIconId(selectedEmoji)}` : undefined;\n        const content = selectedEmoji?.description ? strings[selectedEmoji.description] : undefined;\n        const emojiList = renderCurrentEmojiIcons(index, currentEmojiList);\n        // note: we're using a callout since TooltipHost does not support manual trigger, and we need to show the tooltip since quick picker is shown\n        // as an autocomplete menu (false focus based on transferring navigation keyboard event)\n        return (\n            <div id={listId} role=\"listbox\">\n                {emojiList}\n                <div\n                    id={listId}\n                    role=\"listbox\"\n                    className={css(classNames.quickPicker, classNames.roosterEmojiPane)}>\n                    <Callout\n                        {...TooltipCalloutProps}\n                        role=\"tooltip\"\n                        target={target}\n                        hidden={!content || !emojiList}\n                        className={classNames.tooltip}>\n                        {content}\n                    </Callout>\n                </div>\n            </div>\n        );\n    };\n\n    const renderFullPicker = (\n        props: EmojiPaneProps,\n        index: number,\n        searchInBox: string,\n        currentFamily: EmojiFamilyKeys,\n        currentEmojiList: Emoji[]\n    ): JSX.Element => {\n        const { searchDisabled, searchBoxString } = props;\n        const emojiId = getEmojiIconId(getSelectedEmoji());\n        const autoCompleteAttributes = {\n            [AriaAttributes.AutoComplete]: 'list',\n            [AriaAttributes.Expanded]: 'true',\n            [AriaAttributes.HasPopup]: 'listbox',\n            [AriaAttributes.Owns]: listId,\n        };\n        if (emojiId) {\n            autoCompleteAttributes[AriaAttributes.ActiveDescendant] = emojiId;\n        }\n\n        return (\n            <div className={classNames.roosterEmojiPane}>\n                {!searchDisabled && (\n                    <TextField\n                        role=\"combobox\"\n                        componentRef={ref => searchRefCallback(ref)}\n                        value={searchInBox}\n                        onChange={onSearchChange}\n                        inputClassName={classNames.emojiTextInput}\n                        onKeyPress={onSearchKeyPress}\n                        onKeyDown={onSearchKeyDown}\n                        onFocus={onSearchFocus}\n                        placeholder={getLocalizedString(\n                            searchBoxString,\n                            'emojiSearchPlaceholder',\n                            'Search...'\n                        )}\n                        ariaLabel={getLocalizedString(\n                            searchBoxString,\n                            'emojiSearchInputAriaLabel',\n                            'Search...'\n                        )}\n                        {...autoCompleteAttributes}\n                    />\n                )}\n                {mode === EmojiPaneMode.Full\n                    ? renderFullList(props, index, currentFamily, currentEmojiList)\n                    : renderPartialList(props, index, currentEmojiList)}\n            </div>\n        );\n    };\n\n    const onSearchFocus = (e: React.FocusEvent<HTMLInputElement>): void => {\n        input = e.target as HTMLInputElement;\n    };\n\n    const onSearchKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n        if (!e || e.which !== KeyCodes.enter) {\n            return;\n        }\n\n        if (index >= 0 && currentEmojiList && currentEmojiList.length > 0) {\n            onSelect(e, currentEmojiList[index]);\n        }\n    };\n\n    const onSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n        if (!e || DirectionKeys.indexOf(e.which) < 0) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.which === KeyCodes.home) {\n            setIndex(0);\n            emojiBody.scrollTop = 0;\n            return;\n        }\n        if (e.which === KeyCodes.end) {\n            setIndex(currentEmojiList.length - 1);\n            emojiBody.scrollTop = emojiBody.scrollHeight; // scrollHeight will be larger than max\n            return;\n        }\n\n        const direction =\n            VerticalDirectionKeys.indexOf(e.which) < 0\n                ? EmojiPaneNavigateDirection.Horizontal\n                : EmojiPaneNavigateDirection.Vertical;\n        const newIndex = navigate(\n            e.which === KeyCodes.left || e.which === KeyCodes.up ? -1 : 1,\n            direction\n        );\n        if (newIndex > -1) {\n            const visibleRowCount =\n                mode === EmojiPaneMode.Full\n                    ? EmojiVisibleRowCount\n                    : EmojiVisibleWithoutNavBarRowCount;\n            const currentRow = Math.floor(newIndex / EmojisPerRow);\n            const visibleTop = emojiBody.scrollTop;\n            const visibleBottom = visibleTop + visibleRowCount * EmojiHeightPx;\n            const currentRowTop = currentRow * EmojiHeightPx;\n            const currentRowBottom = currentRowTop + EmojiHeightPx;\n            if (visibleTop <= currentRowTop && visibleBottom >= currentRowBottom) {\n                return; // row is visible, so exit\n            }\n\n            emojiBody.scrollTop = currentRow * EmojiHeightPx;\n        }\n    };\n\n    const renderCurrentEmojiIcons = (index: number, currentEmojiList: Emoji[]): JSX.Element[] => {\n        const { strings } = props;\n        return currentEmojiList.map((emoji, emojiIndex) => (\n            <EmojiIcon\n                strings={strings}\n                id={getEmojiIconId(emoji)}\n                key={emoji.key}\n                onMouseOver={() => setIndex(emojiIndex)}\n                onFocus={() => setIndex(emojiIndex)}\n                emoji={emoji}\n                classNames={classNames}\n                isSelected={index === emojiIndex}\n                onClick={e => onSelect(e, emoji)}\n                aria-posinset={index + 1}\n                aria-setsize={currentEmojiList.length}\n            />\n        ));\n    };\n\n    const renderPartialList = (\n        props: EmojiPaneProps,\n        index: number,\n        currentEmojiList: Emoji[]\n    ): JSX.Element => {\n        const { strings, hideStatusBar, statusBarProps } = props;\n        const hasResult = currentEmojiList && currentEmojiList.length > 0;\n\n        return (\n            <div>\n                <div\n                    className={classNames.partialList}\n                    data-is-scrollable={true}\n                    tabIndex={TabIndexForFirefoxBug}\n                    ref={onEmojiBodyRef}>\n                    <FocusZone\n                        id={listId}\n                        role=\"listbox\"\n                        className={classNames.fullListContent}\n                        ref={focusZoneRefCallback}>\n                        {renderCurrentEmojiIcons(index, currentEmojiList)}\n                    </FocusZone>\n                </div>\n                {!hideStatusBar && (\n                    <EmojiStatusBar\n                        classNames={classNames}\n                        strings={strings}\n                        {...statusBarProps}\n                        hasResult={hasResult}\n                        emoji={getSelectedEmoji()}\n                    />\n                )}\n            </div>\n        );\n    };\n\n    const renderFullList = (\n        props: EmojiPaneProps,\n        index: number,\n        currentFamily: EmojiFamilyKeys,\n        currentEmojiList: Emoji[]\n    ): JSX.Element => {\n        const { strings, hideStatusBar, navBarProps, statusBarProps } = props;\n\n        const hasResult = currentEmojiList && currentEmojiList.length > 0;\n\n        return (\n            <div className={classNames.fullList}>\n                <div\n                    className={classNames.fullListBody}\n                    data-is-scrollable={true}\n                    tabIndex={TabIndexForFirefoxBug}\n                    ref={onEmojiBodyRef}>\n                    <EmojiNavBar\n                        strings={strings}\n                        {...navBarProps}\n                        onClick={pivotClick}\n                        currentSelected={currentFamily}\n                        getTabId={getTabId}\n                        classNames={classNames}\n                    />\n                    <div role=\"tabpanel\" aria-labelledby={getTabId(currentFamily)}>\n                        <div>\n                            <FocusZone\n                                id={listId}\n                                role=\"listbox\"\n                                className={classNames.fullListContent}\n                                ref={focusZoneRefCallback}>\n                                {renderCurrentEmojiIcons(index, currentEmojiList)}\n                            </FocusZone>\n                        </div>\n                    </div>\n                </div>\n\n                {!hideStatusBar && (\n                    <EmojiStatusBar\n                        classNames={classNames}\n                        strings={strings}\n                        {...statusBarProps}\n                        hasResult={hasResult}\n                        emoji={getSelectedEmoji()}\n                    />\n                )}\n            </div>\n        );\n    };\n\n    const onEmojiBodyRef = (ref: HTMLDivElement) => {\n        emojiBody = ref;\n    };\n\n    const pivotClick = (selected: string): void => {\n        const currentFamily = selected as EmojiFamilyKeys;\n        setCurrentEmojiList(EmojiList[currentFamily]);\n        setCurrentFamily(currentFamily);\n    };\n\n    const getTabId = (itemKey: EmojiFamilyKeys): string => {\n        return `family_${itemKey}_${props.baseId}`;\n    };\n\n    const searchRefCallback = (ref: ITextField | null): void => {\n        if (ref) {\n            searchBox = ref;\n            if (searchBox?.value) {\n                searchBox.focus();\n                searchBox.setSelectionStart(searchBox.value.length);\n            }\n        }\n    };\n\n    const focusZoneRefCallback = (ref: FocusZone): void => {\n        if (props.searchDisabled && ref) {\n            ref.focus();\n        }\n\n        if (input) {\n            // make sure to announce the active descending after the focus zone containing the emojis is ready\n            input.removeAttribute(AriaAttributes.ActiveDescendant);\n            const emojiId = getEmojiIconId(getSelectedEmoji());\n            // we need to delay so NVDA will announce the first selection\n            if (emojiId) {\n                setTimeout(() => input.setAttribute(AriaAttributes.ActiveDescendant, emojiId), 0);\n            }\n        }\n    };\n\n    const onSearchChange = (_: any, newValue?: string): void => {\n        if (typeof newValue === 'string') {\n            const normalizedSearchValue = normalizeSearchText(newValue, false);\n            const newMode =\n                normalizedSearchValue.length === 0 ? EmojiPaneMode.Full : EmojiPaneMode.Partial;\n            setIndex(newMode === EmojiPaneMode.Full ? -1 : 0);\n            setCurrentEmojiList(getSearchResult(normalizedSearchValue, mode));\n            setSearchInBox(newValue);\n            setMode(newMode);\n        }\n    };\n\n    const onSelect = (\n        e: React.MouseEvent<EventTarget> | React.KeyboardEvent<HTMLInputElement>,\n        emoji: Emoji\n    ): void => {\n        e.stopPropagation();\n        e.preventDefault();\n        if (props.onSelect) {\n            props.onSelect(emoji, search);\n        }\n    };\n\n    const renderPane = (\n        props: EmojiPaneProps,\n        index: number,\n        searchInBox: string,\n        currentFamily: EmojiFamilyKeys,\n        currentEmojiList: Emoji[]\n    ) => {\n        return mode === EmojiPaneMode.Quick\n            ? renderQuickPicker(props, index, currentEmojiList)\n            : renderFullPicker(props, index, searchInBox, currentFamily, currentEmojiList);\n    };\n\n    return <>{renderPane(props, index, searchInBox, currentFamily, currentEmojiList)}</>;\n});\n\n/**\n * @internal\n * Emoji pane component\n */\nexport function showEmojiPane(\n    onSelect: (emoji: Emoji, wordBeforeCursor: string) => void,\n    strings: Record<string, string>,\n    paneRef: React.RefObject<EmojiPane>,\n    baseId: number,\n    searchBoxString?: LocalizedStrings<EmojiStringKeys>\n) {\n    return (\n        <EmojiPane\n            ref={paneRef}\n            baseId={baseId}\n            searchBoxString={searchBoxString}\n            strings={strings}\n            onSelect={onSelect}></EmojiPane>\n    );\n}\n\nconst calcMaxHeight = () => {\n    const buttonHeight = 40;\n    const rowsOfIcons = 6; // including family bar if shown\n    const bottomPaddingForContent = 5;\n    const maxHeightForContent = rowsOfIcons * buttonHeight + bottomPaddingForContent;\n    return maxHeightForContent.toString() + 'px';\n};\n\nconst calcPaneWidth = () => {\n    const buttonWidth = 40;\n    const pivotItemCount = 7;\n    const paneHorizontalPadding = 1;\n    const paneWidth = buttonWidth * pivotItemCount + 2 * paneHorizontalPadding;\n    return paneWidth.toString() + 'px';\n};\n\nconst getEmojiPaneClassName = memoizeFunction((theme: Theme) => {\n    const palette = theme.palette;\n    return mergeStyleSets({\n        quickPicker: {\n            overflowY: 'hidden',\n            ':after': {\n                content: '',\n                position: 'absolute',\n                left: '0px',\n                top: '0px',\n                bottom: '0px',\n                right: '0px',\n                zIndex: 1,\n                borderWidth: '1px',\n                borderStyle: 'solid',\n                borderColor: 'rgb(255, 255, 255)',\n                borderImage: 'initial',\n                outline: 'rgb(102, 102, 102) solid 1px',\n            },\n        },\n\n        tooltip: {\n            padding: '8px',\n        },\n\n        emojiTextInput: {\n            padding: '6px',\n        },\n\n        partialList: {\n            maxHeight: calcMaxHeight(),\n            overflow: 'hidden',\n            overflowY: 'scroll',\n        },\n\n        fullListContent: {\n            width: calcPaneWidth(),\n        },\n\n        fullListBody: {\n            maxHeight: calcMaxHeight(),\n            overflow: 'hidden',\n            overflowY: 'scroll',\n            height: calcMaxHeight(),\n        },\n\n        fullList: {\n            position: 'relative',\n        },\n\n        roosterEmojiPane: {\n            padding: '1px',\n            background: palette.white,\n        },\n\n        emoji: {\n            fontSize: '18px',\n            width: '40px',\n            height: '40px',\n            border: '0',\n            position: 'relative',\n            background: palette.white,\n            transition: 'backgorund 0.5s ease-in-out',\n        },\n\n        emojiSelected: {\n            background: palette.neutralLight,\n        },\n\n        navBar: {\n            top: '-1px',\n            zIndex: 10,\n            position: 'sticky',\n        },\n\n        navBarTooltip: {\n            display: 'inline-block',\n        },\n\n        navBarButton: {\n            height: '40px',\n            width: '40px',\n            border: '0',\n            borderBottom: 'solid 1px',\n            padding: 0,\n            marginBottom: 0,\n            display: 'inline-block',\n            color: palette.themeDark,\n            background: palette.white,\n            '&:hover': {\n                cursor: 'default',\n            },\n        },\n\n        selected: {\n            borderBottom: '2px solid',\n            borderBottomColor: palette.themeDark,\n        },\n\n        statusBar: {\n            borderTop: 'solid 1px',\n            height: '50px',\n            overflow: 'hidden',\n            position: 'relative',\n            background: palette.white,\n        },\n\n        statusBarIcon: {\n            padding: '4px',\n            fontSize: '25px',\n            display: 'inline-block',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            lineHeight: '40px',\n        },\n\n        statusBarDetailsContainer: {\n            padding: '0 4px',\n            lineHeight: '50px',\n            position: 'absolute',\n            display: 'inline-block',\n            left: '40px',\n            right: '0',\n            top: '0',\n        },\n\n        statusBarDetails: {\n            fontWeight: 'bold',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n        },\n\n        statusBarNoResultDetailsContainer: {\n            lineHeight: '50px',\n            position: 'absolute',\n            display: 'inline-block',\n            top: '0',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            left: '0',\n            padding: '0 8px',\n        },\n    });\n});\n"]}