{"version":3,"file":"createUIUtilities.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/common/utils/createUIUtilities.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,QAAQ,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAIpE;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,iBAAiB,CACrC,SAAyB,EACzB,KAAmB;IAEnB,OAAO;QACH,eAAe,EAAE,UAAA,OAAO;YACpB,IAAM,GAAG,GAAG,SAAS,CAAC,aAAa,CAAC;YACpC,IAAM,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAE1B,QAAQ,CAAC,MAAM,CACX,oBAAC,cAAc,IAAC,MAAM,EAAE,GAAG,CAAC,WAAY;gBACpC,oBAAC,aAAa,IAAC,KAAK,EAAE,KAAK,IAAG,OAAO,CAAiB,CACzC,EACjB,GAAG,CACN,CAAC;YAEF,OAAO;gBACH,QAAQ,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;gBACrC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC,CAAC;QACN,CAAC;QACD,aAAa,EAAE;YACX,IAAM,GAAG,GAAG,SAAS,IAAI,iBAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,OAAO,GAAG,IAAI,KAAK,CAAC;QACxB,CAAC;KACJ,CAAC;AACN,CAAC","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { getComputedStyles } from 'roosterjs-editor-dom';\nimport { ThemeProvider } from '@fluentui/react/lib/Theme';\nimport { WindowProvider } from '@fluentui/react/lib/WindowProvider';\nimport type UIUtilities from '../type/UIUtilities';\nimport type { PartialTheme } from '@fluentui/react/lib/Theme';\n\n/**\n * Create the UI Utilities object for plugins to render additional react components\n * @param container Container DIV of editor\n * @param theme Current theme used by editor\n * @returns A UIUtilities object\n */\nexport default function createUIUtilities(\n    container: HTMLDivElement,\n    theme: PartialTheme\n): UIUtilities {\n    return {\n        renderComponent: element => {\n            const doc = container.ownerDocument;\n            const div = doc.createElement('div');\n            doc.body.appendChild(div);\n\n            ReactDOM.render(\n                <WindowProvider window={doc.defaultView!}>\n                    <ThemeProvider theme={theme}>{element}</ThemeProvider>\n                </WindowProvider>,\n                div\n            );\n\n            return () => {\n                ReactDOM.unmountComponentAtNode(div);\n                doc.body.removeChild(div);\n            };\n        },\n        isRightToLeft: () => {\n            const dir = container && getComputedStyles(container, 'direction')[0];\n\n            return dir == 'rtl';\n        },\n    };\n}\n"]}