import { __assign } from "tslib";
import createContextMenuProvider from '../utils/createContextMenuProvider';
import { applyCellShading, editTable } from 'roosterjs-editor-api';
import { renderColorPicker } from '../../colorPicker/component/renderColorPicker';
import { getColorPickerContainerClassName, getColorPickerItemClassName, } from '../../colorPicker/utils/getClassNamesForColorPicker';
import { BackgroundColorDropDownItems, BackgroundColors, } from '../../colorPicker/utils/backgroundColors';
var TableEditOperationMap = {
    menuNameTableInsertAbove: 0 /* InsertAbove */,
    menuNameTableInsertBelow: 1 /* InsertBelow */,
    menuNameTableInsertLeft: 2 /* InsertLeft */,
    menuNameTableInsertRight: 3 /* InsertRight */,
    menuNameTableDeleteTable: 4 /* DeleteTable */,
    menuNameTableDeleteColumn: 5 /* DeleteColumn */,
    menuNameTableDeleteRow: 6 /* DeleteRow */,
    menuNameTableMergeAbove: 7 /* MergeAbove */,
    menuNameTableMergeBelow: 8 /* MergeBelow */,
    menuNameTableMergeLeft: 9 /* MergeLeft */,
    menuNameTableMergeRight: 10 /* MergeRight */,
    menuNameTableMergeCells: 11 /* MergeCells */,
    menuNameTableSplitHorizontally: 12 /* SplitHorizontally */,
    menuNameTableSplitVertically: 13 /* SplitVertically */,
    menuNameTableAlignLeft: 17 /* AlignCellLeft */,
    menuNameTableAlignCenter: 18 /* AlignCellCenter */,
    menuNameTableAlignRight: 19 /* AlignCellRight */,
    menuNameTableAlignTop: 20 /* AlignCellTop */,
    menuNameTableAlignMiddle: 21 /* AlignCellMiddle */,
    menuNameTableAlignBottom: 22 /* AlignCellBottom */,
    menuNameTableAlignTableLeft: 15 /* AlignLeft */,
    menuNameTableAlignTableCenter: 14 /* AlignCenter */,
    menuNameTableAlignTableRight: 16 /* AlignRight */,
};
var ColorValues = __assign(__assign({}, BackgroundColors), { 
    // Add this value to satisfy compiler
    menuNameTableCellShade: null });
function onClick(key, editor) {
    editor.focus();
    var operation = TableEditOperationMap[key];
    if (typeof operation === 'number') {
        editTable(editor, operation);
    }
}
var TableEditInsertMenuItem = {
    key: 'menuNameTableInsert',
    unlocalizedText: 'Insert',
    subItems: {
        menuNameTableInsertAbove: 'Insert above',
        menuNameTableInsertBelow: 'Insert below',
        menuNameTableInsertLeft: 'Insert left',
        menuNameTableInsertRight: 'Insert right',
    },
    onClick: onClick,
};
var TableEditDeleteMenuItem = {
    key: 'menuNameTableDelete',
    unlocalizedText: 'Delete',
    subItems: {
        menuNameTableDeleteColumn: 'Delete column',
        menuNameTableDeleteRow: 'Delete row',
        menuNameTableDeleteTable: 'Delete table',
    },
    onClick: onClick,
};
var TableEditMergeMenuItem = {
    key: 'menuNameTableMerge',
    unlocalizedText: 'Merge',
    subItems: {
        menuNameTableMergeAbove: 'Merge above',
        menuNameTableMergeBelow: 'Merge below',
        menuNameTableMergeLeft: 'Merge left',
        menuNameTableMergeRight: 'Merge right',
        '-': '-',
        menuNameTableMergeCells: 'Merge selected cells',
    },
    onClick: onClick,
};
var TableEditSplitMenuItem = {
    key: 'menuNameTableSplit',
    unlocalizedText: 'Split',
    subItems: {
        menuNameTableSplitHorizontally: 'Split horizontally',
        menuNameTableSplitVertically: 'Split vertically',
    },
    onClick: onClick,
};
var TableEditAlignMenuItem = {
    key: 'menuNameTableAlign',
    unlocalizedText: 'Align cell',
    subItems: {
        menuNameTableAlignLeft: 'Align left',
        menuNameTableAlignCenter: 'Align center',
        menuNameTableAlignRight: 'Align right',
        '-': '-',
        menuNameTableAlignTop: 'Align top',
        menuNameTableAlignMiddle: 'Align middle',
        menuNameTableAlignBottom: 'Align bottom',
    },
    onClick: onClick,
};
var TableEditAlignTableMenuItem = {
    key: 'menuNameTableAlignTable',
    unlocalizedText: 'Align table',
    subItems: {
        menuNameTableAlignTableLeft: 'Align left',
        menuNameTableAlignTableCenter: 'Align center',
        menuNameTableAlignTableRight: 'Align right',
    },
    onClick: onClick,
};
var TableEditCellShadeMenuItem = {
    key: 'menuNameTableCellShade',
    unlocalizedText: 'Shading',
    subItems: BackgroundColorDropDownItems,
    onClick: function (key, editor) {
        applyCellShading(editor, ColorValues[key]);
    },
    itemRender: function (item, click) { return renderColorPicker(item, ColorValues, click); },
    itemClassName: getColorPickerItemClassName(),
    commandBarSubMenuProperties: {
        className: getColorPickerContainerClassName(),
    },
};
function getEditingTable(editor, node) {
    var td = editor.getElementAtCursor('TD,TH', node);
    var table = td && editor.getElementAtCursor('table', td);
    return (table === null || table === void 0 ? void 0 : table.isContentEditable) ? { table: table, td: td } : null;
}
/**
 * Create a new instance of ContextMenuProvider to support table editing functionalities in context menu
 * @returns A new ContextMenuProvider
 */
export default function createTableEditMenuProvider(strings) {
    return createContextMenuProvider('tableEdit', [
        TableEditInsertMenuItem,
        TableEditDeleteMenuItem,
        TableEditMergeMenuItem,
        TableEditSplitMenuItem,
        TableEditAlignMenuItem,
        TableEditAlignTableMenuItem,
        TableEditCellShadeMenuItem,
    ], strings, function (editor, node) { return !!getEditingTable(editor, node); });
}
//# sourceMappingURL=createTableEditMenuProvider.js.map