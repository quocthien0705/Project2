import createContextMenuProvider from '../utils/createContextMenuProvider';
import showInputDialog from '../../inputDialog/utils/showInputDialog';
import { canRegenerateImage, isResizedTo, resetImage, resizeByPercentage, } from 'roosterjs-editor-plugins';
import { getObjectKeys } from 'roosterjs-editor-dom';
import { setImageAltText } from 'roosterjs-editor-api';
var ImageAltTextMenuItem = {
    key: 'menuNameImageAltText',
    unlocalizedText: 'Add alternate text',
    onClick: function (_, editor, node, strings, uiUtilities) {
        var image = node;
        var initValue = image.alt;
        showInputDialog(uiUtilities, 'menuNameImageAltText', 'Add alternate text', {
            altText: {
                labelKey: null,
                unlocalizedLabel: null,
                initValue: initValue,
            },
        }, strings).then(function (values) {
            editor.focus();
            editor.select(image);
            if (values) {
                setImageAltText(editor, values.altText);
            }
        });
    },
};
var sizeMap = {
    menuNameImageSizeBestFit: 0,
    menuNameImageSizeSmall: 0.25,
    menuNameImageSizeMedium: 0.5,
    menuNameImageSizeOriginal: 1,
};
var ImageResizeMenuItem = {
    key: 'menuNameImageResize',
    unlocalizedText: 'Size',
    subItems: {
        menuNameImageSizeBestFit: 'Best fit',
        menuNameImageSizeSmall: 'Small',
        menuNameImageSizeMedium: 'Medium',
        menuNameImageSizeOriginal: 'Original',
    },
    onClick: function (key, editor, _) {
        var selection = editor.getSelectionRangeEx();
        if (selection.type !== 2 /* ImageSelection */) {
            return;
        }
        editor.addUndoSnapshot(function () {
            var percentage = sizeMap[key];
            if (percentage != undefined && percentage > 0) {
                resizeByPercentage(editor, selection.image, percentage, 10 /*minWidth*/, 10 /*minHeight*/);
            }
            else {
                resetImage(editor, selection.image);
            }
        });
    },
    getSelectedId: function (editor, _) {
        var selection = editor.getSelectionRangeEx();
        return ((selection.type === 2 /* ImageSelection */ &&
            getObjectKeys(sizeMap).find(function (key) {
                return key == 'menuNameImageSizeBestFit'
                    ? !selection.image.hasAttribute('width') &&
                        !selection.image.hasAttribute('height')
                    : isResizedTo(selection.image, sizeMap[key]);
            })) ||
            null);
    },
};
var ImageRotateMenuItem = {
    key: 'menuNameImageRotate',
    unlocalizedText: 'Rotate image',
    subItems: {
        menuNameImageRotateLeft: 'Left',
        menuNameImageRotateRight: 'Right',
    },
    shouldShow: function (_, node, imageEdit) {
        return (!!(imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.isOperationAllowed(4 /* Rotate */)) &&
            canRegenerateImage(node));
    },
    onClick: function (key, editor, node, strings, uiUtilities, imageEdit) {
        editor.addUndoSnapshot(function () {
            switch (key) {
                case 'menuNameImageRotateLeft':
                    imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.rotateImage(node, -Math.PI / 2);
                    break;
                case 'menuNameImageRotateRight':
                    imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.rotateImage(node, Math.PI / 2);
                    break;
            }
        });
    },
};
var ImageFlipMenuItem = {
    key: 'menuNameImageFlip',
    unlocalizedText: 'Flip image',
    subItems: {
        menuNameImageRotateFlipHorizontally: 'Flip Horizontally',
        menuNameImageRotateFlipVertically: 'Flip Vertically',
    },
    shouldShow: function (_, node, imageEdit) {
        return (!!(imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.isOperationAllowed(4 /* Rotate */)) &&
            canRegenerateImage(node));
    },
    onClick: function (key, editor, node, strings, uiUtilities, imageEdit) {
        editor.addUndoSnapshot(function () {
            switch (key) {
                case 'menuNameImageRotateFlipHorizontally':
                    imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.flipImage(node, 'horizontal');
                    break;
                case 'menuNameImageRotateFlipVertically':
                    imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.flipImage(node, 'vertical');
                    break;
            }
        });
    },
};
var ImageCropMenuItem = {
    key: 'menuNameImageCrop',
    unlocalizedText: 'Crop image',
    shouldShow: function (_, node, imageEdit) {
        return (!!(imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.isOperationAllowed(8 /* Crop */)) &&
            canRegenerateImage(node));
    },
    onClick: function (_, editor, node, strings, uiUtilities, imageEdit) {
        imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.setEditingImage(node, 8 /* Crop */);
    },
};
var ImageRemoveMenuItem = {
    key: 'menuNameImageRemove',
    unlocalizedText: 'Remove image',
    onClick: function (_, editor, node, strings, uiUtilities, imageEdit) {
        if (editor.contains(node)) {
            editor.addUndoSnapshot(function () {
                editor.deleteNode(node);
                imageEdit === null || imageEdit === void 0 ? void 0 : imageEdit.setEditingImage(null /*editingImage*/);
            }, 'DeleteImage');
        }
    },
};
var ImageCopyMenuItem = {
    key: 'menuNameImageCopy',
    unlocalizedText: 'Copy image',
    onClick: function (_, editor, node, strings, uiUtilities, imageEdit) {
        if (editor.contains(node)) {
            editor.addUndoSnapshot(function () {
                var _a;
                (_a = editor.getDocument()) === null || _a === void 0 ? void 0 : _a.execCommand("copy" /* Copy */);
            }, 'CopyImage');
        }
    },
};
var ImageCutMenuItem = {
    key: 'menuNameImageCut',
    unlocalizedText: 'Cut image',
    onClick: function (_, editor, node, strings, uiUtilities, imageEdit) {
        if (editor.contains(node)) {
            editor.addUndoSnapshot(function () {
                var _a;
                (_a = editor.getDocument()) === null || _a === void 0 ? void 0 : _a.execCommand("cut" /* Cut */);
            }, 'CutImage');
        }
    },
};
function shouldShowImageEditItems(editor, _) {
    var selection = editor.getSelectionRangeEx();
    return selection.type === 2 /* ImageSelection */ && !!selection.image;
}
/**
 * Create a new instance of ContextMenuProvider to support image editing functionalities in context menu
 * @returns A new ContextMenuProvider
 */
export default function createImageEditMenuProvider(imageEditPlugin, strings) {
    return createContextMenuProvider('imageEdit', [
        ImageAltTextMenuItem,
        ImageResizeMenuItem,
        ImageCropMenuItem,
        ImageRemoveMenuItem,
        ImageRotateMenuItem,
        ImageFlipMenuItem,
        ImageCopyMenuItem,
        ImageCutMenuItem,
    ], strings, shouldShowImageEditItems, imageEditPlugin);
}
//# sourceMappingURL=createImageEditMenuProvider.js.map