import { __read } from "tslib";
import * as React from 'react';
import { ButtonKeys, Buttons } from '../utils/buttons';
import { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';
import { getLocalizedString } from '../../common/index';
import { getObjectKeys, getPositionRect } from 'roosterjs-editor-dom';
import { Icon } from '@fluentui/react/lib/Icon';
import { IconButton } from '@fluentui/react/lib/Button';
import { memoizeFunction } from '@fluentui/react/lib/Utilities';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import { renderReactComponent } from '../../common/utils/renderReactComponent';
import { useTheme } from '@fluentui/react/lib/Theme';
var getPasteOptionClassNames = memoizeFunction(function (theme) {
    var palette = theme.palette;
    return mergeStyleSets({
        pastePane: {
            paddingLeft: '4px',
            minWidth: '72px',
        },
        optionPane: {
            textAlign: 'center',
            padding: '4px',
        },
        icon: {
            fontSize: '14px',
        },
        buttonsContainer: {
            justifyContent: 'center',
            display: 'flex',
        },
        button: {
            width: '32px',
            height: '32px',
            margin: '0 4px 4px 0',
            borderRadius: '2px',
            flex: '0 0 auto',
            '&:hover': {
                backgroundColor: palette.themeLighter,
            },
        },
        isChecked: {
            backgroundColor: palette.themeLight,
            '&:hover': {
                backgroundColor: palette.themeLighter,
            },
        },
    });
});
function PasteOptionButton(props) {
    var buttonName = props.buttonName, paste = props.paste, strings = props.strings, className = props.className;
    var button = Buttons[buttonName];
    var onClick = React.useCallback(function () {
        paste(buttonName);
    }, [paste, buttonName]);
    return (React.createElement(IconButton, { className: className, onClick: onClick, title: getLocalizedString(strings, buttonName, button.unlocalizedText) +
            (button.shortcut ? " (" + button.shortcut + ")" : ''), iconProps: { iconName: button.icon } }));
}
var PasteOptionComponent = React.forwardRef(function PasteOptionFunc(props, ref) {
    var strings = props.strings, position = props.position, paste = props.paste, dismiss = props.dismiss, isRtl = props.isRtl;
    var theme = useTheme();
    var classNames = getPasteOptionClassNames(theme);
    var _a = __read(React.useState(null), 2), selectedKey = _a[0], setSelectedKey = _a[1];
    var rect = position && getPositionRect(position);
    var target = rect && { x: props.isRtl ? rect.left : rect.right, y: rect.bottom };
    React.useImperativeHandle(ref, function () { return ({
        dismiss: dismiss,
        setSelectedKey: setSelectedKey,
        getSelectedKey: function () { return selectedKey; },
    }); }, [dismiss, paste, isRtl, selectedKey, setSelectedKey]);
    var buttonPane = React.useRef(null);
    var onDismiss = React.useCallback(function (evt) {
        var target = evt instanceof FocusEvent && evt.relatedTarget instanceof Node
            ? evt.relatedTarget
            : null;
        var clickOnButtonPane = target &&
            buttonPane.current &&
            (buttonPane.current == target || buttonPane.current.contains(target));
        if (!clickOnButtonPane) {
            dismiss();
        }
    }, [dismiss]);
    var onClickShowSubMenu = React.useCallback(function (event) {
        setSelectedKey(ButtonKeys[0]);
        event.preventDefault();
        event.stopPropagation();
    }, [setSelectedKey]);
    return (React.createElement(Callout, { gapSpace: 10, isBeakVisible: false, target: target, directionalHint: isRtl ? DirectionalHint.bottomRightEdge : DirectionalHint.bottomLeftEdge, directionalHintForRTL: DirectionalHint.bottomRightEdge, preventDismissOnScroll: true, onDismiss: onDismiss },
        React.createElement("div", { ref: buttonPane, className: classNames.pastePane },
            React.createElement("div", { onClick: onClickShowSubMenu, className: classNames.optionPane },
                React.createElement(Icon, { iconName: 'Paste', className: classNames.icon }),
                getLocalizedString(strings, 'pasteOptionPaneText', '(Ctrl)')),
            selectedKey && (React.createElement("div", { className: classNames.buttonsContainer }, getObjectKeys(Buttons).map(function (key) { return (React.createElement(PasteOptionButton, { key: key, strings: strings, paste: paste, buttonName: key, className: classNames.button +
                    ' ' +
                    (selectedKey == key ? classNames.isChecked : '') })); }))))));
});
/**
 * @internal Show paste open pane component
 * @param uiUtilities The UI utilities object to help render component
 * @param position Target position
 * @param strings Localize string for this component
 * @param onPaste A callback to be called when user click on a paste button
 * @param ref Reference object for this component
 */
export default function showPasteOptionPane(uiUtilities, position, onPaste, ref, strings) {
    var disposer = null;
    var onDismiss = function () {
        disposer === null || disposer === void 0 ? void 0 : disposer();
        disposer = null;
    };
    disposer = renderReactComponent(uiUtilities, React.createElement(PasteOptionComponent, { ref: ref, position: position, strings: strings, isRtl: uiUtilities.isRightToLeft(), dismiss: onDismiss, paste: onPaste }));
}
//# sourceMappingURL=showPasteOptionPane.js.map