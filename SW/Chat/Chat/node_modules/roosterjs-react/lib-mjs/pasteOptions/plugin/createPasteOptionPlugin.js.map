{"version":3,"file":"createPasteOptionPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/pasteOptions/plugin/createPasteOptionPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport showPasteOptionPane from '../component/showPasteOptionPane';\nimport { ButtonKeys, Buttons } from '../utils/buttons';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type { PasteOptionPane } from '../component/showPasteOptionPane';\nimport type { ClipboardData, IEditor, PluginEvent } from 'roosterjs-editor-types';\nimport type { LocalizedStrings, ReactEditorPlugin, UIUtilities } from '../../common/index';\nimport type { PasteOptionButtonKeys, PasteOptionStringKeys } from '../type/PasteOptionStringKeys';\n\nclass PasteOptionPlugin implements ReactEditorPlugin {\n    private clipboardData: ClipboardData | null = null;\n    private editor: IEditor | null = null;\n    private uiUtilities: UIUtilities | null = null;\n    private pasteOptionRef = React.createRef<PasteOptionPane>();\n\n    constructor(private strings?: LocalizedStrings<PasteOptionStringKeys>) {}\n\n    getName() {\n        return 'PasteOption';\n    }\n\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.pasteOptionRef.current?.dismiss();\n        this.editor = null;\n    }\n\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.Scroll) {\n            if (this.pasteOptionRef.current) {\n                this.showPasteOptionPane();\n            }\n        } else if (this.pasteOptionRef.current) {\n            this.handlePasteOptionPaneEvent(event);\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            if (event.source == 'Paste') {\n                const clipboardData = event.data as ClipboardData;\n\n                // Only show paste option when we pasted HTML with some format\n                if (clipboardData?.text && clipboardData.types?.indexOf('text/html') >= 0) {\n                    this.clipboardData = clipboardData;\n                    this.showPasteOptionPane();\n                }\n            }\n        }\n    }\n\n    setUIUtilities(uiUtilities: UIUtilities) {\n        this.uiUtilities = uiUtilities;\n    }\n\n    private handlePasteOptionPaneEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyDown && this.pasteOptionRef.current) {\n            const selectedKey = this.pasteOptionRef.current.getSelectedKey();\n\n            if (!selectedKey) {\n                switch (event.rawEvent.which) {\n                    case Keys.CTRL_LEFT:\n                        this.pasteOptionRef.current.setSelectedKey(ButtonKeys[0]);\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.current.dismiss();\n                        cancelEvent(event.rawEvent);\n                        break;\n\n                    default:\n                        this.pasteOptionRef.current.dismiss();\n                        break;\n                }\n            } else {\n                const keyboardEvent = event.rawEvent;\n\n                if (keyboardEvent.which != Keys.CTRL_LEFT && keyboardEvent.ctrlKey) {\n                    // Dismiss the paste option when pressing hotkey CTRL+<any key>\n                    this.pasteOptionRef.current.dismiss();\n                    return;\n                }\n\n                for (let i = 0; i < ButtonKeys.length; i++) {\n                    const key = ButtonKeys[i];\n                    const button = Buttons[key];\n                    if (button.shortcut == String.fromCharCode(keyboardEvent.which)) {\n                        this.onPaste(key);\n                        cancelEvent(keyboardEvent);\n                        return;\n                    }\n                }\n\n                switch (keyboardEvent.which) {\n                    case Keys.ESCAPE:\n                        this.pasteOptionRef.current.dismiss();\n                        break;\n                    case Keys.LEFT:\n                    case Keys.RIGHT:\n                        const buttonCount = ButtonKeys.length;\n                        const diff =\n                            (keyboardEvent.which == Keys.RIGHT) == this.uiUtilities?.isRightToLeft()\n                                ? -1\n                                : 1;\n                        this.pasteOptionRef.current.setSelectedKey(\n                            ButtonKeys[\n                                (ButtonKeys.indexOf(selectedKey) + diff + buttonCount) % buttonCount\n                            ]\n                        );\n                        break;\n                    case Keys.ENTER:\n                        this.onPaste(selectedKey);\n                        break;\n                    case Keys.CTRL_LEFT:\n                        // Noop\n                        break;\n                    default:\n                        this.pasteOptionRef.current.dismiss();\n                        return;\n                }\n\n                cancelEvent(keyboardEvent);\n            }\n        }\n    }\n\n    private onPaste = (key: PasteOptionButtonKeys) => {\n        if (this.clipboardData && this.editor) {\n            this.editor.focus();\n\n            switch (key) {\n                case 'pasteOptionPasteAsIs':\n                    this.editor.paste(this.clipboardData);\n                    break;\n\n                case 'pasteOptionPasteText':\n                    this.editor.paste(this.clipboardData, true /*pasteAsText*/);\n                    break;\n\n                case 'pasteOptionMergeFormat':\n                    this.editor.paste(\n                        this.clipboardData,\n                        false /*pasteAsText*/,\n                        true /*applyCurrentFormat*/\n                    );\n                    break;\n                case 'pasteOptionPasteAsImage':\n                    this.editor.paste(\n                        this.clipboardData,\n                        false /*pasteAsText*/,\n                        false /*applyCurrentFormat*/,\n                        true /** pasteAsImage **/\n                    );\n            }\n\n            this.pasteOptionRef.current?.setSelectedKey(key);\n        }\n    };\n\n    private showPasteOptionPane() {\n        this.pasteOptionRef.current?.dismiss();\n\n        const focusedPosition = this.editor?.getFocusedPosition();\n\n        if (focusedPosition && this.uiUtilities) {\n            showPasteOptionPane(\n                this.uiUtilities,\n                focusedPosition,\n                this.onPaste,\n                this.pasteOptionRef,\n                this.strings\n            );\n        }\n    }\n}\n\nfunction cancelEvent(event: UIEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\n/**\n * Create a new instance of PasteOption plugin to show an option pane when paste, so that user can choose\n * an option to change the paste result, including:\n * - Paste as is\n * - Paste as text\n * - Paste and merge format\n * @param strings Localized string for this plugin\n * @returns A paste option plugin\n */\nexport default function createPasteOptionPlugin(\n    strings?: LocalizedStrings<PasteOptionStringKeys>\n): ReactEditorPlugin {\n    return new PasteOptionPlugin(strings);\n}\n"]}