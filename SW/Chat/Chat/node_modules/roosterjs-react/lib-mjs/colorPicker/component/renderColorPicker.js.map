{"version":3,"file":"renderColorPicker.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/colorPicker/component/renderColorPicker.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAI7D,IAAM,UAAU,GAAG,cAAc,CAAC;IAC9B,WAAW,EAAE;QACT,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,OAAO;QACpB,WAAW,EAAE,KAAK;QAClB,SAAS,EAAE;YACP,WAAW,EAAE,KAAK;SACrB;KACJ;IACD,iBAAiB,EAAE;QACf,WAAW,EAAE,aAAa;KAC7B;IACD,sBAAsB,EAAE;QACpB,WAAW,EAAE,SAAS;KACzB;CACJ,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAC7B,IAAyB,EACzB,QAA+C,EAC/C,OAGS;IAET,IAAM,GAAG,GAAG,IAAI,CAAC,GAAc,CAAC;IAChC,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;IAEjD,OAAO,CACH,gCAAQ,OAAO,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,EAAhB,CAAgB,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI;QACpD,6BACI,SAAS,EACL,UAAU,CAAC,WAAW;gBACtB,GAAG;gBACH,CAAC,GAAG,IAAI,gBAAgB,IAAI,GAAG,IAAI,sBAAsB;oBACrD,CAAC,CAAC,UAAU,CAAC,sBAAsB;oBACnC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAEvC,KAAK,EAAE;gBACH,eAAe,EAAE,WAAW;aAC/B,GAAQ,CACR,CACZ,CAAC;AACN,CAAC","sourcesContent":["import * as React from 'react';\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport type { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport type { ModeIndependentColor } from 'roosterjs-editor-types';\n\nconst classNames = mergeStyleSets({\n    colorSquare: {\n        width: '20px',\n        height: '20px',\n        margin: '4px',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n        '&:hover': {\n            borderColor: 'red',\n        },\n    },\n    colorSquareBorder: {\n        borderColor: 'transparent',\n    },\n    colorSquareBorderWhite: {\n        borderColor: '#bebebe',\n    },\n});\n\n/**\n * @internal\n */\nexport function renderColorPicker<Strings extends string>(\n    item: IContextualMenuItem,\n    colorDef: Record<Strings, ModeIndependentColor>,\n    onClick: (\n        e: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>,\n        item: IContextualMenuItem\n    ) => void\n) {\n    const key = item.key as Strings;\n    const buttonColor = colorDef[key].lightModeColor;\n\n    return (\n        <button onClick={e => onClick(e, item)} title={item.text}>\n            <div\n                className={\n                    classNames.colorSquare +\n                    ' ' +\n                    (key == 'textColorWhite' || key == 'backgroundColorWhite'\n                        ? classNames.colorSquareBorderWhite\n                        : classNames.colorSquareBorder)\n                }\n                style={{\n                    backgroundColor: buttonColor,\n                }}></div>\n        </button>\n    );\n}\n"]}