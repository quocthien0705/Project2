{"version":3,"file":"RibbonButton.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/ribbon/type/RibbonButton.ts"],"names":[],"mappings":"","sourcesContent":["import type RibbonButtonDropDown from './RibbonButtonDropDown';\nimport type { FormatState, IEditor } from 'roosterjs-editor-types';\nimport type { ICommandBarItemProps } from '@fluentui/react/lib/CommandBar';\nimport type { LocalizedStrings, UIUtilities } from '../../common/index';\n\n/**\n * Represents a button on format ribbon\n */\nexport default interface RibbonButton<T extends string> {\n    /**\n     * key of this button, needs to be unique\n     */\n    key: T;\n\n    /**\n     * Name of button icon. See https://developer.microsoft.com/en-us/fluentui#/styles/web/icons for all icons\n     */\n    iconName: string;\n\n    /**\n     * True if we need to flip the icon when render in Right-to-left page\n     */\n    flipWhenRtl?: boolean;\n\n    /**\n     * Text of the button. This text is not localized. To show a localized text, pass a dictionary to Ribbon component via RibbonProps.strings.\n     */\n    unlocalizedText: string;\n\n    /**\n     * Click handler of this button.\n     * @param editor the editor instance\n     * @param key key of the button that is clicked\n     * @param strings localized strings used by any UI element of this click handler\n     * @param uiUtilities a utilities object to help render addition UI elements\n     */\n    onClick: (\n        editor: IEditor,\n        key: T,\n        strings: LocalizedStrings<T> | undefined,\n        uiUtilities: UIUtilities\n    ) => void;\n\n    /**\n     * Get if the current button should be checked\n     * @param formatState The current formatState of editor\n     * @returns True to show the button in a checked state, otherwise false\n     * @default False When not specified, it is treated as always returning false\n     */\n    isChecked?: (formatState: FormatState) => boolean;\n\n    /**\n     * Get if the current button should be disabled\n     * @param formatState The current formatState of editor\n     * @returns True to show the button in a disabled state, otherwise false\n     * @default False When not specified, it is treated as always returning false\n     */\n    isDisabled?: (formatState: FormatState) => boolean;\n\n    /**\n     * A drop down menu of this button. When set this value, the button will has a \"v\" icon to let user\n     * know it will open a drop down menu. And the onClick handler will only be triggered when user click\n     * a menu item of the drop down.\n     */\n    dropDownMenu?: RibbonButtonDropDown;\n\n    /**\n     * Use this property to pass in Fluent UI CommandBar property directly. It will overwrite the values of other conflict properties\n     *\n     * Do not use ICommandBarItemProps.subMenuProps here since it will be overwritten.\n     * If need, specify its value using RibbonButton.dropDownMenu.commandBarSubMenuProperties.\n     */\n    commandBarProperties?: Partial<ICommandBarItemProps>;\n}\n"]}