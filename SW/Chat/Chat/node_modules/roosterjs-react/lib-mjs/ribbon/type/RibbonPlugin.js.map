{"version":3,"file":"RibbonPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/ribbon/type/RibbonPlugin.ts"],"names":[],"mappings":"","sourcesContent":["import type RibbonButton from './RibbonButton';\nimport type { FormatState } from 'roosterjs-editor-types';\nimport type { LocalizedStrings, ReactEditorPlugin } from '../../common/index';\n\n/**\n * Represents a plugin to connect format ribbon component and the editor\n */\nexport default interface RibbonPlugin extends ReactEditorPlugin {\n    /**\n     * Register a callback to be invoked when format state of editor is changed, returns a disposer function.\n     */\n    registerFormatChangedCallback: (callback: (formatState: FormatState) => void) => () => void;\n\n    /**\n     * When user clicks on a button, call this method to let the plugin to handle this click event\n     * @param button The button that is clicked\n     * @param key Key of child menu item that is clicked if any\n     * @param strings The localized string map for this button\n     */\n    onButtonClick: <T extends string>(\n        button: RibbonButton<T>,\n        key: T,\n        strings?: LocalizedStrings<T>\n    ) => void;\n\n    /**\n     * Enter live preview state (shadow edit) of editor if there is a non-collapsed selection\n     * @param button The button that triggered this action\n     * @param key Key of the hovered button sub item\n     * @param strings The localized string map for this button\n     */\n    startLivePreview: <T extends string>(\n        button: RibbonButton<T>,\n        key: T,\n        strings?: LocalizedStrings<T>\n    ) => void;\n\n    /**\n     * Leave live preview state (shadow edit) of editor\n     */\n    stopLivePreview: () => void;\n}\n"]}