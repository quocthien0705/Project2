{"version":3,"file":"Ribbon.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-react/lib/ribbon/component/Ribbon.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport getLocalizedString from '../../common/utils/getLocalizedString';\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\nimport { FocusZoneDirection } from '@fluentui/react/lib/FocusZone';\nimport { getObjectKeys } from 'roosterjs-editor-dom';\nimport { mergeStyles } from '@fluentui/react/lib/Styling';\nimport { moreCommands } from './buttons/moreCommands';\nimport type RibbonButton from '../type/RibbonButton';\nimport type RibbonProps from '../type/RibbonProps';\nimport type { ICommandBarItemProps } from '@fluentui/react/lib/CommandBar';\nimport type { FormatState } from 'roosterjs-editor-types';\nimport type {\n    IContextualMenuItem,\n    IContextualMenuItemProps,\n} from '@fluentui/react/lib/ContextualMenu';\nimport type { IRenderFunction } from '@fluentui/react/lib/Utilities';\n\nconst ribbonClassName = mergeStyles({\n    '& .ms-CommandBar': {\n        padding: '0px',\n    },\n});\n\nconst rtlIcon = mergeStyles({\n    transform: 'scaleX(-1)',\n});\n\n/**\n * The format ribbon component of roosterjs-react\n * @param props Properties of format ribbon component\n * @returns The format ribbon component\n */\nexport default function Ribbon<T extends string>(props: RibbonProps<T>) {\n    const { plugin, buttons, strings, dir } = props;\n    const [formatState, setFormatState] = React.useState<FormatState | null>(null);\n    const isRtl = dir == 'rtl';\n\n    const onClick = React.useCallback(\n        (_, item?: IContextualMenuItem) => {\n            if (item) {\n                plugin?.onButtonClick<string>(item.data, item.key, strings);\n            }\n        },\n        [plugin, strings]\n    );\n\n    const onHover = React.useCallback(\n        (button: RibbonButton<T>, key: string) => {\n            plugin.startLivePreview<T>(button, key as T, strings);\n        },\n        [plugin, strings]\n    );\n\n    const onDismiss = React.useCallback(() => {\n        plugin.stopLivePreview();\n    }, [plugin]);\n\n    const flipIcon = React.useCallback(\n        (\n            props?: IContextualMenuItemProps,\n            defaultRender?: (props?: IContextualMenuItemProps) => JSX.Element | null\n        ): JSX.Element | null => {\n            if (!defaultRender) {\n                return null;\n            }\n            return <span className={rtlIcon}>{defaultRender(props)}</span>;\n        },\n        []\n    );\n\n    const commandBarItems = React.useMemo((): ICommandBarItemProps[] => {\n        return buttons.map(\n            (button): ICommandBarItemProps => {\n                const selectedItem =\n                    formatState && button.dropDownMenu?.getSelectedItemKey?.(formatState);\n                const dropDownMenu = button.dropDownMenu;\n\n                const result: ICommandBarItemProps = {\n                    key: button.key,\n                    data: button,\n                    iconProps: {\n                        iconName: button.iconName,\n                    },\n                    onRenderIcon: isRtl && button.flipWhenRtl ? flipIcon : undefined,\n                    iconOnly: true,\n                    text: getLocalizedString(strings, button.key, button.unlocalizedText),\n                    ariaLabel: getLocalizedString(strings, button.key, button.unlocalizedText),\n                    canCheck: true,\n                    checked: (formatState && button.isChecked?.(formatState)) || false,\n                    disabled: (formatState && button.isDisabled?.(formatState)) || false,\n                    ...(button.commandBarProperties || {}),\n                };\n\n                const contextMenuItemRenderer: IRenderFunction<IContextualMenuItem> = (\n                    props,\n                    defaultRenderer\n                ) =>\n                    props && defaultRenderer ? (\n                        <div onMouseOver={e => onHover(button, props.key)}>\n                            {defaultRenderer(props)}\n                        </div>\n                    ) : null;\n\n                if (dropDownMenu) {\n                    result.subMenuProps = {\n                        shouldFocusOnMount: true,\n                        focusZoneProps: { direction: FocusZoneDirection.bidirectional },\n                        onMenuDismissed: onDismiss,\n                        onItemClick: onClick,\n                        onRenderContextualMenuItem: dropDownMenu.allowLivePreview\n                            ? contextMenuItemRenderer\n                            : undefined,\n                        items: getObjectKeys(dropDownMenu.items).map(key => ({\n                            key: key,\n                            text: getLocalizedString<string, string>(\n                                strings,\n                                key,\n                                dropDownMenu.items[key]\n                            ),\n                            data: button,\n                            canCheck: !!dropDownMenu.getSelectedItemKey,\n                            checked: selectedItem == key || false,\n                            className: dropDownMenu.itemClassName,\n                            onRender: dropDownMenu.itemRender\n                                ? item => dropDownMenu.itemRender!(item, onClick)\n                                : undefined,\n                        })),\n                        ...(dropDownMenu.commandBarSubMenuProperties || {}),\n                    };\n                } else {\n                    result.onClick = onClick;\n                }\n\n                return result;\n            }\n        );\n    }, [buttons, formatState, isRtl, strings, onClick, onDismiss, onHover]);\n\n    React.useEffect(() => {\n        const disposer = plugin?.registerFormatChangedCallback(setFormatState);\n\n        return () => {\n            disposer?.();\n        };\n    }, [plugin]);\n\n    const moreCommandsBtn = moreCommands as RibbonButton<string>;\n\n    return (\n        <CommandBar\n            items={commandBarItems}\n            {...props}\n            className={ribbonClassName + ' ' + (props?.className || '')}\n            overflowButtonProps={{\n                ariaLabel: getLocalizedString<string, string>(\n                    strings,\n                    moreCommandsBtn.key,\n                    moreCommandsBtn.unlocalizedText\n                ),\n                ...props?.overflowButtonProps,\n            }}\n        />\n    );\n}\n"]}