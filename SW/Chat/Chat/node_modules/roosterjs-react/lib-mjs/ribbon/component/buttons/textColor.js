import { renderColorPicker } from '../../../colorPicker/component/renderColorPicker';
import { setTextColor } from 'roosterjs-editor-api';
import { getTextColorValue, TextColorDropDownItems, TextColors, } from '../../../colorPicker/utils/textColors';
import { getColorPickerContainerClassName, getColorPickerItemClassName, } from '../../../colorPicker/utils/getClassNamesForColorPicker';
var Key = 'buttonNameTextColor';
/**
 * @internal
 * "Text color" button on the format ribbon
 */
export var textColor = {
    dropDownMenu: {
        items: TextColorDropDownItems,
        itemClassName: getColorPickerItemClassName(),
        allowLivePreview: true,
        itemRender: function (item, onClick) { return renderColorPicker(item, TextColors, onClick); },
        commandBarSubMenuProperties: {
            className: getColorPickerContainerClassName(),
        },
    },
    key: Key,
    unlocalizedText: 'Text color',
    iconName: 'FontColor',
    onClick: function (editor, key) {
        // This check will always be true, add it here just to satisfy compiler
        if (key != Key) {
            setTextColor(editor, getTextColorValue(key));
        }
    },
};
//# sourceMappingURL=textColor.js.map