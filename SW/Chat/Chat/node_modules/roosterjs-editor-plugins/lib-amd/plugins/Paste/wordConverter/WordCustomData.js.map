{"version":3,"file":"WordCustomData.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/wordConverter/WordCustomData.ts"],"names":[],"mappings":";;;;IAEA,uBAAuB;IACvB,IAAM,sBAAsB,GAAG,QAAQ,CAAC;IAcxC;;;OAGG;IACH,SAAgB,gBAAgB;QAC5B,OAAO;YACH,IAAI,EAAE,EAAE;YACR,UAAU,EAAE,CAAC;SAChB,CAAC;IACN,CAAC;IALD,4CAKC;IAED;;;OAGG;IACH,SAAgB,SAAS,CAAC,cAA8B,EAAE,OAAa,EAAE,GAAW,EAAE,KAAU;QAC5F,6BAA6B;QAC7B,IAAI,OAAO,CAAC,QAAQ,mBAAoB,EAAE;YACtC,IAAM,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,OAAsB,CAAC,CAAC;YACnE,IAAI,EAAE,IAAI,EAAE,EAAE;gBACV,iCAAiC;gBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;oBAC1B,iCAAiC;oBACjC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;iBAChC;gBACD,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACxC;SACJ;IACL,CAAC;IAbD,8BAaC;IAED;;;OAGG;IACH,SAAgB,SAAS,CAAC,cAA8B,EAAE,OAAa,EAAE,GAAW;QAChF,IAAI,OAAO,CAAC,QAAQ,mBAAoB,EAAE;YACtC,IAAM,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,OAAsB,CAAC,CAAC;YACnE,IAAI,EAAE,IAAI,EAAE,EAAE;gBACV,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;aAClE;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IATD,8BASC;IAED;;OAEG;IACH,SAAS,eAAe,CAAC,cAA8B,EAAE,OAAoB;QACzE,IAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;QACtD,IAAI,CAAC,EAAE,EAAE;YACL,EAAE,GAAG,cAAc,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YAC1C,cAAc,CAAC,UAAU,EAAE,CAAC;YAC5B,OAAO,CAAC,YAAY,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;SACpD;QACD,OAAO,EAAE,CAAC;IACd,CAAC","sourcesContent":["import { NodeType } from 'roosterjs-editor-types';\n\n/** NodeId attribute */\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\n\n/**\n * @internal\n * Custom data for dom elements\n */\nexport default interface WordCustomData {\n    /** The dict storing custom data, key is element Id, value is dictionary */\n    dict: { [key: string]: { [key: string]: number } };\n\n    /** Next node Id to use */\n    nextNodeId: number;\n}\n\n/**\n * @internal\n * Create an empty WordCustomData\n */\nexport function createCustomData(): WordCustomData {\n    return {\n        dict: {},\n        nextNodeId: 1,\n    };\n}\n\n/**\n * @internal\n * Sets the specified object data\n */\nexport function setObject(wordCustomData: WordCustomData, element: Node, key: string, value: any) {\n    // Get the id for the element\n    if (element.nodeType == NodeType.Element) {\n        const id = getAndSetNodeId(wordCustomData, element as HTMLElement);\n        if (id != '') {\n            // Get the values for the element\n            if (!wordCustomData.dict[id]) {\n                // First time dictionary creation\n                wordCustomData.dict[id] = {};\n            }\n            wordCustomData.dict[id][key] = value;\n        }\n    }\n}\n\n/**\n * @internal\n * Reads the specified object data\n */\nexport function getObject(wordCustomData: WordCustomData, element: Node, key: string): any {\n    if (element.nodeType == NodeType.Element) {\n        const id = getAndSetNodeId(wordCustomData, element as HTMLElement);\n        if (id != '') {\n            return wordCustomData.dict[id] && wordCustomData.dict[id][key];\n        }\n    }\n\n    return null;\n}\n\n/**\n * Get the unique id for the specified node...\n */\nfunction getAndSetNodeId(wordCustomData: WordCustomData, element: HTMLElement): string {\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\n    if (!id) {\n        id = wordCustomData.nextNodeId.toString();\n        wordCustomData.nextNodeId++;\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\n    }\n    return id;\n}\n"]}