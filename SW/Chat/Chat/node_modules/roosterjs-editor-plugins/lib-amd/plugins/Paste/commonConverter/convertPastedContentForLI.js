define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @internal
     * Convert content copied from Teams to be well-formed
     */
    function convertPastedContentForLI(fragment) {
        // Sometimes it is possible that we get LI nodes directly under DIV.
        // In that case we need to convert DIV to UL. It is also possible to be OL, but we don't know it.
        // So always assume it is UL here, and later user can change it.
        if (isPureLiNode(fragment)) {
            (0, roosterjs_editor_dom_1.wrap)((0, roosterjs_editor_dom_1.toArray)(fragment.childNodes), 'UL');
        }
        else if ((0, roosterjs_editor_dom_1.safeInstanceOf)(fragment.firstChild, 'HTMLElement') &&
            isPureLiNode(fragment.firstChild)) {
            (0, roosterjs_editor_dom_1.changeElementTag)(fragment.firstChild, 'UL');
        }
    }
    exports.default = convertPastedContentForLI;
    function isPureLiNode(node) {
        if (node && !node.nextSibling && ['OL', 'UL', 'MENU'].indexOf((0, roosterjs_editor_dom_1.getTagOfNode)(node)) < 0) {
            var hasLi_1 = false;
            if ((0, roosterjs_editor_dom_1.toArray)(node.childNodes).every(function (childNode) {
                var _a;
                if ((0, roosterjs_editor_dom_1.safeInstanceOf)(childNode, 'Text') && !((_a = childNode.nodeValue) === null || _a === void 0 ? void 0 : _a.trim())) {
                    return true;
                }
                else if ((0, roosterjs_editor_dom_1.getTagOfNode)(childNode) == 'LI') {
                    hasLi_1 = true;
                    return true;
                }
                else {
                    return false;
                }
            }) &&
                hasLi_1) {
                return true;
            }
        }
        return false;
    }
});
//# sourceMappingURL=convertPastedContentForLI.js.map