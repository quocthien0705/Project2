define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.excelHandler = void 0;
    var LAST_TD_END_REGEX = /<\/\s*td\s*>((?!<\/\s*tr\s*>)[\s\S])*$/i;
    var LAST_TR_END_REGEX = /<\/\s*tr\s*>((?!<\/\s*table\s*>)[\s\S])*$/i;
    var LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;
    var LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;
    var DEFAULT_BORDER_STYLE = 'solid 1px #d4d4d4';
    /**
     * @internal
     * Convert pasted content from Excel, add borders when source doc doesn't have a border
     * @param event The BeforePaste event
     */
    function convertPastedContentFromExcel(event, trustedHTMLHandler) {
        var fragment = event.fragment, sanitizingOption = event.sanitizingOption, htmlBefore = event.htmlBefore, clipboardData = event.clipboardData;
        var html = clipboardData.html ? excelHandler(clipboardData.html, htmlBefore) : undefined;
        if (html && clipboardData.html != html) {
            var doc = new DOMParser().parseFromString(trustedHTMLHandler(html), 'text/html');
            (0, roosterjs_editor_dom_1.moveChildNodes)(fragment, doc === null || doc === void 0 ? void 0 : doc.body);
        }
        // For Excel Online
        var firstChild = fragment.firstChild;
        if (firstChild && firstChild.childNodes.length > 0 && (0, roosterjs_editor_dom_1.getTagOfNode)(firstChild) == 'DIV') {
            var tableFound = Array.from(firstChild.childNodes).every(function (child) {
                // Tables pasted from Excel Online should be of the format: 0 to N META tags and 1 TABLE tag
                return (0, roosterjs_editor_dom_1.getTagOfNode)(child) == 'META'
                    ? true
                    : (0, roosterjs_editor_dom_1.getTagOfNode)(child) == 'TABLE' && child == firstChild.lastChild;
            });
            // Extract Table from Div
            if (tableFound && firstChild.lastChild) {
                event.fragment.replaceChildren(firstChild.lastChild);
            }
        }
        (0, roosterjs_editor_dom_1.chainSanitizerCallback)(sanitizingOption.elementCallbacks, 'TD', function (element) {
            if (element.style.borderStyle == 'none') {
                element.style.border = DEFAULT_BORDER_STYLE;
            }
            return true;
        });
    }
    exports.default = convertPastedContentFromExcel;
    /**
     * @internal Export for test only
     * @param html Source html
     */
    function excelHandler(html, htmlBefore) {
        if (html.match(LAST_TD_END_REGEX)) {
            var trMatch = htmlBefore.match(LAST_TR_REGEX);
            var tr = trMatch ? trMatch[0] : '<TR>';
            html = tr + html + '</TR>';
        }
        if (html.match(LAST_TR_END_REGEX)) {
            var tableMatch = htmlBefore.match(LAST_TABLE_REGEX);
            var table = tableMatch ? tableMatch[0] : '<TABLE>';
            html = table + html + '</TABLE>';
        }
        return html;
    }
    exports.excelHandler = excelHandler;
});
//# sourceMappingURL=convertPastedContentFromExcel.js.map