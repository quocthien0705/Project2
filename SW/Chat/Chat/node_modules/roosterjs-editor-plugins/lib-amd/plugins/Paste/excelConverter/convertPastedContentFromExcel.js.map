{"version":3,"file":"convertPastedContentFromExcel.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/excelConverter/convertPastedContentFromExcel.ts"],"names":[],"mappings":"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","sourcesContent":["import { chainSanitizerCallback, getTagOfNode, moveChildNodes } from 'roosterjs-editor-dom';\nimport type { BeforePasteEvent, TrustedHTMLHandler } from 'roosterjs-editor-types';\n\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\nconst DEFAULT_BORDER_STYLE = 'solid 1px #d4d4d4';\n\n/**\n * @internal\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\n * @param event The BeforePaste event\n */\nexport default function convertPastedContentFromExcel(\n    event: BeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler\n) {\n    const { fragment, sanitizingOption, htmlBefore, clipboardData } = event;\n    const html = clipboardData.html ? excelHandler(clipboardData.html, htmlBefore) : undefined;\n\n    if (html && clipboardData.html != html) {\n        const doc = new DOMParser().parseFromString(trustedHTMLHandler(html), 'text/html');\n        moveChildNodes(fragment, doc?.body);\n    }\n\n    // For Excel Online\n    const firstChild = fragment.firstChild;\n    if (firstChild && firstChild.childNodes.length > 0 && getTagOfNode(firstChild) == 'DIV') {\n        const tableFound = Array.from(firstChild.childNodes).every((child: Node) => {\n            // Tables pasted from Excel Online should be of the format: 0 to N META tags and 1 TABLE tag\n            return getTagOfNode(child) == 'META'\n                ? true\n                : getTagOfNode(child) == 'TABLE' && child == firstChild.lastChild;\n        });\n\n        // Extract Table from Div\n        if (tableFound && firstChild.lastChild) {\n            event.fragment.replaceChildren(firstChild.lastChild);\n        }\n    }\n\n    chainSanitizerCallback(sanitizingOption.elementCallbacks, 'TD', element => {\n        if (element.style.borderStyle == 'none') {\n            element.style.border = DEFAULT_BORDER_STYLE;\n        }\n        return true;\n    });\n}\n\n/**\n * @internal Export for test only\n * @param html Source html\n */\nexport function excelHandler(html: string, htmlBefore: string): string {\n    if (html.match(LAST_TD_END_REGEX)) {\n        const trMatch = htmlBefore.match(LAST_TR_REGEX);\n        const tr = trMatch ? trMatch[0] : '<TR>';\n        html = tr + html + '</TR>';\n    }\n    if (html.match(LAST_TR_END_REGEX)) {\n        const tableMatch = htmlBefore.match(LAST_TABLE_REGEX);\n        const table = tableMatch ? tableMatch[0] : '<TABLE>';\n        html = table + html + '</TABLE>';\n    }\n\n    return html;\n}\n"]}