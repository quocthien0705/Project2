{"version":3,"file":"normalizeTableSelection.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/TableCellSelection/utils/normalizeTableSelection.ts"],"names":[],"mappings":";;;IAGA;;;;;;OAMG;IACH,SAAwB,uBAAuB,CAAC,MAAc;QACpD,IAAA,KAA0B,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,KAAI,EAAE,EAA/C,SAAS,eAAA,EAAE,QAAQ,cAA4B,CAAC;QACxD,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAA,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,EAAE;YAChE,OAAO,IAAI,CAAC;SACf;QAED,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAE3B,IAAM,QAAQ,GAAG;YACb,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;YACpC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;SACvC,CAAC;QACF,IAAM,OAAO,GAAG;YACZ,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;YACpC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;SACvC,CAAC;QAEF,IAAM,cAAc,GAAG,UAAC,KAAkB;YACtC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;gBACb,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;aACf;YACD,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;gBACb,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;aACf;YAED,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;gBACzB,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;aAC9B;YAED,IAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACxC,IAAI,KAAK,CAAC,CAAC,IAAI,SAAS,EAAE;gBACtB,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;aAC3B;QACL,CAAC,CAAC;QAEF,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzB,cAAc,CAAC,OAAO,CAAC,CAAC;QAExB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;IACtD,CAAC;IAvCD,0CAuCC","sourcesContent":["import type { Coordinates, TableSelection } from 'roosterjs-editor-types';\nimport type { VTable } from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * Make the first Cell of a table selection always be on top of the last cell.\n * @param input Table selection\n * @returns Table Selection where the first cell is always going to be first selected in the table\n * and the last cell always going to be last selected in the table.\n */\nexport default function normalizeTableSelection(vTable: VTable): TableSelection | null {\n    const { firstCell, lastCell } = vTable?.selection || {};\n    if (!vTable?.cells || !vTable.selection || !firstCell || !lastCell) {\n        return null;\n    }\n\n    const cells = vTable.cells;\n\n    const newFirst = {\n        x: Math.min(firstCell.x, lastCell.x),\n        y: Math.min(firstCell.y, lastCell.y),\n    };\n    const newLast = {\n        x: Math.max(firstCell.x, lastCell.x),\n        y: Math.max(firstCell.y, lastCell.y),\n    };\n\n    const fixCoordinates = (coord: Coordinates) => {\n        if (coord.x < 0) {\n            coord.x = 0;\n        }\n        if (coord.y < 0) {\n            coord.y = 0;\n        }\n\n        if (coord.y >= cells.length) {\n            coord.y = cells.length - 1;\n        }\n\n        const rowsCells = cells[coord.y].length;\n        if (coord.x >= rowsCells) {\n            coord.x = rowsCells - 1;\n        }\n    };\n\n    fixCoordinates(newFirst);\n    fixCoordinates(newLast);\n\n    return { firstCell: newFirst, lastCell: newLast };\n}\n"]}