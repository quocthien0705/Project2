{"version":3,"file":"CutPasteListChain.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/CutPasteListChain/CutPasteListChain.ts"],"names":[],"mappings":";;;IAMA;;OAEG;IACH;QAAA;YAAA,iBAyEC;YAxEW,WAAM,GAAwB,IAAI,CAAC;YACnC,yBAAoB,GAAiD,IAAI,CAAC;YAC1E,WAAM,GAAmB,IAAI,CAAC;YAC9B,aAAQ,GAAwB,IAAI,CAAC;YA0DrC,WAAM,GAAG;gBACb,KAAI,CAAC,eAAe,mBAAmB,CAAC;YAC5C,CAAC,CAAC;QASN,CAAC;QAnEG;;WAEG;QACH,mCAAO,GAAP;YACI,OAAO,mBAAmB,CAAC;QAC/B,CAAC;QAED;;;WAGG;QACH,sCAAU,GAAV,UAAW,MAAe;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC;QAED;;WAEG;QACH,mCAAO,GAAP;;YACI,MAAA,IAAI,CAAC,QAAQ,+CAAb,IAAI,CAAa,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED;;;WAGG;QACH,yCAAa,GAAb,UAAc,KAAkB;YAC5B,QAAQ,KAAK,CAAC,SAAS,EAAE;gBACrB;oBACI,IAAI,KAAK,CAAC,KAAK,EAAE;wBACb,IAAI,CAAC,eAAe,iBAAkB,CAAC;qBAC1C;oBACD,MAAM;gBAEV;oBACI,IAAI,CAAC,eAAe,qBAAoB,CAAC;oBACzC,MAAM;gBAEV;oBACI,IACI,IAAI,CAAC,MAAM;wBACX,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;wBACtB,IAAI,CAAC,oBAAoB,IAAI,KAAK,CAAC,MAAM;wBACzC,IAAI,CAAC,MAAM,EACb;wBACE,IAAA,uCAAgB,EAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;wBAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;wBACnB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;qBACpC;oBACD,MAAM;aACb;QACL,CAAC;QAMO,2CAAe,GAAvB,UAAwB,MAAoB;;YACxC,IAAM,eAAe,GAAG,MAAA,IAAI,CAAC,MAAM,0CAAE,kBAAkB,EAAE,CAAC;YAC1D,IAAI,eAAe,EAAE;gBACjB,IAAI,CAAC,MAAM,GAAG,iCAAU,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;gBAC3D,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;aACtC;QACL,CAAC;QACL,wBAAC;IAAD,CAAC,AAzED,IAyEC","sourcesContent":["import { ChangeSource, PluginEventType } from 'roosterjs-editor-types';\nimport { commitListChains } from 'roosterjs-editor-api';\nimport { VListChain } from 'roosterjs-editor-dom';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\nimport type { CompatibleChangeSource } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * Maintain list numbers of list chain when content is modified by cut/paste/drag&drop\n */\nexport default class CutPasteListChain implements EditorPlugin {\n    private chains: VListChain[] | null = null;\n    private expectedChangeSource: ChangeSource | CompatibleChangeSource | null = null;\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'CutPasteListChain';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler('drop', this.onDrop);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.BeforeCutCopy:\n                if (event.isCut) {\n                    this.cacheListChains(ChangeSource.Cut);\n                }\n                break;\n\n            case PluginEventType.BeforePaste:\n                this.cacheListChains(ChangeSource.Paste);\n                break;\n\n            case PluginEventType.ContentChanged:\n                if (\n                    this.chains &&\n                    this.chains.length > 0 &&\n                    this.expectedChangeSource == event.source &&\n                    this.editor\n                ) {\n                    commitListChains(this.editor, this.chains);\n                    this.chains = null;\n                    this.expectedChangeSource = null;\n                }\n                break;\n        }\n    }\n\n    private onDrop = () => {\n        this.cacheListChains(ChangeSource.Drop);\n    };\n\n    private cacheListChains(source: ChangeSource) {\n        const selectedRegions = this.editor?.getSelectedRegions();\n        if (selectedRegions) {\n            this.chains = VListChain.createListChains(selectedRegions);\n            this.expectedChangeSource = source;\n        }\n    }\n}\n"]}