define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StructuredNodeFeatures = void 0;
    var CHILD_PARENT_TAG_MAP = {
        TD: 'TABLE',
        TH: 'TABLE',
        LI: 'OL,UL',
    };
    var CHILD_SELECTOR = (0, roosterjs_editor_dom_1.getObjectKeys)(CHILD_PARENT_TAG_MAP).join(',');
    /**
     * InsertLineBeforeStructuredNode edit feature, provides the ability to insert an empty line before
     * a structured element (bullet/numbering list, blockquote, table) if the element is at beginning of
     * document
     */
    var InsertLineBeforeStructuredNodeFeature = {
        keys: [13 /* ENTER */],
        shouldHandleEvent: cacheGetStructuredElement,
        handleEvent: function (event, editor) {
            var element = cacheGetStructuredElement(event, editor);
            var div = (0, roosterjs_editor_dom_1.createElement)(1 /* EmptyLine */, editor.getDocument());
            editor.addUndoSnapshot(function () {
                var _a;
                (_a = element === null || element === void 0 ? void 0 : element.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(div, element);
                // Select the new line when we are in table. This is the same behavior with Word
                if ((0, roosterjs_editor_dom_1.getTagOfNode)(element) == 'TABLE') {
                    editor.select(new roosterjs_editor_dom_1.Position(div, 0 /* Begin */).normalize());
                }
            });
            event.rawEvent.preventDefault();
        },
        defaultDisabled: true,
    };
    function cacheGetStructuredElement(event, editor) {
        return (0, roosterjs_editor_dom_1.cacheGetEventData)(event, 'FIRST_STRUCTURE', function () {
            // Provide a chance to keep browser default behavior by pressing SHIFT
            var element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);
            if (element) {
                var range = editor.getSelectionRange();
                if (range &&
                    range.collapsed &&
                    (0, roosterjs_editor_dom_1.isPositionAtBeginningOf)(roosterjs_editor_dom_1.Position.getStart(range), element) &&
                    !editor.getBodyTraverser(element).getPreviousBlockElement()) {
                    return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[(0, roosterjs_editor_dom_1.getTagOfNode)(element)]);
                }
            }
            return null;
        });
    }
    /**
     * @internal
     */
    exports.StructuredNodeFeatures = {
        insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,
    };
});
//# sourceMappingURL=structuredNodeFeatures.js.map