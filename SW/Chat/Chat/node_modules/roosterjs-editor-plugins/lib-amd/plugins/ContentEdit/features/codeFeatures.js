define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeFeatures = void 0;
    var RemoveCodeWhenEnterOnEmptyLine = {
        keys: [13 /* ENTER */],
        shouldHandleEvent: function (event, editor) {
            var childOfCode = cacheGetCodeChild(event, editor);
            return childOfCode && (0, roosterjs_editor_dom_1.isNodeEmpty)(childOfCode);
        },
        handleEvent: function (event, editor) {
            event.rawEvent.preventDefault();
            editor.addUndoSnapshot(function () {
                splitCode(event, editor);
            }, undefined /* changeSource */, true /* canUndoByBackspace */);
        },
    };
    var RemoveCodeWhenBackspaceOnEmptyFirstLine = {
        keys: [8 /* BACKSPACE */],
        shouldHandleEvent: function (event, editor) {
            var childOfCode = cacheGetCodeChild(event, editor);
            return childOfCode && (0, roosterjs_editor_dom_1.isNodeEmpty)(childOfCode) && !childOfCode.previousSibling;
        },
        handleEvent: function (event, editor) {
            event.rawEvent.preventDefault();
            editor.addUndoSnapshot(function () { return splitCode(event, editor); });
        },
    };
    function cacheGetCodeChild(event, editor) {
        return (0, roosterjs_editor_dom_1.cacheGetEventData)(event, 'CODE_CHILD', function () {
            var _a;
            var codeElement = (_a = editor.getElementAtCursor('code')) !== null && _a !== void 0 ? _a : editor.queryElements('code', 1 /* OnSelection */)[0];
            if (codeElement) {
                var pos = editor.getFocusedPosition();
                var block = pos && editor.getBlockElementAtNode(pos.normalize().node);
                if (block) {
                    var node = block.getStartNode() == codeElement.parentNode
                        ? block.getStartNode()
                        : block.collapseToSingleElement();
                    return (0, roosterjs_editor_dom_1.isNodeEmpty)(node) ? node : null;
                }
            }
            return null;
        });
    }
    function splitCode(event, editor) {
        var currentContainer = cacheGetCodeChild(event, editor);
        if (!(0, roosterjs_editor_dom_1.safeInstanceOf)(currentContainer, 'HTMLElement')) {
            return;
        }
        var codeChild = currentContainer.querySelector('code');
        if (!codeChild) {
            var codeParent = (0, roosterjs_editor_dom_1.splitBalancedNodeRange)(currentContainer);
            if (codeParent) {
                (0, roosterjs_editor_dom_1.unwrap)(codeParent);
            }
            if ((0, roosterjs_editor_dom_1.safeInstanceOf)(currentContainer.parentElement, 'HTMLPreElement')) {
                var preParent = (0, roosterjs_editor_dom_1.splitBalancedNodeRange)(currentContainer);
                if (preParent) {
                    (0, roosterjs_editor_dom_1.unwrap)(preParent);
                }
            }
        }
        else {
            //Content model
            (0, roosterjs_editor_dom_1.unwrap)(codeChild);
        }
        editor.select(currentContainer, 0 /* Begin */);
    }
    /**
     * @internal
     */
    exports.CodeFeatures = {
        removeCodeWhenEnterOnEmptyLine: RemoveCodeWhenEnterOnEmptyLine,
        removeCodeWhenBackspaceOnEmptyFirstLine: RemoveCodeWhenBackspaceOnEmptyFirstLine,
    };
});
//# sourceMappingURL=codeFeatures.js.map