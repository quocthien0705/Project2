{"version":3,"file":"textFeatures.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContentEdit/features/textFeatures.ts"],"names":[],"mappings":"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","sourcesContent":["import { setIndentation } from 'roosterjs-editor-api';\nimport {\n    createRange,\n    getEntitySelector,\n    getTagOfNode,\n    Position,\n    queryElements,\n} from 'roosterjs-editor-dom';\nimport type {\n    BuildInEditFeature,\n    IEditor,\n    TextFeatureSettings,\n    PluginKeyboardEvent,\n    NodePosition,\n} from 'roosterjs-editor-types';\nimport {\n    Indentation,\n    Keys,\n    SelectionRangeTypes,\n    ContentPosition,\n    PositionType,\n    ExperimentalFeatures,\n    QueryScope,\n} from 'roosterjs-editor-types';\n\nconst TAB_SPACES = 6;\n\n/**\n * Requires @see ExperimentalFeatures.TabKeyTextFeatures to be enabled\n * Provides additional functionality when press Tab:\n *      If Whole Paragraph selected, indent paragraph,\n *      If range is collapsed, add tab spaces\n *      If range is not collapsed but not all the paragraph is selected, replace selection with Tab spaces\n *      If there are more than one block in the selection, indent all selection\n */\nconst IndentWhenTabText: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.TAB],\n    shouldHandleEvent: (event, editor) => {\n        if (\n            editor.isFeatureEnabled(ExperimentalFeatures.TabKeyTextFeatures) &&\n            !event.rawEvent.shiftKey\n        ) {\n            const activeElement = editor.getDocument().activeElement as HTMLElement;\n            const listOrTable = editor.getElementAtCursor(\n                'LI,TABLE',\n                undefined /*startFrom*/,\n                event\n            );\n            const entity = editor.getElementAtCursor(\n                getEntitySelector(),\n                undefined /*startFrom*/,\n                event\n            );\n\n            return (\n                !listOrTable &&\n                (entity ? entity.isContentEditable : activeElement.isContentEditable)\n            );\n        }\n\n        return false;\n    },\n    handleEvent: (event, editor) => {\n        const selection = editor.getSelectionRangeEx();\n        if (selection.type == SelectionRangeTypes.Normal) {\n            editor.addUndoSnapshot(() => {\n                if (selection.areAllCollapsed) {\n                    insertTab(editor, event);\n                } else {\n                    const { ranges } = selection;\n                    const range = ranges[0];\n                    if (shouldSetIndentation(editor, range)) {\n                        setIndentation(editor, Indentation.Increase);\n                    } else {\n                        const tempRange = createRange(range.startContainer, range.startOffset);\n                        ranges.forEach(range => range.deleteContents());\n                        editor.select(tempRange);\n                        insertTab(editor, event);\n                    }\n                }\n            });\n\n            event.rawEvent.preventDefault();\n        }\n    },\n};\n\n/**\n * Requires @see ExperimentalFeatures.TabKeyTextFeatures to be enabled\n * If Whole Paragraph selected, outdent paragraph on Tab press\n */\nconst OutdentWhenTabText: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.TAB],\n    shouldHandleEvent: (event, editor) => {\n        if (\n            event.rawEvent.shiftKey &&\n            editor.isFeatureEnabled(ExperimentalFeatures.TabKeyTextFeatures)\n        ) {\n            const selection = editor.getSelectionRangeEx();\n\n            return (\n                selection.type == SelectionRangeTypes.Normal &&\n                !selection.areAllCollapsed &&\n                editor.getElementAtCursor('blockquote', undefined, event) &&\n                !editor.getElementAtCursor('LI,TABLE', undefined /*startFrom*/, event) &&\n                shouldSetIndentation(editor, selection.ranges[0])\n            );\n        }\n\n        return false;\n    },\n    handleEvent: (event, editor) => {\n        editor.addUndoSnapshot(() => setIndentation(editor, Indentation.Decrease));\n\n        event.rawEvent.preventDefault();\n    },\n};\n\n/**\n * @deprecated\n * Automatically transform -- into hyphen, if typed between two words.\n */\nconst AutoHyphen: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [],\n    shouldHandleEvent: (event, editor) => {\n        return false;\n    },\n    handleEvent: (event, editor) => {\n        return false;\n    },\n    defaultDisabled: true,\n};\n\n/**\n * @internal\n */\nexport const TextFeatures: Record<\n    keyof TextFeatureSettings,\n    BuildInEditFeature<PluginKeyboardEvent>\n> = {\n    indentWhenTabText: IndentWhenTabText,\n    outdentWhenTabText: OutdentWhenTabText,\n    autoHyphen: AutoHyphen,\n};\n\nfunction shouldSetIndentation(editor: IEditor, range: Range): boolean {\n    let result: boolean = false;\n\n    const startPosition: NodePosition = Position.getStart(range);\n    const endPosition: NodePosition = Position.getEnd(range);\n    const firstBlock = editor.getBlockElementAtNode(startPosition.node);\n    const lastBlock = editor.getBlockElementAtNode(endPosition.node);\n\n    if (!firstBlock || !lastBlock) {\n        return false;\n    }\n\n    if (!firstBlock.equals(lastBlock)) {\n        //If the selections has more than one block, we indent all the blocks in the selection\n        return true;\n    } else {\n        //We only indent a single block if all the block is selected.\n        const blockStart = new Position(firstBlock.getStartNode(), PositionType.Begin);\n        const blockEnd = new Position(firstBlock.getEndNode(), PositionType.End);\n\n        const rangeBefore = createRange(blockStart, Position.getStart(range));\n        const rangeAfter = createRange(Position.getEnd(range), blockEnd);\n\n        if (!result && isRangeEmpty(rangeBefore) && isRangeEmpty(rangeAfter)) {\n            result = true;\n        }\n\n        return result;\n    }\n}\n\nfunction isRangeEmpty(range: Range) {\n    return (\n        range.toString() == '' &&\n        queryElements(\n            range.commonAncestorContainer as ParentNode,\n            'img,table,ul,ol',\n            null,\n            QueryScope.InSelection,\n            range\n        ).length == 0\n    );\n}\n\nfunction insertTab(editor: IEditor, event: PluginKeyboardEvent) {\n    const span = editor.getDocument().createElement('span');\n    const searcher = editor.getContentSearcherOfCursor(event);\n    if (!searcher) {\n        return;\n    }\n    const charsBefore = searcher.getSubStringBefore(Number.MAX_SAFE_INTEGER);\n    const numberOfChars = TAB_SPACES - (charsBefore.length % TAB_SPACES);\n    let span2: HTMLSpanElement | null = null;\n\n    let textContent = '';\n    for (let index = 0; index < numberOfChars; index++) {\n        textContent += '&ensp;';\n    }\n    editor.insertNode(span);\n    if (span.nextElementSibling && getTagOfNode(span.nextElementSibling) == 'A') {\n        span2 = editor.getDocument().createElement('span');\n        span2.textContent = ' ';\n        editor.insertNode(span2);\n        editor.select(createRange(span2, PositionType.Before));\n    }\n    editor.insertContent(textContent, {\n        position: ContentPosition.Range,\n        range: createRange(span, PositionType.Begin),\n        updateCursor: false,\n    });\n    editor.select(createRange(span, PositionType.After));\n    if (span2) {\n        editor.deleteNode(span2);\n    }\n}\n"]}