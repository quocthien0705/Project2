define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var INSERTER_COLOR = '#4A4A4A';
    var INSERTER_COLOR_DARK_MODE = 'white';
    var INSERTER_SIDE_LENGTH = 12;
    var INSERTER_BORDER_SIZE = 1;
    /**
     * @internal
     */
    function createTableInserter(editor, td, isRTL, isHorizontal, onInsert, getOnMouseOut, onShowHelperElement, anchorContainer) {
        var table = editor.getElementAtCursor('table', td);
        var tdRect = (0, roosterjs_editor_dom_1.normalizeRect)(td.getBoundingClientRect());
        var viewPort = editor.getVisibleViewport();
        var tableRect = table && viewPort ? (0, roosterjs_editor_dom_1.getIntersectedRect)([table], [viewPort]) : null;
        // set inserter position
        if (tdRect && tableRect) {
            var document_1 = td.ownerDocument;
            var createElementData = getInsertElementData(isHorizontal, editor.isDarkMode(), isRTL, editor.getDefaultFormat().backgroundColor || 'white');
            onShowHelperElement === null || onShowHelperElement === void 0 ? void 0 : onShowHelperElement(createElementData, 'TableInserter', td);
            var div = (0, roosterjs_editor_dom_1.createElement)(createElementData, document_1);
            if (isHorizontal) {
                // tableRect.left/right is used because the Inserter is always intended to be on the side
                div.style.left = (isRTL
                    ? tableRect.right
                    : tableRect.left - (INSERTER_SIDE_LENGTH - 1 + 2 * INSERTER_BORDER_SIZE)) + "px";
                div.style.top = tdRect.bottom - 8 + "px";
                div.firstChild.style.width = tableRect.right - tableRect.left + "px";
            }
            else {
                div.style.left = (isRTL ? tdRect.left - 8 : tdRect.right - 8) + "px";
                // tableRect.top is used because the Inserter is always intended to be on top
                div.style.top = tableRect.top - (INSERTER_SIDE_LENGTH - 1 + 2 * INSERTER_BORDER_SIZE) + "px";
                div.firstChild.style.height = tableRect.bottom - tableRect.top + "px";
            }
            (anchorContainer || document_1.body).appendChild(div);
            var handler = new TableInsertHandler(div, td, isHorizontal, editor, onInsert, getOnMouseOut);
            return { div: div, featureHandler: handler, node: td };
        }
        return null;
    }
    exports.default = createTableInserter;
    var TableInsertHandler = /** @class */ (function () {
        function TableInsertHandler(div, td, isHorizontal, editor, onInsert, getOnMouseOut) {
            var _this = this;
            this.div = div;
            this.td = td;
            this.isHorizontal = isHorizontal;
            this.editor = editor;
            this.onInsert = onInsert;
            this.insertTd = function () {
                var vtable = new roosterjs_editor_dom_1.VTable(_this.td);
                if (!_this.isHorizontal) {
                    vtable.normalizeTableCellSize(_this.editor.getZoomScale());
                    // Since adding new column will cause table width to change, we need to remove width properties
                    vtable.table.removeAttribute('width');
                    vtable.table.style.setProperty('width', null);
                }
                vtable.edit(_this.isHorizontal ? 1 /* InsertBelow */ : 3 /* InsertRight */);
                vtable.writeBack();
                _this.onInsert(vtable.table);
                // Select newly inserted row or column
                if (vtable.row != undefined && vtable.col != undefined && vtable.cells) {
                    var inserted = _this.isHorizontal
                        ? {
                            firstCell: { x: 0, y: vtable.row + 1 },
                            lastCell: { x: vtable.cells[vtable.row].length - 1, y: vtable.row + 1 },
                        }
                        : {
                            firstCell: { x: vtable.col + 1, y: 0 },
                            lastCell: { x: vtable.col + 1, y: vtable.cells.length - 1 },
                        };
                    _this.editor.select(vtable.table, inserted);
                }
            };
            this.div.addEventListener('click', this.insertTd);
            this.onMouseOutEvent = getOnMouseOut(div);
            this.div.addEventListener('mouseout', this.onMouseOutEvent);
        }
        TableInsertHandler.prototype.dispose = function () {
            this.div.removeEventListener('click', this.insertTd);
            if (this.onMouseOutEvent) {
                this.div.removeEventListener('mouseout', this.onMouseOutEvent);
            }
            this.onMouseOutEvent = null;
        };
        return TableInsertHandler;
    }());
    function getInsertElementData(isHorizontal, isDark, isRTL, backgroundColor) {
        var inserterColor = isDark ? INSERTER_COLOR_DARK_MODE : INSERTER_COLOR;
        var outerDivStyle = "position: fixed; width: " + INSERTER_SIDE_LENGTH + "px; height: " + INSERTER_SIDE_LENGTH + "px; font-size: 16px; color: black; line-height: 8px; vertical-align: middle; text-align: center; cursor: pointer; border: solid " + INSERTER_BORDER_SIZE + "px " + inserterColor + "; border-radius: 50%; background-color: " + backgroundColor;
        var leftOrRight = isRTL ? 'right' : 'left';
        var childBaseStyles = "position: absolute; box-sizing: border-box; background-color: " + backgroundColor + ";";
        var childInfo = {
            tag: 'div',
            style: childBaseStyles +
                (isHorizontal
                    ? leftOrRight + ": 12px; top: 5px; height: 3px; border-top: 1px solid " + inserterColor + "; border-bottom: 1px solid " + inserterColor + "; border-right: 1px solid " + inserterColor + "; border-left: 0px;"
                    : "left: 5px; top: 12px; width: 3px; border-left: 1px solid " + inserterColor + "; border-right: 1px solid " + inserterColor + "; border-bottom: 1px solid " + inserterColor + "; border-top: 0px;"),
        };
        return {
            tag: 'div',
            style: outerDivStyle,
            children: [childInfo, '+'],
        };
    }
});
//# sourceMappingURL=TableInserter.js.map