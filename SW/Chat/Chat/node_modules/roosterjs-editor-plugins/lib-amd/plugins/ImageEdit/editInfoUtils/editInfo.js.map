{"version":3,"file":"editInfo.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/editInfoUtils/editInfo.ts"],"names":[],"mappings":";;;;IAIA;;;;;OAKG;IACH,SAAgB,YAAY,CAAC,KAAuB,EAAE,QAAuB;QACzE,IAAI,KAAK,EAAE;YACP,IAAA,kCAAW,EAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SAChC;IACL,CAAC;IAJD,oCAIC;IAED;;;;OAIG;IACH,SAAgB,cAAc,CAAC,KAAuB;QAClD,IAAI,KAAK,EAAE;YACP,IAAA,qCAAc,EAAC,KAAK,CAAC,CAAC;SACzB;IACL,CAAC;IAJD,wCAIC;IAED;;;;;;;OAOG;IACH,SAAgB,oBAAoB,CAAC,KAAuB;QACxD,IAAM,GAAG,GAAG,IAAA,kCAAW,EAAgB,KAAK,CAAC,CAAC;QAC9C,OAAO,CAAC,GAAG,IAAI,IAAA,4BAAkB,EAAC,GAAG,CAAC,mBAA8B;YAChE,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAC3B,CAAC,CAAC,GAAG,CAAC;IACd,CAAC;IALD,oDAKC;IAED,SAAS,kBAAkB,CAAC,KAAuB;QAC/C,OAAO;YACH,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE;YACpC,OAAO,EAAE,KAAK,CAAC,WAAW;YAC1B,QAAQ,EAAE,KAAK,CAAC,YAAY;YAC5B,YAAY,EAAE,KAAK,CAAC,YAAY;YAChC,aAAa,EAAE,KAAK,CAAC,aAAa;YAClC,WAAW,EAAE,CAAC;YACd,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,CAAC;YAChB,QAAQ,EAAE,CAAC;SACd,CAAC;IACN,CAAC","sourcesContent":["import checkEditInfoState, { ImageEditInfoState } from './checkEditInfoState';\nimport { getMetadata, removeMetadata, setMetadata } from 'roosterjs-editor-dom';\nimport type ImageEditInfo from '../types/ImageEditInfo';\n\n/**\n * @internal\n * Save edit info to image\n * @param image The image to save edit info to\n * @param editInfo The edit info to save\n */\nexport function saveEditInfo(image: HTMLImageElement, editInfo: ImageEditInfo) {\n    if (image) {\n        setMetadata(image, editInfo);\n    }\n}\n\n/**\n * @internal\n * Delete edit info of an image if any\n * @param image The image to delete edit info from\n */\nexport function deleteEditInfo(image: HTMLImageElement) {\n    if (image) {\n        removeMetadata(image);\n    }\n}\n\n/**\n * @internal\n * Get image edit info from an image. If the image doesn't have edit info, create one from this image.\n * When create new edit info, it will have width/height set to the image's current client width/height, and\n * natural width/height set to the image's natural width/height, src set to its current src, and all\n * other fields set to 0.\n * @param image The image to get edit info from\n */\nexport function getEditInfoFromImage(image: HTMLImageElement): ImageEditInfo {\n    const obj = getMetadata<ImageEditInfo>(image);\n    return !obj || checkEditInfoState(obj) == ImageEditInfoState.Invalid\n        ? getInitialEditInfo(image)\n        : obj;\n}\n\nfunction getInitialEditInfo(image: HTMLImageElement): ImageEditInfo {\n    return {\n        src: image.getAttribute('src') || '',\n        widthPx: image.clientWidth,\n        heightPx: image.clientHeight,\n        naturalWidth: image.naturalWidth,\n        naturalHeight: image.naturalHeight,\n        leftPercent: 0,\n        rightPercent: 0,\n        topPercent: 0,\n        bottomPercent: 0,\n        angleRad: 0,\n    };\n}\n"]}