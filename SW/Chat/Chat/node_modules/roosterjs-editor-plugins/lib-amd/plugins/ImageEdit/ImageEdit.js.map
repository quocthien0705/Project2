{"version":3,"file":"ImageEdit.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/ImageEdit.ts"],"names":[],"mappings":"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","sourcesContent":["import applyChange from './editInfoUtils/applyChange';\nimport canRegenerateImage from './api/canRegenerateImage';\nimport DragAndDropHelper from '../../pluginUtils/DragAndDropHelper';\nimport getGeneratedImageSize from './editInfoUtils/getGeneratedImageSize';\nimport { Cropper, getCropHTML } from './imageEditors/Cropper';\nimport { deleteEditInfo, getEditInfoFromImage } from './editInfoUtils/editInfo';\nimport { getRotateHTML, Rotator, updateRotateHandleState } from './imageEditors/Rotator';\nimport { ImageEditElementClass } from './types/ImageEditElementClass';\nimport { MIN_HEIGHT_WIDTH } from './constants/constants';\nimport type { DNDDirectionX, DnDDirectionY } from './types/DragAndDropContext';\nimport type DragAndDropContext from './types/DragAndDropContext';\nimport type DragAndDropHandler from '../../pluginUtils/DragAndDropHandler';\nimport type ImageEditInfo from './types/ImageEditInfo';\nimport type ImageHtmlOptions from './types/ImageHtmlOptions';\nimport {\n    arrayPush,\n    Browser,\n    createElement,\n    getComputedStyle,\n    getObjectKeys,\n    safeInstanceOf,\n    toArray,\n    unwrap,\n    wrap,\n} from 'roosterjs-editor-dom';\nimport type { OnShowResizeHandle } from './imageEditors/Resizer';\nimport {\n    Resizer,\n    doubleCheckResize,\n    getSideResizeHTML,\n    getCornerResizeHTML,\n    getResizeBordersHTML,\n} from './imageEditors/Resizer';\nimport type {\n    ImageEditOptions,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    CreateElementData,\n    ModeIndependentColor,\n} from 'roosterjs-editor-types';\nimport {\n    ImageEditOperation,\n    PluginEventType,\n    KnownCreateElementDataIndex,\n    SelectionRangeTypes,\n    ChangeSource,\n} from 'roosterjs-editor-types';\nimport type { CompatibleImageEditOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\nconst PI = Math.PI;\nconst DIRECTIONS = 8;\nconst DirectionRad = (PI * 2) / DIRECTIONS;\nconst DirectionOrder = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n\n/**\n * Default image edit options\n */\nconst DefaultOptions: Required<ImageEditOptions> = {\n    borderColor: '#DB626C',\n    minWidth: 10,\n    minHeight: 10,\n    preserveRatio: false,\n    minRotateDeg: 5,\n    imageSelector: 'img',\n    rotateIconHTML: '',\n    disableCrop: false,\n    disableRotate: false,\n    disableSideResize: false,\n    onSelectState: ImageEditOperation.ResizeAndRotate,\n    applyChangesOnMouseUp: false,\n};\n\n/**\n * Map the image edit operation to a function that returns editing elements HTML to help\n * build image editing UI\n */\nconst ImageEditHTMLMap = {\n    [ImageEditOperation.CornerResize]: getCornerResizeHTML,\n    [ImageEditOperation.SideResize]: getSideResizeHTML,\n    [ImageEditOperation.Rotate]: getRotateHTML,\n    [ImageEditOperation.Crop]: getCropHTML,\n};\n\n/**\n * Default background colors for rotate handle\n */\nconst LIGHT_MODE_BGCOLOR = 'white';\nconst DARK_MODE_BGCOLOR = '#333';\n\n/**\n * ImageEdit plugin provides the ability to edit an inline image in editor, including image resizing, rotation and cropping\n */\nexport default class ImageEdit implements EditorPlugin {\n    protected editor: IEditor | null = null;\n    protected options: ImageEditOptions;\n    private disposer: (() => void) | null = null;\n\n    // Allowed editing operations\n    private allowedOperations: ImageEditOperation;\n\n    // Current editing image\n    private image: HTMLImageElement | null = null;\n\n    // Image cloned from the current editing image\n    private clonedImage: HTMLImageElement | null = null;\n\n    // The image wrapper\n    private wrapper: HTMLSpanElement | null = null;\n\n    // Current edit info of the image. All changes user made will be stored in this object.\n    // We use this object to update the editing UI, and finally we will use this object to generate\n    // the new image if necessary\n    private editInfo: ImageEditInfo | null = null;\n\n    // Src of the image before current editing\n    private lastSrc: string | null = null;\n\n    // Drag and drop helper objects\n    private dndHelpers: DragAndDropHelper<DragAndDropContext, any>[] = [];\n\n    /**\n     * Identify if the image was resized by the user.\n     */\n    private wasResized: boolean = false;\n\n    /**\n     * The span element that wraps the image and opens shadow dom\n     */\n    private shadowSpan: HTMLSpanElement | null = null;\n\n    /**\n     * The span element that wraps the image and opens shadow dom\n     */\n    private isCropping: boolean = false;\n\n    /**\n     * Create a new instance of ImageEdit\n     * @param options Image editing options\n     * @param onShowResizeHandle An optional callback to allow customize resize handle element of image resizing.\n     * To customize the resize handle element, add this callback and change the attributes of elementData then it\n     * will be picked up by ImageEdit code\n     */\n    constructor(options?: ImageEditOptions, private onShowResizeHandle?: OnShowResizeHandle) {\n        this.options = {\n            ...DefaultOptions,\n            ...(options || {}),\n        };\n\n        this.allowedOperations =\n            ImageEditOperation.CornerResize |\n            (this.options.disableCrop ? 0 : ImageEditOperation.Crop) |\n            (this.options.disableRotate ? 0 : ImageEditOperation.Rotate) |\n            (this.options.disableSideResize ? 0 : ImageEditOperation.SideResize);\n    }\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'ImageEdit';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = editor.addDomEventHandler({\n            blur: () => this.onBlur(),\n            dragstart: e => {\n                if (this.image) {\n                    e.preventDefault();\n                }\n            },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.clearDndHelpers();\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param e PluginEvent object\n     */\n    onPluginEvent(e: PluginEvent) {\n        switch (e.eventType) {\n            case PluginEventType.SelectionChanged:\n                if (\n                    e.selectionRangeEx &&\n                    e.selectionRangeEx.type === SelectionRangeTypes.ImageSelection &&\n                    this.options &&\n                    this.options.onSelectState !== undefined\n                ) {\n                    this.setEditingImage(e.selectionRangeEx.image, this.options.onSelectState);\n                }\n\n                break;\n            case PluginEventType.MouseDown:\n                // When left click in a image that already in editing mode, do not quit edit mode\n                const mouseTarget = e.rawEvent.target;\n                const button = e.rawEvent.button;\n                if (\n                    this.shadowSpan !== mouseTarget ||\n                    (this.shadowSpan === mouseTarget && button !== 0) ||\n                    this.isCropping\n                ) {\n                    this.setEditingImage(null);\n                }\n                break;\n            case PluginEventType.MouseUp:\n                if (this.editor && this.image && this.shadowSpan) {\n                    // When mouse up, if the image and the shadow span exists, the editing mode is on.\n                    // To make sure the selection did not jump to the shadow root, reselect the image.\n                    this.editor.select(this.image);\n                }\n\n                break;\n            case PluginEventType.KeyDown:\n                this.setEditingImage(null);\n                break;\n            case PluginEventType.ContentChanged:\n                //After contentChanged event, the current image wrapper may not be valid any more, remove all of them if any\n                this.removeWrapper();\n                break;\n\n            case PluginEventType.ExtractContentWithDom:\n                // When extract content, remove all image info since they may not be valid when load the content again\n                if (this.options?.imageSelector) {\n                    toArray(e.clonedRoot.querySelectorAll(this.options.imageSelector)).forEach(\n                        img => {\n                            deleteEditInfo(img as HTMLImageElement);\n                        }\n                    );\n                }\n                break;\n            case PluginEventType.BeforeDispose:\n                this.removeWrapper();\n                break;\n        }\n    }\n\n    /**\n     * Check if the given image edit operation is allowed by this plugin\n     * @param operation The image edit operation to check\n     * @returns True means it is allowed, otherwise false\n     */\n    isOperationAllowed(operation: ImageEditOperation): boolean {\n        return !!(this.allowedOperations & operation);\n    }\n\n    /**\n     * Set current image for edit. If there is already image in editing, it will quit editing mode and any pending editing\n     * operation will be submitted\n     * @param image The image to edit\n     * @param operation The editing operation\n     */\n    setEditingImage(\n        image: HTMLImageElement,\n        operation: ImageEditOperation | CompatibleImageEditOperation\n    ): void;\n\n    /**\n     * Stop editing image. If there is already image in editing, it will quit editing mode and any pending editing\n     * operation will be submitted\n     * @param image The image to edit\n     * @param selectImage True to select this image after quit editing mode\n     */\n    setEditingImage(image: null, selectImage?: boolean): void;\n\n    setEditingImage(\n        image: HTMLImageElement | null,\n        operationOrSelect?: ImageEditOperation | CompatibleImageEditOperation | boolean\n    ) {\n        let operation =\n            typeof operationOrSelect === 'number' ? operationOrSelect : ImageEditOperation.None;\n        const selectImage = typeof operationOrSelect === 'number' ? false : !!operationOrSelect;\n\n        if (\n            !image &&\n            this.image &&\n            this.editor &&\n            this.editInfo &&\n            this.lastSrc &&\n            this.clonedImage\n        ) {\n            // When there is image in editing, clean up any cached objects and elements\n            this.clearDndHelpers();\n\n            // Apply the changes, and add undo snapshot if necessary\n            applyChange(\n                this.editor,\n                this.image,\n                this.editInfo,\n                this.lastSrc,\n                this.wasResized || this.isCropping,\n                this.clonedImage\n            );\n\n            // Remove editing wrapper\n            this.removeWrapper();\n\n            this.editor.addUndoSnapshot(() => this.image, ChangeSource.ImageResize);\n\n            if (selectImage) {\n                this.editor.select(this.image);\n            }\n\n            this.image = null;\n            this.editInfo = null;\n            this.lastSrc = null;\n            this.clonedImage = null;\n            this.isCropping = false;\n        }\n\n        if (!this.image && image?.isContentEditable && this.editor) {\n            // If there is new image to edit, enter editing mode for this image\n            this.editor.addUndoSnapshot();\n            this.image = image;\n\n            // Get initial edit info\n            this.editInfo = getEditInfoFromImage(image);\n\n            //Check if the image was resized by the user\n            this.wasResized = checkIfImageWasResized(this.image);\n\n            operation =\n                (canRegenerateImage(image) ? operation : ImageEditOperation.Resize) &\n                this.allowedOperations;\n\n            // Create and update editing wrapper and elements\n            this.createWrapper(operation);\n            this.updateWrapper();\n\n            // Init drag and drop\n            this.dndHelpers = [\n                ...this.createDndHelpers(ImageEditElementClass.ResizeHandle, Resizer),\n                ...this.createDndHelpers(ImageEditElementClass.RotateHandle, Rotator),\n                ...this.createDndHelpers(ImageEditElementClass.CropHandle, Cropper),\n                ...this.createDndHelpers(ImageEditElementClass.CropContainer, Cropper),\n            ];\n\n            this.editor.select(this.image);\n        }\n    }\n\n    /**\n     * Flip the image.\n     * @param image The image to be flipped\n     * @param direction\n     */\n    public flipImage(image: HTMLImageElement, direction: 'vertical' | 'horizontal') {\n        this.image = image;\n        this.editInfo = getEditInfoFromImage(image);\n        const { angleRad } = this.editInfo;\n        const isInVerticalPostion =\n            (angleRad >= Math.PI / 2 && angleRad < (3 * Math.PI) / 4) ||\n            (angleRad <= -Math.PI / 2 && angleRad > (-3 * Math.PI) / 4);\n        if (isInVerticalPostion) {\n            if (direction === 'horizontal') {\n                this.editInfo.flippedVertical = !this.editInfo.flippedVertical;\n            } else {\n                this.editInfo.flippedHorizontal = !this.editInfo.flippedHorizontal;\n            }\n        } else {\n            if (direction === 'vertical') {\n                this.editInfo.flippedVertical = !this.editInfo.flippedVertical;\n            } else {\n                this.editInfo.flippedHorizontal = !this.editInfo.flippedHorizontal;\n            }\n        }\n        this.createWrapper(ImageEditOperation.Rotate);\n        this.updateWrapper();\n        this.setEditingImage(null);\n        this.editor?.select(image);\n    }\n\n    /**\n     * Rotate the image in radian angle.\n     * @param image The image to be rotated\n     * @param angleRad The angle in radian that the image must be rotated.\n     */\n    public rotateImage(image: HTMLImageElement, angleRad: number) {\n        this.image = image;\n        this.editInfo = getEditInfoFromImage(image);\n        this.editInfo.angleRad = this.editInfo.angleRad + angleRad;\n        this.createWrapper(ImageEditOperation.Rotate);\n        this.updateWrapper();\n        this.setEditingImage(null);\n        this.editor?.select(image);\n    }\n\n    /**\n     * quit editing mode when editor lose focus\n     */\n    private onBlur = () => {\n        this.setEditingImage(null, false /* selectImage */);\n    };\n    /**\n     * Create editing wrapper for the image\n     */\n    private createWrapper(operation: ImageEditOperation | CompatibleImageEditOperation) {\n        if (this.image && this.editor && this.options && this.editInfo) {\n            //Clone the image and insert the clone in a entity\n            this.clonedImage = this.image.cloneNode(true) as HTMLImageElement;\n            this.clonedImage.removeAttribute('id');\n            this.clonedImage.style.removeProperty('max-width');\n            this.clonedImage.style.removeProperty('max-height');\n            this.clonedImage.style.width = this.editInfo.widthPx + 'px';\n            this.clonedImage.style.height = this.editInfo.heightPx + 'px';\n            this.wrapper = createElement(\n                KnownCreateElementDataIndex.ImageEditWrapper,\n                this.image.ownerDocument\n            ) as HTMLSpanElement;\n            this.wrapper?.firstChild?.appendChild(this.clonedImage);\n            this.wrapper.style.display = Browser.isSafari ? 'inline-block' : 'inline-flex';\n\n            // Cache current src so that we can compare it after edit see if src is changed\n            this.lastSrc = this.image.getAttribute('src');\n\n            // Set image src to original src to help show editing UI, also it will be used when regenerate image dataURL after editing\n            if (this.clonedImage) {\n                this.clonedImage.src = this.editInfo.src;\n                this.clonedImage.style.position = 'absolute';\n            }\n\n            // Get HTML for all edit elements (resize handle, rotate handle, crop handle and overlay, ...) and create HTML element\n            const options: ImageHtmlOptions = {\n                borderColor: getColorString(this.options.borderColor!, this.editor.isDarkMode()),\n                rotateIconHTML: this.options.rotateIconHTML!,\n                rotateHandleBackColor: this.editor.isDarkMode()\n                    ? DARK_MODE_BGCOLOR\n                    : LIGHT_MODE_BGCOLOR,\n                isSmallImage: isASmallImage(this.editInfo.widthPx, this.editInfo.heightPx),\n            };\n            const htmlData: CreateElementData[] = [getResizeBordersHTML(options)];\n\n            getObjectKeys(ImageEditHTMLMap).forEach(thisOperation => {\n                const element = ImageEditHTMLMap[thisOperation](options, this.onShowResizeHandle);\n                if ((operation & thisOperation) == thisOperation && element) {\n                    arrayPush(htmlData, element);\n                }\n            });\n\n            htmlData.forEach(data => {\n                const element = createElement(data, this.image!.ownerDocument);\n                if (element && this.wrapper) {\n                    this.wrapper.appendChild(element);\n                }\n            });\n            this.insertImageWrapper(this.wrapper);\n        }\n    }\n\n    /**\n     * EXPORTED FOR TESTING PURPOSES ONLY\n     * @param wrapper\n     */\n\n    public insertImageWrapper(wrapper: HTMLSpanElement) {\n        if (this.image) {\n            this.shadowSpan = wrap(this.image, 'span');\n            if (this.shadowSpan) {\n                const shadowRoot = this.shadowSpan.attachShadow({\n                    mode: 'open',\n                });\n\n                this.shadowSpan.style.verticalAlign = 'bottom';\n                wrapper.style.fontSize = '24px';\n                if (this.options.applyChangesOnMouseUp) {\n                    wrapper.addEventListener(\n                        'mouseup',\n                        this.changesWhenMouseUp,\n                        true /* useCapture*/\n                    );\n                }\n                shadowRoot.appendChild(wrapper);\n            }\n        }\n    }\n\n    /**\n     * Remove the temp wrapper of the image\n     */\n    private removeWrapper = () => {\n        if (this.shadowSpan) {\n            unwrap(this.shadowSpan);\n        }\n        if (this.options.applyChangesOnMouseUp) {\n            this.wrapper?.removeEventListener(\n                'mouseup',\n                this.changesWhenMouseUp,\n                true /* useCapture*/\n            );\n        }\n        this.wrapper = null;\n        this.shadowSpan = null;\n    };\n\n    private changesWhenMouseUp = () => {\n        if (this.editor && this.image && this.editInfo && this.lastSrc && this.clonedImage) {\n            applyChange(\n                this.editor,\n                this.image,\n                this.editInfo,\n                this.lastSrc,\n                this.wasResized,\n                this.clonedImage,\n                this.options.applyChangesOnMouseUp\n            );\n        }\n    };\n\n    /**\n     * Update image edit elements to reflect current editing result\n     * @param context\n     */\n    private updateWrapper = (context?: DragAndDropContext) => {\n        const wrapper = this.wrapper;\n        if (\n            wrapper &&\n            this.editInfo &&\n            this.image &&\n            this.clonedImage &&\n            this.options &&\n            this.shadowSpan?.parentElement\n        ) {\n            // Prepare: get related editing elements\n            const cropContainers = getEditElements(wrapper, ImageEditElementClass.CropContainer);\n            const cropOverlays = getEditElements(wrapper, ImageEditElementClass.CropOverlay);\n            const resizeHandles = getEditElements(wrapper, ImageEditElementClass.ResizeHandle);\n            const rotateCenter = getEditElements(wrapper, ImageEditElementClass.RotateCenter)[0];\n            const rotateHandle = getEditElements(wrapper, ImageEditElementClass.RotateHandle)[0];\n            const cropHandles = getEditElements(wrapper, ImageEditElementClass.CropHandle);\n\n            // Cropping and resizing will show different UI, so check if it is cropping here first\n            this.isCropping = cropContainers.length == 1 && cropOverlays.length == 4;\n            const {\n                angleRad,\n                bottomPercent,\n                leftPercent,\n                rightPercent,\n                topPercent,\n                flippedHorizontal,\n                flippedVertical,\n            } = this.editInfo;\n\n            // Width/height of the image\n            const {\n                targetWidth,\n                targetHeight,\n                originalWidth,\n                originalHeight,\n                visibleWidth,\n                visibleHeight,\n            } = getGeneratedImageSize(this.editInfo, this.isCropping);\n\n            const marginHorizontal = (targetWidth - visibleWidth) / 2;\n            const marginVertical = (targetHeight - visibleHeight) / 2;\n            const cropLeftPx = originalWidth * leftPercent;\n            const cropRightPx = originalWidth * rightPercent;\n            const cropTopPx = originalHeight * topPercent;\n            const cropBottomPx = originalHeight * bottomPercent;\n\n            // Update size and margin of the wrapper\n            wrapper.style.margin = `${marginVertical}px ${marginHorizontal}px`;\n            wrapper.style.transform = `rotate(${angleRad}rad)`;\n            setWrapperSizeDimensions(wrapper, this.image, visibleWidth, visibleHeight);\n\n            // Update the text-alignment to avoid the image to overflow if the parent element have align center or right\n            // or if the direction is Right To Left\n            wrapper.style.textAlign = isRtl(this.shadowSpan.parentElement) ? 'right' : 'left';\n\n            // Update size of the image\n            this.clonedImage.style.width = getPx(originalWidth);\n            this.clonedImage.style.height = getPx(originalHeight);\n\n            //Update flip direction\n            setFlipped(this.clonedImage.parentElement, flippedHorizontal, flippedVertical);\n\n            if (this.isCropping) {\n                // For crop, we also need to set position of the overlays\n                setSize(\n                    cropContainers[0],\n                    cropLeftPx,\n                    cropTopPx,\n                    cropRightPx,\n                    cropBottomPx,\n                    undefined,\n                    undefined\n                );\n                setSize(cropOverlays[0], 0, 0, cropRightPx, undefined, undefined, cropTopPx);\n                setSize(cropOverlays[1], undefined, 0, 0, cropBottomPx, cropRightPx, undefined);\n                setSize(cropOverlays[2], cropLeftPx, undefined, 0, 0, undefined, cropBottomPx);\n                setSize(cropOverlays[3], 0, cropTopPx, undefined, 0, cropLeftPx, undefined);\n\n                updateHandleCursor(cropHandles, angleRad);\n            } else {\n                // For rotate/resize, set the margin of the image so that cropped part won't be visible\n                this.clonedImage.style.margin = `${-cropTopPx}px 0 0 ${-cropLeftPx}px`;\n\n                // Double check resize\n                if (context?.elementClass == ImageEditElementClass.ResizeHandle) {\n                    const clientWidth = wrapper.clientWidth;\n                    const clientHeight = wrapper.clientHeight;\n                    this.wasResized = true;\n                    doubleCheckResize(\n                        this.editInfo,\n                        this.options.preserveRatio || false,\n                        clientWidth,\n                        clientHeight\n                    );\n\n                    this.updateWrapper();\n                }\n\n                const viewport = this.editor?.getVisibleViewport();\n                const isSmall = isASmallImage(targetWidth, targetHeight);\n                if (rotateHandle && rotateCenter && viewport) {\n                    updateRotateHandleState(\n                        viewport,\n                        angleRad,\n                        wrapper,\n                        rotateCenter,\n                        rotateHandle,\n                        isSmall\n                    );\n                }\n\n                updateSideHandlesVisibility(resizeHandles, isSmall);\n\n                updateHandleCursor(resizeHandles, angleRad);\n            }\n        }\n    };\n\n    /**\n     * Create drag and drop helpers\n     * @param wrapper\n     * @param elementClass\n     * @param dragAndDrop\n     */\n    private createDndHelpers(\n        elementClass: ImageEditElementClass,\n        dragAndDrop: DragAndDropHandler<DragAndDropContext, any>\n    ): DragAndDropHelper<DragAndDropContext, any>[] {\n        const wrapper = this.wrapper;\n        return wrapper && this.editInfo\n            ? getEditElements(wrapper, elementClass).map(\n                  element =>\n                      new DragAndDropHelper<DragAndDropContext, any>(\n                          element,\n                          {\n                              editInfo: this.editInfo!,\n                              options: this.options,\n                              elementClass,\n                              x: element.dataset.x as DNDDirectionX,\n                              y: element.dataset.y as DnDDirectionY,\n                          },\n                          this.updateWrapper,\n                          dragAndDrop,\n                          this.editor ? this.editor.getZoomScale() : 1\n                      )\n              )\n            : [];\n    }\n\n    /**\n     * Clean up drag and drop helpers\n     */\n    private clearDndHelpers() {\n        this.dndHelpers?.forEach(helper => helper.dispose());\n        this.dndHelpers = [];\n    }\n}\n\nfunction setSize(\n    element: HTMLElement,\n    left: number | undefined,\n    top: number | undefined,\n    right: number | undefined,\n    bottom: number | undefined,\n    width: number | undefined,\n    height: number | undefined\n) {\n    element.style.left = left !== undefined ? getPx(left) : element.style.left;\n    element.style.top = top !== undefined ? getPx(top) : element.style.top;\n    element.style.right = right !== undefined ? getPx(right) : element.style.right;\n    element.style.bottom = bottom !== undefined ? getPx(bottom) : element.style.bottom;\n    element.style.width = width !== undefined ? getPx(width) : element.style.width;\n    element.style.height = height !== undefined ? getPx(height) : element.style.height;\n}\n\nfunction setWrapperSizeDimensions(\n    wrapper: HTMLElement,\n    image: HTMLImageElement,\n    width: number,\n    height: number\n) {\n    const hasBorder = image.style.borderStyle;\n    if (hasBorder) {\n        const borderWidth = image.style.borderWidth ? 2 * parseInt(image.style.borderWidth) : 2;\n        wrapper.style.width = getPx(width + borderWidth);\n        wrapper.style.height = getPx(height + borderWidth);\n        return;\n    }\n    wrapper.style.width = getPx(width);\n    wrapper.style.height = getPx(height);\n}\n\nfunction getPx(value: number): string {\n    return value + 'px';\n}\n\nfunction getEditElements(wrapper: HTMLElement, elementClass: ImageEditElementClass): HTMLElement[] {\n    return toArray(wrapper.querySelectorAll('.' + elementClass)) as HTMLElement[];\n}\n\nfunction isRtl(element: Node): boolean {\n    return safeInstanceOf(element, 'HTMLElement')\n        ? getComputedStyle(element, 'direction') == 'rtl'\n        : false;\n}\n\nfunction handleRadIndexCalculator(angleRad: number): number {\n    const idx = Math.round(angleRad / DirectionRad) % DIRECTIONS;\n    return idx < 0 ? idx + DIRECTIONS : idx;\n}\n\nfunction rotateHandles(angleRad: number, y: string = '', x: string = ''): string {\n    const radIndex = handleRadIndexCalculator(angleRad);\n    const originalDirection = y + x;\n    const originalIndex = DirectionOrder.indexOf(originalDirection);\n    const rotatedIndex = originalIndex >= 0 && originalIndex + radIndex;\n    return rotatedIndex ? DirectionOrder[rotatedIndex % DIRECTIONS] : '';\n}\n\n/**\n * Rotate the resizer and cropper handles according to the image position.\n * @param handles The resizer handles.\n * @param angleRad The angle that the image was rotated.\n */\nfunction updateHandleCursor(handles: HTMLElement[], angleRad: number) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        handle.style.cursor = `${rotateHandles(angleRad, y, x)}-resize`;\n    });\n}\n\nfunction updateSideHandlesVisibility(handles: HTMLElement[], isSmall: boolean) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        const coordinate = (y ?? '') + (x ?? '');\n        const directions = ['n', 's', 'e', 'w'];\n        const isSideHandle = directions.indexOf(coordinate) > -1;\n        handle.style.display = isSideHandle && isSmall ? 'none' : '';\n    });\n}\n\n/**\n * Check if the current image was resized by the user\n * @param image the current image\n * @returns if the user resized the image, returns true, otherwise, returns false\n */\nfunction checkIfImageWasResized(image: HTMLImageElement): boolean {\n    const { width, height, style } = image;\n    const isMaxWidthInitial =\n        style.maxWidth === '' || style.maxWidth === 'initial' || style.maxWidth === 'auto';\n    if (\n        isMaxWidthInitial &&\n        (isFixedNumberValue(style.height) ||\n            isFixedNumberValue(style.width) ||\n            isFixedNumberValue(width) ||\n            isFixedNumberValue(height))\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isFixedNumberValue(value: string | number) {\n    const numberValue = typeof value === 'string' ? parseInt(value) : value;\n    return !isNaN(numberValue);\n}\n\nfunction isASmallImage(widthPx: number, heightPx: number): boolean {\n    return widthPx && heightPx && (widthPx < MIN_HEIGHT_WIDTH || heightPx < MIN_HEIGHT_WIDTH)\n        ? true\n        : false;\n}\n\nfunction getColorString(color: string | ModeIndependentColor, isDarkMode: boolean): string {\n    if (typeof color === 'string') {\n        return color.trim();\n    }\n    return isDarkMode ? color.darkModeColor.trim() : color.lightModeColor.trim();\n}\n\nfunction setFlipped(\n    element: HTMLElement | null,\n    flippedHorizontally?: boolean,\n    flippedVertically?: boolean\n) {\n    if (element) {\n        element.style.transform = `scale(${flippedHorizontally ? -1 : 1}, ${\n            flippedVertically ? -1 : 1\n        })`;\n    }\n}\n"]}