{"version":3,"file":"Resizer.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/imageEditors/Resizer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageEditElementClass } from '../types/ImageEditElementClass';\nimport { RESIZE_HANDLE_MARGIN, RESIZE_HANDLE_SIZE, Xs, Ys } from '../constants/constants';\nimport type { DNDDirectionX, DnDDirectionY } from '../types/DragAndDropContext';\nimport type DragAndDropContext from '../types/DragAndDropContext';\nimport type DragAndDropHandler from '../../../pluginUtils/DragAndDropHandler';\nimport type { ResizeInfo } from '../types/ImageEditInfo';\nimport type ImageEditInfo from '../types/ImageEditInfo';\nimport type ImageHtmlOptions from '../types/ImageHtmlOptions';\nimport type { CreateElementData } from 'roosterjs-editor-types';\n\n/**\n * An optional callback to allow customize resize handle element of image resizing.\n * To customize the resize handle element, add this callback and change the attributes of elementData then it\n * will be picked up by ImageEdit code\n */\nexport interface OnShowResizeHandle {\n    (elementData: CreateElementData, x: DNDDirectionX, y: DnDDirectionY): void;\n}\n\nconst enum HandleTypes {\n    SquareHandles,\n    CircularHandlesCorner,\n}\n\n/**\n * @internal\n * The resize drag and drop handler\n */\nexport const Resizer: DragAndDropHandler<DragAndDropContext, ResizeInfo> = {\n    onDragStart: ({ editInfo }) => ({ ...editInfo }),\n    onDragging: ({ x, y, editInfo, options }, e, base, deltaX, deltaY) => {\n        const ratio =\n            base.widthPx > 0 && base.heightPx > 0 ? (base.widthPx * 1.0) / base.heightPx : 0;\n\n        [deltaX, deltaY] = rotateCoordinate(deltaX, deltaY, editInfo.angleRad);\n        if (options.minWidth !== undefined && options.minHeight !== undefined) {\n            const horizontalOnly = x == '';\n            const verticalOnly = y == '';\n            const shouldPreserveRatio =\n                !(horizontalOnly || verticalOnly) && (options.preserveRatio || e.shiftKey);\n            let newWidth = horizontalOnly\n                ? base.widthPx\n                : Math.max(base.widthPx + deltaX * (x == 'w' ? -1 : 1), options.minWidth);\n            let newHeight = verticalOnly\n                ? base.heightPx\n                : Math.max(base.heightPx + deltaY * (y == 'n' ? -1 : 1), options.minHeight);\n\n            if (shouldPreserveRatio && ratio > 0) {\n                if (ratio > 1) {\n                    // first sure newHeight is right，calculate newWidth\n                    newWidth = newHeight * ratio;\n                    if (newWidth < options.minWidth) {\n                        newWidth = options.minWidth;\n                        newHeight = newWidth / ratio;\n                    }\n                } else {\n                    // first sure newWidth is right，calculate newHeight\n                    newHeight = newWidth / ratio;\n                    if (newHeight < options.minHeight) {\n                        newHeight = options.minHeight;\n                        newWidth = newHeight * ratio;\n                    }\n                }\n            }\n            editInfo.widthPx = newWidth;\n            editInfo.heightPx = newHeight;\n            return true;\n        } else {\n            return false;\n        }\n    },\n};\n\n/**\n * @internal Calculate the rotated x and y distance for mouse moving\n * @param x Original x distance\n * @param y Original y distance\n * @param angle Rotated angle, in radian\n * @returns rotated x and y distances\n */\nexport function rotateCoordinate(x: number, y: number, angle: number): [number, number] {\n    if (x == 0 && y == 0) {\n        return [0, 0];\n    }\n    const hypotenuse = Math.sqrt(x * x + y * y);\n    angle = Math.atan2(y, x) - angle;\n    return [hypotenuse * Math.cos(angle), hypotenuse * Math.sin(angle)];\n}\n\n/**\n * @internal\n * Double check if the changed size can satisfy current width of container.\n * When resize an image and preserve ratio, its size can be limited by the size of container.\n * So we need to check the actual size and calculate the size again\n * @param editInfo Edit info of the image\n * @param preserveRatio Whether w/h ratio need to be preserved\n * @param actualWidth Actual width of the image after resize\n * @param actualHeight Actual height of the image after resize\n */\nexport function doubleCheckResize(\n    editInfo: ImageEditInfo,\n    preserveRatio: boolean,\n    actualWidth: number,\n    actualHeight: number\n) {\n    let { widthPx, heightPx } = editInfo;\n    const ratio = heightPx > 0 ? widthPx / heightPx : 0;\n\n    actualWidth = Math.floor(actualWidth);\n    actualHeight = Math.floor(actualHeight);\n    widthPx = Math.floor(widthPx);\n    heightPx = Math.floor(heightPx);\n\n    editInfo.widthPx = actualWidth;\n    editInfo.heightPx = actualHeight;\n\n    if (preserveRatio && ratio > 0 && (widthPx !== actualWidth || heightPx !== actualHeight)) {\n        if (actualWidth < widthPx) {\n            editInfo.heightPx = actualWidth / ratio;\n        } else {\n            editInfo.widthPx = actualHeight * ratio;\n        }\n    }\n}\n\n/**\n * @internal\n * Get HTML for resize handles at the corners\n */\nexport function getCornerResizeHTML(\n    { borderColor: resizeBorderColor }: ImageHtmlOptions,\n    onShowResizeHandle?: OnShowResizeHandle\n): CreateElementData[] {\n    const result: CreateElementData[] = [];\n\n    Xs.forEach(x =>\n        Ys.forEach(y => {\n            const elementData =\n                (x == '') == (y == '')\n                    ? getResizeHandleHTML(\n                          x,\n                          y,\n                          resizeBorderColor,\n                          HandleTypes.CircularHandlesCorner\n                      )\n                    : null;\n            if (onShowResizeHandle && elementData) {\n                onShowResizeHandle(elementData, x, y);\n            }\n            if (elementData) {\n                result.push(elementData);\n            }\n        })\n    );\n    return result;\n}\n\n/**\n * @internal\n * Get HTML for resize handles on the sides\n */\nexport function getSideResizeHTML(\n    { borderColor: resizeBorderColor }: ImageHtmlOptions,\n    onShowResizeHandle?: OnShowResizeHandle\n): CreateElementData[] {\n    const result: CreateElementData[] = [];\n    Xs.forEach(x =>\n        Ys.forEach(y => {\n            const elementData =\n                (x == '') != (y == '')\n                    ? getResizeHandleHTML(\n                          x,\n                          y,\n                          resizeBorderColor,\n                          HandleTypes.CircularHandlesCorner\n                      )\n                    : null;\n            if (onShowResizeHandle && elementData) {\n                onShowResizeHandle(elementData, x, y);\n            }\n            if (elementData) {\n                result.push(elementData);\n            }\n        })\n    );\n    return result;\n}\n\n/**\n * @internal\n * Get HTML for resize borders\n */\nexport function getResizeBordersHTML({\n    borderColor: resizeBorderColor,\n}: ImageHtmlOptions): CreateElementData {\n    return {\n        tag: 'div',\n        style: `position:absolute;left:0;right:0;top:0;bottom:0;border:solid 2px ${resizeBorderColor};pointer-events:none;`,\n    };\n}\n\nfunction getResizeHandleHTML(\n    x: DNDDirectionX,\n    y: DnDDirectionY,\n    borderColor: string,\n    handleTypes: HandleTypes\n): CreateElementData | null {\n    const leftOrRight = x == 'w' ? 'left' : 'right';\n    const topOrBottom = y == 'n' ? 'top' : 'bottom';\n    const leftOrRightValue = x == '' ? '50%' : '0px';\n    const topOrBottomValue = y == '' ? '50%' : '0px';\n    const direction = y + x;\n    return x == '' && y == ''\n        ? null\n        : {\n              tag: 'div',\n              style: `position:absolute;${leftOrRight}:${leftOrRightValue};${topOrBottom}:${topOrBottomValue}`,\n              children: [\n                  {\n                      tag: 'div',\n                      style: setHandleStyle[handleTypes](\n                          direction,\n                          topOrBottom,\n                          leftOrRight,\n                          borderColor\n                      ),\n                      className: ImageEditElementClass.ResizeHandle,\n                      dataset: { x, y },\n                  },\n              ],\n          };\n}\n\nconst setHandleStyle: Record<\n    HandleTypes,\n    (direction: string, topOrBottom: string, leftOrRight: string, borderColor: string) => string\n> = {\n    0: (direction, leftOrRight, topOrBottom, borderColor) =>\n        `position:relative;width:${RESIZE_HANDLE_SIZE}px;height:${RESIZE_HANDLE_SIZE}px;background-color: ${borderColor};cursor:${direction}-resize;${topOrBottom}:-${RESIZE_HANDLE_MARGIN}px;${leftOrRight}:-${RESIZE_HANDLE_MARGIN}px;`,\n    1: (direction, leftOrRight, topOrBottom) =>\n        `position:relative;width:${RESIZE_HANDLE_SIZE}px;height:${RESIZE_HANDLE_SIZE}px;background-color: #FFFFFF;cursor:${direction}-resize;${topOrBottom}:-${RESIZE_HANDLE_MARGIN}px;${leftOrRight}:-${RESIZE_HANDLE_MARGIN}px;border-radius:100%;border: 2px solid #bfbfbf;box-shadow: 0px 0.36316px 1.36185px rgba(100, 100, 100, 0.25);`,\n};\n"]}