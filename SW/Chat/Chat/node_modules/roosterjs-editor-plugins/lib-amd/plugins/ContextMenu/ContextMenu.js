define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * An editor plugin that support showing a context menu using render() function from options parameter
     */
    var ContextMenu = /** @class */ (function () {
        /**
         * Create a new instance of ContextMenu class
         * @param options An options object to determine how to show/hide the context menu
         */
        function ContextMenu(options) {
            var _this = this;
            this.options = options;
            this.container = null;
            this.editor = null;
            this.isMenuShowing = false;
            this.onDismiss = function () {
                var _a, _b;
                if (_this.container && _this.isMenuShowing) {
                    (_b = (_a = _this.options).dismiss) === null || _b === void 0 ? void 0 : _b.call(_a, _this.container);
                    _this.isMenuShowing = false;
                }
            };
        }
        /**
         * Get a friendly name of  this plugin
         */
        ContextMenu.prototype.getName = function () {
            return 'ContextMenu';
        };
        /**
         * Initialize this plugin
         * @param editor The editor instance
         */
        ContextMenu.prototype.initialize = function (editor) {
            this.editor = editor;
        };
        /**
         * Dispose this plugin
         */
        ContextMenu.prototype.dispose = function () {
            var _a;
            this.onDismiss();
            if ((_a = this.container) === null || _a === void 0 ? void 0 : _a.parentNode) {
                this.container.parentNode.removeChild(this.container);
                this.container = null;
            }
            this.editor = null;
        };
        /**
         * Handle events triggered from editor
         * @param event PluginEvent object
         */
        ContextMenu.prototype.onPluginEvent = function (event) {
            if (event.eventType == 16 /* ContextMenu */ && event.items.length > 0) {
                var rawEvent = event.rawEvent, items = event.items;
                this.onDismiss();
                if (!this.options.allowDefaultMenu) {
                    rawEvent.preventDefault();
                }
                if (this.initContainer(rawEvent.pageX, rawEvent.pageY)) {
                    this.options.render(this.container, items, this.onDismiss);
                    this.isMenuShowing = true;
                }
            }
        };
        ContextMenu.prototype.initContainer = function (x, y) {
            var _a, _b;
            if (!this.container && this.editor) {
                this.container = (0, roosterjs_editor_dom_1.createElement)(5 /* ContextMenuWrapper */, this.editor.getDocument());
                this.editor.getDocument().body.appendChild(this.container);
            }
            (_a = this.container) === null || _a === void 0 ? void 0 : _a.style.setProperty('left', x + 'px');
            (_b = this.container) === null || _b === void 0 ? void 0 : _b.style.setProperty('top', y + 'px');
            return !!this.container;
        };
        return ContextMenu;
    }());
    exports.default = ContextMenu;
});
//# sourceMappingURL=ContextMenu.js.map