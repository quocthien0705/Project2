{"version":3,"file":"ContextMenu.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContextMenu/ContextMenu.ts"],"names":[],"mappings":";;;IA8BA;;OAEG;IACH;QAKI;;;WAGG;QACH,qBAAoB,OAA8B;YAAlD,iBAAsD;YAAlC,YAAO,GAAP,OAAO,CAAuB;YAR1C,cAAS,GAAuB,IAAI,CAAC;YACrC,WAAM,GAAmB,IAAI,CAAC;YAC9B,kBAAa,GAAY,KAAK,CAAC;YAsE/B,cAAS,GAAG;;gBAChB,IAAI,KAAI,CAAC,SAAS,IAAI,KAAI,CAAC,aAAa,EAAE;oBACtC,MAAA,MAAA,KAAI,CAAC,OAAO,EAAC,OAAO,mDAAG,KAAI,CAAC,SAAS,CAAC,CAAC;oBACvC,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;iBAC9B;YACL,CAAC,CAAC;QArEmD,CAAC;QAEtD;;WAEG;QACH,6BAAO,GAAP;YACI,OAAO,aAAa,CAAC;QACzB,CAAC;QAED;;;WAGG;QACH,gCAAU,GAAV,UAAW,MAAe;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QAED;;WAEG;QACH,6BAAO,GAAP;;YACI,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,IAAI,MAAA,IAAI,CAAC,SAAS,0CAAE,UAAU,EAAE;gBAC5B,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;YACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED;;;WAGG;QACH,mCAAa,GAAb,UAAc,KAAkB;YAC5B,IAAI,KAAK,CAAC,SAAS,wBAA+B,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClE,IAAA,QAAQ,GAAY,KAAK,SAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;gBAElC,IAAI,CAAC,SAAS,EAAE,CAAC;gBAEjB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;oBAChC,QAAQ,CAAC,cAAc,EAAE,CAAC;iBAC7B;gBAED,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE;oBACpD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAU,EAAE,KAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;oBACnE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;iBAC7B;aACJ;QACL,CAAC;QAEO,mCAAa,GAArB,UAAsB,CAAS,EAAE,CAAS;;YACtC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;gBAChC,IAAI,CAAC,SAAS,GAAG,IAAA,oCAAa,8BAE1B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CACb,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9D;YACD,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACpD,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACnD,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QAC5B,CAAC;QAQL,kBAAC;IAAD,CAAC,AA/ED,IA+EC","sourcesContent":["import { createElement } from 'roosterjs-editor-dom';\nimport { KnownCreateElementDataIndex, PluginEventType } from 'roosterjs-editor-types';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * Context Menu options for ContextMenu plugin\n */\nexport interface ContextMenuOptions<T> {\n    /**\n     * Render function for the context menu\n     * @param container The container HTML element, it will be located at the mouse click position,\n     * so the callback just need to render menu content into this container\n     * @param onDismiss The onDismiss callback, some menu render need to know this callback so that\n     * it can handle the dismiss event\n     */\n    render: (container: HTMLElement, items: (T | null)[], onDismiss: () => void) => void;\n\n    /**\n     * Dismiss function for the context menu, it will be called when user wants to dismiss this context menu\n     * e.g. user click away so the menu should be dismissed\n     * @param container The container HTML element\n     */\n    dismiss?: (container: HTMLElement) => void;\n\n    /**\n     * Whether the default context menu is allowed. @default false\n     */\n    allowDefaultMenu?: boolean;\n}\n\n/**\n * An editor plugin that support showing a context menu using render() function from options parameter\n */\nexport default class ContextMenu<T> implements EditorPlugin {\n    private container: HTMLElement | null = null;\n    private editor: IEditor | null = null;\n    private isMenuShowing: boolean = false;\n\n    /**\n     * Create a new instance of ContextMenu class\n     * @param options An options object to determine how to show/hide the context menu\n     */\n    constructor(private options: ContextMenuOptions<T>) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'ContextMenu';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.onDismiss();\n\n        if (this.container?.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n            this.container = null;\n        }\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.ContextMenu && event.items.length > 0) {\n            const { rawEvent, items } = event;\n\n            this.onDismiss();\n\n            if (!this.options.allowDefaultMenu) {\n                rawEvent.preventDefault();\n            }\n\n            if (this.initContainer(rawEvent.pageX, rawEvent.pageY)) {\n                this.options.render(this.container!, items as T[], this.onDismiss);\n                this.isMenuShowing = true;\n            }\n        }\n    }\n\n    private initContainer(x: number, y: number) {\n        if (!this.container && this.editor) {\n            this.container = createElement(\n                KnownCreateElementDataIndex.ContextMenuWrapper,\n                this.editor.getDocument()\n            ) as HTMLElement;\n            this.editor.getDocument().body.appendChild(this.container);\n        }\n        this.container?.style.setProperty('left', x + 'px');\n        this.container?.style.setProperty('top', y + 'px');\n        return !!this.container;\n    }\n\n    private onDismiss = () => {\n        if (this.container && this.isMenuShowing) {\n            this.options.dismiss?.(this.container);\n            this.isMenuShowing = false;\n        }\n    };\n}\n"]}