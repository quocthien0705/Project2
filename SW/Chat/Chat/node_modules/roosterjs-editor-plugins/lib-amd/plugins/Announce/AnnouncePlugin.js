define(["require", "exports", "./features/AnnounceFeatures", "roosterjs-editor-dom"], function (require, exports, AnnounceFeatures_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ARIA_LIVE_STYLE = 'clip: rect(0px, 0px, 0px, 0px); clip-path: inset(100%); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px;';
    var ARIA_LIVE_ASSERTIVE = 'assertive';
    var DIV_TAG = 'div';
    var createAriaLiveElement = function (document) {
        var element = (0, roosterjs_editor_dom_1.createElement)({
            tag: DIV_TAG,
            style: ARIA_LIVE_STYLE,
            attributes: {
                'aria-live': ARIA_LIVE_ASSERTIVE,
            },
        }, document);
        document.body.appendChild(element);
        return element;
    };
    /**
     * Announce messages to screen reader by using aria live element.
     */
    var Announce = /** @class */ (function () {
        function Announce(stringsMapOrGetter, skipAnnounceFeatures, additionalFeatures) {
            if (skipAnnounceFeatures === void 0) { skipAnnounceFeatures = []; }
            this.stringsMapOrGetter = stringsMapOrGetter;
            this.lastFocusedElement = null;
            this.features = (0, roosterjs_editor_dom_1.getObjectKeys)(AnnounceFeatures_1.AnnounceFeatures)
                .map(function (key) {
                if (skipAnnounceFeatures.indexOf(key) == -1) {
                    return AnnounceFeatures_1.AnnounceFeatures[key];
                }
                return undefined;
            })
                .filter(function (feature) { return !!feature; })
                .concat(additionalFeatures || []);
        }
        /**
         * Get a friendly name of this plugin
         */
        Announce.prototype.getName = function () {
            return 'Announce';
        };
        /**
         * Initialize this plugin
         * @param editor The editor instance
         */
        Announce.prototype.initialize = function (editor) {
            this.editor = editor;
        };
        /**
         * Dispose this plugin
         */
        Announce.prototype.dispose = function () {
            var _a, _b;
            (_b = (_a = this.ariaLiveElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.ariaLiveElement);
            this.ariaLiveElement = undefined;
            this.stringsMapOrGetter = undefined;
            this.lastFocusedElement = null;
            while (this.features.length > 0) {
                this.features.pop();
            }
            this.editor = undefined;
        };
        /**
         * Handle events triggered from editor
         * @param event PluginEvent object
         */
        Announce.prototype.onPluginEvent = function (ev) {
            var _a;
            if (this.editor &&
                ev.eventType == 7 /* ContentChanged */ &&
                ((_a = ev.additionalData) === null || _a === void 0 ? void 0 : _a.getAnnounceData)) {
                var data = ev.additionalData.getAnnounceData();
                if (data) {
                    this.announce(data, this.editor);
                }
            }
            if (ev.eventType == 0 /* KeyDown */ && this.editor) {
                this.handleFeatures(ev, this.editor);
            }
        };
        Announce.prototype.handleFeatures = function (event, editorInput) {
            var _this = this;
            editorInput.runAsync(function (editor) {
                _this.features
                    .filter(function (feature) { return feature.keys.indexOf(event.rawEvent.which) > -1; })
                    .some(function (feature) {
                    var announceData = feature.shouldHandle(editor, _this.lastFocusedElement);
                    if (announceData) {
                        _this.announce(announceData, editor);
                    }
                    return !!announceData;
                });
                _this.lastFocusedElement = editor.getElementAtCursor();
            });
        };
        Announce.prototype.announce = function (announceData, editor) {
            var _a, _b, _c;
            var text = announceData.text, defaultStrings = announceData.defaultStrings, _d = announceData.formatStrings, formatStrings = _d === void 0 ? [] : _d;
            var textToAnnounce = formatString(this.getString(defaultStrings) || text, formatStrings);
            if (textToAnnounce) {
                if (!this.ariaLiveElement || textToAnnounce == ((_a = this.ariaLiveElement) === null || _a === void 0 ? void 0 : _a.textContent)) {
                    (_c = (_b = this.ariaLiveElement) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.removeChild(this.ariaLiveElement);
                    this.ariaLiveElement = createAriaLiveElement(editor.getDocument());
                }
                if (this.ariaLiveElement) {
                    this.ariaLiveElement.textContent = textToAnnounce;
                }
            }
        };
        Announce.prototype.getString = function (key) {
            if (this.stringsMapOrGetter == undefined || key == undefined) {
                return undefined;
            }
            if (typeof this.stringsMapOrGetter === 'function') {
                return this.stringsMapOrGetter(key);
            }
            else {
                return this.stringsMapOrGetter.get(key);
            }
        };
        /**
         * @internal
         * Public only for unit testing.
         * @returns
         */
        Announce.prototype.getAriaLiveElement = function () {
            return this.ariaLiveElement;
        };
        return Announce;
    }());
    exports.default = Announce;
    function formatString(text, formatStrings) {
        if (text == undefined) {
            return text;
        }
        formatStrings.forEach(function (value, index) {
            text = text === null || text === void 0 ? void 0 : text.replace("{" + index + "}", value);
        });
        return text;
    }
});
//# sourceMappingURL=AnnouncePlugin.js.map