{"version":3,"file":"AnnouncePlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/Announce/AnnouncePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnnounceFeatures } from './features/AnnounceFeatures';\nimport { createElement, getObjectKeys } from 'roosterjs-editor-dom';\nimport { PluginEventType } from 'roosterjs-editor-types';\nimport type { AnnounceFeatureKey } from './features/AnnounceFeatures';\nimport type { AnnounceFeature } from './AnnounceFeature';\nimport type { CompatibleKnownAnnounceStrings } from 'roosterjs-editor-types/lib/compatibleTypes';\nimport type {\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    AnnounceData,\n    PluginKeyDownEvent,\n    KnownAnnounceStrings,\n} from 'roosterjs-editor-types';\n\nconst ARIA_LIVE_STYLE =\n    'clip: rect(0px, 0px, 0px, 0px); clip-path: inset(100%); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px;';\nconst ARIA_LIVE_ASSERTIVE = 'assertive';\nconst DIV_TAG = 'div';\nconst createAriaLiveElement = (document: Document): HTMLDivElement => {\n    const element = createElement(\n        {\n            tag: DIV_TAG,\n            style: ARIA_LIVE_STYLE,\n            attributes: {\n                'aria-live': ARIA_LIVE_ASSERTIVE,\n            },\n        },\n        document\n    ) as HTMLDivElement;\n\n    document.body.appendChild(element);\n\n    return element;\n};\n\n/**\n * Announce messages to screen reader by using aria live element.\n */\nexport default class Announce implements EditorPlugin {\n    private ariaLiveElement: HTMLDivElement | undefined;\n    private editor: IEditor | undefined;\n    private features: AnnounceFeature[];\n    private lastFocusedElement: HTMLElement | null = null;\n\n    constructor(\n        private stringsMapOrGetter?:\n            | Map<KnownAnnounceStrings | CompatibleKnownAnnounceStrings, string>\n            | ((key: KnownAnnounceStrings | CompatibleKnownAnnounceStrings) => string)\n            | undefined,\n        skipAnnounceFeatures: AnnounceFeatureKey[] = [],\n        additionalFeatures?: AnnounceFeature[]\n    ) {\n        this.features = getObjectKeys(AnnounceFeatures)\n            .map(key => {\n                if (skipAnnounceFeatures.indexOf(key) == -1) {\n                    return AnnounceFeatures[key];\n                }\n\n                return undefined;\n            })\n            .filter(feature => !!feature)\n            .concat(additionalFeatures || []) as AnnounceFeature[];\n    }\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'Announce';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.ariaLiveElement?.parentElement?.removeChild(this.ariaLiveElement);\n        this.ariaLiveElement = undefined;\n        this.stringsMapOrGetter = undefined;\n        this.lastFocusedElement = null;\n        while (this.features.length > 0) {\n            this.features.pop();\n        }\n        this.editor = undefined;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(ev: PluginEvent) {\n        if (\n            this.editor &&\n            ev.eventType == PluginEventType.ContentChanged &&\n            ev.additionalData?.getAnnounceData\n        ) {\n            const data = ev.additionalData.getAnnounceData();\n            if (data) {\n                this.announce(data, this.editor);\n            }\n        }\n\n        if (ev.eventType == PluginEventType.KeyDown && this.editor) {\n            this.handleFeatures(ev, this.editor);\n        }\n    }\n\n    private handleFeatures(event: PluginKeyDownEvent, editorInput: IEditor) {\n        editorInput.runAsync(editor => {\n            this.features\n                .filter(feature => feature.keys.indexOf(event.rawEvent.which) > -1)\n                .some(feature => {\n                    const announceData = feature.shouldHandle(editor, this.lastFocusedElement);\n                    if (announceData) {\n                        this.announce(announceData, editor);\n                    }\n                    return !!announceData;\n                });\n\n            this.lastFocusedElement = editor.getElementAtCursor();\n        });\n    }\n\n    protected announce(announceData: AnnounceData, editor: IEditor) {\n        const { text, defaultStrings, formatStrings = [] } = announceData;\n        const textToAnnounce = formatString(this.getString(defaultStrings) || text, formatStrings);\n        if (textToAnnounce) {\n            if (!this.ariaLiveElement || textToAnnounce == this.ariaLiveElement?.textContent) {\n                this.ariaLiveElement?.parentElement?.removeChild(this.ariaLiveElement);\n                this.ariaLiveElement = createAriaLiveElement(editor.getDocument());\n            }\n            if (this.ariaLiveElement) {\n                this.ariaLiveElement.textContent = textToAnnounce;\n            }\n        }\n    }\n\n    private getString(key: CompatibleKnownAnnounceStrings | KnownAnnounceStrings | undefined) {\n        if (this.stringsMapOrGetter == undefined || key == undefined) {\n            return undefined;\n        }\n\n        if (typeof this.stringsMapOrGetter === 'function') {\n            return this.stringsMapOrGetter(key);\n        } else {\n            return this.stringsMapOrGetter.get(key);\n        }\n    }\n\n    /**\n     * @internal\n     * Public only for unit testing.\n     * @returns\n     */\n    public getAriaLiveElement() {\n        return this.ariaLiveElement;\n    }\n}\n\nfunction formatString(text: string | undefined, formatStrings: string[]) {\n    if (text == undefined) {\n        return text;\n    }\n\n    formatStrings.forEach((value, index) => {\n        text = text?.replace(`{${index}}`, value);\n    });\n\n    return text;\n}\n"]}