{"version":3,"file":"getAnnounceDataForList.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/pluginUtils/announceData/getAnnounceDataForList.ts"],"names":[],"mappings":"AACA,OAAO,EACH,sBAAsB,EACtB,sBAAsB,EACtB,cAAc,EACd,KAAK,GACR,MAAM,sBAAsB,CAAC;AAG9B;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,sBAAsB,CAC1C,IAAwB,EACxB,EAAsB;IAEtB,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE;QACtC,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,EAAE,IAAI,cAAc,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE;QAChD,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAM,aAAa,GAAG,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,gBAAgB,GAAG,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC3E,QAAQ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAC9B,KAAK,aAAa,CAAC;YACnB,KAAK,aAAa,CAAC;YACnB,KAAK,aAAa,CAAC;YACnB,KAAK,aAAa;gBACd,gBAAgB,GAAG,sBAAsB,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;gBAC7D,MAAM;YACV,KAAK,aAAa,CAAC;YACnB,KAAK,aAAa;gBACd,gBAAgB,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;gBACzD,MAAM;SACb;QAED,OAAO;YACH,cAAc,mCAAgD;YAC9D,aAAa,EAAE,CAAC,gBAAgB,CAAC;SACpC,CAAC;KACL;SAAM,IAAI,cAAc,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE;QACjD,OAAO;YACH,cAAc,gCAA6C;SAC9D,CAAC;KACL;IACD,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["import { KnownAnnounceStrings } from 'roosterjs-editor-types';\nimport {\n    convertDecimalsToAlpha,\n    convertDecimalsToRoman,\n    safeInstanceOf,\n    VList,\n} from 'roosterjs-editor-dom';\nimport type { AnnounceData } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Get the announce data for the current List\n * @returns announce data for list or undefined.\n */\nexport default function getAnnounceDataForList(\n    list: HTMLElement | null,\n    li: HTMLElement | null\n): AnnounceData | undefined {\n    if (!safeInstanceOf(li, 'HTMLLIElement')) {\n        return undefined;\n    }\n\n    if (li && safeInstanceOf(list, 'HTMLOListElement')) {\n        const vList = new VList(list);\n        const listItemIndex = vList.getListItemIndex(li);\n        let stringToAnnounce = listItemIndex == -1 ? '' : listItemIndex.toString();\n        switch (list.style.listStyleType) {\n            case 'lower-alpha':\n            case 'lower-latin':\n            case 'upper-alpha':\n            case 'upper-latin':\n                stringToAnnounce = convertDecimalsToAlpha(listItemIndex - 1);\n                break;\n            case 'lower-roman':\n            case 'upper-roman':\n                stringToAnnounce = convertDecimalsToRoman(listItemIndex);\n                break;\n        }\n\n        return {\n            defaultStrings: KnownAnnounceStrings.AnnounceListItemNumbering,\n            formatStrings: [stringToAnnounce],\n        };\n    } else if (safeInstanceOf(list, 'HTMLUListElement')) {\n        return {\n            defaultStrings: KnownAnnounceStrings.AnnounceListItemBullet,\n        };\n    }\n    return undefined;\n}\n"]}