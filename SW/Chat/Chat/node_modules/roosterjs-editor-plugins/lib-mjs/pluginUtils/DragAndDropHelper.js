import { __read } from "tslib";
import { Browser } from 'roosterjs-editor-dom';
/**
 * Generate event names and getXY function based on different platforms to be compatible with desktop and mobile browsers
 */
var MOUSE_EVENT_INFO_DESKTOP = (function () {
    return {
        MOUSEDOWN: 'mousedown',
        MOUSEMOVE: 'mousemove',
        MOUSEUP: 'mouseup',
        getPageXY: getMouseEventPageXY,
    };
})();
var MOUSE_EVENT_INFO_MOBILE = (function () {
    return {
        MOUSEDOWN: 'touchstart',
        MOUSEMOVE: 'touchmove',
        MOUSEUP: 'touchend',
        getPageXY: getTouchEventPageXY,
    };
})();
function getMouseEventPageXY(e) {
    return [e.pageX, e.pageY];
}
function getTouchEventPageXY(e) {
    var pageX = 0;
    var pageY = 0;
    if (e.targetTouches && e.targetTouches.length > 0) {
        var touch = e.targetTouches[0];
        pageX = touch.pageX;
        pageY = touch.pageY;
    }
    return [pageX, pageY];
}
/**
 * @internal
 * A helper class to help manage drag and drop to an HTML element
 */
var DragAndDropHelper = /** @class */ (function () {
    /**
     * Create a new instance of DragAndDropHelper class
     * @param trigger The trigger element. When user start drag on this element,
     * events will be fired to the handler object
     * @param context Context object that will be passed to handler function when event is fired,
     * so that the handler object knows which element it is triggered from.
     * @param onSubmit A callback that will be invoked when event handler in handler object returns true
     * @param handler The event handler object, see DragAndDropHandler interface for more information
     * @param zoomScale The zoom scale of the editor
     * @param forceMobile A boolean to force the use of touch controls for the helper
     */
    function DragAndDropHelper(trigger, context, onSubmit, handler, zoomScale, forceMobile) {
        var _this = this;
        this.trigger = trigger;
        this.context = context;
        this.onSubmit = onSubmit;
        this.handler = handler;
        this.zoomScale = zoomScale;
        this.initX = 0;
        this.initY = 0;
        this.initValue = undefined;
        this.onMouseDown = function (e) {
            var _a;
            var _b, _c;
            e.preventDefault();
            e.stopPropagation();
            _this.addDocumentEvents();
            _a = __read(_this.dndMouse.getPageXY(e), 2), _this.initX = _a[0], _this.initY = _a[1];
            _this.initValue = (_c = (_b = _this.handler).onDragStart) === null || _c === void 0 ? void 0 : _c.call(_b, _this.context, e);
        };
        this.onMouseMove = function (e) {
            var _a, _b, _c;
            e.preventDefault();
            var _d = __read(_this.dndMouse.getPageXY(e), 2), pageX = _d[0], pageY = _d[1];
            var deltaX = (pageX - _this.initX) / _this.zoomScale;
            var deltaY = (pageY - _this.initY) / _this.zoomScale;
            if (_this.initValue &&
                ((_b = (_a = _this.handler).onDragging) === null || _b === void 0 ? void 0 : _b.call(_a, _this.context, e, _this.initValue, deltaX, deltaY))) {
                (_c = _this.onSubmit) === null || _c === void 0 ? void 0 : _c.call(_this, _this.context, _this.trigger);
            }
        };
        this.onMouseUp = function (e) {
            var _a, _b, _c;
            e.preventDefault();
            _this.removeDocumentEvents();
            if ((_b = (_a = _this.handler).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, _this.context, e, _this.initValue)) {
                (_c = _this.onSubmit) === null || _c === void 0 ? void 0 : _c.call(_this, _this.context, _this.trigger);
            }
        };
        this.dndMouse =
            forceMobile || Browser.isMobileOrTablet
                ? MOUSE_EVENT_INFO_MOBILE
                : MOUSE_EVENT_INFO_DESKTOP;
        trigger.addEventListener(this.dndMouse.MOUSEDOWN, this.onMouseDown);
    }
    /**
     * Dispose this object, remove all event listeners that has been attached
     */
    DragAndDropHelper.prototype.dispose = function () {
        this.trigger.removeEventListener(this.dndMouse.MOUSEDOWN, this.onMouseDown);
        this.removeDocumentEvents();
    };
    Object.defineProperty(DragAndDropHelper.prototype, "mouseType", {
        get: function () {
            return this.dndMouse == MOUSE_EVENT_INFO_MOBILE ? 'touch' : 'mouse';
        },
        enumerable: false,
        configurable: true
    });
    DragAndDropHelper.prototype.addDocumentEvents = function () {
        var doc = this.trigger.ownerDocument;
        doc.addEventListener(this.dndMouse.MOUSEMOVE, this.onMouseMove, true /*useCapture*/);
        doc.addEventListener(this.dndMouse.MOUSEUP, this.onMouseUp, true /*useCapture*/);
    };
    DragAndDropHelper.prototype.removeDocumentEvents = function () {
        var doc = this.trigger.ownerDocument;
        doc.removeEventListener(this.dndMouse.MOUSEMOVE, this.onMouseMove, true /*useCapture*/);
        doc.removeEventListener(this.dndMouse.MOUSEUP, this.onMouseUp, true /*useCapture*/);
    };
    return DragAndDropHelper;
}());
export default DragAndDropHelper;
//# sourceMappingURL=DragAndDropHelper.js.map