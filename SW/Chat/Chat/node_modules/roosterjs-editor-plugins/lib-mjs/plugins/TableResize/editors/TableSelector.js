import { __extends } from "tslib";
import DragAndDropHelper from '../../../pluginUtils/DragAndDropHelper';
import { createElement, normalizeRect, safeInstanceOf, getComputedStyle, } from 'roosterjs-editor-dom';
var TABLE_SELECTOR_LENGTH = 12;
var TABLE_SELECTOR_ID = '_Table_Selector';
/**
 * @internal
 */
export default function createTableSelector(table, editor, onFinishDragging, getOnMouseOut, onShowHelperElement, contentDiv, anchorContainer) {
    var rect = normalizeRect(table.getBoundingClientRect());
    if (!isTableTopVisible(editor, rect, contentDiv)) {
        return null;
    }
    var zoomScale = editor.getZoomScale();
    var document = table.ownerDocument;
    var createElementData = {
        tag: 'div',
        style: 'position: fixed; cursor: all-scroll; user-select: none; border: 1px solid #808080',
    };
    onShowHelperElement === null || onShowHelperElement === void 0 ? void 0 : onShowHelperElement(createElementData, 'TableSelector', table);
    var div = createElement(createElementData, document);
    div.id = TABLE_SELECTOR_ID;
    div.style.width = TABLE_SELECTOR_LENGTH + "px";
    div.style.height = TABLE_SELECTOR_LENGTH + "px";
    (anchorContainer || document.body).appendChild(div);
    var context = {
        table: table,
        zoomScale: zoomScale,
        rect: rect,
        isRTL: getComputedStyle(table, 'direction') == 'rtl',
    };
    setDivPosition(context, div);
    var onDragEnd = function (context, event) {
        if (event.target == div) {
            onFinishDragging(context.table);
        }
        return false;
    };
    var featureHandler = new TableSelectorFeature(div, context, setDivPosition, {
        onDragEnd: onDragEnd,
    }, context.zoomScale, getOnMouseOut);
    return { div: div, featureHandler: featureHandler, node: table };
}
var TableSelectorFeature = /** @class */ (function (_super) {
    __extends(TableSelectorFeature, _super);
    function TableSelectorFeature(div, context, onSubmit, handler, zoomScale, getOnMouseOut, forceMobile, container) {
        var _this = _super.call(this, div, context, onSubmit, handler, zoomScale, forceMobile) || this;
        _this.div = div;
        _this.onMouseOut = getOnMouseOut(div);
        div.addEventListener('mouseout', _this.onMouseOut);
        return _this;
    }
    TableSelectorFeature.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.onMouseOut) {
            this.div.removeEventListener('mouseout', this.onMouseOut);
        }
        this.onMouseOut = null;
    };
    return TableSelectorFeature;
}(DragAndDropHelper));
function setDivPosition(context, trigger) {
    var rect = context.rect;
    if (rect) {
        trigger.style.top = rect.top - TABLE_SELECTOR_LENGTH + "px";
        trigger.style.left = rect.left - TABLE_SELECTOR_LENGTH - 2 + "px";
    }
}
function isTableTopVisible(editor, rect, contentDiv) {
    var visibleViewport = editor.getVisibleViewport();
    if (contentDiv && safeInstanceOf(contentDiv, 'HTMLElement') && visibleViewport && rect) {
        var containerRect = normalizeRect(contentDiv.getBoundingClientRect());
        return !!containerRect && containerRect.top <= rect.top && visibleViewport.top <= rect.top;
    }
    return true;
}
//# sourceMappingURL=TableSelector.js.map