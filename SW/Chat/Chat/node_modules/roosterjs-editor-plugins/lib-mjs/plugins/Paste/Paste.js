import convertPasteContentForSingleImage from './imageConverter/convertPasteContentForSingleImage';
import convertPastedContentForLI from './commonConverter/convertPastedContentForLI';
import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';
import convertPastedContentFromOfficeOnline from './officeOnlineConverter/convertPastedContentFromOfficeOnline';
import convertPastedContentFromPowerPoint from './pptConverter/convertPastedContentFromPowerPoint';
import convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';
import handleLineMerge from './lineMerge/handleLineMerge';
import sanitizeHtmlColorsFromPastedContent from './sanitizeHtmlColorsFromPastedContent/sanitizeHtmlColorsFromPastedContent';
import sanitizeLinks from './sanitizeLinks/sanitizeLinks';
import { chainSanitizerCallback, getPasteSource } from 'roosterjs-editor-dom';
var GOOGLE_SHEET_NODE_NAME = 'google-sheets-html-origin';
/**
 * Paste plugin, handles BeforePaste event and reformat some special content, including:
 * 1. Content copied from Word
 * 2. Content copied from Excel
 * 3. Content copied from Word Online or OneNote Online
 */
var Paste = /** @class */ (function () {
    /**
     * Construct a new instance of Paste class
     * @param unknownTagReplacement Replace solution of unknown tags, default behavior is to replace with SPAN
     * @param convertSingleImageBody When enabled, if clipboard HTML contains a single image, we reuse the image without modifying the src attribute.
     *                               When disabled, pasted image src attribute will use the dataUri from clipboard data -- By Default disabled.
     */
    function Paste(unknownTagReplacement, convertSingleImageBody) {
        if (unknownTagReplacement === void 0) { unknownTagReplacement = 'SPAN'; }
        if (convertSingleImageBody === void 0) { convertSingleImageBody = false; }
        this.unknownTagReplacement = unknownTagReplacement;
        this.convertSingleImageBody = convertSingleImageBody;
        this.editor = null;
    }
    /**
     * Get a friendly name of  this plugin
     */
    Paste.prototype.getName = function () {
        return 'Paste';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    Paste.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * Dispose this plugin
     */
    Paste.prototype.dispose = function () {
        this.editor = null;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    Paste.prototype.onPluginEvent = function (event) {
        if (this.editor && event.eventType == 10 /* BeforePaste */) {
            var fragment = event.fragment, sanitizingOption = event.sanitizingOption;
            var trustedHTMLHandler = this.editor.getTrustedHTMLHandler();
            switch (getPasteSource(event, this.convertSingleImageBody)) {
                case 0 /* WordDesktop */:
                    // Handle HTML copied from Word
                    convertPastedContentFromWord(event);
                    break;
                case 1 /* ExcelDesktop */:
                case 2 /* ExcelOnline */:
                    if (event.pasteType === 0 /* Normal */ ||
                        event.pasteType === 2 /* MergeFormat */) {
                        // Handle HTML copied from Excel
                        convertPastedContentFromExcel(event, trustedHTMLHandler);
                    }
                    break;
                case 3 /* PowerPointDesktop */:
                    convertPastedContentFromPowerPoint(event, trustedHTMLHandler);
                    break;
                case 5 /* WacComponents */:
                    convertPastedContentFromOfficeOnline(fragment, sanitizingOption);
                    break;
                case 4 /* GoogleSheets */:
                    sanitizingOption.additionalTagReplacements[GOOGLE_SHEET_NODE_NAME] = '*';
                    break;
                case 7 /* SingleImage */:
                    convertPasteContentForSingleImage(event, trustedHTMLHandler);
                    break;
                case 6 /* Default */:
                    convertPastedContentForLI(fragment);
                    handleLineMerge(fragment);
                    break;
            }
            sanitizeLinks(sanitizingOption);
            sanitizeHtmlColorsFromPastedContent(sanitizingOption);
            sanitizeBlockStyles(sanitizingOption);
            // Replace unknown tags with SPAN
            sanitizingOption.unknownTagReplacement = this.unknownTagReplacement;
        }
    };
    return Paste;
}());
export default Paste;
function sanitizeBlockStyles(sanitizingOption) {
    chainSanitizerCallback(sanitizingOption.cssStyleCallbacks, 'display', function (value) {
        return value != 'flex'; // return whether we keep the style
    });
}
//# sourceMappingURL=Paste.js.map