import commentsRemoval from './commentsRemoval';
import { chainSanitizerCallback, moveChildNodes } from 'roosterjs-editor-dom';
import { createWordConverter } from './wordConverter';
import { createWordConverterArguments } from './WordConverterArguments';
import { processNodeConvert, processNodesDiscovery } from './converterUtils';
var PERCENTAGE_REGEX = /%/;
var DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE = 120;
var LIST_ELEMENTS_SELECTOR = 'p,h1,h2,h3,h4,h5,h6';
/**
 * @internal
 * Converts all the Word generated list items in the specified node into standard HTML UL and OL tags
 */
export default function convertPastedContentFromWord(event) {
    var sanitizingOption = event.sanitizingOption, fragment = event.fragment;
    // Preserve <o:p> when its innerHTML is "&nbsp;" to avoid dropping an empty line
    chainSanitizerCallback(sanitizingOption.elementCallbacks, 'O:P', function (element) {
        moveChildNodes(element);
        element.appendChild(element.ownerDocument.createTextNode('\u00A0')); // &nbsp;
        return true;
    });
    var wordConverter = createWordConverter();
    // First find all the nodes that we need to check for list item information
    // This call will return all the p and heading elements under the root node.. These are the elements that
    // Word uses a list items, so we'll only process them and avoid walking the whole tree.
    var elements = fragment.querySelectorAll(LIST_ELEMENTS_SELECTOR);
    if (elements.length > 0) {
        wordConverter.wordConverterArgs = createWordConverterArguments(elements);
        if (processNodesDiscovery(wordConverter)) {
            processNodeConvert(wordConverter);
        }
    }
    // If the List style contains marginBottom = 0in, the space after the list is going to be too narrow.
    // Remove this style so the list displays correctly.
    ['OL', 'UL'].forEach(function (tag) {
        chainSanitizerCallback(sanitizingOption.elementCallbacks, tag, function (element) {
            if (element.style.marginBottom == '0in') {
                element.style.marginBottom = '';
            }
            return true;
        });
    });
    //If the line height is less than the browser default line height, line between the text is going to be too narrow
    chainSanitizerCallback(sanitizingOption.cssStyleCallbacks, 'line-height', function (value) {
        var parsedLineHeight;
        if (PERCENTAGE_REGEX.test(value) &&
            !isNaN((parsedLineHeight = parseInt(value))) &&
            parsedLineHeight < DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE) {
            return false;
        }
        return true;
    });
    commentsRemoval(sanitizingOption.elementCallbacks, sanitizingOption.cssStyleCallbacks);
}
//# sourceMappingURL=convertPastedContentFromWord.js.map