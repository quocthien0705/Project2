{"version":3,"file":"convertPastedContentFromWord.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/wordConverter/convertPastedContentFromWord.ts"],"names":[],"mappings":"AAAA,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAC9E,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AACtD,OAAO,EAAE,4BAA4B,EAAE,MAAM,0BAA0B,CAAC;AACxE,OAAO,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAG7E,IAAM,gBAAgB,GAAG,GAAG,CAAC;AAC7B,IAAM,sCAAsC,GAAG,GAAG,CAAC;AACnD,IAAM,sBAAsB,GAAG,qBAAqB,CAAC;AAErD;;;GAGG;AACH,MAAM,CAAC,OAAO,UAAU,4BAA4B,CAAC,KAAuB;IAChE,IAAA,gBAAgB,GAAe,KAAK,iBAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;IAE7C,gFAAgF;IAChF,sBAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,KAAK,EAAE,UAAA,OAAO;QACpE,cAAc,CAAC,OAAO,CAAC,CAAC;QACxB,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;QAC9E,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,IAAM,aAAa,GAAG,mBAAmB,EAAE,CAAC;IAE5C,2EAA2E;IAC3E,yGAAyG;IACzG,uFAAuF;IACvF,IAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,sBAAsB,CAA4B,CAAC;IAC9F,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,aAAa,CAAC,iBAAiB,GAAG,4BAA4B,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,qBAAqB,CAAC,aAAa,CAAC,EAAE;YACtC,kBAAkB,CAAC,aAAa,CAAC,CAAC;SACrC;KACJ;IAED,qGAAqG;IACrG,oDAAoD;IACpD,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;QACpB,sBAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,EAAE,UAAA,OAAO;YAClE,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY,IAAI,KAAK,EAAE;gBACrC,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,CAAC;aACnC;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,kHAAkH;IAClH,sBAAsB,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,aAAa,EAAE,UAAC,KAAa;QACpF,IAAI,gBAAwB,CAAC;QAC7B,IACI,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,CAAC,KAAK,CAAC,CAAC,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5C,gBAAgB,GAAG,sCAAsC,EAC3D;YACE,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,eAAe,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;AAC3F,CAAC","sourcesContent":["import commentsRemoval from './commentsRemoval';\nimport { chainSanitizerCallback, moveChildNodes } from 'roosterjs-editor-dom';\nimport { createWordConverter } from './wordConverter';\nimport { createWordConverterArguments } from './WordConverterArguments';\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\nimport type { BeforePasteEvent } from 'roosterjs-editor-types';\n\nconst PERCENTAGE_REGEX = /%/;\nconst DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE = 120;\nconst LIST_ELEMENTS_SELECTOR = 'p,h1,h2,h3,h4,h5,h6';\n\n/**\n * @internal\n * Converts all the Word generated list items in the specified node into standard HTML UL and OL tags\n */\nexport default function convertPastedContentFromWord(event: BeforePasteEvent) {\n    const { sanitizingOption, fragment } = event;\n\n    // Preserve <o:p> when its innerHTML is \"&nbsp;\" to avoid dropping an empty line\n    chainSanitizerCallback(sanitizingOption.elementCallbacks, 'O:P', element => {\n        moveChildNodes(element);\n        element.appendChild(element.ownerDocument.createTextNode('\\u00A0')); // &nbsp;\n        return true;\n    });\n\n    const wordConverter = createWordConverter();\n\n    // First find all the nodes that we need to check for list item information\n    // This call will return all the p and heading elements under the root node.. These are the elements that\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\n    const elements = fragment.querySelectorAll(LIST_ELEMENTS_SELECTOR) as NodeListOf<HTMLElement>;\n    if (elements.length > 0) {\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\n        if (processNodesDiscovery(wordConverter)) {\n            processNodeConvert(wordConverter);\n        }\n    }\n\n    // If the List style contains marginBottom = 0in, the space after the list is going to be too narrow.\n    // Remove this style so the list displays correctly.\n    ['OL', 'UL'].forEach(tag => {\n        chainSanitizerCallback(sanitizingOption.elementCallbacks, tag, element => {\n            if (element.style.marginBottom == '0in') {\n                element.style.marginBottom = '';\n            }\n\n            return true;\n        });\n    });\n\n    //If the line height is less than the browser default line height, line between the text is going to be too narrow\n    chainSanitizerCallback(sanitizingOption.cssStyleCallbacks, 'line-height', (value: string) => {\n        let parsedLineHeight: number;\n        if (\n            PERCENTAGE_REGEX.test(value) &&\n            !isNaN((parsedLineHeight = parseInt(value))) &&\n            parsedLineHeight < DEFAULT_BROWSER_LINE_HEIGHT_PERCENTAGE\n        ) {\n            return false;\n        }\n        return true;\n    });\n\n    commentsRemoval(sanitizingOption.elementCallbacks, sanitizingOption.cssStyleCallbacks);\n}\n"]}