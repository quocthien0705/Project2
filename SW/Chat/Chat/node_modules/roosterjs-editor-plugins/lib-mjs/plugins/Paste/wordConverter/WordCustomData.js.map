{"version":3,"file":"WordCustomData.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/wordConverter/WordCustomData.ts"],"names":[],"mappings":"AAEA,uBAAuB;AACvB,IAAM,sBAAsB,GAAG,QAAQ,CAAC;AAcxC;;;GAGG;AACH,MAAM,UAAU,gBAAgB;IAC5B,OAAO;QACH,IAAI,EAAE,EAAE;QACR,UAAU,EAAE,CAAC;KAChB,CAAC;AACN,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,SAAS,CAAC,cAA8B,EAAE,OAAa,EAAE,GAAW,EAAE,KAAU;IAC5F,6BAA6B;IAC7B,IAAI,OAAO,CAAC,QAAQ,mBAAoB,EAAE;QACtC,IAAM,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,OAAsB,CAAC,CAAC;QACnE,IAAI,EAAE,IAAI,EAAE,EAAE;YACV,iCAAiC;YACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gBAC1B,iCAAiC;gBACjC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;aAChC;YACD,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACxC;KACJ;AACL,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,SAAS,CAAC,cAA8B,EAAE,OAAa,EAAE,GAAW;IAChF,IAAI,OAAO,CAAC,QAAQ,mBAAoB,EAAE;QACtC,IAAM,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,OAAsB,CAAC,CAAC;QACnE,IAAI,EAAE,IAAI,EAAE,EAAE;YACV,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;SAClE;KACJ;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAS,eAAe,CAAC,cAA8B,EAAE,OAAoB;IACzE,IAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;IACtD,IAAI,CAAC,EAAE,EAAE;QACL,EAAE,GAAG,cAAc,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAC1C,cAAc,CAAC,UAAU,EAAE,CAAC;QAC5B,OAAO,CAAC,YAAY,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;KACpD;IACD,OAAO,EAAE,CAAC;AACd,CAAC","sourcesContent":["import { NodeType } from 'roosterjs-editor-types';\n\n/** NodeId attribute */\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\n\n/**\n * @internal\n * Custom data for dom elements\n */\nexport default interface WordCustomData {\n    /** The dict storing custom data, key is element Id, value is dictionary */\n    dict: { [key: string]: { [key: string]: number } };\n\n    /** Next node Id to use */\n    nextNodeId: number;\n}\n\n/**\n * @internal\n * Create an empty WordCustomData\n */\nexport function createCustomData(): WordCustomData {\n    return {\n        dict: {},\n        nextNodeId: 1,\n    };\n}\n\n/**\n * @internal\n * Sets the specified object data\n */\nexport function setObject(wordCustomData: WordCustomData, element: Node, key: string, value: any) {\n    // Get the id for the element\n    if (element.nodeType == NodeType.Element) {\n        const id = getAndSetNodeId(wordCustomData, element as HTMLElement);\n        if (id != '') {\n            // Get the values for the element\n            if (!wordCustomData.dict[id]) {\n                // First time dictionary creation\n                wordCustomData.dict[id] = {};\n            }\n            wordCustomData.dict[id][key] = value;\n        }\n    }\n}\n\n/**\n * @internal\n * Reads the specified object data\n */\nexport function getObject(wordCustomData: WordCustomData, element: Node, key: string): any {\n    if (element.nodeType == NodeType.Element) {\n        const id = getAndSetNodeId(wordCustomData, element as HTMLElement);\n        if (id != '') {\n            return wordCustomData.dict[id] && wordCustomData.dict[id][key];\n        }\n    }\n\n    return null;\n}\n\n/**\n * Get the unique id for the specified node...\n */\nfunction getAndSetNodeId(wordCustomData: WordCustomData, element: HTMLElement): string {\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\n    if (!id) {\n        id = wordCustomData.nextNodeId.toString();\n        wordCustomData.nextNodeId++;\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\n    }\n    return id;\n}\n"]}