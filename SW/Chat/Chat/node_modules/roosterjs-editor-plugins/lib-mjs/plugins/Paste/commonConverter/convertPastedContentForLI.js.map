{"version":3,"file":"convertPastedContentForLI.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/commonConverter/convertPastedContentForLI.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,gBAAgB,EAChB,YAAY,EACZ,OAAO,EACP,IAAI,EACJ,cAAc,GACjB,MAAM,sBAAsB,CAAC;AAE9B;;;GAGG;AACH,MAAM,CAAC,OAAO,UAAU,yBAAyB,CAAC,QAA0B;IACxE,oEAAoE;IACpE,iGAAiG;IACjG,gEAAgE;IAChE,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;QACxB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;KAC5C;SAAM,IACH,cAAc,CAAC,QAAQ,CAAC,UAAU,EAAE,aAAa,CAAC;QAClD,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,EACnC;QACE,gBAAgB,CAAC,QAAQ,CAAC,UAAyB,EAAE,IAAI,CAAC,CAAC;KAC9D;AACL,CAAC;AAED,SAAS,YAAY,CAAC,IAAuB;IACzC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;QACnF,IAAI,OAAK,GAAG,KAAK,CAAC;QAClB,IACI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,UAAA,SAAS;;YACpC,IAAI,cAAc,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA,MAAA,SAAS,CAAC,SAAS,0CAAE,IAAI,EAAE,CAAA,EAAE;gBACnE,OAAO,IAAI,CAAC;aACf;iBAAM,IAAI,YAAY,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;gBACxC,OAAK,GAAG,IAAI,CAAC;gBACb,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,OAAO,KAAK,CAAC;aAChB;QACL,CAAC,CAAC;YACF,OAAK,EACP;YACE,OAAO,IAAI,CAAC;SACf;KACJ;IACD,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import {\n    changeElementTag,\n    getTagOfNode,\n    toArray,\n    wrap,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * Convert content copied from Teams to be well-formed\n */\nexport default function convertPastedContentForLI(fragment: DocumentFragment) {\n    // Sometimes it is possible that we get LI nodes directly under DIV.\n    // In that case we need to convert DIV to UL. It is also possible to be OL, but we don't know it.\n    // So always assume it is UL here, and later user can change it.\n    if (isPureLiNode(fragment)) {\n        wrap(toArray(fragment.childNodes), 'UL');\n    } else if (\n        safeInstanceOf(fragment.firstChild, 'HTMLElement') &&\n        isPureLiNode(fragment.firstChild)\n    ) {\n        changeElementTag(fragment.firstChild as HTMLElement, 'UL');\n    }\n}\n\nfunction isPureLiNode(node: ParentNode & Node) {\n    if (node && !node.nextSibling && ['OL', 'UL', 'MENU'].indexOf(getTagOfNode(node)) < 0) {\n        let hasLi = false;\n        if (\n            toArray(node.childNodes).every(childNode => {\n                if (safeInstanceOf(childNode, 'Text') && !childNode.nodeValue?.trim()) {\n                    return true;\n                } else if (getTagOfNode(childNode) == 'LI') {\n                    hasLi = true;\n                    return true;\n                } else {\n                    return false;\n                }\n            }) &&\n            hasLi\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n"]}