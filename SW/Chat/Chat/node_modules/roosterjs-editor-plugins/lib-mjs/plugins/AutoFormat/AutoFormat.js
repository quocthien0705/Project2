var specialCharacters = /[`!@#$%^&*()_+\=\[\]{};':"\\|,.<>\/?~]/;
/**
 * Automatically transform -- into hyphen, if typed between two words.
 */
var AutoFormat = /** @class */ (function () {
    function AutoFormat() {
        this.editor = null;
        this.lastKeyTyped = null;
    }
    /**
     * Get a friendly name of this plugin
     */
    AutoFormat.prototype.getName = function () {
        return 'AutoFormat';
    };
    /**
     * Initialize this plugin
     * @param editor The editor instance
     */
    AutoFormat.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * Dispose this plugin
     */
    AutoFormat.prototype.dispose = function () {
        this.editor = null;
        this.lastKeyTyped = null;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    AutoFormat.prototype.onPluginEvent = function (event) {
        var _this = this;
        if (!this.editor) {
            return;
        }
        if (event.eventType === 7 /* ContentChanged */ ||
            event.eventType === 5 /* MouseDown */ ||
            event.eventType === 6 /* MouseUp */) {
            this.lastKeyTyped = '';
        }
        if (event.eventType === 1 /* KeyPress */) {
            var keyTyped = event.rawEvent.key;
            if (keyTyped && keyTyped.length > 1) {
                this.lastKeyTyped = '';
            }
            if (this.lastKeyTyped === '-' &&
                !specialCharacters.test(keyTyped) &&
                keyTyped !== '-') {
                var searcher = this.editor.getContentSearcherOfCursor(event);
                var textBeforeCursor = searcher === null || searcher === void 0 ? void 0 : searcher.getSubStringBefore(3);
                var dashes = searcher === null || searcher === void 0 ? void 0 : searcher.getSubStringBefore(2);
                var isPrecededByADash = (textBeforeCursor === null || textBeforeCursor === void 0 ? void 0 : textBeforeCursor[0]) === '-';
                var isSpaced = (textBeforeCursor == ' --' && keyTyped !== ' ') ||
                    (textBeforeCursor !== ' --' && keyTyped === ' ');
                if (isPrecededByADash ||
                    isSpaced ||
                    (typeof textBeforeCursor === 'string' &&
                        specialCharacters.test(textBeforeCursor[0])) ||
                    dashes !== '--') {
                    return;
                }
                var textRange_1 = searcher === null || searcher === void 0 ? void 0 : searcher.getRangeFromText(dashes, true /* exactMatch */);
                var nodeHyphen_1 = textBeforeCursor === ' --' && keyTyped === ' '
                    ? document.createTextNode('–')
                    : document.createTextNode('—');
                this.editor.addUndoSnapshot(function () {
                    if (textRange_1) {
                        textRange_1.deleteContents();
                        textRange_1.insertNode(nodeHyphen_1);
                        _this.editor.select(nodeHyphen_1, -1 /* End */);
                    }
                }, "Format" /* Format */, true /*canUndoByBackspace*/, { formatApiName: 'autoHyphen' });
                //After the substitution the last key typed needs to be cleaned
                this.lastKeyTyped = null;
            }
            else {
                this.lastKeyTyped = keyTyped;
            }
        }
    };
    return AutoFormat;
}());
export default AutoFormat;
//# sourceMappingURL=AutoFormat.js.map