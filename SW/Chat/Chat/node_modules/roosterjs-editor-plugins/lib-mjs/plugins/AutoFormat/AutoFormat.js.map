{"version":3,"file":"AutoFormat.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/AutoFormat/AutoFormat.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeSource, PluginEventType, PositionType } from 'roosterjs-editor-types';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\nconst specialCharacters = /[`!@#$%^&*()_+\\=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n/**\n * Automatically transform -- into hyphen, if typed between two words.\n */\nexport default class AutoFormat implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private lastKeyTyped: string | null = null;\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'AutoFormat';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n        this.lastKeyTyped = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (!this.editor) {\n            return;\n        }\n        if (\n            event.eventType === PluginEventType.ContentChanged ||\n            event.eventType === PluginEventType.MouseDown ||\n            event.eventType === PluginEventType.MouseUp\n        ) {\n            this.lastKeyTyped = '';\n        }\n\n        if (event.eventType === PluginEventType.KeyPress) {\n            const keyTyped = event.rawEvent.key;\n\n            if (keyTyped && keyTyped.length > 1) {\n                this.lastKeyTyped = '';\n            }\n\n            if (\n                this.lastKeyTyped === '-' &&\n                !specialCharacters.test(keyTyped) &&\n                keyTyped !== '-'\n            ) {\n                const searcher = this.editor.getContentSearcherOfCursor(event);\n                const textBeforeCursor = searcher?.getSubStringBefore(3);\n                const dashes = searcher?.getSubStringBefore(2);\n                const isPrecededByADash = textBeforeCursor?.[0] === '-';\n                const isSpaced =\n                    (textBeforeCursor == ' --' && keyTyped !== ' ') ||\n                    (textBeforeCursor !== ' --' && keyTyped === ' ');\n\n                if (\n                    isPrecededByADash ||\n                    isSpaced ||\n                    (typeof textBeforeCursor === 'string' &&\n                        specialCharacters.test(textBeforeCursor[0])) ||\n                    dashes !== '--'\n                ) {\n                    return;\n                }\n\n                const textRange = searcher?.getRangeFromText(dashes, true /* exactMatch */);\n                const nodeHyphen =\n                    textBeforeCursor === ' --' && keyTyped === ' '\n                        ? document.createTextNode('–')\n                        : document.createTextNode('—');\n                this.editor.addUndoSnapshot(\n                    () => {\n                        if (textRange) {\n                            textRange.deleteContents();\n                            textRange.insertNode(nodeHyphen);\n                            this.editor!.select(nodeHyphen, PositionType.End);\n                        }\n                    },\n                    ChangeSource.Format /*changeSource*/,\n                    true /*canUndoByBackspace*/,\n                    { formatApiName: 'autoHyphen' }\n                );\n\n                //After the substitution the last key typed needs to be cleaned\n                this.lastKeyTyped = null;\n            } else {\n                this.lastKeyTyped = keyTyped;\n            }\n        }\n    }\n}\n"]}