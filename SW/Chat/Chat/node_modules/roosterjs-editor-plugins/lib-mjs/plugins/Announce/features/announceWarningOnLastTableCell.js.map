{"version":3,"file":"announceWarningOnLastTableCell.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Announce/features/announceWarningOnLastTableCell.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAIhE,IAAM,mBAAmB,GAAG,OAAO,CAAC;AACpC,IAAM,cAAc,GAAG,OAAO,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,IAAM,yBAAyB,GAAoB;IACtD,YAAY,EAAE,UAAC,MAAM,EAAE,kBAAkB;QACrC,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAE/C,OAAO,CACH,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,mBAA8B;YAC7C,SAAS,CAAC,eAAe;YACzB,SAAS,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;YAC7B,CAAC,QAAQ,CACL,kBAAkB,EAClB,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,EAClC,IAAI,CAAC,0BAA0B,CAClC;YACD,UAAU,EAAE,IAAI;YACZ,cAAc,iCAA8C;SAC/D,CACJ,CAAC;QACF,SAAS,UAAU;YACf,IAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAExD,IAAI,cAAc,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBAC3C,IAAM,QAAQ,GAAG,KAAK,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;gBAC7D,IAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;gBAEnE,OAAO,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC5D;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IACD,IAAI,EAAE,wEAAqD;CAC9D,CAAC","sourcesContent":["import { contains, safeInstanceOf } from 'roosterjs-editor-dom';\nimport { Keys, KnownAnnounceStrings, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type { AnnounceFeature } from '../AnnounceFeature';\n\nconst TABLE_CELL_SELECTOR = 'td,th';\nconst TABLE_SELECTOR = 'table';\n\n/**\n * @internal\n */\nexport const announceWarningOnLastCell: AnnounceFeature = {\n    shouldHandle: (editor, lastFocusedElement) => {\n        const selection = editor.getSelectionRangeEx();\n\n        return (\n            selection?.type == SelectionRangeTypes.Normal &&\n            selection.areAllCollapsed &&\n            selection.ranges.length === 1 &&\n            !contains(\n                lastFocusedElement,\n                selection.ranges[0].startContainer,\n                true /*treatSameNodeAsContain*/\n            ) &&\n            isLastCell() && {\n                defaultStrings: KnownAnnounceStrings.AnnounceOnFocusLastCell,\n            }\n        );\n        function isLastCell(): boolean {\n            const table = editor.getElementAtCursor(TABLE_SELECTOR);\n\n            if (safeInstanceOf(table, 'HTMLTableElement')) {\n                const allCells = table.querySelectorAll(TABLE_CELL_SELECTOR);\n                const focusedCell = editor.getElementAtCursor(TABLE_CELL_SELECTOR);\n\n                return focusedCell == allCells.item(allCells.length - 1);\n            }\n            return false;\n        }\n    },\n    keys: [Keys.TAB, Keys.UP, Keys.DOWN, Keys.LEFT, Keys.RIGHT],\n};\n"]}