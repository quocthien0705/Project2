import { isNodeEmpty, cacheGetEventData, safeInstanceOf, splitBalancedNodeRange, unwrap, } from 'roosterjs-editor-dom';
var RemoveCodeWhenEnterOnEmptyLine = {
    keys: [13 /* ENTER */],
    shouldHandleEvent: function (event, editor) {
        var childOfCode = cacheGetCodeChild(event, editor);
        return childOfCode && isNodeEmpty(childOfCode);
    },
    handleEvent: function (event, editor) {
        event.rawEvent.preventDefault();
        editor.addUndoSnapshot(function () {
            splitCode(event, editor);
        }, undefined /* changeSource */, true /* canUndoByBackspace */);
    },
};
var RemoveCodeWhenBackspaceOnEmptyFirstLine = {
    keys: [8 /* BACKSPACE */],
    shouldHandleEvent: function (event, editor) {
        var childOfCode = cacheGetCodeChild(event, editor);
        return childOfCode && isNodeEmpty(childOfCode) && !childOfCode.previousSibling;
    },
    handleEvent: function (event, editor) {
        event.rawEvent.preventDefault();
        editor.addUndoSnapshot(function () { return splitCode(event, editor); });
    },
};
function cacheGetCodeChild(event, editor) {
    return cacheGetEventData(event, 'CODE_CHILD', function () {
        var _a;
        var codeElement = (_a = editor.getElementAtCursor('code')) !== null && _a !== void 0 ? _a : editor.queryElements('code', 1 /* OnSelection */)[0];
        if (codeElement) {
            var pos = editor.getFocusedPosition();
            var block = pos && editor.getBlockElementAtNode(pos.normalize().node);
            if (block) {
                var node = block.getStartNode() == codeElement.parentNode
                    ? block.getStartNode()
                    : block.collapseToSingleElement();
                return isNodeEmpty(node) ? node : null;
            }
        }
        return null;
    });
}
function splitCode(event, editor) {
    var currentContainer = cacheGetCodeChild(event, editor);
    if (!safeInstanceOf(currentContainer, 'HTMLElement')) {
        return;
    }
    var codeChild = currentContainer.querySelector('code');
    if (!codeChild) {
        var codeParent = splitBalancedNodeRange(currentContainer);
        if (codeParent) {
            unwrap(codeParent);
        }
        if (safeInstanceOf(currentContainer.parentElement, 'HTMLPreElement')) {
            var preParent = splitBalancedNodeRange(currentContainer);
            if (preParent) {
                unwrap(preParent);
            }
        }
    }
    else {
        //Content model
        unwrap(codeChild);
    }
    editor.select(currentContainer, 0 /* Begin */);
}
/**
 * @internal
 */
export var CodeFeatures = {
    removeCodeWhenEnterOnEmptyLine: RemoveCodeWhenEnterOnEmptyLine,
    removeCodeWhenBackspaceOnEmptyFirstLine: RemoveCodeWhenBackspaceOnEmptyFirstLine,
};
//# sourceMappingURL=codeFeatures.js.map