{"version":3,"file":"quoteFeatures.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContentEdit/features/quoteFeatures.ts"],"names":[],"mappings":"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","sourcesContent":["import { clearFormat } from 'roosterjs-editor-api';\nimport { Keys, PositionType } from 'roosterjs-editor-types';\nimport type {\n    BuildInEditFeature,\n    IEditor,\n    PluginKeyboardEvent,\n    QuoteFeatureSettings,\n} from 'roosterjs-editor-types';\nimport {\n    cacheGetEventData,\n    getTagOfNode,\n    isNodeEmpty,\n    safeInstanceOf,\n    splitBalancedNodeRange,\n    toArray,\n    unwrap,\n    wrap,\n} from 'roosterjs-editor-dom';\n\nconst QUOTE_TAG = 'BLOCKQUOTE';\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\n\n/**\n * UnquoteWhenBackOnEmpty1stLine edit feature, provides the ability to Unquote current line when\n * user press BACKSPACE on first and empty line of a BLOCKQUOTE\n */\nconst UnquoteWhenBackOnEmpty1stLine: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.BACKSPACE],\n    shouldHandleEvent: (event, editor) => {\n        const childOfQuote = cacheGetQuoteChild(event, editor);\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\n    },\n    handleEvent: splitQuote,\n};\n\n/**\n * UnquoteWhenEnterOnEmptyLine edit feature, provides the ability to Unquote current line when\n * user press ENTER on an empty line of a BLOCKQUOTE\n */\nconst UnquoteWhenEnterOnEmptyLine: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.ENTER],\n    shouldHandleEvent: (event, editor) => {\n        const childOfQuote = cacheGetQuoteChild(event, editor);\n        const shift = event.rawEvent.shiftKey;\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\n    },\n    handleEvent: (event, editor) =>\n        editor.addUndoSnapshot(\n            () => splitQuote(event, editor),\n            undefined /*changeSource*/,\n            true /*canUndoByBackspace*/\n        ),\n};\n\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: IEditor): Node | null {\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\n        const quote = editor.getElementAtCursor(STRUCTURED_TAGS);\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\n            const pos = editor.getFocusedPosition();\n            const block = pos && editor.getBlockElementAtNode(pos.normalize().node);\n            if (block) {\n                const node =\n                    block.getStartNode() == quote\n                        ? block.getStartNode()\n                        : block.collapseToSingleElement();\n                return isNodeEmpty(node) ? node : null;\n            }\n        }\n\n        return null;\n    });\n}\n\nfunction splitQuote(event: PluginKeyboardEvent, editor: IEditor) {\n    editor.addUndoSnapshot(() => {\n        let childOfQuote = cacheGetQuoteChild(event, editor);\n        if (!childOfQuote) {\n            return;\n        }\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\n            childOfQuote = wrap(toArray(childOfQuote.childNodes));\n        }\n        const parent = splitBalancedNodeRange(childOfQuote);\n        const shouldClearFormat = !!parent && isStyledBlockquote(parent);\n        const newParent = parent && unwrap(parent);\n        editor.select(childOfQuote, PositionType.Begin);\n\n        if (shouldClearFormat) {\n            if (safeInstanceOf(newParent, 'HTMLLIElement')) {\n                newParent.style.removeProperty('color');\n            }\n            clearFormat(editor);\n        }\n    });\n    event.rawEvent.preventDefault();\n}\n\nconst isStyledBlockquote = (element: Node) => {\n    if (\n        element &&\n        safeInstanceOf(element, 'HTMLQuoteElement') &&\n        element.style.borderLeft &&\n        element.style.borderColor &&\n        element.style.paddingLeft &&\n        element.style.color\n    ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * @internal\n */\nexport const QuoteFeatures: Record<\n    keyof QuoteFeatureSettings,\n    BuildInEditFeature<PluginKeyboardEvent>\n> = {\n    unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\n    unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\n};\n"]}