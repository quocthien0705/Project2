import { removeLink, replaceWithNode } from 'roosterjs-editor-api';
import { cacheGetEventData, clearEventDataCache, LinkInlineElement, matchLink, } from 'roosterjs-editor-dom';
/**
 * When user type, they may end a link with a punctuation, i.e. www.bing.com;
 * we need to trim off the trailing punctuation before turning it to link match
 */
var TRAILING_PUNCTUATION_REGEX = /[.+=\s:;"',>]+$/i;
var MINIMUM_LENGTH = 5;
/**
 * AutoLink edit feature, provides the ability to automatically convert text user typed or pasted
 * in hyperlink format into a real hyperlink
 */
var AutoLink = {
    keys: [13 /* ENTER */, 32 /* SPACE */, 257 /* CONTENTCHANGED */],
    shouldHandleEvent: cacheGetLinkData,
    handleEvent: autoLink,
};
/**
 * UnlinkWhenBackspaceAfterLink edit feature, provides the ability to convert a hyperlink back into text
 * if user presses BACKSPACE right after a hyperlink
 */
var UnlinkWhenBackspaceAfterLink = {
    keys: [8 /* BACKSPACE */],
    shouldHandleEvent: hasLinkBeforeCursor,
    handleEvent: function (event, editor) {
        event.rawEvent.preventDefault();
        removeLink(editor);
    },
    defaultDisabled: true,
};
function cacheGetLinkData(event, editor) {
    return event.eventType == 0 /* KeyDown */ ||
        (event.eventType == 7 /* ContentChanged */ && event.source == "Paste" /* Paste */)
        ? cacheGetEventData(event, 'LINK_DATA', function () {
            // First try to match link from the whole paste string from the plain text in clipboard.
            // This helps when we paste a link next to some existing character, and the text we got
            // from clipboard will only contain what we pasted, any existing characters will not
            // be included.
            var clipboardData = (event.eventType == 7 /* ContentChanged */ &&
                event.source == "Paste" /* Paste */ &&
                event.data) ||
                null;
            var link = matchLink(((clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.text) || '').trim());
            var searcher = editor.getContentSearcherOfCursor(event);
            // In case the matched link is already inside a <A> tag, we do a range search.
            // getRangeFromText will return null if the given text is already in a LinkInlineElement
            if (link && (searcher === null || searcher === void 0 ? void 0 : searcher.getRangeFromText(link.originalUrl, false /*exactMatch*/))) {
                return link;
            }
            var word = searcher && searcher.getWordBefore();
            if (word && word.length > MINIMUM_LENGTH) {
                // Check for trailing punctuation
                var trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);
                var trailingPunctuation = (trailingPunctuations || [])[0] || '';
                var candidate_1 = word.substring(0, word.length - trailingPunctuation.length);
                // Do special handling for ')', '}', ']'
                ['()', '{}', '[]'].forEach(function (str) {
                    if (candidate_1[candidate_1.length - 1] == str[1] &&
                        candidate_1.indexOf(str[0]) < 0) {
                        candidate_1 = candidate_1.substr(0, candidate_1.length - 1);
                    }
                });
                // Match and replace in editor
                return matchLink(candidate_1);
            }
            return null;
        })
        : null;
}
function hasLinkBeforeCursor(event, editor) {
    var contentSearcher = editor.getContentSearcherOfCursor(event);
    var inline = contentSearcher === null || contentSearcher === void 0 ? void 0 : contentSearcher.getInlineElementBefore();
    return inline instanceof LinkInlineElement;
}
function autoLink(event, editor) {
    var linkData = cacheGetLinkData(event, editor);
    if (!linkData) {
        return;
    }
    var anchor = editor.getDocument().createElement('a');
    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line
    // and at that time a new searcher won't be able to find the link text to replace
    var searcher = editor.getContentSearcherOfCursor();
    anchor.textContent = linkData.originalUrl;
    anchor.href = linkData.normalizedUrl;
    editor.runAsync(function (editor) {
        editor.addUndoSnapshot(function () {
            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher !== null && searcher !== void 0 ? searcher : undefined);
            // The content at cursor has changed. Should also clear the cursor data cache
            clearEventDataCache(event);
            return anchor;
        }, "AutoLink" /* AutoLink */, true /*canUndoByBackspace*/);
    });
}
/**
 * @internal
 */
export var AutoLinkFeatures = {
    autoLink: AutoLink,
    unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,
};
//# sourceMappingURL=autoLinkFeatures.js.map