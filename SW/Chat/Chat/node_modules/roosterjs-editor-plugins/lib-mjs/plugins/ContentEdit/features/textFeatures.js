import { setIndentation } from 'roosterjs-editor-api';
import { createRange, getEntitySelector, getTagOfNode, Position, queryElements, } from 'roosterjs-editor-dom';
var TAB_SPACES = 6;
/**
 * Requires @see ExperimentalFeatures.TabKeyTextFeatures to be enabled
 * Provides additional functionality when press Tab:
 *      If Whole Paragraph selected, indent paragraph,
 *      If range is collapsed, add tab spaces
 *      If range is not collapsed but not all the paragraph is selected, replace selection with Tab spaces
 *      If there are more than one block in the selection, indent all selection
 */
var IndentWhenTabText = {
    keys: [9 /* TAB */],
    shouldHandleEvent: function (event, editor) {
        if (editor.isFeatureEnabled("TabKeyTextFeatures" /* TabKeyTextFeatures */) &&
            !event.rawEvent.shiftKey) {
            var activeElement = editor.getDocument().activeElement;
            var listOrTable = editor.getElementAtCursor('LI,TABLE', undefined /*startFrom*/, event);
            var entity = editor.getElementAtCursor(getEntitySelector(), undefined /*startFrom*/, event);
            return (!listOrTable &&
                (entity ? entity.isContentEditable : activeElement.isContentEditable));
        }
        return false;
    },
    handleEvent: function (event, editor) {
        var selection = editor.getSelectionRangeEx();
        if (selection.type == 0 /* Normal */) {
            editor.addUndoSnapshot(function () {
                if (selection.areAllCollapsed) {
                    insertTab(editor, event);
                }
                else {
                    var ranges = selection.ranges;
                    var range = ranges[0];
                    if (shouldSetIndentation(editor, range)) {
                        setIndentation(editor, 0 /* Increase */);
                    }
                    else {
                        var tempRange = createRange(range.startContainer, range.startOffset);
                        ranges.forEach(function (range) { return range.deleteContents(); });
                        editor.select(tempRange);
                        insertTab(editor, event);
                    }
                }
            });
            event.rawEvent.preventDefault();
        }
    },
};
/**
 * Requires @see ExperimentalFeatures.TabKeyTextFeatures to be enabled
 * If Whole Paragraph selected, outdent paragraph on Tab press
 */
var OutdentWhenTabText = {
    keys: [9 /* TAB */],
    shouldHandleEvent: function (event, editor) {
        if (event.rawEvent.shiftKey &&
            editor.isFeatureEnabled("TabKeyTextFeatures" /* TabKeyTextFeatures */)) {
            var selection = editor.getSelectionRangeEx();
            return (selection.type == 0 /* Normal */ &&
                !selection.areAllCollapsed &&
                editor.getElementAtCursor('blockquote', undefined, event) &&
                !editor.getElementAtCursor('LI,TABLE', undefined /*startFrom*/, event) &&
                shouldSetIndentation(editor, selection.ranges[0]));
        }
        return false;
    },
    handleEvent: function (event, editor) {
        editor.addUndoSnapshot(function () { return setIndentation(editor, 1 /* Decrease */); });
        event.rawEvent.preventDefault();
    },
};
/**
 * @deprecated
 * Automatically transform -- into hyphen, if typed between two words.
 */
var AutoHyphen = {
    keys: [],
    shouldHandleEvent: function (event, editor) {
        return false;
    },
    handleEvent: function (event, editor) {
        return false;
    },
    defaultDisabled: true,
};
/**
 * @internal
 */
export var TextFeatures = {
    indentWhenTabText: IndentWhenTabText,
    outdentWhenTabText: OutdentWhenTabText,
    autoHyphen: AutoHyphen,
};
function shouldSetIndentation(editor, range) {
    var result = false;
    var startPosition = Position.getStart(range);
    var endPosition = Position.getEnd(range);
    var firstBlock = editor.getBlockElementAtNode(startPosition.node);
    var lastBlock = editor.getBlockElementAtNode(endPosition.node);
    if (!firstBlock || !lastBlock) {
        return false;
    }
    if (!firstBlock.equals(lastBlock)) {
        //If the selections has more than one block, we indent all the blocks in the selection
        return true;
    }
    else {
        //We only indent a single block if all the block is selected.
        var blockStart = new Position(firstBlock.getStartNode(), 0 /* Begin */);
        var blockEnd = new Position(firstBlock.getEndNode(), -1 /* End */);
        var rangeBefore = createRange(blockStart, Position.getStart(range));
        var rangeAfter = createRange(Position.getEnd(range), blockEnd);
        if (!result && isRangeEmpty(rangeBefore) && isRangeEmpty(rangeAfter)) {
            result = true;
        }
        return result;
    }
}
function isRangeEmpty(range) {
    return (range.toString() == '' &&
        queryElements(range.commonAncestorContainer, 'img,table,ul,ol', null, 2 /* InSelection */, range).length == 0);
}
function insertTab(editor, event) {
    var span = editor.getDocument().createElement('span');
    var searcher = editor.getContentSearcherOfCursor(event);
    if (!searcher) {
        return;
    }
    var charsBefore = searcher.getSubStringBefore(Number.MAX_SAFE_INTEGER);
    var numberOfChars = TAB_SPACES - (charsBefore.length % TAB_SPACES);
    var span2 = null;
    var textContent = '';
    for (var index = 0; index < numberOfChars; index++) {
        textContent += '&ensp;';
    }
    editor.insertNode(span);
    if (span.nextElementSibling && getTagOfNode(span.nextElementSibling) == 'A') {
        span2 = editor.getDocument().createElement('span');
        span2.textContent = ' ';
        editor.insertNode(span2);
        editor.select(createRange(span2, -2 /* Before */));
    }
    editor.insertContent(textContent, {
        position: 5 /* Range */,
        range: createRange(span, 0 /* Begin */),
        updateCursor: false,
    });
    editor.select(createRange(span, -3 /* After */));
    if (span2) {
        editor.deleteNode(span2);
    }
}
//# sourceMappingURL=textFeatures.js.map