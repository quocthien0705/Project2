{"version":3,"file":"structuredNodeFeatures.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContentEdit/features/structuredNodeFeatures.ts"],"names":[],"mappings":"AAOA,OAAO,EACH,iBAAiB,EACjB,uBAAuB,EACvB,QAAQ,EACR,YAAY,EACZ,aAAa,EACb,aAAa,GAChB,MAAM,sBAAsB,CAAC;AAE9B,IAAM,oBAAoB,GAAmC;IACzD,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,OAAO;CACd,CAAC;AACF,IAAM,cAAc,GAAG,aAAa,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAErE;;;;GAIG;AACH,IAAM,qCAAqC,GAA4C;IACnF,IAAI,EAAE,gBAAY;IAClB,iBAAiB,EAAE,yBAAyB;IAC5C,WAAW,EAAE,UAAC,KAAK,EAAE,MAAM;QACvB,IAAM,OAAO,GAAG,yBAAyB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACzD,IAAM,GAAG,GAAG,aAAa,oBAErB,MAAM,CAAC,WAAW,EAAE,CACR,CAAC;QACjB,MAAM,CAAC,eAAe,CAAC;;YACnB,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,0CAAE,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAChD,gFAAgF;YAChF,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,OAAO,EAAE;gBAClC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,GAAG,gBAAqB,CAAC,SAAS,EAAE,CAAC,CAAC;aACpE;QACL,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;IACD,eAAe,EAAE,IAAI;CACxB,CAAC;AAEF,SAAS,yBAAyB,CAAC,KAA0B,EAAE,MAAe;IAC1E,OAAO,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,EAAE;QAC/C,sEAAsE;QACtE,IAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAE3F,IAAI,OAAO,EAAE;YACT,IAAM,KAAK,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;YACzC,IACI,KAAK;gBACL,KAAK,CAAC,SAAS;gBACf,uBAAuB,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;gBAC1D,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,uBAAuB,EAAE,EAC7D;gBACE,OAAO,MAAM,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACjF;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,IAAM,sBAAsB,GAG/B;IACA,qCAAqC,EAAE,qCAAqC;CAC/E,CAAC","sourcesContent":["import { Keys, KnownCreateElementDataIndex, PositionType } from 'roosterjs-editor-types';\nimport type {\n    BuildInEditFeature,\n    IEditor,\n    PluginKeyboardEvent,\n    StructuredNodeFeatureSettings,\n} from 'roosterjs-editor-types';\nimport {\n    cacheGetEventData,\n    isPositionAtBeginningOf,\n    Position,\n    getTagOfNode,\n    createElement,\n    getObjectKeys,\n} from 'roosterjs-editor-dom';\n\nconst CHILD_PARENT_TAG_MAP: { [childTag: string]: string } = {\n    TD: 'TABLE',\n    TH: 'TABLE',\n    LI: 'OL,UL',\n};\nconst CHILD_SELECTOR = getObjectKeys(CHILD_PARENT_TAG_MAP).join(',');\n\n/**\n * InsertLineBeforeStructuredNode edit feature, provides the ability to insert an empty line before\n * a structured element (bullet/numbering list, blockquote, table) if the element is at beginning of\n * document\n */\nconst InsertLineBeforeStructuredNodeFeature: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.ENTER],\n    shouldHandleEvent: cacheGetStructuredElement,\n    handleEvent: (event, editor) => {\n        const element = cacheGetStructuredElement(event, editor);\n        const div = createElement(\n            KnownCreateElementDataIndex.EmptyLine,\n            editor.getDocument()\n        ) as HTMLElement;\n        editor.addUndoSnapshot(() => {\n            element?.parentNode?.insertBefore(div, element);\n            // Select the new line when we are in table. This is the same behavior with Word\n            if (getTagOfNode(element) == 'TABLE') {\n                editor.select(new Position(div, PositionType.Begin).normalize());\n            }\n        });\n        event.rawEvent.preventDefault();\n    },\n    defaultDisabled: true,\n};\n\nfunction cacheGetStructuredElement(event: PluginKeyboardEvent, editor: IEditor) {\n    return cacheGetEventData(event, 'FIRST_STRUCTURE', () => {\n        // Provide a chance to keep browser default behavior by pressing SHIFT\n        const element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);\n\n        if (element) {\n            const range = editor.getSelectionRange();\n            if (\n                range &&\n                range.collapsed &&\n                isPositionAtBeginningOf(Position.getStart(range), element) &&\n                !editor.getBodyTraverser(element).getPreviousBlockElement()\n            ) {\n                return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[getTagOfNode(element)]);\n            }\n        }\n\n        return null;\n    });\n}\n\n/**\n * @internal\n */\nexport const StructuredNodeFeatures: Record<\n    keyof StructuredNodeFeatureSettings,\n    BuildInEditFeature<PluginKeyboardEvent>\n> = {\n    insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,\n};\n"]}