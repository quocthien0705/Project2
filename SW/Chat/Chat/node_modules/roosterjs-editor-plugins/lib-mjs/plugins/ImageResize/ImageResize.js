import { __extends } from "tslib";
import ImageEdit from '../ImageEdit/ImageEdit';
/**
 * @deprecated Use ImageEdit plugin instead
 */
var ImageResize = /** @class */ (function (_super) {
    __extends(ImageResize, _super);
    /**
     * Create a new instance of ImageResize
     * @param minWidth Minimum width of image when resize in pixel, default value is 10
     * @param minHeight Minimum height of image when resize in pixel, default value is 10
     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C
     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false
     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note
     * that the tag must be IMG regardless what the selector is
     */
    function ImageResize(minWidth, minHeight, selectionBorderColor, forcePreserveRatio, resizableImageSelector) {
        if (minWidth === void 0) { minWidth = 10; }
        if (minHeight === void 0) { minHeight = 10; }
        if (selectionBorderColor === void 0) { selectionBorderColor = '#DB626C'; }
        if (forcePreserveRatio === void 0) { forcePreserveRatio = false; }
        if (resizableImageSelector === void 0) { resizableImageSelector = 'img'; }
        return _super.call(this, {
            minHeight: minHeight,
            minWidth: minWidth,
            borderColor: selectionBorderColor,
            preserveRatio: forcePreserveRatio,
            imageSelector: resizableImageSelector,
        }) || this;
    }
    /**
     * @deprecated
     */
    ImageResize.prototype.showResizeHandle = function (img) {
        this.setEditingImage(img, 3 /* Resize */);
    };
    /**
     * @deprecated
     */
    ImageResize.prototype.hideResizeHandle = function (selectImageAfterUnSelect) {
        this.setEditingImage(null /*image*/, selectImageAfterUnSelect);
    };
    return ImageResize;
}(ImageEdit));
export default ImageResize;
//# sourceMappingURL=ImageResize.js.map