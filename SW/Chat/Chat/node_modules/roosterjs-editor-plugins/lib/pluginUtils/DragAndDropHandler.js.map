{"version":3,"file":"DragAndDropHandler.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-plugins/lib/pluginUtils/DragAndDropHandler.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @internal\n * Drag and drop handler interface, used for implementing a handler object and pass into DragAndDropHelper class\n */\nexport default interface DragAndDropHandler<TContext, TInitValue> {\n    /**\n     * A callback that will be called when user starts to drag (mouse down event from the trigger element)\n     * @param context The context object that was passed into DragAndDropHelper from its constructor. We can use\n     * this object to communicate between caller code and this handler\n     * @param event The mouse event that triggers this callback\n     * @returns An optional object, which will be passed into onDragging and onDragEnd callback. It normally used\n     * for passing an initial state of the target object\n     */\n    onDragStart?: (context: TContext, event: MouseEvent) => TInitValue;\n\n    /**\n     * A callback that will be called when user moves mouse and drag the trigger element.\n     * @param context The context object that was passed into DragAndDropHelper from its constructor. We can use\n     * this object to communicate between caller code and this handler.If an object is used as context, here it will\n     * be the same object that passed into constructor of DragAndDropHelper class. Inside this callback you can change\n     * its sub value so that caller can get the changed result.\n     * @param event The mouse event that triggers this callback\n     * @param initValue The initial value that is returned from onDragStart callback. It normally used\n     * for passing an initial state of the target object\n     * @param deltaX x delta value. It equals to current event.pageX - initial pageX (captured when mousedown happens)\n     * @param deltaY y delta value. It equals to current event.pageY - initial pageY (captured when mousedown happens)\n     * @returns Whether the onSubmit callback passed into constructor of DragAndDropHelper class should be invoked.\n     * Returns true will invoke the onSubmit callback, it means this is a meaningful dragging action, something (mostly\n     * under context object) has been changed, and caller should handle this change. Otherwise, return false.\n     */\n    onDragging?: (\n        context: TContext,\n        event: MouseEvent,\n        initValue: TInitValue,\n        deltaX: number,\n        deltaY: number\n    ) => boolean;\n\n    /**\n     * A callback that will be called when user stops dragging the trigger element.\n     * @param context The context object that was passed into DragAndDropHelper from its constructor. We can use\n     * this object to communicate between caller code and this handler.If an object is used as context, here it will\n     * be the same object that passed into constructor of DragAndDropHelper class. Inside this callback you can change\n     * its sub value so that caller can get the changed result.\n     * @param event The mouse event that triggers this callback\n     * @param initValue The initial value that is returned from onDragStart callback. It normally used\n     * for passing an initial state of the target object\n     * @returns Whether the onSubmit callback passed into constructor of DragAndDropHelper class should be invoked.\n     * Returns true will invoke the onSubmit callback, it means this is a meaningful dragging action, something (mostly\n     * under context object) has been changed, and caller should handle this change. Otherwise, return false.\n     */\n    onDragEnd?: (\n        context: TContext,\n        event: MouseEvent,\n        initValue: TInitValue | undefined\n    ) => boolean;\n}\n"]}