"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var roosterjs_editor_api_1 = require("roosterjs-editor-api");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * Maintain list numbers of list chain when content is modified by cut/paste/drag&drop
 */
var CutPasteListChain = /** @class */ (function () {
    function CutPasteListChain() {
        var _this = this;
        this.chains = null;
        this.expectedChangeSource = null;
        this.editor = null;
        this.disposer = null;
        this.onDrop = function () {
            _this.cacheListChains("Drop" /* Drop */);
        };
    }
    /**
     * Get a friendly name of this plugin
     */
    CutPasteListChain.prototype.getName = function () {
        return 'CutPasteListChain';
    };
    /**
     * Initialize this plugin
     * @param editor The editor instance
     */
    CutPasteListChain.prototype.initialize = function (editor) {
        this.editor = editor;
        this.disposer = this.editor.addDomEventHandler('drop', this.onDrop);
    };
    /**
     * Dispose this plugin
     */
    CutPasteListChain.prototype.dispose = function () {
        var _a;
        (_a = this.disposer) === null || _a === void 0 ? void 0 : _a.call(this);
        this.disposer = null;
        this.editor = null;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    CutPasteListChain.prototype.onPluginEvent = function (event) {
        switch (event.eventType) {
            case 9 /* BeforeCutCopy */:
                if (event.isCut) {
                    this.cacheListChains("Cut" /* Cut */);
                }
                break;
            case 10 /* BeforePaste */:
                this.cacheListChains("Paste" /* Paste */);
                break;
            case 7 /* ContentChanged */:
                if (this.chains &&
                    this.chains.length > 0 &&
                    this.expectedChangeSource == event.source &&
                    this.editor) {
                    (0, roosterjs_editor_api_1.commitListChains)(this.editor, this.chains);
                    this.chains = null;
                    this.expectedChangeSource = null;
                }
                break;
        }
    };
    CutPasteListChain.prototype.cacheListChains = function (source) {
        var _a;
        var selectedRegions = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.getSelectedRegions();
        if (selectedRegions) {
            this.chains = roosterjs_editor_dom_1.VListChain.createListChains(selectedRegions);
            this.expectedChangeSource = source;
        }
    };
    return CutPasteListChain;
}());
exports.default = CutPasteListChain;
//# sourceMappingURL=CutPasteListChain.js.map