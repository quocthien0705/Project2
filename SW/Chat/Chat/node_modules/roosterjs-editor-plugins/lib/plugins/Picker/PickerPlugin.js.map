{"version":3,"file":"PickerPlugin.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/Picker/PickerPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeSource, PluginEventType, PositionType } from 'roosterjs-editor-types';\nimport { replaceWithNode } from 'roosterjs-editor-api';\nimport {\n    Browser,\n    createRange,\n    isCharacterValue,\n    isModifierKey,\n    PartialInlineElement,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\nimport type {\n    EditorPlugin,\n    IEditor,\n    NodePosition,\n    PickerDataProvider,\n    PickerPluginOptions,\n    PluginDomEvent,\n    PluginEvent,\n    PluginInputEvent,\n    PluginKeyboardEvent,\n} from 'roosterjs-editor-types';\n\n// Character codes.\n// IE11 uses different character codes. which are noted below.\n// If adding a new key, test in IE to figure out what the code is.\nconst BACKSPACE_CHAR_CODE = 'Backspace';\nconst TAB_CHAR_CODE = 'Tab';\nconst ENTER_CHAR_CODE = 'Enter';\nconst ESC_CHAR_CODE = !Browser.isIE ? 'Escape' : 'Esc';\nconst LEFT_ARROW_CHAR_CODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\nconst UP_ARROW_CHAR_CODE = !Browser.isIE ? 'ArrowUp' : 'Up';\nconst RIGHT_ARROW_CHAR_CODE = !Browser.isIE ? 'ArrowRight' : 'Right';\nconst DOWN_ARROW_CHAR_CODE = !Browser.isIE ? 'ArrowDown' : 'Down';\nconst DELETE_CHAR_CODE = !Browser.isIE ? 'Delete' : 'Del';\n\n// Input event input types.\nconst DELETE_CONTENT_BACKWARDS_INPUT_TYPE = 'deleteContentBackwards';\n\n// Unidentified key, the code for Android keyboard events.\nconst UNIDENTIFIED_KEY = 'Unidentified';\n// the char code for Android keyboard events on Webview below 51.\nconst UNIDENTIFIED_CODE = [0, 229];\n\n/**\n * PickerPlugin represents a plugin of editor which can handle picker related behaviors, including\n * - Show picker when special trigger key is pressed\n * - Hide picker\n * - Change selection in picker by Up/Down/Left/Right\n * - Apply selected item in picker\n *\n * PickerPlugin doesn't provide any UI, it just wraps related DOM events and invoke callback functions.\n */\nexport default class PickerPlugin<T extends PickerDataProvider = PickerDataProvider>\n    implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private eventHandledOnKeyDown: boolean = false;\n    private blockSuggestions: boolean = false;\n    private isSuggesting: boolean = false;\n    private lastKnownRange: Range | null = null;\n\n    // For detecting backspace in Android\n    private isPendingInputEventHandling: boolean = false;\n    private currentInputLength: number = 0;\n    private newInputLength: number = 0;\n\n    constructor(public readonly dataProvider: T, private pickerOptions: PickerPluginOptions) {}\n\n    /**\n     * Get a friendly name\n     */\n    getName() {\n        return 'Picker';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    public initialize(editor: IEditor) {\n        this.editor = editor;\n        this.dataProvider.onInitalize(\n            (htmlNode: Node) => {\n                if (this.editor) {\n                    this.editor.focus();\n\n                    let wordToReplace = this.getWord(null);\n\n                    // Safari drops our focus out so we get an empty word to replace when we call getWord.\n                    // We fall back to using the lastKnownRange to try to get around this.\n                    if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\n                        this.editor.select(this.lastKnownRange);\n                        wordToReplace = this.getWord(null);\n                    }\n\n                    const insertNode = () => {\n                        if (wordToReplace && this.editor) {\n                            replaceWithNode(\n                                this.editor,\n                                wordToReplace,\n                                htmlNode,\n                                true /* exactMatch */\n                            );\n                        } else {\n                            this.editor?.insertNode(htmlNode);\n                        }\n                        this.setIsSuggesting(false);\n                    };\n\n                    this.editor.addUndoSnapshot(\n                        insertNode,\n                        this.pickerOptions.changeSource,\n                        this.pickerOptions.handleAutoComplete\n                    );\n                }\n            },\n            (isSuggesting: boolean) => {\n                this.setIsSuggesting(isSuggesting);\n            },\n            editor\n        );\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose() {\n        this.editor = null;\n        this.isSuggesting = false;\n        this.blockSuggestions = false;\n        this.eventHandledOnKeyDown = false;\n        this.lastKnownRange = null;\n        this.isPendingInputEventHandling = false;\n        this.currentInputLength = 0;\n        this.newInputLength = 0;\n        this.dataProvider.onDispose();\n    }\n\n    /**\n     * Check if the plugin should handle the given event exclusively.\n     * Handle an event exclusively means other plugin will not receive this event in\n     * onPluginEvent method.\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\n     * the final result depends on the order of the plugins are added into editor\n     * @param event The event to check\n     */\n    public willHandleEventExclusively(event: PluginEvent) {\n        return (\n            this.isSuggesting &&\n            (event.eventType == PluginEventType.KeyDown ||\n                event.eventType == PluginEventType.KeyUp ||\n                event.eventType == PluginEventType.Input)\n        );\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    public onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.ContentChanged:\n                if (event.source == ChangeSource.SetContent && this.dataProvider.onContentChanged) {\n                    // Stop suggesting since content is fully changed\n                    if (this.isSuggesting) {\n                        this.setIsSuggesting(false);\n                    }\n\n                    // Undo and other major changes to document content fire this type of event.\n                    // Inform the data provider of the current picker placed elements in the body.\n                    const elementIds: string[] = [];\n                    this.editor?.queryElements(\n                        \"[id^='\" + this.pickerOptions.elementIdPrefix + \"']\",\n                        element => {\n                            if (element.id) {\n                                elementIds.push(element.id);\n                            }\n                        }\n                    );\n                    this.dataProvider.onContentChanged(elementIds);\n                }\n                break;\n\n            case PluginEventType.KeyDown:\n                this.eventHandledOnKeyDown = false;\n                if (this.isAndroidKeyboardEvent(event)) {\n                    // On Android, the key for KeyboardEvent is \"Unidentified\" or undefined,\n                    // so handling should be done using the input rather than key down event\n                    // Since the key down event happens right before the input event, calculate the input\n                    // length here in preparation for onAndroidInputEvent\n                    this.currentInputLength = this.calcInputLength(event);\n                    this.isPendingInputEventHandling = true;\n                } else {\n                    this.onKeyDownEvent(event);\n                    this.isPendingInputEventHandling = false;\n                }\n                break;\n\n            case PluginEventType.Input:\n                if (this.isPendingInputEventHandling) {\n                    this.onAndroidInputEvent(event);\n                }\n                break;\n\n            case PluginEventType.KeyUp:\n                if (!this.eventHandledOnKeyDown && this.shouldHandleKeyUpEvent(event)) {\n                    this.onKeyUpDomEvent(event);\n                    this.isPendingInputEventHandling = false;\n                }\n                break;\n\n            case PluginEventType.MouseUp:\n                if (this.isSuggesting) {\n                    this.setIsSuggesting(false);\n                }\n                break;\n\n            case PluginEventType.Scroll:\n                if (this.dataProvider.onScroll) {\n                    // Dispatch scroll event to data provider\n                    this.dataProvider.onScroll(event.scrollContainer);\n                }\n                break;\n        }\n    }\n\n    private setLastKnownRange(range: Range | null) {\n        this.lastKnownRange = range;\n    }\n\n    private setIsSuggesting(isSuggesting: boolean) {\n        this.isSuggesting = isSuggesting;\n\n        if (!isSuggesting) {\n            this.setLastKnownRange(null);\n        }\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\n\n        this.setAriaOwns(isSuggesting);\n        this.setAriaActiveDescendant(isSuggesting ? 0 : null);\n    }\n\n    private cancelDefaultKeyDownEvent(event: PluginKeyboardEvent) {\n        this.eventHandledOnKeyDown = true;\n        event.rawEvent.preventDefault();\n        event.rawEvent.stopImmediatePropagation();\n    }\n\n    private getIdValue(node: Node): string | null {\n        if (safeInstanceOf(node, 'HTMLElement')) {\n            const attribute = node.attributes.getNamedItem('id');\n            return attribute ? (attribute.value as string) : null;\n        } else {\n            return null;\n        }\n    }\n\n    private getWordBeforeCursor(event: PluginKeyboardEvent | null): string | null {\n        const searcher = this.editor?.getContentSearcherOfCursor(event);\n        return searcher ? searcher.getWordBefore() : null;\n    }\n\n    private replaceNode(currentNode: Node | null, replacementNode: Node | null) {\n        this.editor?.addUndoSnapshot(() => {\n            if (currentNode) {\n                this.editor?.deleteNode(currentNode);\n            }\n            if (replacementNode) {\n                this.editor?.insertNode(replacementNode);\n            }\n        }, ChangeSource.Keyboard);\n    }\n\n    private getRangeUntilAt(event: PluginKeyboardEvent | null): Range | null {\n        const positionContentSearcher = this.editor?.getContentSearcherOfCursor(event);\n        let startPos: NodePosition | undefined = undefined;\n        let endPos: NodePosition | undefined = undefined;\n        positionContentSearcher?.forEachTextInlineElement(textInline => {\n            let hasMatched = false;\n            const nodeContent = textInline.getTextContent();\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\n            while (nodeIndex >= 0) {\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\n                    startPos = textInline.getStartPosition().move(nodeIndex);\n                    hasMatched = true;\n                    break;\n                }\n                nodeIndex--;\n            }\n\n            if (hasMatched) {\n                endPos = textInline.getEndPosition();\n            }\n\n            return hasMatched;\n        });\n        return startPos\n            ? createRange(startPos, endPos)\n            : this.editor?.getDocument().createRange() ?? null;\n    }\n\n    private shouldHandleKeyUpEvent(event: PluginKeyboardEvent) {\n        // onKeyUpDomEvent should only be called when a key that produces a character value is pressed\n        // This check will always fail on Android since the KeyboardEvent's key is \"Unidentified\" or undefined\n        // However, we don't need to check for modifier events on mobile, so can ignore this check\n        return (\n            this.isAndroidKeyboardEvent(event) ||\n            isCharacterValue(event.rawEvent) ||\n            (this.isSuggesting && !isModifierKey(event.rawEvent))\n        );\n    }\n\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\n        if (this.editor) {\n            if (this.isSuggesting) {\n                // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\n                const wordBeforeCursor = this.getWord(event);\n                if (wordBeforeCursor !== null) {\n                    const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\n                    const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\n\n                    // If we hit a case where wordBeforeCursor is just the trigger character,\n                    // that means we've gotten an onKeyUp event right after it's been typed.\n                    // Otherwise, update the query string when:\n                    // 1. There's an actual value\n                    // 2. That actual value isn't just pure whitespace\n                    // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\n                    // Otherwise, we want to dismiss the picker plugin's UX.\n                    if (\n                        wordBeforeCursor == this.pickerOptions.triggerCharacter ||\n                        (trimmedWordBeforeCursor &&\n                            trimmedWordBeforeCursor.length > 0 &&\n                            trimmedWordBeforeCursor.split(' ').length <= 4)\n                    ) {\n                        this.dataProvider.queryStringUpdated(\n                            trimmedWordBeforeCursor,\n                            wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\n                        );\n                        this.setLastKnownRange(this.editor.getSelectionRange() ?? null);\n                    } else {\n                        this.setIsSuggesting(false);\n                    }\n                }\n            } else {\n                const wordBeforeCursor = this.getWordBeforeCursor(event);\n                if (!this.blockSuggestions) {\n                    if (\n                        wordBeforeCursor != null &&\n                        wordBeforeCursor.split(' ').length <= 4 &&\n                        (wordBeforeCursor[0] == this.pickerOptions.triggerCharacter ||\n                            (wordBeforeCursor[0] == '(' &&\n                                wordBeforeCursor[1] == this.pickerOptions.triggerCharacter))\n                    ) {\n                        this.setIsSuggesting(true);\n                        const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\n                        const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\n                        this.dataProvider.queryStringUpdated(\n                            trimmedWordBeforeCursor,\n                            wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\n                        );\n                        this.setLastKnownRange(this.editor.getSelectionRange() ?? null);\n                        if (this.dataProvider.setCursorPoint) {\n                            // Determine the bounding rectangle for the @mention\n                            const searcher = this.editor.getContentSearcherOfCursor(event);\n                            const rangeNode = this.editor.getDocument().createRange();\n\n                            if (rangeNode) {\n                                const nodeBeforeCursor =\n                                    searcher?.getInlineElementBefore()?.getContainerNode() ?? null;\n\n                                const rangeStartSuccessfullySet = this.setRangeStart(\n                                    rangeNode,\n                                    nodeBeforeCursor,\n                                    wordBeforeCursor\n                                );\n                                if (!rangeStartSuccessfullySet) {\n                                    // VSO 24891: Out of range error is occurring because nodeBeforeCursor\n                                    // is not including the trigger character. In this case, the node before\n                                    // the node before cursor is the trigger character, and this is where the range should start.\n                                    const nodeBeforeNodeBeforeCursor =\n                                        nodeBeforeCursor?.previousSibling ?? null;\n                                    this.setRangeStart(\n                                        rangeNode,\n                                        nodeBeforeNodeBeforeCursor,\n                                        this.pickerOptions.triggerCharacter\n                                    );\n                                }\n                                let rect = rangeNode.getBoundingClientRect();\n\n                                // Safari's support for range.getBoundingClientRect is incomplete.\n                                // We perform this check to fall back to getClientRects in case it's at the page origin.\n                                if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\n                                    rect = rangeNode.getClientRects()[0];\n                                }\n\n                                if (rect) {\n                                    rangeNode.detach();\n\n                                    // Display the @mention popup in the correct place\n                                    const targetPoint = {\n                                        x: rect.left,\n                                        y: (rect.bottom + rect.top) / 2,\n                                    };\n                                    const bufferZone = (rect.bottom - rect.top) / 2;\n                                    this.dataProvider.setCursorPoint(targetPoint, bufferZone);\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (\n                        wordBeforeCursor != null &&\n                        wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\n                    ) {\n                        this.blockSuggestions = false;\n                    }\n                }\n            }\n        }\n    }\n\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\n        const keyboardEvent = event.rawEvent;\n        if (this.isSuggesting) {\n            if (keyboardEvent.key == ESC_CHAR_CODE) {\n                this.setIsSuggesting(false);\n                this.blockSuggestions = true;\n                this.cancelDefaultKeyDownEvent(event);\n            } else if (keyboardEvent.key == BACKSPACE_CHAR_CODE) {\n                // #483: If we are backspacing over the trigger character that triggered this Picker\n                // then we need to hide the Picker\n                const wordBeforeCursor = this.getWord(event);\n                if (wordBeforeCursor == this.pickerOptions.triggerCharacter) {\n                    this.setIsSuggesting(false);\n                }\n            } else if (\n                this.dataProvider.shiftHighlight &&\n                (this.pickerOptions.isHorizontal\n                    ? keyboardEvent.key == LEFT_ARROW_CHAR_CODE ||\n                      keyboardEvent.key == RIGHT_ARROW_CHAR_CODE\n                    : keyboardEvent.key == UP_ARROW_CHAR_CODE ||\n                      keyboardEvent.key == DOWN_ARROW_CHAR_CODE)\n            ) {\n                this.dataProvider.shiftHighlight(\n                    this.pickerOptions.isHorizontal\n                        ? keyboardEvent.key == RIGHT_ARROW_CHAR_CODE\n                        : keyboardEvent.key == DOWN_ARROW_CHAR_CODE\n                );\n\n                if (this.dataProvider.getSelectedIndex) {\n                    this.setAriaActiveDescendant(this.dataProvider.getSelectedIndex());\n                }\n\n                this.cancelDefaultKeyDownEvent(event);\n            } else if (\n                this.dataProvider.selectOption &&\n                (keyboardEvent.key == ENTER_CHAR_CODE || keyboardEvent.key == TAB_CHAR_CODE)\n            ) {\n                this.dataProvider.selectOption();\n                this.cancelDefaultKeyDownEvent(event);\n            } else {\n                // Currently no op.\n            }\n        } else {\n            if (keyboardEvent.key == BACKSPACE_CHAR_CODE) {\n                const nodeRemoved = this.tryRemoveNode(event);\n                if (nodeRemoved) {\n                    this.cancelDefaultKeyDownEvent(event);\n                }\n            } else if (keyboardEvent.key == DELETE_CHAR_CODE) {\n                const searcher = this.editor?.getContentSearcherOfCursor(event);\n                if (searcher) {\n                    const inlineElementAfter = searcher.getInlineElementAfter();\n                    let nodeAfterCursor = inlineElementAfter\n                        ? inlineElementAfter.getContainerNode()\n                        : null;\n                    nodeAfterCursor = this.getParentNodeIfTextNode(nodeAfterCursor);\n                    const nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\n                    if (\n                        nodeId &&\n                        nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\n                        nodeAfterCursor\n                    ) {\n                        const replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\n                        this.replaceNode(nodeAfterCursor, replacementNode);\n                        this.cancelDefaultKeyDownEvent(event);\n                    }\n                }\n            }\n        }\n    }\n\n    private getParentNodeIfTextNode(node: Node | null): Node | null {\n        if (safeInstanceOf(node, 'Text')) {\n            node = node.parentNode;\n        }\n        return node;\n    }\n\n    private onAndroidInputEvent(event: PluginInputEvent) {\n        this.newInputLength = this.calcInputLength(event);\n\n        if (\n            this.newInputLength < this.currentInputLength ||\n            event.rawEvent.inputType === DELETE_CONTENT_BACKWARDS_INPUT_TYPE\n        ) {\n            const nodeRemoved = this.tryRemoveNode(event);\n            if (nodeRemoved) {\n                this.eventHandledOnKeyDown = true;\n            }\n        }\n    }\n\n    private calcInputLength(event: PluginEvent) {\n        const wordBeforeCursor = this.getInlineElementBeforeCursor(event);\n        return wordBeforeCursor ? wordBeforeCursor.length : 0;\n    }\n\n    private tryRemoveNode(event: PluginDomEvent): boolean {\n        if (!this.editor) {\n            return false;\n        }\n        const searcher = this.editor.getContentSearcherOfCursor(event);\n        if (!searcher) {\n            return false;\n        }\n\n        const inlineElementBefore = searcher.getInlineElementBefore();\n        let nodeBeforeCursor = inlineElementBefore ? inlineElementBefore.getContainerNode() : null;\n        nodeBeforeCursor = this.getParentNodeIfTextNode(nodeBeforeCursor);\n        const nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\n        const inlineElementAfter = searcher.getInlineElementAfter();\n\n        if (\n            nodeBeforeCursor &&\n            nodeId &&\n            nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\n            (inlineElementAfter == null || !(inlineElementAfter instanceof PartialInlineElement))\n        ) {\n            const replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\n            if (replacementNode) {\n                this.replaceNode(nodeBeforeCursor, replacementNode);\n                if (this.isPendingInputEventHandling) {\n                    this.editor.runAsync(editor => {\n                        editor.select(replacementNode, PositionType.After);\n                    });\n                } else {\n                    this.editor.select(replacementNode, PositionType.After);\n                }\n\n                return true;\n            } else {\n                // Select the node then let browser delete it\n                this.editor.select(nodeBeforeCursor);\n                return false;\n            }\n        }\n        return false;\n    }\n\n    private getWord(event: PluginKeyboardEvent | null) {\n        const wordFromRange = this.getRangeUntilAt(event)?.toString() ?? '';\n        const wordFromCache = this.getWordBeforeCursor(event);\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\n        // so wordFromCache is what we want to return.\n        if (\n            wordFromRange == this.pickerOptions.triggerCharacter &&\n            wordFromRange != wordFromCache\n        ) {\n            return wordFromCache;\n        }\n        return wordFromRange;\n    }\n\n    private setRangeStart(rangeNode: Range, node: Node | null, target: string) {\n        const nodeOffset = node?.textContent ? node.textContent.lastIndexOf(target) : -1;\n        if (node && nodeOffset > -1) {\n            rangeNode.setStart(node, nodeOffset);\n            return true;\n        }\n        return false;\n    }\n\n    private setAriaOwns(isSuggesting: boolean) {\n        this.editor?.setEditorDomAttribute(\n            'aria-owns',\n            isSuggesting && this.pickerOptions.suggestionsLabel\n                ? this.pickerOptions.suggestionsLabel\n                : null\n        );\n    }\n\n    private setAriaActiveDescendant(selectedIndex: number | null) {\n        this.editor?.setEditorDomAttribute(\n            'aria-activedescendant',\n            selectedIndex != null && this.pickerOptions.suggestionLabelPrefix\n                ? this.pickerOptions.suggestionLabelPrefix + selectedIndex.toString()\n                : null\n        );\n    }\n\n    private getInlineElementBeforeCursor(event: PluginEvent): string | null {\n        const searcher = this.editor?.getContentSearcherOfCursor(event);\n        const element = searcher ? searcher.getInlineElementBefore() : null;\n        return element ? element.getTextContent() : null;\n    }\n\n    private isAndroidKeyboardEvent(event: PluginKeyboardEvent): boolean {\n        // Check keyboard events on Android for further handling.\n        // On Android Webview later 51, the KeyboardEvent's key is \"Unidentified\".\n        // On Android Webview below 51, the KeyboardEvent's key is not supported and always returns undefined,\n        // so using the charCode property, which is 0 or 229.\n        return (\n            event.rawEvent.key == UNIDENTIFIED_KEY ||\n            (event.rawEvent.key == undefined &&\n                UNIDENTIFIED_CODE.indexOf(event.rawEvent.charCode) > -1)\n        );\n    }\n}\n"]}