"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getAllFeatures_1 = require("./getAllFeatures");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * An editor plugin to handle content edit event.
 * The following cases are included:
 * 1. Auto increase/decrease indentation on Tab, Shift+tab
 * 2. Enter, Backspace on empty list item
 * 3. Enter, Backspace on empty blockquote line
 * 4. Auto bullet/numbering
 * 5. Auto link
 * 6. Tab in table
 * 7. Up/Down in table
 * 8. Manage list style
 */
var ContentEdit = /** @class */ (function () {
    /**
     * Create instance of ContentEdit plugin
     * @param settingsOverride An optional feature set to override default feature settings
     * @param additionalFeatures Optional. More features to add
     */
    function ContentEdit(settingsOverride, additionalFeatures) {
        this.settingsOverride = settingsOverride;
        this.additionalFeatures = additionalFeatures;
        this.editor = undefined;
        this.features = [];
    }
    /**
     * Get a friendly name of  this plugin
     */
    ContentEdit.prototype.getName = function () {
        return 'ContentEdit';
    };
    /**
     * Initialize this plugin
     * @param editor The editor instance
     */
    ContentEdit.prototype.initialize = function (editor) {
        var _this = this;
        this.editor = editor;
        var allFeatures = (0, getAllFeatures_1.default)();
        (0, roosterjs_editor_dom_1.getObjectKeys)(allFeatures).forEach(function (key) {
            var _a;
            var feature = allFeatures[key];
            var hasSettingForKey = _this.settingsOverride && _this.settingsOverride[key] !== undefined;
            if ((hasSettingForKey && ((_a = _this.settingsOverride) === null || _a === void 0 ? void 0 : _a[key])) ||
                (!hasSettingForKey && !feature.defaultDisabled)) {
                _this.features.push(feature);
            }
        });
        this.features = this.features.concat(this.additionalFeatures || []);
        this.features.forEach(function (feature) { var _a; return (_a = _this.editor) === null || _a === void 0 ? void 0 : _a.addContentEditFeature(feature); });
    };
    ContentEdit.prototype.disposeFeatures = function () {
        var _this = this;
        if (this.editor) {
            this.features.forEach(function (feature) { return _this.editor.removeContentEditFeature(feature); });
        }
        this.features = [];
    };
    /**
     * Dispose this plugin
     */
    ContentEdit.prototype.dispose = function () {
        this.disposeFeatures();
        this.editor = undefined;
    };
    return ContentEdit;
}());
exports.default = ContentEdit;
//# sourceMappingURL=ContentEdit.js.map