{"version":3,"file":"getAutoNumberingListStyle.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContentEdit/utils/getAutoNumberingListStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import convertAlphaToDecimals from './convertAlphaToDecimals';\nimport { NumberingListType } from 'roosterjs-editor-types';\nimport type { VListChain } from 'roosterjs-editor-dom';\n\nconst enum NumberingTypes {\n    Decimal = 1,\n    LowerAlpha = 2,\n    UpperAlpha = 3,\n    LowerRoman = 4,\n    UpperRoman = 5,\n}\n\nconst enum Character {\n    Dot = 1,\n    Dash = 2,\n    Parenthesis = 3,\n    DoubleParenthesis = 4,\n}\n\nconst characters: Record<string, number> = {\n    '.': Character.Dot,\n    '-': Character.Dash,\n    ')': Character.Parenthesis,\n};\n\nconst lowerRomanTypes = [\n    NumberingListType.LowerRoman,\n    NumberingListType.LowerRomanDash,\n    NumberingListType.LowerRomanDoubleParenthesis,\n    NumberingListType.LowerRomanParenthesis,\n];\nconst upperRomanTypes = [\n    NumberingListType.UpperRoman,\n    NumberingListType.UpperRomanDash,\n    NumberingListType.UpperRomanDoubleParenthesis,\n    NumberingListType.UpperRomanParenthesis,\n];\nconst numberingTriggers = ['1', 'a', 'A', 'I', 'i'];\nconst lowerRomanNumbers = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\nconst upperRomanNumbers = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n\nconst identifyNumberingType = (text: string, previousListStyle?: NumberingListType) => {\n    if (!isNaN(parseInt(text))) {\n        return NumberingTypes.Decimal;\n    } else if (/[a-z]+/g.test(text)) {\n        if (\n            (previousListStyle != undefined &&\n                lowerRomanTypes.indexOf(previousListStyle) > -1 &&\n                lowerRomanNumbers.indexOf(text[0]) > -1) ||\n            (!previousListStyle && text === 'i')\n        ) {\n            return NumberingTypes.LowerRoman;\n        } else if (previousListStyle || (!previousListStyle && text === 'a')) {\n            return NumberingTypes.LowerAlpha;\n        }\n    } else if (/[A-Z]+/g.test(text)) {\n        if (\n            (previousListStyle != undefined &&\n                upperRomanTypes.indexOf(previousListStyle) > -1 &&\n                upperRomanNumbers.indexOf(text[0]) > -1) ||\n            (!previousListStyle && text === 'I')\n        ) {\n            return NumberingTypes.UpperRoman;\n        } else if (previousListStyle || (!previousListStyle && text === 'A')) {\n            return NumberingTypes.UpperAlpha;\n        }\n    }\n};\n\nconst numberingListTypes: Record<number, (char: number) => number | null> = {\n    [NumberingTypes.Decimal]: char => DecimalsTypes[char] || null,\n    [NumberingTypes.LowerAlpha]: char => LowerAlphaTypes[char] || null,\n    [NumberingTypes.UpperAlpha]: char => UpperAlphaTypes[char] || null,\n    [NumberingTypes.LowerRoman]: char => LowerRomanTypes[char] || null,\n    [NumberingTypes.UpperRoman]: char => UpperRomanTypes[char] || null,\n};\n\nconst UpperRomanTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.UpperRoman,\n    [Character.Dash]: NumberingListType.UpperRomanDash,\n    [Character.Parenthesis]: NumberingListType.UpperRomanParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.UpperRomanDoubleParenthesis,\n};\n\nconst LowerRomanTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.LowerRoman,\n    [Character.Dash]: NumberingListType.LowerRomanDash,\n    [Character.Parenthesis]: NumberingListType.LowerRomanParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.LowerRomanDoubleParenthesis,\n};\n\nconst UpperAlphaTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.UpperAlpha,\n    [Character.Dash]: NumberingListType.UpperAlphaDash,\n    [Character.Parenthesis]: NumberingListType.UpperAlphaParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.UpperAlphaDoubleParenthesis,\n};\n\nconst LowerAlphaTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.LowerAlpha,\n    [Character.Dash]: NumberingListType.LowerAlphaDash,\n    [Character.Parenthesis]: NumberingListType.LowerAlphaParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.LowerAlphaDoubleParenthesis,\n};\n\nconst DecimalsTypes: Record<number, number> = {\n    [Character.Dot]: NumberingListType.Decimal,\n    [Character.Dash]: NumberingListType.DecimalDash,\n    [Character.Parenthesis]: NumberingListType.DecimalParenthesis,\n    [Character.DoubleParenthesis]: NumberingListType.DecimalDoubleParenthesis,\n};\n\nconst identifyNumberingListType = (\n    numbering: string,\n    isDoubleParenthesis: boolean,\n    previousListStyle?: NumberingListType\n): NumberingListType | null => {\n    const separatorCharacter = isDoubleParenthesis\n        ? Character.DoubleParenthesis\n        : characters[numbering[numbering.length - 1]];\n    // if separator is not valid, no need to check if the number is valid.\n    if (separatorCharacter) {\n        const number = isDoubleParenthesis ? numbering.slice(1, -1) : numbering.slice(0, -1);\n        const numberingType = identifyNumberingType(number, previousListStyle);\n        return numberingType ? numberingListTypes[numberingType](separatorCharacter) : null;\n    }\n    return null;\n};\n\n/**\n * @internal\n * @param textBeforeCursor The trigger character\n * @param previousListChain @optional This parameters is used to keep the list chain, if the is not a new list\n * @param previousListStyle @optional The list style of the previous list\n * @returns The style of a numbering list triggered by a string\n */\nexport default function getAutoNumberingListStyle(\n    textBeforeCursor: string,\n    previousListChain?: VListChain[],\n    previousListStyle?: NumberingListType\n): NumberingListType | null {\n    const trigger = textBeforeCursor.trim();\n    const isDoubleParenthesis = trigger[0] === '(' && trigger[trigger.length - 1] === ')';\n    //Only the staring items ['1', 'a', 'A', 'I', 'i'] must trigger a new list. All the other triggers is used to keep the list chain.\n    //The index is always the characters before the last character\n    const listIndex = isDoubleParenthesis ? trigger.slice(1, -1) : trigger.slice(0, -1);\n\n    const indexNumber = parseInt(listIndex);\n    const index = !isNaN(indexNumber) ? indexNumber : convertAlphaToDecimals(listIndex);\n\n    if (!index || index < 1) {\n        return null;\n    }\n\n    if (previousListChain && index > 1) {\n        if (\n            (previousListChain.length < 1 && numberingTriggers.indexOf(listIndex) < 0) ||\n            (previousListChain?.length > 0 &&\n                !previousListChain[previousListChain.length - 1]?.canAppendAtCursor(index))\n        ) {\n            return null;\n        }\n    }\n\n    const numberingType = isValidNumbering(listIndex)\n        ? identifyNumberingListType(trigger, isDoubleParenthesis, previousListStyle)\n        : null;\n    return numberingType;\n}\n\n/**\n * Check if index has only numbers or only letters to avoid sequence of character such 1:1. trigger a list.\n * @param index\n * @returns\n */\nfunction isValidNumbering(index: string) {\n    return Number(index) || /^[A-Za-z\\s]*$/.test(index);\n}\n"]}