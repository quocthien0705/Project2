{"version":3,"file":"autoLinkFeatures.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ContentEdit/features/autoLinkFeatures.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeSource, Keys, PluginEventType } from 'roosterjs-editor-types';\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\nimport type {\n    AutoLinkFeatureSettings,\n    BuildInEditFeature,\n    ClipboardData,\n    IEditor,\n    LinkData,\n    PluginEvent,\n    PluginKeyboardEvent,\n} from 'roosterjs-editor-types';\nimport {\n    cacheGetEventData,\n    clearEventDataCache,\n    LinkInlineElement,\n    matchLink,\n} from 'roosterjs-editor-dom';\n\n/**\n * When user type, they may end a link with a punctuation, i.e. www.bing.com;\n * we need to trim off the trailing punctuation before turning it to link match\n */\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\nconst MINIMUM_LENGTH = 5;\n\n/**\n * AutoLink edit feature, provides the ability to automatically convert text user typed or pasted\n * in hyperlink format into a real hyperlink\n */\nconst AutoLink: BuildInEditFeature<PluginEvent> = {\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\n    shouldHandleEvent: cacheGetLinkData,\n    handleEvent: autoLink,\n};\n\n/**\n * UnlinkWhenBackspaceAfterLink edit feature, provides the ability to convert a hyperlink back into text\n * if user presses BACKSPACE right after a hyperlink\n */\nconst UnlinkWhenBackspaceAfterLink: BuildInEditFeature<PluginKeyboardEvent> = {\n    keys: [Keys.BACKSPACE],\n    shouldHandleEvent: hasLinkBeforeCursor,\n    handleEvent: (event, editor) => {\n        event.rawEvent.preventDefault();\n        removeLink(editor);\n    },\n    defaultDisabled: true,\n};\n\nfunction cacheGetLinkData(event: PluginEvent, editor: IEditor): LinkData | null {\n    return event.eventType == PluginEventType.KeyDown ||\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\n              // First try to match link from the whole paste string from the plain text in clipboard.\n              // This helps when we paste a link next to some existing character, and the text we got\n              // from clipboard will only contain what we pasted, any existing characters will not\n              // be included.\n              const clipboardData =\n                  (event.eventType == PluginEventType.ContentChanged &&\n                      event.source == ChangeSource.Paste &&\n                      (event.data as ClipboardData)) ||\n                  null;\n              const link = matchLink((clipboardData?.text || '').trim());\n              const searcher = editor.getContentSearcherOfCursor(event);\n\n              // In case the matched link is already inside a <A> tag, we do a range search.\n              // getRangeFromText will return null if the given text is already in a LinkInlineElement\n              if (link && searcher?.getRangeFromText(link.originalUrl, false /*exactMatch*/)) {\n                  return link;\n              }\n\n              const word = searcher && searcher.getWordBefore();\n              if (word && word.length > MINIMUM_LENGTH) {\n                  // Check for trailing punctuation\n                  const trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\n                  const trailingPunctuation = (trailingPunctuations || [])[0] || '';\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\n\n                  // Do special handling for ')', '}', ']'\n                  ['()', '{}', '[]'].forEach(str => {\n                      if (\n                          candidate[candidate.length - 1] == str[1] &&\n                          candidate.indexOf(str[0]) < 0\n                      ) {\n                          candidate = candidate.substr(0, candidate.length - 1);\n                      }\n                  });\n\n                  // Match and replace in editor\n                  return matchLink(candidate);\n              }\n              return null;\n          })\n        : null;\n}\n\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: IEditor): boolean {\n    const contentSearcher = editor.getContentSearcherOfCursor(event);\n    const inline = contentSearcher?.getInlineElementBefore();\n    return inline instanceof LinkInlineElement;\n}\n\nfunction autoLink(event: PluginEvent, editor: IEditor) {\n    const linkData = cacheGetLinkData(event, editor);\n    if (!linkData) {\n        return;\n    }\n    const anchor = editor.getDocument().createElement('a');\n    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line\n    // and at that time a new searcher won't be able to find the link text to replace\n    const searcher = editor.getContentSearcherOfCursor();\n    anchor.textContent = linkData.originalUrl;\n    anchor.href = linkData.normalizedUrl;\n\n    editor.runAsync(editor => {\n        editor.addUndoSnapshot(\n            () => {\n                replaceWithNode(\n                    editor,\n                    linkData.originalUrl,\n                    anchor,\n                    false /* exactMatch */,\n                    searcher ?? undefined\n                );\n\n                // The content at cursor has changed. Should also clear the cursor data cache\n                clearEventDataCache(event);\n                return anchor;\n            },\n            ChangeSource.AutoLink,\n            true /*canUndoByBackspace*/\n        );\n    });\n}\n\n/**\n * @internal\n */\nexport const AutoLinkFeatures: Record<\n    keyof AutoLinkFeatureSettings,\n    BuildInEditFeature<PluginEvent>\n> = {\n    autoLink: AutoLink,\n    unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink as BuildInEditFeature<PluginEvent>,\n};\n"]}