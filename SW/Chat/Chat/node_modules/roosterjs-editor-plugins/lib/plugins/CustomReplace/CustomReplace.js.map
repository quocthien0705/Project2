{"version":3,"file":"CustomReplace.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/CustomReplace/CustomReplace.ts"],"names":[],"mappings":";;;AAGA,IAAM,eAAe,GAAG,UACpB,YAAoB,EACpB,eAAuB,EACvB,wBAAiC,EACjC,aAIY,IACQ,OAAA,CAAC;IACrB,YAAY,cAAA;IACZ,eAAe,iBAAA;IACf,wBAAwB,0BAAA;IACxB,aAAa,eAAA;CAChB,CAAC,EALsB,CAKtB,CAAC;AAEH,IAAM,mBAAmB,GAAwB;IAC7C,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACjC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACjC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACjC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACjC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;CACpC,CAAC;AAEF;;;GAGG;AACH;IAMI;;;OAGG;IACH,6BAAY,YAAuD;QAAvD,6BAAA,EAAA,kCAAuD;QAT3D,6BAAwB,GAAkB,IAAI,CAAC;QAC/C,WAAM,GAAmB,IAAI,CAAC;QAC9B,iBAAY,GAA+B,IAAI,CAAC;QAChD,6BAAwB,GAAuB,IAAI,CAAC;QAOxD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,gDAAkB,GAAlB,UAAmB,eAAoC;QACnD,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC;QACpC,IAAI,CAAC,wBAAwB,GAAG,iCAAiC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACrF,IAAI,CAAC,wBAAwB,GAAG,2BAA2B,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,qCAAO,GAAP;QACI,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACI,wCAAU,GAAjB,UAAkB,MAAe;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,qCAAO,GAAd;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,2CAAa,GAApB,UAAqB,KAAkB;QAAvC,iBAoDC;;QAnDG,IAAI,KAAK,CAAC,SAAS,iBAAyB,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;YACnF,OAAO;SACV;QAED,iFAAiF;QACjF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAA,MAAA,IAAI,CAAC,wBAAwB,0CAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,EAAE;YAClF,OAAO;SACV;QAED,+BAA+B;QAC/B,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,wBAAwB,IAAI,IAAI,EAAE;YACpD,OAAO;SACV;QACD,IAAM,cAAc,GAAG,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAElF,IAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAEhE,IACI,CAAC,WAAW;YACZ,CAAC,WAAW,CAAC,aAAa;gBACtB,QAAQ;gBACR,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EACrF;YACE,OAAO;SACV;QAED,uEAAuE;QACvE,2BAA2B;QAC3B,IAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAClF,IAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAErF,sEAAsE;QACtE,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnD,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QACzF,IAAM,YAAY,GACd,WAAW,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QAEjF,0CAA0C;QAC1C,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,eAAe,CACvB;;gBACI,aAAa,CAAC,cAAc,EAAE,CAAC;gBAC/B,aAAa,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBACvC,MAAA,KAAI,CAAC,MAAM,0CAAE,MAAM,CAAC,YAAY,eAAmB,CAAC;YACxD,CAAC,EACD,SAAS,CAAC,gBAAgB,EAC1B,IAAI,CAAC,sBAAsB,CAC9B,CAAC;SACL;IACL,CAAC;IAEO,oDAAsB,GAA9B,UAA+B,cAAsB;;QACjD,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YAClD,OAAO,IAAI,CAAC;SACf;QACD,IAAM,sBAAsB,GAAG,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClE,IAAM,uBAAuB,GAAG,sBAAsB,CAAC,iBAAiB,EAAE,CAAC;;YAC3E,KAA0B,IAAA,KAAA,sBAAA,IAAI,CAAC,YAAY,CAAA,gBAAA,4BAAE;gBAAxC,IAAM,WAAW,WAAA;gBACZ,IAAA,KAAA,oBAAkC,WAAW,CAAC,wBAAwB;oBACxE,CAAC,CAAC,CAAC,sBAAsB,EAAE,WAAW,CAAC,YAAY,CAAC;oBACpD,CAAC,CAAC,CAAC,uBAAuB,EAAE,WAAW,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,IAAA,EAFtE,WAAW,QAAA,EAAE,gBAAgB,QAEyC,CAAC;gBAE9E,IACI,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;oBACnE,gBAAgB,EAClB;oBACE,OAAO,WAAW,CAAC;iBACtB;aACJ;;;;;;;;;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,0BAAC;AAAD,CAAC,AA5HD,IA4HC;;AAED,SAAS,iCAAiC,CAAC,YAAiC;IACxE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CACjB,IAAI,EACJ,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,YAAY,CAAC,MAAM,EAA/B,CAA+B,CAAC,CACnE,CAAC;AACN,CAAC;AAED,SAAS,2BAA2B,CAAC,YAAiC;;IAClE,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;;QACnC,KAA0B,IAAA,iBAAA,sBAAA,YAAY,CAAA,0CAAA,oEAAE;YAAnC,IAAM,WAAW,yBAAA;YAClB,IAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;YAC9C,IAAI,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE;gBAC1B,SAAS;aACZ;YACD,IAAM,QAAQ,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE;gBACvC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC;gBAC3C,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC;aAC9C;iBAAM;gBACH,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aAC1B;SACJ;;;;;;;;;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["import { PluginEventType, PositionType } from 'roosterjs-editor-types';\nimport type { CustomReplacement, EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\nconst makeReplacement = (\n    sourceString: string,\n    replacementHTML: string,\n    matchSourceCaseSensitive: boolean,\n    shouldReplace?: (\n        replacement: CustomReplacement,\n        content: string,\n        sourceEditor?: IEditor\n    ) => boolean\n): CustomReplacement => ({\n    sourceString,\n    replacementHTML,\n    matchSourceCaseSensitive,\n    shouldReplace,\n});\n\nconst defaultReplacements: CustomReplacement[] = [\n    makeReplacement(':)', '🙂', true),\n    makeReplacement(';)', '😉', true),\n    makeReplacement(':O', '😲', true),\n    makeReplacement(':o', '😯', true),\n    makeReplacement('<3', '❤️', true),\n];\n\n/**\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\n * content edit feature\n */\nexport default class CustomReplacePlugin implements EditorPlugin {\n    private longestReplacementLength: number | null = null;\n    private editor: IEditor | null = null;\n    private replacements: CustomReplacement[] | null = null;\n    private replacementEndCharacters: Set<string> | null = null;\n\n    /**\n     * Create instance of CustomReplace plugin\n     * @param replacements Replacement rules. If not passed, a default replacement rule set will be applied\n     */\n    constructor(replacements: CustomReplacement[] = defaultReplacements) {\n        this.updateReplacements(replacements);\n    }\n\n    /**\n     * Set the replacements that this plugin is looking for.\n     * @param newReplacements new set of replacements for this plugin\n     */\n    updateReplacements(newReplacements: CustomReplacement[]) {\n        this.replacements = newReplacements;\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\n    }\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'CustomReplace';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    public initialize(editor: IEditor): void {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose(): void {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    public onPluginEvent(event: PluginEvent) {\n        if (event.eventType != PluginEventType.Input || !this.editor || this.editor.isInIME()) {\n            return;\n        }\n\n        // Exit early on input events that do not insert a replacement's final character.\n        if (!event.rawEvent.data || !this.replacementEndCharacters?.has(event.rawEvent.data)) {\n            return;\n        }\n\n        // Get the matching replacement\n        const searcher = this.editor.getContentSearcherOfCursor(event);\n        if (!searcher || this.longestReplacementLength == null) {\n            return;\n        }\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\n\n        const replacement = this.getMatchingReplacement(stringToSearch);\n\n        if (\n            !replacement ||\n            (replacement.shouldReplace &&\n                searcher &&\n                !replacement.shouldReplace(replacement, searcher.getWordBefore(), this.editor))\n        ) {\n            return;\n        }\n\n        // Reconstruct a selection of the text on the document that matches the\n        // replacement we selected.\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\n\n        // parse the html string off the dom and inline the resulting element.\n        const document = this.editor.getDocument();\n        const parsingSpan = document.createElement('span');\n        parsingSpan.innerHTML = this.editor.getTrustedHTMLHandler()(replacement.replacementHTML);\n        const nodeToInsert =\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\n\n        // Switch the node for the selection range\n        if (matchingRange) {\n            this.editor.addUndoSnapshot(\n                () => {\n                    matchingRange.deleteContents();\n                    matchingRange.insertNode(nodeToInsert);\n                    this.editor?.select(nodeToInsert, PositionType.End);\n                },\n                undefined /*changeSource*/,\n                true /*canUndoByBackspace*/\n            );\n        }\n    }\n\n    private getMatchingReplacement(stringToSearch: string): CustomReplacement | null {\n        if (stringToSearch.length == 0 || !this.replacements) {\n            return null;\n        }\n        const originalStringToSearch = stringToSearch.replace(/\\s/g, ' ');\n        const lowerCaseStringToSearch = originalStringToSearch.toLocaleLowerCase();\n        for (const replacement of this.replacements) {\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\n                ? [originalStringToSearch, replacement.sourceString]\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\n\n            if (\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\n                replacementMatch\n            ) {\n                return replacement;\n            }\n        }\n        return null;\n    }\n}\n\nfunction getLongestReplacementSourceLength(replacements: CustomReplacement[]): number {\n    return Math.max.apply(\n        null,\n        replacements.map(replacement => replacement.sourceString.length)\n    );\n}\n\nfunction getReplacementEndCharacters(replacements: CustomReplacement[]): Set<string> {\n    const endChars = new Set<string>();\n    for (const replacement of replacements) {\n        const sourceString = replacement.sourceString;\n        if (sourceString.length == 0) {\n            continue;\n        }\n        const lastChar = sourceString[sourceString.length - 1];\n        if (!replacement.matchSourceCaseSensitive) {\n            endChars.add(lastChar.toLocaleLowerCase());\n            endChars.add(lastChar.toLocaleUpperCase());\n        } else {\n            endChars.add(lastChar);\n        }\n    }\n    return endChars;\n}\n"]}