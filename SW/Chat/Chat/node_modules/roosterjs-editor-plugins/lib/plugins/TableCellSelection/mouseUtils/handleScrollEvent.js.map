{"version":3,"file":"handleScrollEvent.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/TableCellSelection/mouseUtils/handleScrollEvent.ts"],"names":[],"mappings":";;;AAAA,kEAAiE;AACjE,8DAA6D;AAC7D,oDAAmD;AACnD,4CAA2C;AAC3C,4DAA2D;AAI3D;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,KAA8B,EAAE,MAAe;;IAC7E,IAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;IAChD,IAAI,CAAC,WAAW,EAAE;QACd,OAAO;KACV;IACD,IAAA,iBAAO,EAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpC,IACI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,WAAW;QACrC,KAAK,CAAC,WAAW;SACjB,MAAA,KAAK,CAAC,MAAM,0CAAE,SAAS,CAAA;QACvB,KAAK,CAAC,UAAU;QAChB,KAAK,CAAC,cAAc,EACtB;QACE,IAAM,OAAO,GAAG,IAAA,uCAAkB,EAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QACnE,IAAI,OAAO,EAAE;YACT,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,OAAO,CAAC;YAC1C,IAAA,yBAAW,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAA,iCAAe,EAAC,MAAM,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SACjD;KACJ;SAAM,IAAI,KAAK,CAAC,cAAc,EAAE;QAC7B,IAAA,mCAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACnC;AACL,CAAC;AAtBD,8CAsBC","sourcesContent":["import { getCellCoordinates } from '../utils/getCellCoordinates';\nimport { restoreSelection } from '../utils/restoreSelection';\nimport { selectTable } from '../utils/selectTable';\nimport { setData } from '../utils/setData';\nimport { updateSelection } from '../utils/updateSelection';\nimport type { IEditor } from 'roosterjs-editor-types';\nimport type { TableCellSelectionState } from '../TableCellSelectionState';\n\n/**\n * @internal\n * Handle Scroll Event and mantains the selection range,\n * Since when we scroll the cursor does not trigger the on Mouse Move event\n * The table selection gets removed.\n */\nexport function handleScrollEvent(state: TableCellSelectionState, editor: IEditor) {\n    const eventTarget = editor.getElementAtCursor();\n    if (!eventTarget) {\n        return;\n    }\n    setData(eventTarget, state, editor);\n    if (\n        state.firstTable == state.targetTable &&\n        state.firstTarget &&\n        state.vTable?.selection &&\n        state.lastTarget &&\n        state.tableSelection\n    ) {\n        const newCell = getCellCoordinates(state.vTable, state.lastTarget);\n        if (newCell) {\n            state.vTable.selection.lastCell = newCell;\n            selectTable(editor, state);\n            updateSelection(editor, state.firstTarget, 0);\n        }\n    } else if (state.tableSelection) {\n        restoreSelection(state, editor);\n    }\n}\n"]}