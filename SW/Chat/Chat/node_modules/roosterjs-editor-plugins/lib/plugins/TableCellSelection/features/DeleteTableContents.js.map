{"version":3,"file":"DeleteTableContents.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/TableCellSelection/features/DeleteTableContents.ts"],"names":[],"mappings":";;;AACA,6DAAsD;AACtD,0CAAmD;AAGnD;;;GAGG;AACU,QAAA,mBAAmB,GAA2C;IACvE,IAAI,EAAE,oCAA6B;IACnC,iBAAiB,EAAE,UAAC,CAAC,EAAE,MAAe;QAClC,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAC/C,OAAO,SAAS,CAAC,IAAI,0BAAsC,CAAC;IAChE,CAAC;IACD,WAAW,EAAE,UAAC,CAAC,EAAE,MAAM;QACnB,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAC/C,IAAI,SAAS,CAAC,IAAI,0BAAsC,EAAE;YACtD,MAAM,CAAC,eAAe,CAAC;gBACnB,IAAI,SAAS,CAAC,oBAAoB,EAAE;oBAChC,SAAS,CAAC,KAAK;yBACV,gBAAgB,CAAC,+BAAmB,CAAC;yBACrC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,kBAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,EAA9B,CAA8B,CAAC,CAAC;iBACtD;qBAAM;oBACH,MAAM;yBACD,kBAAkB,EAAE;yBACpB,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,EAA3C,CAA2C,CAAC,CAAC;iBACvE;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;CACJ,CAAC;AAEF,SAAS,kBAAkB,CAAC,OAAa,EAAE,MAAe;IACtD,IAAI,IAAA,qCAAc,EAAC,OAAO,EAAE,sBAAsB,CAAC,EAAE;QACjD,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QAC1B,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAClC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;KACjE;AACL,CAAC","sourcesContent":["import { Keys, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport { safeInstanceOf } from 'roosterjs-editor-dom';\nimport { TABLE_CELL_SELECTOR } from '../constants';\nimport type { GenericContentEditFeature, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Feature that when Backspace is pressed and there is Table Selection, delete the contents inside of the selection\n */\nexport const DeleteTableContents: GenericContentEditFeature<PluginEvent> = {\n    keys: [Keys.DELETE, Keys.BACKSPACE],\n    shouldHandleEvent: (_, editor: IEditor) => {\n        const selection = editor.getSelectionRangeEx();\n        return selection.type == SelectionRangeTypes.TableSelection;\n    },\n    handleEvent: (_, editor) => {\n        const selection = editor.getSelectionRangeEx();\n        if (selection.type == SelectionRangeTypes.TableSelection) {\n            editor.addUndoSnapshot(() => {\n                if (selection.isWholeTableSelected) {\n                    selection.table\n                        .querySelectorAll(TABLE_CELL_SELECTOR)\n                        .forEach(td => deleteNodeContents(td, editor));\n                } else {\n                    editor\n                        .getSelectedRegions()\n                        .forEach(region => deleteNodeContents(region.rootNode, editor));\n                }\n            });\n        }\n    },\n};\n\nfunction deleteNodeContents(element: Node, editor: IEditor) {\n    if (safeInstanceOf(element, 'HTMLTableCellElement')) {\n        const range = new Range();\n        range.selectNodeContents(element);\n        range.deleteContents();\n        element.appendChild(editor.getDocument().createElement('br'));\n    }\n}\n"]}