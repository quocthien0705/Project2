"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSelection = void 0;
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
var getTableAtCursor_1 = require("./getTableAtCursor");
var constants_1 = require("../constants");
/**
 * @internal
 *  Check if the selection started in a inner table.
 */
function prepareSelection(state, editor) {
    var _a, _b, _c, _d;
    if (!state.firstTable || !state.targetTable) {
        return;
    }
    var isNewTargetTableContained = state.lastTarget != state.firstTarget &&
        ((_a = state.firstTable) === null || _a === void 0 ? void 0 : _a.contains((0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.targetTable, state.firstTable, constants_1.TABLE_CELL_SELECTOR)));
    if (isNewTargetTableContained && state.tableSelection) {
        while (isNewTargetTableContained) {
            state.lastTarget = (0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.targetTable, state.firstTable, constants_1.TABLE_CELL_SELECTOR);
            state.targetTable = (0, getTableAtCursor_1.getTableAtCursor)(editor, state.lastTarget);
            isNewTargetTableContained =
                state.lastTarget != state.firstTarget &&
                    ((_b = state.firstTable) === null || _b === void 0 ? void 0 : _b.contains((0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.targetTable, state.firstTable, constants_1.TABLE_CELL_SELECTOR)));
        }
    }
    var isFirstTargetTableContained = state.lastTarget != state.firstTarget &&
        ((_c = state.targetTable) === null || _c === void 0 ? void 0 : _c.contains((0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.firstTable, state.targetTable, constants_1.TABLE_CELL_SELECTOR)));
    if (isFirstTargetTableContained && state.tableSelection && state.targetTable) {
        while (isFirstTargetTableContained) {
            state.firstTarget = (0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.firstTable, state.targetTable, constants_1.TABLE_CELL_SELECTOR);
            if (!state.firstTarget) {
                return;
            }
            state.firstTable = (0, getTableAtCursor_1.getTableAtCursor)(editor, state.firstTarget);
            isFirstTargetTableContained =
                state.lastTarget != state.firstTarget &&
                    ((_d = state.targetTable) === null || _d === void 0 ? void 0 : _d.contains((0, roosterjs_editor_dom_1.findClosestElementAncestor)(state.firstTable, state.targetTable, constants_1.TABLE_CELL_SELECTOR)));
        }
    }
}
exports.prepareSelection = prepareSelection;
//# sourceMappingURL=prepareSelection.js.map