"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var clearState_1 = require("./utils/clearState");
var DeleteTableContents_1 = require("./features/DeleteTableContents");
var handleKeyDownEvent_1 = require("./keyUtils/handleKeyDownEvent");
var handleKeyUpEvent_1 = require("./keyUtils/handleKeyUpEvent");
var handleMouseDownEvent_1 = require("./mouseUtils/handleMouseDownEvent");
var handleScrollEvent_1 = require("./mouseUtils/handleScrollEvent");
/**
 * TableCellSelectionPlugin help highlight table cells
 */
var TableCellSelection = /** @class */ (function () {
    function TableCellSelection() {
        this.editor = null;
        this.state = {
            firstTable: null,
            lastTarget: null,
            firstTarget: null,
            preventKeyUp: false,
            startedSelection: false,
            tableSelection: false,
            targetTable: null,
            vTable: null,
            mouseMoveDisposer: null,
        };
    }
    /**
     * Get a friendly name of  this plugin
     */
    TableCellSelection.prototype.getName = function () {
        return 'TableCellSelection';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    TableCellSelection.prototype.initialize = function (editor) {
        this.editor = editor;
        this.editor.addContentEditFeature(DeleteTableContents_1.DeleteTableContents);
    };
    /**
     * Dispose this plugin
     */
    TableCellSelection.prototype.dispose = function () {
        (0, clearState_1.clearState)(this.state, this.editor);
        this.state = null;
        this.editor = null;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    TableCellSelection.prototype.onPluginEvent = function (event) {
        if (this.editor && this.state) {
            switch (event.eventType) {
                case 5 /* MouseDown */:
                    if (!this.state.startedSelection) {
                        (0, handleMouseDownEvent_1.handleMouseDownEvent)(event, this.state, this.editor);
                    }
                    break;
                case 0 /* KeyDown */:
                    if (!this.state.startedSelection) {
                        (0, handleKeyDownEvent_1.handleKeyDownEvent)(event, this.state, this.editor);
                    }
                    else {
                        event.rawEvent.preventDefault();
                    }
                    break;
                case 2 /* KeyUp */:
                    if (!this.state.startedSelection) {
                        (0, handleKeyUpEvent_1.handleKeyUpEvent)(event, this.state, this.editor);
                    }
                    else {
                        event.rawEvent.preventDefault();
                    }
                    break;
                case 14 /* Scroll */:
                    if (this.state.startedSelection) {
                        (0, handleScrollEvent_1.handleScrollEvent)(this.state, this.editor);
                    }
                    break;
                case 20 /* BeforeSetContent */:
                    this.state.firstTable = null;
                    this.state.tableSelection = false;
                    this.editor.select(null);
                    break;
            }
        }
    };
    return TableCellSelection;
}());
exports.default = TableCellSelection;
//# sourceMappingURL=TableCellSelection.js.map