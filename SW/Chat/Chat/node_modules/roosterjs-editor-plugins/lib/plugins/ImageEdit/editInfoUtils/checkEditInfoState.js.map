{"version":3,"file":"checkEditInfoState.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/editInfoUtils/checkEditInfoState.ts"],"names":[],"mappings":";;;;AAGA,IAAM,WAAW,GAAyB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAClE,IAAM,WAAW,GAAyB,CAAC,UAAU,CAAC,CAAC;AACvD,IAAM,SAAS,GAAuB;IAClC,aAAa;IACb,cAAc;IACd,YAAY;IACZ,eAAe;CAClB,CAAC;AACF,IAAM,gBAAgB,iFAA8C,WAAW,+BAAK,SAAS,SAAC,CAAC;AAC/F,IAAM,QAAQ,iFAAO,gBAAgB,+BAAK,WAAW,SAAC,CAAC;AAEvD;;;;GAIG;AACH,6CAA6C;AAC7C,IAAkB,kBA2BjB;AA3BD,WAAkB,kBAAkB;IAChC;;;OAGG;IACH,iEAAO,CAAA;IAEP;;;OAGG;IACH,uEAAU,CAAA;IAEV;;;;;OAKG;IACH,2EAAY,CAAA;IAEZ;;;;OAIG;IACH,2EAAY,CAAA;AAChB,CAAC,EA3BiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QA2BnC;AAED;;;;;;;;;GASG;AACH,SAAwB,kBAAkB,CACtC,QAAuB,EACvB,SAAyB;IAEzB,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAxB,CAAwB,CAAC,EAAE;QAC9E,uBAAkC;KACrC;SAAM,IACH,gBAAgB,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAA/B,CAA+B,CAAC;QAC9D,CAAC,QAAQ,CAAC,iBAAiB;QAC3B,CAAC,QAAQ,CAAC,eAAe;QACzB,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAC,CAAC,EACzE;QACE,0BAAqC;KACxC;SAAM,IACH,SAAS;QACT,WAAW,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAA/B,CAA+B,CAAC;QACzD,WAAW,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAhC,CAAgC,CAAC;QAC1D,SAAS,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAA5C,CAA4C,CAAC;QACpE,SAAS,CAAC,iBAAiB,KAAK,QAAQ,CAAC,iBAAiB;QAC1D,SAAS,CAAC,eAAe,KAAK,QAAQ,CAAC,eAAe,EACxD;QACE,4BAAuC;KAC1C;SAAM;QACH,4BAAuC;KAC1C;AACL,CAAC;AAzBD,qCAyBC;AAED,SAAS,QAAQ,CAAC,CAAM;IACpB,OAAO,OAAO,CAAC,KAAK,QAAQ,CAAC;AACjC,CAAC;AAED,SAAS,aAAa,CAAC,EAAU,EAAE,EAAU;IACzC,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACpC,CAAC","sourcesContent":["import type { CropInfo, ResizeInfo, RotateInfo } from '../types/ImageEditInfo';\nimport type ImageEditInfo from '../types/ImageEditInfo';\n\nconst RESIZE_KEYS: (keyof ResizeInfo)[] = ['widthPx', 'heightPx'];\nconst ROTATE_KEYS: (keyof RotateInfo)[] = ['angleRad'];\nconst CROP_KEYS: (keyof CropInfo)[] = [\n    'leftPercent',\n    'rightPercent',\n    'topPercent',\n    'bottomPercent',\n];\nconst ROTATE_CROP_KEYS: (keyof RotateInfo | keyof CropInfo)[] = [...ROTATE_KEYS, ...CROP_KEYS];\nconst ALL_KEYS = [...ROTATE_CROP_KEYS, ...RESIZE_KEYS];\n\n/**\n * @internal\n * State of an edit info object for image editing.\n * It is returned by checkEditInfoState() function\n */\n// eslint-disable-next-line etc/no-const-enum\nexport const enum ImageEditInfoState {\n    /**\n     * Invalid edit info. It means the given edit info object is either null,\n     * or not all its member are of correct type\n     */\n    Invalid,\n\n    /**\n     * The edit info shows that it is only potentially edited by resizing action.\n     * Image is not rotated or cropped, or event not changed at all.\n     */\n    ResizeOnly,\n\n    /**\n     * When compare with another edit info, this value can be returned when both current\n     * edit info and the other one are not been rotated, and they have same cropping\n     * percentages. So that they can share the same image src, only width and height\n     * need to be adjusted.\n     */\n    SameWithLast,\n\n    /**\n     * When this value is returned, it means the image is edited by either cropping or\n     * rotation, or both. Image source can't be reused, need to generate a new image src\n     * data uri.\n     */\n    FullyChanged,\n}\n\n/**\n * @internal\n * Check the state of an edit info\n * @param editInfo The edit info to check\n * @param compareTo An optional edit info to compare to\n * @returns If the source edit info is not valid (wrong type, missing field, ...), returns Invalid.\n * If the source edit info doesn't contain any rotation or cropping, returns ResizeOnly\n * If the compare edit info exists, and both of them don't contain rotation, and the have same cropping values,\n * returns SameWithLast. Otherwise, returns FullyChanged\n */\nexport default function checkEditInfoState(\n    editInfo: ImageEditInfo,\n    compareTo?: ImageEditInfo\n): ImageEditInfoState {\n    if (!editInfo || !editInfo.src || ALL_KEYS.some(key => !isNumber(editInfo[key]))) {\n        return ImageEditInfoState.Invalid;\n    } else if (\n        ROTATE_CROP_KEYS.every(key => areSameNumber(editInfo[key], 0)) &&\n        !editInfo.flippedHorizontal &&\n        !editInfo.flippedVertical &&\n        (!compareTo || (compareTo && editInfo.angleRad === compareTo.angleRad))\n    ) {\n        return ImageEditInfoState.ResizeOnly;\n    } else if (\n        compareTo &&\n        ROTATE_KEYS.every(key => areSameNumber(editInfo[key], 0)) &&\n        ROTATE_KEYS.every(key => areSameNumber(compareTo[key], 0)) &&\n        CROP_KEYS.every(key => areSameNumber(editInfo[key], compareTo[key])) &&\n        compareTo.flippedHorizontal === editInfo.flippedHorizontal &&\n        compareTo.flippedVertical === editInfo.flippedVertical\n    ) {\n        return ImageEditInfoState.SameWithLast;\n    } else {\n        return ImageEditInfoState.FullyChanged;\n    }\n}\n\nfunction isNumber(o: any): o is number {\n    return typeof o === 'number';\n}\n\nfunction areSameNumber(n1: number, n2: number) {\n    return Math.abs(n1 - n2) < 1e-3;\n}\n"]}