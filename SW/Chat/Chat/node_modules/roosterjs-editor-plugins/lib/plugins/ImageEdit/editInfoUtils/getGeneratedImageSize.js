"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @internal
 * Calculate the target size of an image.
 * For image that is not rotated, target size is the same with resizing/cropping size.
 * For image that is rotated, target size is calculated from resizing/cropping size and its rotate angle
 * Say an image is resized to 100w*100h, cropped 25% on each side, then rotated 45deg, so that cropped size
 * will be (both height and width) 100*(1-0.25-0,25) = 50px, then final image size will be 50*sqrt(2) = 71px
 * @param editInfo The edit info to calculate size from
 * @param beforeCrop True to calculate the full size of original image before crop, false to calculate the size
 * after crop
 * @returns A GeneratedImageSize object which contains original, visible and target target width and height of the image
 */
function getGeneratedImageSize(editInfo, beforeCrop) {
    var width = editInfo.widthPx, height = editInfo.heightPx, angle = editInfo.angleRad, left = editInfo.leftPercent, right = editInfo.rightPercent, top = editInfo.topPercent, bottom = editInfo.bottomPercent;
    // Original image size before crop and rotate
    var originalWidth = width / (1 - left - right);
    var originalHeight = height / (1 - top - bottom);
    // Visible size
    var visibleWidth = beforeCrop ? originalWidth : width;
    var visibleHeight = beforeCrop ? originalHeight : height;
    // Target size after crop and rotate
    var targetWidth = Math.abs(visibleWidth * Math.cos(angle)) + Math.abs(visibleHeight * Math.sin(angle));
    var targetHeight = Math.abs(visibleWidth * Math.sin(angle)) + Math.abs(visibleHeight * Math.cos(angle));
    return {
        targetWidth: targetWidth,
        targetHeight: targetHeight,
        originalWidth: originalWidth,
        originalHeight: originalHeight,
        visibleWidth: visibleWidth,
        visibleHeight: visibleHeight,
    };
}
exports.default = getGeneratedImageSize;
//# sourceMappingURL=getGeneratedImageSize.js.map