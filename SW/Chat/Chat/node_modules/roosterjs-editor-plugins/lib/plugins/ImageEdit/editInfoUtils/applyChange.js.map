{"version":3,"file":"applyChange.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/editInfoUtils/applyChange.ts"],"names":[],"mappings":";;AAAA,2DAA8E;AAC9E,qDAAgD;AAChD,iEAA4D;AAE5D,uCAAgF;AAIhF;;;;;;;;;GASG;AACH,SAAwB,WAAW,CAC/B,MAAe,EACf,KAAuB,EACvB,QAAuB,EACvB,WAAmB,EACnB,mBAA4B,EAC5B,YAA+B,EAC/B,qBAA+B;IAE/B,IAAI,MAAM,GAAG,EAAE,CAAC;IAEhB,IAAM,YAAY,GAAG,IAAA,+BAAoB,EAAC,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,KAAK,CAAC,CAAC;IACjE,IAAM,KAAK,GAAG,IAAA,4BAAkB,EAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAEzD,QAAQ,KAAK,EAAE;QACX;YACI,qFAAqF;YACrF,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC;YACtB,MAAM;QACV;YACI,+FAA+F;YAC/F,4DAA4D;YAC5D,MAAM,GAAG,WAAW,CAAC;YACrB,MAAM;QACV;YACI,8FAA8F;YAC9F,MAAM,GAAG,IAAA,yBAAe,EAAC,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC1D,MAAM;KACb;IAED,IAAM,UAAU,GAAG,MAAM,IAAI,WAAW,CAAC;IAEzC,IAAI,UAAU,EAAE;QACZ,yGAAyG;QACzG,sFAAsF;QACtF,IAAM,OAAK,GAAG,MAAM,CAAC,kBAAkB,qBAA4B;YAC/D,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,QAAQ,CAAC,GAAG;YACzB,WAAW,aAAA;YACX,MAAM,QAAA;SACT,CAAC,CAAC;QACH,MAAM,GAAG,OAAK,CAAC,MAAM,CAAC;KACzB;SAAM,IAAI,qBAAqB,EAAE;QAC9B,MAAM,CAAC,kBAAkB,yBAAiC;YACtD,MAAM,iCAA0B;SACnC,CAAC,CAAC;KACN;IAED,IAAI,MAAM,IAAI,QAAQ,CAAC,GAAG,EAAE;QACxB,6GAA6G;QAC7G,uDAAuD;QACvD,IAAA,yBAAc,EAAC,KAAK,CAAC,CAAC;KACzB;SAAM;QACH,wGAAwG;QACxG,gBAAgB;QAChB,IAAA,uBAAY,EAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KACjC;IAED,uDAAuD;IACjD,IAAA,KAAgC,IAAA,+BAAqB,EAAC,QAAQ,CAAC,EAA7D,WAAW,iBAAA,EAAE,YAAY,kBAAoC,CAAC;IACtE,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;IAEnB,IAAI,mBAAmB,IAAI,KAAK,wBAAmC,EAAE;QACjE,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;QAC1B,KAAK,CAAC,MAAM,GAAG,YAAY,CAAC;QAC5B,iHAAiH;QACjH,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACpC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACrC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACxC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;KAC5C;AACL,CAAC;AAvED,8BAuEC","sourcesContent":["import checkEditInfoState, { ImageEditInfoState } from './checkEditInfoState';\nimport generateDataURL from './generateDataURL';\nimport getGeneratedImageSize from './getGeneratedImageSize';\nimport { ChangeSource, PluginEventType } from 'roosterjs-editor-types';\nimport { deleteEditInfo, getEditInfoFromImage, saveEditInfo } from './editInfo';\nimport type ImageEditInfo from '../types/ImageEditInfo';\nimport type { IEditor } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Apply changes from the edit info of an image, write result to the image\n * @param editor The editor object that contains the image\n * @param image The image to apply the change\n * @param editInfo Edit info that contains the changed information of the image\n * @param previousSrc Last src value of the image before the change was made\n * @param wasResizedOrCropped if the image was resized or cropped apply the new image dimensions\n * @param editingImage (optional) Image in editing state\n */\nexport default function applyChange(\n    editor: IEditor,\n    image: HTMLImageElement,\n    editInfo: ImageEditInfo,\n    previousSrc: string,\n    wasResizedOrCropped: boolean,\n    editingImage?: HTMLImageElement,\n    applyChangesOnMouseUp?: boolean\n) {\n    let newSrc = '';\n\n    const initEditInfo = getEditInfoFromImage(editingImage ?? image);\n    const state = checkEditInfoState(editInfo, initEditInfo);\n\n    switch (state) {\n        case ImageEditInfoState.ResizeOnly:\n            // For resize only case, no need to generate a new image, just reuse the original one\n            newSrc = editInfo.src;\n            break;\n        case ImageEditInfoState.SameWithLast:\n            // For SameWithLast case, image may be resized but the content is still the same with last one,\n            // so no need to create a new image, but just reuse last one\n            newSrc = previousSrc;\n            break;\n        case ImageEditInfoState.FullyChanged:\n            // For other cases (cropped, rotated, ...) we need to create a new image to reflect the change\n            newSrc = generateDataURL(editingImage ?? image, editInfo);\n            break;\n    }\n\n    const srcChanged = newSrc != previousSrc;\n\n    if (srcChanged) {\n        // If the src is changed, fire an EditImage event so that plugins knows that a new image is used, and can\n        // replace the new src with some other string and it will be used and set to the image\n        const event = editor.triggerPluginEvent(PluginEventType.EditImage, {\n            image: image,\n            originalSrc: editInfo.src,\n            previousSrc,\n            newSrc,\n        });\n        newSrc = event.newSrc;\n    } else if (applyChangesOnMouseUp) {\n        editor.triggerPluginEvent(PluginEventType.ContentChanged, {\n            source: ChangeSource.ImageResize,\n        });\n    }\n\n    if (newSrc == editInfo.src) {\n        // If newSrc is the same with original one, it means there is only size change, but no rotation, no cropping,\n        // so we don't need to keep edit info, we can delete it\n        deleteEditInfo(image);\n    } else {\n        // Otherwise, save the new edit info to the image so that next time when we edit the same image, we know\n        // the edit info\n        saveEditInfo(image, editInfo);\n    }\n\n    // Write back the change to image, and set its new size\n    const { targetWidth, targetHeight } = getGeneratedImageSize(editInfo);\n    image.src = newSrc;\n\n    if (wasResizedOrCropped || state == ImageEditInfoState.FullyChanged) {\n        image.width = targetWidth;\n        image.height = targetHeight;\n        // Remove width/height style so that it won't affect the image size, since style width/height has higher priority\n        image.style.removeProperty('width');\n        image.style.removeProperty('height');\n        image.style.removeProperty('max-width');\n        image.style.removeProperty('max-height');\n    }\n}\n"]}