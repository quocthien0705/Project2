"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var checkEditInfoState_1 = require("./checkEditInfoState");
var generateDataURL_1 = require("./generateDataURL");
var getGeneratedImageSize_1 = require("./getGeneratedImageSize");
var editInfo_1 = require("./editInfo");
/**
 * @internal
 * Apply changes from the edit info of an image, write result to the image
 * @param editor The editor object that contains the image
 * @param image The image to apply the change
 * @param editInfo Edit info that contains the changed information of the image
 * @param previousSrc Last src value of the image before the change was made
 * @param wasResizedOrCropped if the image was resized or cropped apply the new image dimensions
 * @param editingImage (optional) Image in editing state
 */
function applyChange(editor, image, editInfo, previousSrc, wasResizedOrCropped, editingImage, applyChangesOnMouseUp) {
    var newSrc = '';
    var initEditInfo = (0, editInfo_1.getEditInfoFromImage)(editingImage !== null && editingImage !== void 0 ? editingImage : image);
    var state = (0, checkEditInfoState_1.default)(editInfo, initEditInfo);
    switch (state) {
        case 1 /* ResizeOnly */:
            // For resize only case, no need to generate a new image, just reuse the original one
            newSrc = editInfo.src;
            break;
        case 2 /* SameWithLast */:
            // For SameWithLast case, image may be resized but the content is still the same with last one,
            // so no need to create a new image, but just reuse last one
            newSrc = previousSrc;
            break;
        case 3 /* FullyChanged */:
            // For other cases (cropped, rotated, ...) we need to create a new image to reflect the change
            newSrc = (0, generateDataURL_1.default)(editingImage !== null && editingImage !== void 0 ? editingImage : image, editInfo);
            break;
    }
    var srcChanged = newSrc != previousSrc;
    if (srcChanged) {
        // If the src is changed, fire an EditImage event so that plugins knows that a new image is used, and can
        // replace the new src with some other string and it will be used and set to the image
        var event_1 = editor.triggerPluginEvent(19 /* EditImage */, {
            image: image,
            originalSrc: editInfo.src,
            previousSrc: previousSrc,
            newSrc: newSrc,
        });
        newSrc = event_1.newSrc;
    }
    else if (applyChangesOnMouseUp) {
        editor.triggerPluginEvent(7 /* ContentChanged */, {
            source: "ImageResize" /* ImageResize */,
        });
    }
    if (newSrc == editInfo.src) {
        // If newSrc is the same with original one, it means there is only size change, but no rotation, no cropping,
        // so we don't need to keep edit info, we can delete it
        (0, editInfo_1.deleteEditInfo)(image);
    }
    else {
        // Otherwise, save the new edit info to the image so that next time when we edit the same image, we know
        // the edit info
        (0, editInfo_1.saveEditInfo)(image, editInfo);
    }
    // Write back the change to image, and set its new size
    var _a = (0, getGeneratedImageSize_1.default)(editInfo), targetWidth = _a.targetWidth, targetHeight = _a.targetHeight;
    image.src = newSrc;
    if (wasResizedOrCropped || state == 3 /* FullyChanged */) {
        image.width = targetWidth;
        image.height = targetHeight;
        // Remove width/height style so that it won't affect the image size, since style width/height has higher priority
        image.style.removeProperty('width');
        image.style.removeProperty('height');
        image.style.removeProperty('max-width');
        image.style.removeProperty('max-height');
    }
}
exports.default = applyChange;
//# sourceMappingURL=applyChange.js.map