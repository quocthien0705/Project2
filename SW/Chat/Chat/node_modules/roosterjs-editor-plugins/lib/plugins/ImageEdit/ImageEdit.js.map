{"version":3,"file":"ImageEdit.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/ImageEdit/ImageEdit.ts"],"names":[],"mappings":"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","sourcesContent":["import applyChange from './editInfoUtils/applyChange';\nimport canRegenerateImage from './api/canRegenerateImage';\nimport DragAndDropHelper from '../../pluginUtils/DragAndDropHelper';\nimport getGeneratedImageSize from './editInfoUtils/getGeneratedImageSize';\nimport { Cropper, getCropHTML } from './imageEditors/Cropper';\nimport { deleteEditInfo, getEditInfoFromImage } from './editInfoUtils/editInfo';\nimport { getRotateHTML, Rotator, updateRotateHandleState } from './imageEditors/Rotator';\nimport { ImageEditElementClass } from './types/ImageEditElementClass';\nimport { MIN_HEIGHT_WIDTH } from './constants/constants';\nimport type { DNDDirectionX, DnDDirectionY } from './types/DragAndDropContext';\nimport type DragAndDropContext from './types/DragAndDropContext';\nimport type DragAndDropHandler from '../../pluginUtils/DragAndDropHandler';\nimport type ImageEditInfo from './types/ImageEditInfo';\nimport type ImageHtmlOptions from './types/ImageHtmlOptions';\nimport {\n    arrayPush,\n    Browser,\n    createElement,\n    getComputedStyle,\n    getObjectKeys,\n    safeInstanceOf,\n    toArray,\n    unwrap,\n    wrap,\n} from 'roosterjs-editor-dom';\nimport type { OnShowResizeHandle } from './imageEditors/Resizer';\nimport {\n    Resizer,\n    doubleCheckResize,\n    getSideResizeHTML,\n    getCornerResizeHTML,\n    getResizeBordersHTML,\n} from './imageEditors/Resizer';\nimport type {\n    ImageEditOptions,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n    CreateElementData,\n    ModeIndependentColor,\n} from 'roosterjs-editor-types';\nimport {\n    ImageEditOperation,\n    PluginEventType,\n    KnownCreateElementDataIndex,\n    SelectionRangeTypes,\n    ChangeSource,\n} from 'roosterjs-editor-types';\nimport type { CompatibleImageEditOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\nconst PI = Math.PI;\nconst DIRECTIONS = 8;\nconst DirectionRad = (PI * 2) / DIRECTIONS;\nconst DirectionOrder = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n\n/**\n * Default image edit options\n */\nconst DefaultOptions: Required<ImageEditOptions> = {\n    borderColor: '#DB626C',\n    minWidth: 10,\n    minHeight: 10,\n    preserveRatio: false,\n    minRotateDeg: 5,\n    imageSelector: 'img',\n    rotateIconHTML: '',\n    disableCrop: false,\n    disableRotate: false,\n    disableSideResize: false,\n    onSelectState: ImageEditOperation.ResizeAndRotate,\n    applyChangesOnMouseUp: false,\n};\n\n/**\n * Map the image edit operation to a function that returns editing elements HTML to help\n * build image editing UI\n */\nconst ImageEditHTMLMap = {\n    [ImageEditOperation.CornerResize]: getCornerResizeHTML,\n    [ImageEditOperation.SideResize]: getSideResizeHTML,\n    [ImageEditOperation.Rotate]: getRotateHTML,\n    [ImageEditOperation.Crop]: getCropHTML,\n};\n\n/**\n * Default background colors for rotate handle\n */\nconst LIGHT_MODE_BGCOLOR = 'white';\nconst DARK_MODE_BGCOLOR = '#333';\n\n/**\n * ImageEdit plugin provides the ability to edit an inline image in editor, including image resizing, rotation and cropping\n */\nexport default class ImageEdit implements EditorPlugin {\n    protected editor: IEditor | null = null;\n    protected options: ImageEditOptions;\n    private disposer: (() => void) | null = null;\n\n    // Allowed editing operations\n    private allowedOperations: ImageEditOperation;\n\n    // Current editing image\n    private image: HTMLImageElement | null = null;\n\n    // Image cloned from the current editing image\n    private clonedImage: HTMLImageElement | null = null;\n\n    // The image wrapper\n    private wrapper: HTMLSpanElement | null = null;\n\n    // Current edit info of the image. All changes user made will be stored in this object.\n    // We use this object to update the editing UI, and finally we will use this object to generate\n    // the new image if necessary\n    private editInfo: ImageEditInfo | null = null;\n\n    // Src of the image before current editing\n    private lastSrc: string | null = null;\n\n    // Drag and drop helper objects\n    private dndHelpers: DragAndDropHelper<DragAndDropContext, any>[] = [];\n\n    /**\n     * Identify if the image was resized by the user.\n     */\n    private wasResized: boolean = false;\n\n    /**\n     * The span element that wraps the image and opens shadow dom\n     */\n    private shadowSpan: HTMLSpanElement | null = null;\n\n    /**\n     * The span element that wraps the image and opens shadow dom\n     */\n    private isCropping: boolean = false;\n\n    /**\n     * Create a new instance of ImageEdit\n     * @param options Image editing options\n     * @param onShowResizeHandle An optional callback to allow customize resize handle element of image resizing.\n     * To customize the resize handle element, add this callback and change the attributes of elementData then it\n     * will be picked up by ImageEdit code\n     */\n    constructor(options?: ImageEditOptions, private onShowResizeHandle?: OnShowResizeHandle) {\n        this.options = {\n            ...DefaultOptions,\n            ...(options || {}),\n        };\n\n        this.allowedOperations =\n            ImageEditOperation.CornerResize |\n            (this.options.disableCrop ? 0 : ImageEditOperation.Crop) |\n            (this.options.disableRotate ? 0 : ImageEditOperation.Rotate) |\n            (this.options.disableSideResize ? 0 : ImageEditOperation.SideResize);\n    }\n\n    /**\n     * Get a friendly name of this plugin\n     */\n    getName() {\n        return 'ImageEdit';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = editor.addDomEventHandler({\n            blur: () => this.onBlur(),\n            dragstart: e => {\n                if (this.image) {\n                    e.preventDefault();\n                }\n            },\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.clearDndHelpers();\n        this.disposer?.();\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param e PluginEvent object\n     */\n    onPluginEvent(e: PluginEvent) {\n        switch (e.eventType) {\n            case PluginEventType.SelectionChanged:\n                if (\n                    e.selectionRangeEx &&\n                    e.selectionRangeEx.type === SelectionRangeTypes.ImageSelection &&\n                    this.options &&\n                    this.options.onSelectState !== undefined\n                ) {\n                    this.setEditingImage(e.selectionRangeEx.image, this.options.onSelectState);\n                }\n\n                break;\n            case PluginEventType.MouseDown:\n                // When left click in a image that already in editing mode, do not quit edit mode\n                const mouseTarget = e.rawEvent.target;\n                const button = e.rawEvent.button;\n                if (\n                    this.shadowSpan !== mouseTarget ||\n                    (this.shadowSpan === mouseTarget && button !== 0) ||\n                    this.isCropping\n                ) {\n                    this.setEditingImage(null);\n                }\n                break;\n            case PluginEventType.MouseUp:\n                if (this.editor && this.image && this.shadowSpan) {\n                    // When mouse up, if the image and the shadow span exists, the editing mode is on.\n                    // To make sure the selection did not jump to the shadow root, reselect the image.\n                    this.editor.select(this.image);\n                }\n\n                break;\n            case PluginEventType.KeyDown:\n                this.setEditingImage(null);\n                break;\n            case PluginEventType.ContentChanged:\n                //After contentChanged event, the current image wrapper may not be valid any more, remove all of them if any\n                this.removeWrapper();\n                break;\n\n            case PluginEventType.ExtractContentWithDom:\n                // When extract content, remove all image info since they may not be valid when load the content again\n                if (this.options?.imageSelector) {\n                    toArray(e.clonedRoot.querySelectorAll(this.options.imageSelector)).forEach(\n                        img => {\n                            deleteEditInfo(img as HTMLImageElement);\n                        }\n                    );\n                }\n                break;\n            case PluginEventType.BeforeDispose:\n                this.removeWrapper();\n                break;\n        }\n    }\n\n    /**\n     * Check if the given image edit operation is allowed by this plugin\n     * @param operation The image edit operation to check\n     * @returns True means it is allowed, otherwise false\n     */\n    isOperationAllowed(operation: ImageEditOperation): boolean {\n        return !!(this.allowedOperations & operation);\n    }\n\n    /**\n     * Set current image for edit. If there is already image in editing, it will quit editing mode and any pending editing\n     * operation will be submitted\n     * @param image The image to edit\n     * @param operation The editing operation\n     */\n    setEditingImage(\n        image: HTMLImageElement,\n        operation: ImageEditOperation | CompatibleImageEditOperation\n    ): void;\n\n    /**\n     * Stop editing image. If there is already image in editing, it will quit editing mode and any pending editing\n     * operation will be submitted\n     * @param image The image to edit\n     * @param selectImage True to select this image after quit editing mode\n     */\n    setEditingImage(image: null, selectImage?: boolean): void;\n\n    setEditingImage(\n        image: HTMLImageElement | null,\n        operationOrSelect?: ImageEditOperation | CompatibleImageEditOperation | boolean\n    ) {\n        let operation =\n            typeof operationOrSelect === 'number' ? operationOrSelect : ImageEditOperation.None;\n        const selectImage = typeof operationOrSelect === 'number' ? false : !!operationOrSelect;\n\n        if (\n            !image &&\n            this.image &&\n            this.editor &&\n            this.editInfo &&\n            this.lastSrc &&\n            this.clonedImage\n        ) {\n            // When there is image in editing, clean up any cached objects and elements\n            this.clearDndHelpers();\n\n            // Apply the changes, and add undo snapshot if necessary\n            applyChange(\n                this.editor,\n                this.image,\n                this.editInfo,\n                this.lastSrc,\n                this.wasResized || this.isCropping,\n                this.clonedImage\n            );\n\n            // Remove editing wrapper\n            this.removeWrapper();\n\n            this.editor.addUndoSnapshot(() => this.image, ChangeSource.ImageResize);\n\n            if (selectImage) {\n                this.editor.select(this.image);\n            }\n\n            this.image = null;\n            this.editInfo = null;\n            this.lastSrc = null;\n            this.clonedImage = null;\n            this.isCropping = false;\n        }\n\n        if (!this.image && image?.isContentEditable && this.editor) {\n            // If there is new image to edit, enter editing mode for this image\n            this.editor.addUndoSnapshot();\n            this.image = image;\n\n            // Get initial edit info\n            this.editInfo = getEditInfoFromImage(image);\n\n            //Check if the image was resized by the user\n            this.wasResized = checkIfImageWasResized(this.image);\n\n            operation =\n                (canRegenerateImage(image) ? operation : ImageEditOperation.Resize) &\n                this.allowedOperations;\n\n            // Create and update editing wrapper and elements\n            this.createWrapper(operation);\n            this.updateWrapper();\n\n            // Init drag and drop\n            this.dndHelpers = [\n                ...this.createDndHelpers(ImageEditElementClass.ResizeHandle, Resizer),\n                ...this.createDndHelpers(ImageEditElementClass.RotateHandle, Rotator),\n                ...this.createDndHelpers(ImageEditElementClass.CropHandle, Cropper),\n                ...this.createDndHelpers(ImageEditElementClass.CropContainer, Cropper),\n            ];\n\n            this.editor.select(this.image);\n        }\n    }\n\n    /**\n     * Flip the image.\n     * @param image The image to be flipped\n     * @param direction\n     */\n    public flipImage(image: HTMLImageElement, direction: 'vertical' | 'horizontal') {\n        this.image = image;\n        this.editInfo = getEditInfoFromImage(image);\n        const { angleRad } = this.editInfo;\n        const isInVerticalPostion =\n            (angleRad >= Math.PI / 2 && angleRad < (3 * Math.PI) / 4) ||\n            (angleRad <= -Math.PI / 2 && angleRad > (-3 * Math.PI) / 4);\n        if (isInVerticalPostion) {\n            if (direction === 'horizontal') {\n                this.editInfo.flippedVertical = !this.editInfo.flippedVertical;\n            } else {\n                this.editInfo.flippedHorizontal = !this.editInfo.flippedHorizontal;\n            }\n        } else {\n            if (direction === 'vertical') {\n                this.editInfo.flippedVertical = !this.editInfo.flippedVertical;\n            } else {\n                this.editInfo.flippedHorizontal = !this.editInfo.flippedHorizontal;\n            }\n        }\n        this.createWrapper(ImageEditOperation.Rotate);\n        this.updateWrapper();\n        this.setEditingImage(null);\n        this.editor?.select(image);\n    }\n\n    /**\n     * Rotate the image in radian angle.\n     * @param image The image to be rotated\n     * @param angleRad The angle in radian that the image must be rotated.\n     */\n    public rotateImage(image: HTMLImageElement, angleRad: number) {\n        this.image = image;\n        this.editInfo = getEditInfoFromImage(image);\n        this.editInfo.angleRad = this.editInfo.angleRad + angleRad;\n        this.createWrapper(ImageEditOperation.Rotate);\n        this.updateWrapper();\n        this.setEditingImage(null);\n        this.editor?.select(image);\n    }\n\n    /**\n     * quit editing mode when editor lose focus\n     */\n    private onBlur = () => {\n        this.setEditingImage(null, false /* selectImage */);\n    };\n    /**\n     * Create editing wrapper for the image\n     */\n    private createWrapper(operation: ImageEditOperation | CompatibleImageEditOperation) {\n        if (this.image && this.editor && this.options && this.editInfo) {\n            //Clone the image and insert the clone in a entity\n            this.clonedImage = this.image.cloneNode(true) as HTMLImageElement;\n            this.clonedImage.removeAttribute('id');\n            this.clonedImage.style.removeProperty('max-width');\n            this.clonedImage.style.removeProperty('max-height');\n            this.clonedImage.style.width = this.editInfo.widthPx + 'px';\n            this.clonedImage.style.height = this.editInfo.heightPx + 'px';\n            this.wrapper = createElement(\n                KnownCreateElementDataIndex.ImageEditWrapper,\n                this.image.ownerDocument\n            ) as HTMLSpanElement;\n            this.wrapper?.firstChild?.appendChild(this.clonedImage);\n            this.wrapper.style.display = Browser.isSafari ? 'inline-block' : 'inline-flex';\n\n            // Cache current src so that we can compare it after edit see if src is changed\n            this.lastSrc = this.image.getAttribute('src');\n\n            // Set image src to original src to help show editing UI, also it will be used when regenerate image dataURL after editing\n            if (this.clonedImage) {\n                this.clonedImage.src = this.editInfo.src;\n                this.clonedImage.style.position = 'absolute';\n            }\n\n            // Get HTML for all edit elements (resize handle, rotate handle, crop handle and overlay, ...) and create HTML element\n            const options: ImageHtmlOptions = {\n                borderColor: getColorString(this.options.borderColor!, this.editor.isDarkMode()),\n                rotateIconHTML: this.options.rotateIconHTML!,\n                rotateHandleBackColor: this.editor.isDarkMode()\n                    ? DARK_MODE_BGCOLOR\n                    : LIGHT_MODE_BGCOLOR,\n                isSmallImage: isASmallImage(this.editInfo.widthPx, this.editInfo.heightPx),\n            };\n            const htmlData: CreateElementData[] = [getResizeBordersHTML(options)];\n\n            getObjectKeys(ImageEditHTMLMap).forEach(thisOperation => {\n                const element = ImageEditHTMLMap[thisOperation](options, this.onShowResizeHandle);\n                if ((operation & thisOperation) == thisOperation && element) {\n                    arrayPush(htmlData, element);\n                }\n            });\n\n            htmlData.forEach(data => {\n                const element = createElement(data, this.image!.ownerDocument);\n                if (element && this.wrapper) {\n                    this.wrapper.appendChild(element);\n                }\n            });\n            this.insertImageWrapper(this.wrapper);\n        }\n    }\n\n    /**\n     * EXPORTED FOR TESTING PURPOSES ONLY\n     * @param wrapper\n     */\n\n    public insertImageWrapper(wrapper: HTMLSpanElement) {\n        if (this.image) {\n            this.shadowSpan = wrap(this.image, 'span');\n            if (this.shadowSpan) {\n                const shadowRoot = this.shadowSpan.attachShadow({\n                    mode: 'open',\n                });\n\n                this.shadowSpan.style.verticalAlign = 'bottom';\n                wrapper.style.fontSize = '24px';\n                if (this.options.applyChangesOnMouseUp) {\n                    wrapper.addEventListener(\n                        'mouseup',\n                        this.changesWhenMouseUp,\n                        true /* useCapture*/\n                    );\n                }\n                shadowRoot.appendChild(wrapper);\n            }\n        }\n    }\n\n    /**\n     * Remove the temp wrapper of the image\n     */\n    private removeWrapper = () => {\n        if (this.shadowSpan) {\n            unwrap(this.shadowSpan);\n        }\n        if (this.options.applyChangesOnMouseUp) {\n            this.wrapper?.removeEventListener(\n                'mouseup',\n                this.changesWhenMouseUp,\n                true /* useCapture*/\n            );\n        }\n        this.wrapper = null;\n        this.shadowSpan = null;\n    };\n\n    private changesWhenMouseUp = () => {\n        if (this.editor && this.image && this.editInfo && this.lastSrc && this.clonedImage) {\n            applyChange(\n                this.editor,\n                this.image,\n                this.editInfo,\n                this.lastSrc,\n                this.wasResized,\n                this.clonedImage,\n                this.options.applyChangesOnMouseUp\n            );\n        }\n    };\n\n    /**\n     * Update image edit elements to reflect current editing result\n     * @param context\n     */\n    private updateWrapper = (context?: DragAndDropContext) => {\n        const wrapper = this.wrapper;\n        if (\n            wrapper &&\n            this.editInfo &&\n            this.image &&\n            this.clonedImage &&\n            this.options &&\n            this.shadowSpan?.parentElement\n        ) {\n            // Prepare: get related editing elements\n            const cropContainers = getEditElements(wrapper, ImageEditElementClass.CropContainer);\n            const cropOverlays = getEditElements(wrapper, ImageEditElementClass.CropOverlay);\n            const resizeHandles = getEditElements(wrapper, ImageEditElementClass.ResizeHandle);\n            const rotateCenter = getEditElements(wrapper, ImageEditElementClass.RotateCenter)[0];\n            const rotateHandle = getEditElements(wrapper, ImageEditElementClass.RotateHandle)[0];\n            const cropHandles = getEditElements(wrapper, ImageEditElementClass.CropHandle);\n\n            // Cropping and resizing will show different UI, so check if it is cropping here first\n            this.isCropping = cropContainers.length == 1 && cropOverlays.length == 4;\n            const {\n                angleRad,\n                bottomPercent,\n                leftPercent,\n                rightPercent,\n                topPercent,\n                flippedHorizontal,\n                flippedVertical,\n            } = this.editInfo;\n\n            // Width/height of the image\n            const {\n                targetWidth,\n                targetHeight,\n                originalWidth,\n                originalHeight,\n                visibleWidth,\n                visibleHeight,\n            } = getGeneratedImageSize(this.editInfo, this.isCropping);\n\n            const marginHorizontal = (targetWidth - visibleWidth) / 2;\n            const marginVertical = (targetHeight - visibleHeight) / 2;\n            const cropLeftPx = originalWidth * leftPercent;\n            const cropRightPx = originalWidth * rightPercent;\n            const cropTopPx = originalHeight * topPercent;\n            const cropBottomPx = originalHeight * bottomPercent;\n\n            // Update size and margin of the wrapper\n            wrapper.style.margin = `${marginVertical}px ${marginHorizontal}px`;\n            wrapper.style.transform = `rotate(${angleRad}rad)`;\n            setWrapperSizeDimensions(wrapper, this.image, visibleWidth, visibleHeight);\n\n            // Update the text-alignment to avoid the image to overflow if the parent element have align center or right\n            // or if the direction is Right To Left\n            wrapper.style.textAlign = isRtl(this.shadowSpan.parentElement) ? 'right' : 'left';\n\n            // Update size of the image\n            this.clonedImage.style.width = getPx(originalWidth);\n            this.clonedImage.style.height = getPx(originalHeight);\n\n            //Update flip direction\n            setFlipped(this.clonedImage.parentElement, flippedHorizontal, flippedVertical);\n\n            if (this.isCropping) {\n                // For crop, we also need to set position of the overlays\n                setSize(\n                    cropContainers[0],\n                    cropLeftPx,\n                    cropTopPx,\n                    cropRightPx,\n                    cropBottomPx,\n                    undefined,\n                    undefined\n                );\n                setSize(cropOverlays[0], 0, 0, cropRightPx, undefined, undefined, cropTopPx);\n                setSize(cropOverlays[1], undefined, 0, 0, cropBottomPx, cropRightPx, undefined);\n                setSize(cropOverlays[2], cropLeftPx, undefined, 0, 0, undefined, cropBottomPx);\n                setSize(cropOverlays[3], 0, cropTopPx, undefined, 0, cropLeftPx, undefined);\n\n                updateHandleCursor(cropHandles, angleRad);\n            } else {\n                // For rotate/resize, set the margin of the image so that cropped part won't be visible\n                this.clonedImage.style.margin = `${-cropTopPx}px 0 0 ${-cropLeftPx}px`;\n\n                // Double check resize\n                if (context?.elementClass == ImageEditElementClass.ResizeHandle) {\n                    const clientWidth = wrapper.clientWidth;\n                    const clientHeight = wrapper.clientHeight;\n                    this.wasResized = true;\n                    doubleCheckResize(\n                        this.editInfo,\n                        this.options.preserveRatio || false,\n                        clientWidth,\n                        clientHeight\n                    );\n\n                    this.updateWrapper();\n                }\n\n                const viewport = this.editor?.getVisibleViewport();\n                const isSmall = isASmallImage(targetWidth, targetHeight);\n                if (rotateHandle && rotateCenter && viewport) {\n                    updateRotateHandleState(\n                        viewport,\n                        angleRad,\n                        wrapper,\n                        rotateCenter,\n                        rotateHandle,\n                        isSmall\n                    );\n                }\n\n                updateSideHandlesVisibility(resizeHandles, isSmall);\n\n                updateHandleCursor(resizeHandles, angleRad);\n            }\n        }\n    };\n\n    /**\n     * Create drag and drop helpers\n     * @param wrapper\n     * @param elementClass\n     * @param dragAndDrop\n     */\n    private createDndHelpers(\n        elementClass: ImageEditElementClass,\n        dragAndDrop: DragAndDropHandler<DragAndDropContext, any>\n    ): DragAndDropHelper<DragAndDropContext, any>[] {\n        const wrapper = this.wrapper;\n        return wrapper && this.editInfo\n            ? getEditElements(wrapper, elementClass).map(\n                  element =>\n                      new DragAndDropHelper<DragAndDropContext, any>(\n                          element,\n                          {\n                              editInfo: this.editInfo!,\n                              options: this.options,\n                              elementClass,\n                              x: element.dataset.x as DNDDirectionX,\n                              y: element.dataset.y as DnDDirectionY,\n                          },\n                          this.updateWrapper,\n                          dragAndDrop,\n                          this.editor ? this.editor.getZoomScale() : 1\n                      )\n              )\n            : [];\n    }\n\n    /**\n     * Clean up drag and drop helpers\n     */\n    private clearDndHelpers() {\n        this.dndHelpers?.forEach(helper => helper.dispose());\n        this.dndHelpers = [];\n    }\n}\n\nfunction setSize(\n    element: HTMLElement,\n    left: number | undefined,\n    top: number | undefined,\n    right: number | undefined,\n    bottom: number | undefined,\n    width: number | undefined,\n    height: number | undefined\n) {\n    element.style.left = left !== undefined ? getPx(left) : element.style.left;\n    element.style.top = top !== undefined ? getPx(top) : element.style.top;\n    element.style.right = right !== undefined ? getPx(right) : element.style.right;\n    element.style.bottom = bottom !== undefined ? getPx(bottom) : element.style.bottom;\n    element.style.width = width !== undefined ? getPx(width) : element.style.width;\n    element.style.height = height !== undefined ? getPx(height) : element.style.height;\n}\n\nfunction setWrapperSizeDimensions(\n    wrapper: HTMLElement,\n    image: HTMLImageElement,\n    width: number,\n    height: number\n) {\n    const hasBorder = image.style.borderStyle;\n    if (hasBorder) {\n        const borderWidth = image.style.borderWidth ? 2 * parseInt(image.style.borderWidth) : 2;\n        wrapper.style.width = getPx(width + borderWidth);\n        wrapper.style.height = getPx(height + borderWidth);\n        return;\n    }\n    wrapper.style.width = getPx(width);\n    wrapper.style.height = getPx(height);\n}\n\nfunction getPx(value: number): string {\n    return value + 'px';\n}\n\nfunction getEditElements(wrapper: HTMLElement, elementClass: ImageEditElementClass): HTMLElement[] {\n    return toArray(wrapper.querySelectorAll('.' + elementClass)) as HTMLElement[];\n}\n\nfunction isRtl(element: Node): boolean {\n    return safeInstanceOf(element, 'HTMLElement')\n        ? getComputedStyle(element, 'direction') == 'rtl'\n        : false;\n}\n\nfunction handleRadIndexCalculator(angleRad: number): number {\n    const idx = Math.round(angleRad / DirectionRad) % DIRECTIONS;\n    return idx < 0 ? idx + DIRECTIONS : idx;\n}\n\nfunction rotateHandles(angleRad: number, y: string = '', x: string = ''): string {\n    const radIndex = handleRadIndexCalculator(angleRad);\n    const originalDirection = y + x;\n    const originalIndex = DirectionOrder.indexOf(originalDirection);\n    const rotatedIndex = originalIndex >= 0 && originalIndex + radIndex;\n    return rotatedIndex ? DirectionOrder[rotatedIndex % DIRECTIONS] : '';\n}\n\n/**\n * Rotate the resizer and cropper handles according to the image position.\n * @param handles The resizer handles.\n * @param angleRad The angle that the image was rotated.\n */\nfunction updateHandleCursor(handles: HTMLElement[], angleRad: number) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        handle.style.cursor = `${rotateHandles(angleRad, y, x)}-resize`;\n    });\n}\n\nfunction updateSideHandlesVisibility(handles: HTMLElement[], isSmall: boolean) {\n    handles.forEach(handle => {\n        const { y, x } = handle.dataset;\n        const coordinate = (y ?? '') + (x ?? '');\n        const directions = ['n', 's', 'e', 'w'];\n        const isSideHandle = directions.indexOf(coordinate) > -1;\n        handle.style.display = isSideHandle && isSmall ? 'none' : '';\n    });\n}\n\n/**\n * Check if the current image was resized by the user\n * @param image the current image\n * @returns if the user resized the image, returns true, otherwise, returns false\n */\nfunction checkIfImageWasResized(image: HTMLImageElement): boolean {\n    const { width, height, style } = image;\n    const isMaxWidthInitial =\n        style.maxWidth === '' || style.maxWidth === 'initial' || style.maxWidth === 'auto';\n    if (\n        isMaxWidthInitial &&\n        (isFixedNumberValue(style.height) ||\n            isFixedNumberValue(style.width) ||\n            isFixedNumberValue(width) ||\n            isFixedNumberValue(height))\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isFixedNumberValue(value: string | number) {\n    const numberValue = typeof value === 'string' ? parseInt(value) : value;\n    return !isNaN(numberValue);\n}\n\nfunction isASmallImage(widthPx: number, heightPx: number): boolean {\n    return widthPx && heightPx && (widthPx < MIN_HEIGHT_WIDTH || heightPx < MIN_HEIGHT_WIDTH)\n        ? true\n        : false;\n}\n\nfunction getColorString(color: string | ModeIndependentColor, isDarkMode: boolean): string {\n    if (typeof color === 'string') {\n        return color.trim();\n    }\n    return isDarkMode ? color.darkModeColor.trim() : color.lightModeColor.trim();\n}\n\nfunction setFlipped(\n    element: HTMLElement | null,\n    flippedHorizontally?: boolean,\n    flippedVertically?: boolean\n) {\n    if (element) {\n        element.style.transform = `scale(${flippedHorizontally ? -1 : 1}, ${\n            flippedVertically ? -1 : 1\n        })`;\n    }\n}\n"]}