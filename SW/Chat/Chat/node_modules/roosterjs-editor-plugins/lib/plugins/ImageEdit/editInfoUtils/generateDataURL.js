"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getGeneratedImageSize_1 = require("./getGeneratedImageSize");
/**
 * @internal
 * Generate new dataURL from an image and edit info
 * @param image The image to generate data URL from. It is supposed to have original src loaded
 * @param editInfo Edit info of the image
 * @returns A BASE64 encoded string with image prefix that represents the content of the generated image.
 * If there are rotate/crop/resize info in the edit info, the generated image will also reflect the result.
 * It is possible to throw exception since the original image may not be able to read its content from
 * the code, so better check canRegenerateImage() of the image first.
 * @throws Exception when fail to generate dataURL from canvas
 */
function generateDataURL(image, editInfo) {
    var angle = editInfo.angleRad, width = editInfo.widthPx, height = editInfo.heightPx, bottom = editInfo.bottomPercent, left = editInfo.leftPercent, right = editInfo.rightPercent, top = editInfo.topPercent, naturalWidth = editInfo.naturalWidth, naturalHeight = editInfo.naturalHeight;
    var imageWidth = naturalWidth * (1 - left - right);
    var imageHeight = naturalHeight * (1 - top - bottom);
    // Adjust the canvas size and scaling for high display resolution
    var devicePixelRatio = window.devicePixelRatio || 1;
    var canvas = document.createElement('canvas');
    var _a = (0, getGeneratedImageSize_1.default)(editInfo), targetWidth = _a.targetWidth, targetHeight = _a.targetHeight;
    canvas.width = targetWidth * devicePixelRatio;
    canvas.height = targetHeight * devicePixelRatio;
    var context = canvas.getContext('2d');
    if (context) {
        context.scale(devicePixelRatio, devicePixelRatio);
        context.translate(targetWidth / 2, targetHeight / 2);
        context.rotate(angle);
        context.scale(editInfo.flippedHorizontal ? -1 : 1, editInfo.flippedVertical ? -1 : 1);
        context.drawImage(image, naturalWidth * left, naturalHeight * top, imageWidth, imageHeight, -width / 2, -height / 2, width, height);
    }
    return canvas.toDataURL('image/png', 1.0);
}
exports.default = generateDataURL;
//# sourceMappingURL=generateDataURL.js.map