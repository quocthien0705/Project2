{"version":3,"file":"Paste.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/Paste.ts"],"names":[],"mappings":";;AAAA,wGAAmG;AACnG,yFAAoF;AACpF,gGAA2F;AAC3F,qHAAgH;AAChH,wGAAmG;AACnG,6FAAwF;AACxF,+DAA0D;AAC1D,iIAA4H;AAC5H,+DAA0D;AAC1D,6DAA8E;AAU9E,IAAM,sBAAsB,GAAG,2BAA2B,CAAC;AAE3D;;;;;GAKG;AACH;IAGI;;;;;OAKG;IACH,eACY,qBAAsC,EACtC,sBAAuC;QADvC,sCAAA,EAAA,8BAAsC;QACtC,uCAAA,EAAA,8BAAuC;QADvC,0BAAqB,GAArB,qBAAqB,CAAiB;QACtC,2BAAsB,GAAtB,sBAAsB,CAAiB;QAV3C,WAAM,GAAmB,IAAI,CAAC;IAWnC,CAAC;IAEJ;;OAEG;IACH,uBAAO,GAAP;QACI,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,0BAAU,GAAV,UAAW,MAAe;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,uBAAO,GAAP;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,6BAAa,GAAb,UAAc,KAAkB;QAC5B,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,wBAA+B,EAAE;YACvD,IAAA,QAAQ,GAAuB,KAAK,SAA5B,EAAE,gBAAgB,GAAK,KAAK,iBAAV,CAAW;YAC7C,IAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;YAE/D,QAAQ,IAAA,qCAAc,EAAC,KAAK,EAAE,IAAI,CAAC,sBAAsB,CAAC,EAAE;gBACxD;oBACI,+BAA+B;oBAC/B,IAAA,sCAA4B,EAAC,KAAK,CAAC,CAAC;oBACpC,MAAM;gBACV,0BAAuC;gBACvC;oBACI,IACI,KAAK,CAAC,SAAS,mBAAqB;wBACpC,KAAK,CAAC,SAAS,wBAA0B,EAC3C;wBACE,gCAAgC;wBAChC,IAAA,uCAA6B,EAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;qBAC5D;oBACD,MAAM;gBACV;oBACI,IAAA,4CAAkC,EAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;oBAC9D,MAAM;gBACV;oBACI,IAAA,8CAAoC,EAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;oBACjE,MAAM;gBACV;oBACI,gBAAgB,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,GAAG,GAAG,CAAC;oBACzE,MAAM;gBACV;oBACI,IAAA,2CAAiC,EAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;oBAC7D,MAAM;gBACV;oBACI,IAAA,mCAAyB,EAAC,QAAQ,CAAC,CAAC;oBACpC,IAAA,yBAAe,EAAC,QAAQ,CAAC,CAAC;oBAC1B,MAAM;aACb;YACD,IAAA,uBAAa,EAAC,gBAAgB,CAAC,CAAC;YAChC,IAAA,6CAAmC,EAAC,gBAAgB,CAAC,CAAC;YACtD,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YAEtC,iCAAiC;YACjC,gBAAgB,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;SACvE;IACL,CAAC;IACL,YAAC;AAAD,CAAC,AArFD,IAqFC;;AAED,SAAS,mBAAmB,CAAC,gBAAgD;IACzE,IAAA,6CAAsB,EAAC,gBAAgB,CAAC,iBAAiB,EAAE,SAAS,EAAE,UAAC,KAAa;QAChF,OAAO,KAAK,IAAI,MAAM,CAAC,CAAC,mCAAmC;IAC/D,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import convertPasteContentForSingleImage from './imageConverter/convertPasteContentForSingleImage';\nimport convertPastedContentForLI from './commonConverter/convertPastedContentForLI';\nimport convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\nimport convertPastedContentFromOfficeOnline from './officeOnlineConverter/convertPastedContentFromOfficeOnline';\nimport convertPastedContentFromPowerPoint from './pptConverter/convertPastedContentFromPowerPoint';\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\nimport handleLineMerge from './lineMerge/handleLineMerge';\nimport sanitizeHtmlColorsFromPastedContent from './sanitizeHtmlColorsFromPastedContent/sanitizeHtmlColorsFromPastedContent';\nimport sanitizeLinks from './sanitizeLinks/sanitizeLinks';\nimport { chainSanitizerCallback, getPasteSource } from 'roosterjs-editor-dom';\nimport { KnownPasteSourceType, PasteType, PluginEventType } from 'roosterjs-editor-types';\n\nimport type {\n    HtmlSanitizerOptions,\n    EditorPlugin,\n    IEditor,\n    PluginEvent,\n} from 'roosterjs-editor-types';\n\nconst GOOGLE_SHEET_NODE_NAME = 'google-sheets-html-origin';\n\n/**\n * Paste plugin, handles BeforePaste event and reformat some special content, including:\n * 1. Content copied from Word\n * 2. Content copied from Excel\n * 3. Content copied from Word Online or OneNote Online\n */\nexport default class Paste implements EditorPlugin {\n    private editor: IEditor | null = null;\n\n    /**\n     * Construct a new instance of Paste class\n     * @param unknownTagReplacement Replace solution of unknown tags, default behavior is to replace with SPAN\n     * @param convertSingleImageBody When enabled, if clipboard HTML contains a single image, we reuse the image without modifying the src attribute.\n     *                               When disabled, pasted image src attribute will use the dataUri from clipboard data -- By Default disabled.\n     */\n    constructor(\n        private unknownTagReplacement: string = 'SPAN',\n        private convertSingleImageBody: boolean = false\n    ) {}\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Paste';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (this.editor && event.eventType == PluginEventType.BeforePaste) {\n            const { fragment, sanitizingOption } = event;\n            const trustedHTMLHandler = this.editor.getTrustedHTMLHandler();\n\n            switch (getPasteSource(event, this.convertSingleImageBody)) {\n                case KnownPasteSourceType.WordDesktop:\n                    // Handle HTML copied from Word\n                    convertPastedContentFromWord(event);\n                    break;\n                case KnownPasteSourceType.ExcelDesktop:\n                case KnownPasteSourceType.ExcelOnline:\n                    if (\n                        event.pasteType === PasteType.Normal ||\n                        event.pasteType === PasteType.MergeFormat\n                    ) {\n                        // Handle HTML copied from Excel\n                        convertPastedContentFromExcel(event, trustedHTMLHandler);\n                    }\n                    break;\n                case KnownPasteSourceType.PowerPointDesktop:\n                    convertPastedContentFromPowerPoint(event, trustedHTMLHandler);\n                    break;\n                case KnownPasteSourceType.WacComponents:\n                    convertPastedContentFromOfficeOnline(fragment, sanitizingOption);\n                    break;\n                case KnownPasteSourceType.GoogleSheets:\n                    sanitizingOption.additionalTagReplacements[GOOGLE_SHEET_NODE_NAME] = '*';\n                    break;\n                case KnownPasteSourceType.SingleImage:\n                    convertPasteContentForSingleImage(event, trustedHTMLHandler);\n                    break;\n                case KnownPasteSourceType.Default:\n                    convertPastedContentForLI(fragment);\n                    handleLineMerge(fragment);\n                    break;\n            }\n            sanitizeLinks(sanitizingOption);\n            sanitizeHtmlColorsFromPastedContent(sanitizingOption);\n            sanitizeBlockStyles(sanitizingOption);\n\n            // Replace unknown tags with SPAN\n            sanitizingOption.unknownTagReplacement = this.unknownTagReplacement;\n        }\n    }\n}\n\nfunction sanitizeBlockStyles(sanitizingOption: Required<HtmlSanitizerOptions>) {\n    chainSanitizerCallback(sanitizingOption.cssStyleCallbacks, 'display', (value: string) => {\n        return value != 'flex'; // return whether we keep the style\n    });\n}\n"]}