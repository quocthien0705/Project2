{"version":3,"file":"commentsRemoval.js","sourceRoot":"","sources":["../../../../../../packages/roosterjs-editor-plugins/lib/plugins/Paste/wordConverter/commentsRemoval.ts"],"names":[],"mappings":";;AACA,6DAK8B;AAE9B,IAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAChD,IAAM,qBAAqB,GAAG,uBAAuB,CAAC;AACtD,IAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAC5C,IAAM,6BAA6B,GAAG,WAAW,CAAC;AAClD,IAAM,qBAAqB,GAAG,uBAAuB,CAAC;AACtD,IAAM,6BAA6B,GAAG,SAAS,CAAC;AAChD,IAAM,wBAAwB,GAAG,0BAA0B,CAAC;AAC5D,IAAM,WAAW,GAAG,aAAa,CAAC;AAClC,IAAM,wBAAwB,GAAG,cAAc,CAAC;AAChD,IAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAE5C;;;GAGG;AACH,SAAwB,eAAe,CACnC,gBAAoC,EACpC,cAAmC;IAEnC,2DAA2D;IAC3D,6DAA6D;IAC7D,yCAAyC;IACzC,4BAA4B;IAC5B,iEAAiE;IACjE,iDAAiD;IACjD,kBAAkB;IAClB,8CAA8C;IAC9C,8CAA8C;IAC9C,yEAAyE;IACzE,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,IAAA,6CAAsB,EAAC,gBAAgB,EAAE,MAAM,EAAE,UAAA,OAAO;;QACpD,IAAM,MAAM,GAAG,IAAA,gCAAS,EAAC,OAAO,CAAC,CAAC;QAClC,IAAI,MAAM,CAAC,qBAAqB,CAAC,IAAI,6BAA6B,EAAE;YAChE,MAAA,OAAO,CAAC,aAAa,0CAAE,WAAW,CAAC,OAAO,CAAC,CAAC;SAC/C;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,oCAAoC;IACpC,6FAA6F;IAC7F,wDAAwD;IACxD,yEAAyE;IACzE,iCAAiC;IACjC,6CAA6C;IAC7C,oDAAoD;IACpD,IAAA,6CAAsB,EAAC,gBAAgB,EAAE,GAAG,EAAE,UAAA,OAAO;;QACjD,IACI,IAAA,qCAAc,EAAC,OAAO,EAAE,mBAAmB,CAAC;YAC5C,6BAA6B,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAClD;YACE,MAAA,OAAO,CAAC,aAAa,0CAAE,WAAW,CAAC,OAAO,CAAC,CAAC;SAC/C;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,gFAAgF;IAChF,gEAAgE;IAChE,4BAA4B;IAC5B,EAAE;IACF,yCAAyC;IACzC,2CAA2C;IAC3C,iDAAiD;IACjD,iDAAiD;IACjD,iDAAiD;IACjD,WAAW;IACX,SAAS;IACT,IAAA,6CAAsB,EAAC,gBAAgB,EAAE,KAAK,EAAE,UAAA,OAAO;QACnD,IAAM,MAAM,GAAG,IAAA,gCAAS,EAAC,OAAO,CAAC,CAAC;QAClC,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,wBAAwB,EAAE;YACjD,IAAA,qCAAc,EAAC,OAAO,CAAC,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH;QACI,qBAAqB;QACrB,gBAAgB;QAChB,kBAAkB;QAClB,wBAAwB;QACxB,gBAAgB;KACnB,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,IAAA,6CAAsB,EAAC,cAAc,EAAE,KAAK,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,EAA1D,CAA0D,CAAC,CAAC;AACnF,CAAC;AAzED,kCAyEC","sourcesContent":["import type { CssStyleCallbackMap, ElementCallbackMap } from 'roosterjs-editor-types';\nimport {\n    chainSanitizerCallback,\n    getStyles,\n    moveChildNodes,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\n\nconst MSO_COMMENT_PARENT = 'mso-comment-parent';\nconst MSO_COMMENT_REFERENCE = 'mso-comment-reference';\nconst MSO_COMMENT_DATE = 'mso-comment-date';\nconst MSO_COMMENT_ANCHOR_HREF_REGEX = /#_msocom_/;\nconst MSO_SPECIAL_CHARACTER = 'mso-special-character';\nconst MSO_SPECIAL_CHARACTER_COMMENT = 'comment';\nconst MSO_COMMENT_CONTINUATION = 'mso-comment-continuation';\nconst MSO_ELEMENT = 'mso-element';\nconst MSO_ELEMENT_COMMENT_LIST = 'comment-list';\nconst MSO_COMMENT_DONE = 'mso-comment-done';\n\n/**\n * @internal\n * Removes comments when pasting Word content.\n */\nexport default function commentsRemoval(\n    elementCallbacks: ElementCallbackMap,\n    styleCallbacks: CssStyleCallbackMap\n) {\n    // 1st Step, Remove SPAN elements added after each comment.\n    // Word adds multiple elements for comments as SPAN elements.\n    // In this step we remove these elements:\n    // Structure as of 4/18/2022\n    // 1.   <span style=\"mso-special-character:comment\">&nbsp;</span>\n    // 2.   <span style=\"mso-comment-continuation:3\">\n    //          <span>\n    //              <span style=\"font-size:8.0pt\">\n    //              <a href=\"#_msocom_2\">[RS2]</a>\n    //              <span style=\"mso-special-character:comment\">&nbsp;</span>\n    //              </span>\n    //          </span>\n    //      </span>\n    chainSanitizerCallback(elementCallbacks, 'SPAN', element => {\n        const styles = getStyles(element);\n        if (styles[MSO_SPECIAL_CHARACTER] == MSO_SPECIAL_CHARACTER_COMMENT) {\n            element.parentElement?.removeChild(element);\n        }\n        return true;\n    });\n\n    // 2nd Step, Modify Anchor elements.\n    // 1.   When the element was selected to add a comment in Word, the selection is converted to\n    //      an anchor element, so we change the tag to span.\n    // 2.   Word also adds some Anchor elements with the following structure:\n    //      Structure as of 4/18/2022\n    //      <a href=\"#_msocom_{number}\">[SS3]</a>\n    //      In this step we remove this Anchor elements.\n    chainSanitizerCallback(elementCallbacks, 'A', element => {\n        if (\n            safeInstanceOf(element, 'HTMLAnchorElement') &&\n            MSO_COMMENT_ANCHOR_HREF_REGEX.test(element.href)\n        ) {\n            element.parentElement?.removeChild(element);\n        }\n        return true;\n    });\n\n    // 3rd Step, remove List of comments.\n    // When the document have a long thread of comments, these comments are appended\n    // at the end of the copied fragment, we also need to remove it.\n    // Structure as of 4/18/2022\n    //\n    // <div style=\"mso-element:comment-list\">\n    //   <hr width=\"33%\" size=\"1\" align=\"left\">\n    //   <div style=\"mso-element:comment\"> ... </div>\n    //   <div style=\"mso-element:comment\"> ... </div>\n    //   <div style=\"mso-element:comment\"> ... </div>\n    //   </div>\n    // </div>\n    chainSanitizerCallback(elementCallbacks, 'DIV', element => {\n        const styles = getStyles(element);\n        if (styles[MSO_ELEMENT] == MSO_ELEMENT_COMMENT_LIST) {\n            moveChildNodes(element);\n        }\n        return true;\n    });\n\n    /**\n     * Remove styles related to Office Comments that can cause unwanted behaviors\n     * depending on the user client\n     */\n    [\n        MSO_COMMENT_REFERENCE,\n        MSO_COMMENT_DATE,\n        MSO_COMMENT_PARENT,\n        MSO_COMMENT_CONTINUATION,\n        MSO_COMMENT_DONE,\n    ].forEach(style => chainSanitizerCallback(styleCallbacks, style, () => false));\n}\n"]}