{"version":3,"file":"Watermark.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-plugins/lib/plugins/Watermark/Watermark.ts"],"names":[],"mappings":"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","sourcesContent":["import { applyFormat, getEntitySelector, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ContentPosition, EntityOperation, PluginEventType } from 'roosterjs-editor-types';\r\nimport { insertEntity } from 'roosterjs-editor-api';\r\nimport type {\r\n    DefaultFormat,\r\n    EditorPlugin,\r\n    Entity,\r\n    IEditor,\r\n    PluginEvent,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst ENTITY_TYPE = 'WATERMARK_WRAPPER';\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nexport default class Watermark implements EditorPlugin {\r\n    private editor: IEditor | null = null;\r\n    private disposer: (() => void) | null = null;\r\n    private format: DefaultFormat;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, format?: DefaultFormat, private customClass?: string) {\r\n        this.format = format || {\r\n            fontSize: '14px',\r\n            textColors: {\r\n                lightModeColor: '#AAAAAA',\r\n                darkModeColor: '#6B6B6B',\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the watermark text.\r\n     * @param watermark - The new watermark text.\r\n     */\r\n    updateWatermark(watermark: string) {\r\n        this.watermark = watermark;\r\n\r\n        if (!this.editor) {\r\n            return;\r\n        }\r\n        const watermarks = this.editor.queryElements(getEntitySelector(ENTITY_TYPE));\r\n        const isShowing = watermarks.length > 0;\r\n        // re-render watermark only if it's already displayed\r\n        if (isShowing) {\r\n            // hide watermark\r\n            const watermarks = this.editor.queryElements(getEntitySelector(ENTITY_TYPE));\r\n            watermarks.forEach(this.removeWatermark);\r\n            // show watermark\r\n            this.showHideWatermark();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: IEditor) {\r\n        this.editor = editor;\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.showHideWatermark,\r\n            blur: this.showHideWatermark,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer?.();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            event.eventType == PluginEventType.EditorReady ||\r\n            (event.eventType == PluginEventType.ContentChanged &&\r\n                (<Entity>event.data)?.type != ENTITY_TYPE)\r\n        ) {\r\n            this.showHideWatermark();\r\n        } else if (\r\n            event.eventType == PluginEventType.EntityOperation &&\r\n            event.entity.type == ENTITY_TYPE &&\r\n            this.editor\r\n        ) {\r\n            const {\r\n                operation,\r\n                entity: { wrapper },\r\n            } = event;\r\n            if (operation == EntityOperation.ReplaceTemporaryContent) {\r\n                this.removeWatermark(wrapper);\r\n            } else if (event.operation == EntityOperation.NewEntity) {\r\n                applyFormat(\r\n                    wrapper,\r\n                    this.format,\r\n                    this.editor.isDarkMode(),\r\n                    this.editor.getDarkColorHandler()\r\n                );\r\n                wrapper.spellcheck = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showHideWatermark = () => {\r\n        if (!this.editor) {\r\n            return;\r\n        }\r\n        const hasFocus = this.editor.hasFocus();\r\n        const watermarks = this.editor.queryElements(getEntitySelector(ENTITY_TYPE));\r\n        const isShowing = watermarks.length > 0;\r\n\r\n        if (hasFocus && isShowing) {\r\n            watermarks.forEach(this.removeWatermark);\r\n            this.editor.focus();\r\n        } else if (!hasFocus && !isShowing && this.editor.isEmpty()) {\r\n            const newEntity = insertEntity(\r\n                this.editor,\r\n                ENTITY_TYPE,\r\n                this.editor.getDocument().createTextNode(this.watermark),\r\n                false /*isBlock*/,\r\n                false /*isReadonly*/,\r\n                ContentPosition.Begin\r\n            );\r\n            if (this.customClass) {\r\n                newEntity.wrapper.classList.add(this.customClass);\r\n            }\r\n        }\r\n    };\r\n\r\n    private removeWatermark = (wrapper: HTMLElement) => {\r\n        const parentNode = wrapper.parentNode;\r\n        parentNode?.removeChild(wrapper);\r\n\r\n        // After remove watermark node, if it leaves an empty DIV, append a BR node into it to make it a regular empty line\r\n        if (\r\n            parentNode &&\r\n            this.editor?.contains(parentNode) &&\r\n            getTagOfNode(parentNode) == 'DIV' &&\r\n            !parentNode.firstChild\r\n        ) {\r\n            parentNode.appendChild(this.editor.getDocument().createElement('BR'));\r\n        }\r\n    };\r\n}\r\n"]}