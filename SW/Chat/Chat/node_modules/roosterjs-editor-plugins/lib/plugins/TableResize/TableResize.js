"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TableEditor_1 = require("./editors/TableEditor");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
var TABLE_RESIZER_LENGTH = 12;
/**
 * TableResize plugin, provides the ability to resize a table by drag-and-drop
 */
var TableResize = /** @class */ (function () {
    /**
     * Construct a new instance of TableResize plugin
     * @param onShowHelperElement An optional callback to allow customize helper element of table resizing.
     * To customize the helper element, add this callback and change the attributes of elementData then it
     * will be picked up by TableResize code
     * @param anchorContainerSelector An optional selector string to specify the container to host the plugin.
     * The container must not be affected by transform: scale(), otherwise the position calculation will be wrong.
     * If not specified, the plugin will be inserted in document.body
     */
    function TableResize(onShowHelperElement, anchorContainerSelector) {
        var _this = this;
        this.onShowHelperElement = onShowHelperElement;
        this.anchorContainerSelector = anchorContainerSelector;
        this.editor = null;
        this.onMouseMoveDisposer = null;
        this.tableRectMap = null;
        this.tableEditor = null;
        this.onMouseOut = function (_a) {
            var relatedTarget = _a.relatedTarget, currentTarget = _a.currentTarget;
            if ((0, roosterjs_editor_dom_1.safeInstanceOf)(relatedTarget, 'HTMLElement') &&
                (0, roosterjs_editor_dom_1.safeInstanceOf)(currentTarget, 'HTMLElement') &&
                _this.tableEditor &&
                !_this.tableEditor.isOwnedElement(relatedTarget) &&
                !(0, roosterjs_editor_dom_1.contains)(currentTarget, relatedTarget)) {
                _this.setTableEditor(null);
            }
        };
        this.onMouseMove = function (event) {
            var _a;
            var e = event;
            if (e.buttons > 0 || !_this.editor) {
                return;
            }
            _this.ensureTableRects();
            var editorWindow = _this.editor.getDocument().defaultView || window;
            var x = e.pageX - editorWindow.scrollX;
            var y = e.pageY - editorWindow.scrollY;
            var currentTable = null;
            if (_this.tableRectMap) {
                for (var i = _this.tableRectMap.length - 1; i >= 0; i--) {
                    var _b = _this.tableRectMap[i], table = _b.table, rect = _b.rect;
                    if (x >= rect.left - TABLE_RESIZER_LENGTH &&
                        x <= rect.right + TABLE_RESIZER_LENGTH &&
                        y >= rect.top - TABLE_RESIZER_LENGTH &&
                        y <= rect.bottom + TABLE_RESIZER_LENGTH) {
                        currentTable = table;
                        break;
                    }
                }
            }
            _this.setTableEditor(currentTable, e);
            (_a = _this.tableEditor) === null || _a === void 0 ? void 0 : _a.onMouseMove(x, y);
        };
        this.invalidateTableRects = function () {
            _this.tableRectMap = null;
        };
    }
    /**
     * Get a friendly name of  this plugin
     */
    TableResize.prototype.getName = function () {
        return 'TableResize';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    TableResize.prototype.initialize = function (editor) {
        this.editor = editor;
        this.onMouseMoveDisposer = this.editor.addDomEventHandler({
            mousemove: this.onMouseMove,
        });
        var scrollContainer = this.editor.getScrollContainer();
        scrollContainer.addEventListener('mouseout', this.onMouseOut);
    };
    /**
     * Dispose this plugin
     */
    TableResize.prototype.dispose = function () {
        var _a, _b;
        var scrollContainer = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.getScrollContainer();
        scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.removeEventListener('mouseout', this.onMouseOut);
        (_b = this.onMouseMoveDisposer) === null || _b === void 0 ? void 0 : _b.call(this);
        this.invalidateTableRects();
        this.disposeTableEditor();
        this.editor = null;
        this.onMouseMoveDisposer = null;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    TableResize.prototype.onPluginEvent = function (e) {
        switch (e.eventType) {
            case 3 /* Input */:
            case 7 /* ContentChanged */:
            case 14 /* Scroll */:
            case 21 /* ZoomChanged */:
                this.setTableEditor(null);
                this.invalidateTableRects();
                break;
        }
    };
    /**
     * @internal Public only for unit test
     * @param table Table to use when setting the Editors
     * @param event (Optional) Mouse event
     */
    TableResize.prototype.setTableEditor = function (table, event) {
        if (this.tableEditor && !this.tableEditor.isEditing() && table != this.tableEditor.table) {
            this.disposeTableEditor();
        }
        if (!this.tableEditor && table && this.editor && table.rows.length > 0) {
            var container = this.anchorContainerSelector
                ? this.editor.getDocument().querySelector(this.anchorContainerSelector)
                : undefined;
            this.tableEditor = new TableEditor_1.default(this.editor, table, this.invalidateTableRects, this.onShowHelperElement, (0, roosterjs_editor_dom_1.safeInstanceOf)(container, 'HTMLElement') ? container : undefined, event === null || event === void 0 ? void 0 : event.currentTarget);
        }
    };
    TableResize.prototype.disposeTableEditor = function () {
        var _a;
        (_a = this.tableEditor) === null || _a === void 0 ? void 0 : _a.dispose();
        this.tableEditor = null;
    };
    TableResize.prototype.ensureTableRects = function () {
        var _this = this;
        if (!this.tableRectMap && this.editor) {
            this.tableRectMap = [];
            this.editor.queryElements('table', function (table) {
                if (table.isContentEditable) {
                    var rect = (0, roosterjs_editor_dom_1.normalizeRect)(table.getBoundingClientRect());
                    if (rect && _this.tableRectMap) {
                        _this.tableRectMap.push({
                            table: table,
                            rect: rect,
                        });
                    }
                }
            });
        }
    };
    return TableResize;
}());
exports.default = TableResize;
//# sourceMappingURL=TableResize.js.map