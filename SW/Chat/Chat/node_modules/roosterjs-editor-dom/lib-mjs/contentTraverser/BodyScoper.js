import contains from '../utils/contains';
import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';
import getFirstLastBlockElement from '../blockElements/getFirstLastBlockElement';
import getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';
import { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';
/**
 * @internal
 * provides a scope object for traversing the entire editor body starting from the beginning
 */
var BodyScoper = /** @class */ (function () {
    /**
     * Construct a new instance of BodyScoper class
     * @param rootNode Root node of the body
     * @param startNode The node to start from. If not passed, it will start from the beginning of the body
     */
    function BodyScoper(rootNode, startNode) {
        this.rootNode = rootNode;
        this.startNode = contains(rootNode, startNode) ? startNode : null;
    }
    /**
     * Get the start block element
     */
    BodyScoper.prototype.getStartBlockElement = function () {
        return this.startNode
            ? getBlockElementAtNode(this.rootNode, this.startNode)
            : getFirstLastBlockElement(this.rootNode, true /*isFirst*/);
    };
    /**
     * Get the start inline element
     */
    BodyScoper.prototype.getStartInlineElement = function () {
        return this.startNode
            ? getInlineElementAtNode(this.rootNode, this.startNode)
            : getFirstInlineElement(this.rootNode);
    };
    /**
     * Since the scope is global, all blocks under the root node are in scope
     */
    BodyScoper.prototype.isBlockInScope = function (blockElement) {
        return contains(this.rootNode, blockElement.getStartNode());
    };
    /**
     * Since we're at body scope, inline elements never need to be trimmed
     */
    BodyScoper.prototype.trimInlineElement = function (inlineElement) {
        return inlineElement;
    };
    return BodyScoper;
}());
export default BodyScoper;
//# sourceMappingURL=BodyScoper.js.map