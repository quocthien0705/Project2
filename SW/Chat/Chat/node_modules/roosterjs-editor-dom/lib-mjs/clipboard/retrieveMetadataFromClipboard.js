import getTagOfNode from '../utils/getTagOfNode';
import toArray from '../jsUtils/toArray';
var START_FRAGMENT = '<!--StartFragment-->';
var END_FRAGMENT = '<!--EndFragment-->';
/**
 * Retrieves the metadata from the content inside of the clipboard
 * @param doc Document parsed from the clipboard
 * @param event Before Paste event
 * @param trustedHTMLHandler the trusted html handler to sanitize the content.
 */
export default function retrieveMetadataFromClipboard(doc, event, trustedHTMLHandler) {
    var _a, _b;
    var clipboardData = event.clipboardData, sanitizingOption = event.sanitizingOption;
    var rawHtml = clipboardData.rawHtml;
    if (rawHtml && (doc === null || doc === void 0 ? void 0 : doc.body)) {
        var attributes = (_a = doc.querySelector('html')) === null || _a === void 0 ? void 0 : _a.attributes;
        (attributes ? toArray(attributes) : []).reduce(function (attrs, attr) {
            attrs[attr.name] = attr.value;
            return attrs;
        }, event.htmlAttributes);
        toArray(doc.querySelectorAll('meta')).reduce(function (attrs, meta) {
            attrs[meta.name] = meta.content;
            return attrs;
        }, event.htmlAttributes);
        clipboardData.htmlFirstLevelChildTags = [];
        doc === null || doc === void 0 ? void 0 : doc.body.normalize();
        for (var i = 0; i < (doc === null || doc === void 0 ? void 0 : doc.body.childNodes.length); i++) {
            var node = doc === null || doc === void 0 ? void 0 : doc.body.childNodes.item(i);
            if (node.nodeType == Node.TEXT_NODE) {
                var trimmedString = (_b = node.nodeValue) === null || _b === void 0 ? void 0 : _b.replace(/(\r\n|\r|\n)/gm, '').trim();
                if (!trimmedString) {
                    continue;
                }
            }
            var nodeTag = getTagOfNode(node);
            if (node.nodeType != Node.COMMENT_NODE) {
                clipboardData.htmlFirstLevelChildTags.push(nodeTag);
            }
        }
        // Move all STYLE nodes into header, and save them into sanitizing options.
        // Because if we directly move them into a fragment, all sheets under STYLE will be lost.
        processStyles(doc, function (style) {
            doc === null || doc === void 0 ? void 0 : doc.head.appendChild(style);
            sanitizingOption.additionalGlobalStyleNodes.push(style);
        });
        var startIndex = rawHtml.indexOf(START_FRAGMENT);
        var endIndex = rawHtml.lastIndexOf(END_FRAGMENT);
        if (startIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {
            event.htmlBefore = rawHtml.substr(0, startIndex);
            event.htmlAfter = rawHtml.substr(endIndex + END_FRAGMENT.length);
            clipboardData.html = rawHtml.substring(startIndex + START_FRAGMENT.length, endIndex);
            doc.body.innerHTML = trustedHTMLHandler(clipboardData.html);
            // Remove style nodes just added by setting innerHTML of body since we already have all
            // style nodes in header.
            // Here we use doc.body instead of doc because we only want to remove STYLE nodes under BODY
            // and the nodes under HEAD are still used when convert global CSS to inline
            processStyles(doc.body, function (style) { var _a; return (_a = style.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(style); });
        }
    }
}
function processStyles(node, callback) {
    toArray(node.querySelectorAll('style')).forEach(callback);
}
//# sourceMappingURL=retrieveMetadataFromClipboard.js.map