{"version":3,"file":"retrieveMetadataFromClipboard.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/clipboard/retrieveMetadataFromClipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import getTagOfNode from '../utils/getTagOfNode';\nimport toArray from '../jsUtils/toArray';\nimport type { BeforePasteEvent, TrustedHTMLHandler } from 'roosterjs-editor-types';\n\nconst START_FRAGMENT = '<!--StartFragment-->';\nconst END_FRAGMENT = '<!--EndFragment-->';\n\n/**\n * Retrieves the metadata from the content inside of the clipboard\n * @param doc Document parsed from the clipboard\n * @param event Before Paste event\n * @param trustedHTMLHandler the trusted html handler to sanitize the content.\n */\nexport default function retrieveMetadataFromClipboard(\n    doc: Document | undefined,\n    event: BeforePasteEvent,\n    trustedHTMLHandler: TrustedHTMLHandler\n) {\n    const { clipboardData, sanitizingOption } = event;\n    const { rawHtml } = clipboardData;\n    if (rawHtml && doc?.body) {\n        const attributes = doc.querySelector('html')?.attributes;\n        (attributes ? toArray(attributes) : []).reduce((attrs, attr) => {\n            attrs[attr.name] = attr.value;\n            return attrs;\n        }, event.htmlAttributes);\n        toArray(doc.querySelectorAll('meta')).reduce((attrs, meta) => {\n            attrs[meta.name] = meta.content;\n            return attrs;\n        }, event.htmlAttributes);\n\n        clipboardData.htmlFirstLevelChildTags = [];\n        doc?.body.normalize();\n\n        for (let i = 0; i < doc?.body.childNodes.length; i++) {\n            const node = doc?.body.childNodes.item(i);\n            if (node.nodeType == Node.TEXT_NODE) {\n                const trimmedString = node.nodeValue?.replace(/(\\r\\n|\\r|\\n)/gm, '').trim();\n                if (!trimmedString) {\n                    continue;\n                }\n            }\n            const nodeTag = getTagOfNode(node);\n            if (node.nodeType != Node.COMMENT_NODE) {\n                clipboardData.htmlFirstLevelChildTags.push(nodeTag);\n            }\n        }\n        // Move all STYLE nodes into header, and save them into sanitizing options.\n        // Because if we directly move them into a fragment, all sheets under STYLE will be lost.\n        processStyles(doc, style => {\n            doc?.head.appendChild(style);\n            sanitizingOption.additionalGlobalStyleNodes.push(style);\n        });\n\n        const startIndex = rawHtml.indexOf(START_FRAGMENT);\n        const endIndex = rawHtml.lastIndexOf(END_FRAGMENT);\n\n        if (startIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\n            event.htmlBefore = rawHtml.substr(0, startIndex);\n            event.htmlAfter = rawHtml.substr(endIndex + END_FRAGMENT.length);\n            clipboardData.html = rawHtml.substring(startIndex + START_FRAGMENT.length, endIndex);\n            doc.body.innerHTML = trustedHTMLHandler(clipboardData.html);\n\n            // Remove style nodes just added by setting innerHTML of body since we already have all\n            // style nodes in header.\n            // Here we use doc.body instead of doc because we only want to remove STYLE nodes under BODY\n            // and the nodes under HEAD are still used when convert global CSS to inline\n            processStyles(doc.body, style => style.parentNode?.removeChild(style));\n        }\n    }\n}\n\nfunction processStyles(node: ParentNode, callback: (style: HTMLStyleElement) => void) {\n    toArray(node.querySelectorAll('style')).forEach(callback);\n}\n"]}