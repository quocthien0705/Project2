{"version":3,"file":"addDelimiters.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/delimiter/addDelimiters.ts"],"names":[],"mappings":";AAAA,OAAO,aAAa,MAAM,wBAAwB,CAAC;AACnD,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAGhE,IAAM,gBAAgB,GAAG,QAAQ,CAAC;AAElC;;;GAGG;AACH,MAAM,CAAC,OAAO,UAAU,aAAa,CAAC,IAAa;IAC3C,IAAA,KAAA,OAAoC,aAAa,CAAC,IAAI,CAAC,IAAA,EAAtD,cAAc,QAAA,EAAE,eAAe,QAAuB,CAAC;IAE5D,IAAI,CAAC,cAAc,EAAE;QACjB,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;KAC5C;IACD,IAAI,CAAC,eAAe,EAAE;QAClB,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC9C;IACD,OAAO,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;AAC7C,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,OAAgB;IAC9C,OAAO,eAAe,CAAC,OAAO,+CAAmC,CAAC;AACtE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAC,OAAgB;IAC/C,OAAO,eAAe,CAAC,OAAO,iDAAoC,CAAC;AACvE,CAAC;AAED,SAAS,aAAa,CAAC,aAAsB;IACzC,IAAM,MAAM,GAA4B,EAAE,CAAC;IACnC,IAAA,kBAAkB,GAA6B,aAAa,mBAA1C,EAAE,sBAAsB,GAAK,aAAa,uBAAlB,CAAmB;IACrE,MAAM,CAAC,IAAI,CACP,WAAW,CAAC,kBAAkB,+CAAmC,EACjE,WAAW,CAAC,sBAAsB,iDAAoC,CACzE,CAAC;IAEF,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,WAAW,CAAC,EAAkB,EAAE,SAAiB;IACtD,OAAO,EAAE,IAAI,uBAAuB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;AAClG,CAAC;AAED,SAAS,eAAe,CAAC,OAAgB,EAAE,cAAgC;IACvE,IAAM,IAAI,GAAG,aAAa,CACtB;QACI,GAAG,EAAE,MAAM;QACX,SAAS,EAAE,cAAc;QACzB,QAAQ,EAAE,CAAC,gBAAgB,CAAC;KAC/B,EACD,OAAO,CAAC,aAAa,CACT,CAAC;IACjB,IAAI,IAAI,EAAE;QACN,IAAM,cAAc,GAChB,cAAc,gDAAoC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QACpF,OAAO,CAAC,qBAAqB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;KACvD;IAED,OAAO,IAAI,CAAC;AAChB,CAAC","sourcesContent":["import createElement from '../utils/createElement';\nimport getDelimiterFromElement from './getDelimiterFromElement';\nimport { DelimiterClasses } from 'roosterjs-editor-types';\n\nconst ZERO_WIDTH_SPACE = '\\u200B';\n\n/**\n * Adds delimiters to the element provided. If the delimiters already exists, will not be added\n * @param node the node to add the delimiters\n */\nexport default function addDelimiters(node: Element): Element[] {\n    let [delimiterAfter, delimiterBefore] = getDelimiters(node);\n\n    if (!delimiterAfter) {\n        delimiterAfter = addDelimiterAfter(node);\n    }\n    if (!delimiterBefore) {\n        delimiterBefore = addDelimiterBefore(node);\n    }\n    return [delimiterAfter, delimiterBefore];\n}\n\n/**\n * Adds delimiter after the element provided.\n * @param element element to use\n */\nexport function addDelimiterAfter(element: Element) {\n    return insertDelimiter(element, DelimiterClasses.DELIMITER_AFTER);\n}\n\n/**\n * Adds delimiter before the element provided.\n * @param element element to use\n */\nexport function addDelimiterBefore(element: Element) {\n    return insertDelimiter(element, DelimiterClasses.DELIMITER_BEFORE);\n}\n\nfunction getDelimiters(entityWrapper: Element): (Element | undefined)[] {\n    const result: (Element | undefined)[] = [];\n    const { nextElementSibling, previousElementSibling } = entityWrapper;\n    result.push(\n        isDelimiter(nextElementSibling, DelimiterClasses.DELIMITER_AFTER),\n        isDelimiter(previousElementSibling, DelimiterClasses.DELIMITER_BEFORE)\n    );\n\n    return result;\n}\n\nfunction isDelimiter(el: Element | null, className: string): Element | undefined {\n    return el && getDelimiterFromElement(el) && el.classList.contains(className) ? el : undefined;\n}\n\nfunction insertDelimiter(element: Element, delimiterClass: DelimiterClasses) {\n    const span = createElement(\n        {\n            tag: 'span',\n            className: delimiterClass,\n            children: [ZERO_WIDTH_SPACE],\n        },\n        element.ownerDocument\n    ) as HTMLElement;\n    if (span) {\n        const insertPosition: InsertPosition =\n            delimiterClass == DelimiterClasses.DELIMITER_AFTER ? 'afterend' : 'beforebegin';\n        element.insertAdjacentElement(insertPosition, span);\n    }\n\n    return span;\n}\n"]}