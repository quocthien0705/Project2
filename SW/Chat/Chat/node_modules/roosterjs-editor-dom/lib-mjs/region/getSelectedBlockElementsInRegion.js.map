{"version":3,"file":"getSelectedBlockElementsInRegion.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/region/getSelectedBlockElementsInRegion.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,sCAAsC,CAAC;AACpE,OAAO,aAAa,MAAM,wBAAwB,CAAC;AACnD,OAAO,qBAAqB,MAAM,wCAAwC,CAAC;AAC3E,OAAO,yBAAyB,MAAM,6BAA6B,CAAC;AACpE,OAAO,cAAc,MAAM,yBAAyB,CAAC;AAIrD;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,UAAU,gCAAgC,CACpD,UAAsB,EACtB,kBAA4B,EAC5B,UAAoB;IAEpB,IAAM,KAAK,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,MAAM,GAAmB,EAAE,CAAC;IAEhC,IAAI,KAAK,EAAE;QACC,IAAA,QAAQ,GAAe,UAAU,SAAzB,EAAE,QAAQ,GAAK,UAAU,SAAf,CAAgB;QAC1C,IAAM,SAAS,GAAG,gBAAgB,CAAC,wBAAwB,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEvF,KACI,IAAI,KAAK,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,mBAAmB,EAC1C,CAAC,CAAC,KAAK,EACP,KAAK,GAAG,SAAS,CAAC,mBAAmB,EAAE,EACzC;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,2BAA2B;QAC3B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;;YACxB,IAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YACvC,IAAM,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;YAEnC,IAAI,SAAS,IAAI,OAAO,IAAI,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE;gBACzE,MAAA,SAAS,CAAC,UAAU,0CAAE,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC7C,OAAO,KAAK,CAAC;aAChB;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC,CAAC,CAAC;KACN;IAED,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,IAAI,kBAAkB,EAAE;QAC3F,IAAM,OAAO,GAAG,aAAa,oBAEzB,UAAU,CAAC,QAAQ,CAAC,aAAa,CACpC,CAAC;QACF,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAQ,CAAC,CAAC;QAE1C,IAAM,KAAK,GAAG,qBAAqB,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAElE,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import ContentTraverser from '../contentTraverser/ContentTraverser';\nimport createElement from '../utils/createElement';\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\nimport getSelectionRangeInRegion from './getSelectionRangeInRegion';\nimport shouldSkipNode from '../utils/shouldSkipNode';\nimport { KnownCreateElementDataIndex } from 'roosterjs-editor-types';\nimport type { BlockElement, RegionBase } from 'roosterjs-editor-types';\n\n/**\n * Get all block elements covered by the selection under this region\n * @param regionBase The region to get block elements from\n * @param createBlockIfEmpty When set to true, a new empty block element will be created if there is not\n * any blocks in the region. Default value is false\n * @param deprecated Deprecated parameter, not used\n */\nexport default function getSelectedBlockElementsInRegion(\n    regionBase: RegionBase,\n    createBlockIfEmpty?: boolean,\n    deprecated?: boolean\n): BlockElement[] {\n    const range = getSelectionRangeInRegion(regionBase);\n    let blocks: BlockElement[] = [];\n\n    if (range) {\n        const { rootNode, skipTags } = regionBase;\n        const traverser = ContentTraverser.createSelectionTraverser(rootNode, range, skipTags);\n\n        for (\n            let block = traverser?.currentBlockElement;\n            !!block;\n            block = traverser.getNextBlockElement()\n        ) {\n            blocks.push(block);\n        }\n\n        // Remove meaningless nodes\n        blocks = blocks.filter(block => {\n            const startNode = block.getStartNode();\n            const endNode = block.getEndNode();\n\n            if (startNode == endNode && shouldSkipNode(startNode, true /*ignoreSpace*/)) {\n                startNode.parentNode?.removeChild(startNode);\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n\n    if (blocks.length == 0 && regionBase && !regionBase.rootNode.firstChild && createBlockIfEmpty) {\n        const newNode = createElement(\n            KnownCreateElementDataIndex.EmptyLine,\n            regionBase.rootNode.ownerDocument\n        );\n        regionBase.rootNode.appendChild(newNode!);\n\n        const block = getBlockElementAtNode(regionBase.rootNode, newNode);\n\n        if (block) {\n            blocks.push(block);\n        }\n    }\n\n    return blocks;\n}\n"]}