import ContentTraverser from '../contentTraverser/ContentTraverser';
import createElement from '../utils/createElement';
import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';
import getSelectionRangeInRegion from './getSelectionRangeInRegion';
import shouldSkipNode from '../utils/shouldSkipNode';
/**
 * Get all block elements covered by the selection under this region
 * @param regionBase The region to get block elements from
 * @param createBlockIfEmpty When set to true, a new empty block element will be created if there is not
 * any blocks in the region. Default value is false
 * @param deprecated Deprecated parameter, not used
 */
export default function getSelectedBlockElementsInRegion(regionBase, createBlockIfEmpty, deprecated) {
    var range = getSelectionRangeInRegion(regionBase);
    var blocks = [];
    if (range) {
        var rootNode = regionBase.rootNode, skipTags = regionBase.skipTags;
        var traverser = ContentTraverser.createSelectionTraverser(rootNode, range, skipTags);
        for (var block = traverser === null || traverser === void 0 ? void 0 : traverser.currentBlockElement; !!block; block = traverser.getNextBlockElement()) {
            blocks.push(block);
        }
        // Remove meaningless nodes
        blocks = blocks.filter(function (block) {
            var _a;
            var startNode = block.getStartNode();
            var endNode = block.getEndNode();
            if (startNode == endNode && shouldSkipNode(startNode, true /*ignoreSpace*/)) {
                (_a = startNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(startNode);
                return false;
            }
            else {
                return true;
            }
        });
    }
    if (blocks.length == 0 && regionBase && !regionBase.rootNode.firstChild && createBlockIfEmpty) {
        var newNode = createElement(1 /* EmptyLine */, regionBase.rootNode.ownerDocument);
        regionBase.rootNode.appendChild(newNode);
        var block = getBlockElementAtNode(regionBase.rootNode, newNode);
        if (block) {
            blocks.push(block);
        }
    }
    return blocks;
}
//# sourceMappingURL=getSelectedBlockElementsInRegion.js.map