import createRange from '../selection/createRange';
import Position from '../selection/Position';
import { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';
/**
 * Get the selection range in the given region.
 * The original range can cover multiple regions, this function will narrow the original selection
 * of a region into current region
 * @param regionBase The region to get range from
 */
export default function getSelectionRangeInRegion(regionBase) {
    if (!regionBase) {
        return null;
    }
    var nodeBefore = regionBase.nodeBefore, nodeAfter = regionBase.nodeAfter, rootNode = regionBase.rootNode, skipTags = regionBase.skipTags;
    var startNode = nodeBefore
        ? getNextLeafSibling(regionBase.rootNode, nodeBefore, regionBase.skipTags)
        : rootNode.firstChild;
    var endNode = nodeAfter
        ? getPreviousLeafSibling(rootNode, nodeAfter, skipTags)
        : rootNode.lastChild;
    var regionRange = startNode && endNode && createRange(startNode, endNode);
    if (!isRegion(regionBase)) {
        return regionRange;
    }
    else if (regionRange) {
        var regionStart = Position.getStart(regionRange).normalize();
        var regionEnd = Position.getEnd(regionRange).normalize();
        var fullSelectionEnd = regionBase.fullSelectionEnd, fullSelectionStart = regionBase.fullSelectionStart;
        if (!fullSelectionStart.isAfter(regionEnd) && !regionStart.isAfter(fullSelectionEnd)) {
            var start = fullSelectionStart.isAfter(regionStart)
                ? fullSelectionStart
                : regionStart;
            var end = fullSelectionEnd.isAfter(regionEnd) ? regionEnd : fullSelectionEnd;
            return createRange(start, end);
        }
    }
    return null;
}
function isRegion(regionBase) {
    var region = regionBase;
    return !!region.fullSelectionEnd && !!region.fullSelectionStart;
}
//# sourceMappingURL=getSelectionRangeInRegion.js.map