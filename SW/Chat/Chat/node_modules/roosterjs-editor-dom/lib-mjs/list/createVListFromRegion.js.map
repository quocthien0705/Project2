{"version":3,"file":"createVListFromRegion.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/list/createVListFromRegion.ts"],"names":[],"mappings":"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","sourcesContent":["import createElement from '../utils/createElement';\nimport getRootListNode from './getRootListNode';\nimport getSelectedBlockElementsInRegion from '../region/getSelectedBlockElementsInRegion';\nimport isNodeInRegion from '../region/isNodeInRegion';\nimport Position from '../selection/Position';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport shouldSkipNode from '../utils/shouldSkipNode';\nimport toArray from '../jsUtils/toArray';\nimport VList from './VList';\nimport wrap from '../utils/wrap';\nimport { getLeafSibling } from '../utils/getLeafSibling';\nimport { isListElement } from './getListTypeFromNode';\nimport { KnownCreateElementDataIndex, ListType, PositionType } from 'roosterjs-editor-types';\nimport type { Region } from 'roosterjs-editor-types';\n\nconst ListSelector = 'ol,ul';\n\n/**\n * Create a VList object from the given region.\n * @param region The region to get VList from\n * @param includeSiblingLists True to also try get lists before and after the selection and merge them together,\n * false to only include the list for the selected blocks\n * @param startNode (Optional) When specified, try get VList which will contain this node.\n * If not specified, get VList from selection of this region\n */\nexport default function createVListFromRegion(\n    region: Region,\n    includeSiblingLists?: boolean,\n    startNode?: Node\n): VList | null {\n    if (!region) {\n        return null;\n    }\n\n    let nodes: Node[] = [];\n\n    if (startNode) {\n        const list = getRootListNode(region, ListSelector, startNode);\n        if (list) {\n            nodes.push(list);\n        }\n    } else {\n        const blocks = getSelectedBlockElementsInRegion(\n            region,\n            undefined,\n            true /* shouldApplyFormatToSpan */\n        );\n        blocks.forEach(block => {\n            const list = getRootListNode(region, ListSelector, block.getStartNode());\n\n            if (list) {\n                if (nodes[nodes.length - 1] != list) {\n                    nodes.push(list);\n                }\n                if (\n                    nodes.length == 1 &&\n                    safeInstanceOf(list, 'HTMLOListElement') &&\n                    list.start > 1\n                ) {\n                    // Do not include sibling lists if this list is not start from 1\n                    includeSiblingLists = false;\n                }\n            } else {\n                nodes.push(block.collapseToSingleElement());\n            }\n        });\n\n        if (nodes.length == 0 && !region.rootNode.firstChild) {\n            const newNode = createElement(\n                KnownCreateElementDataIndex.EmptyLine,\n                region.rootNode.ownerDocument\n            )!;\n            region.rootNode.appendChild(newNode);\n            nodes.push(newNode);\n            region.fullSelectionStart = new Position(newNode, PositionType.Begin);\n            region.fullSelectionEnd = new Position(newNode, PositionType.End);\n        }\n\n        if (includeSiblingLists) {\n            tryIncludeSiblingNode(region, nodes, false /*isNext*/);\n            tryIncludeSiblingNode(region, nodes, true /*isNext*/);\n        }\n\n        nodes = nodes.filter(node => !shouldSkipNode(node, true /*ignoreSpace*/));\n    }\n\n    let vList: VList | null = null;\n\n    if (nodes.length > 0) {\n        const firstNode = nodes.shift() || null;\n        vList = isListElement(firstNode)\n            ? new VList(firstNode)\n            : firstNode\n            ? createVListFromItemNode(firstNode)\n            : null;\n\n        if (vList) {\n            nodes.forEach(node => {\n                if (isListElement(node)) {\n                    vList!.mergeVList(new VList(node));\n                } else {\n                    vList!.appendItem(node, ListType.None);\n                }\n            });\n        }\n    }\n\n    return vList;\n}\n\nfunction tryIncludeSiblingNode(region: Region, nodes: Node[], isNext: boolean) {\n    let node: Node | null = nodes[isNext ? nodes.length - 1 : 0];\n    node = getLeafSibling(region.rootNode, node, isNext, region.skipTags, true /*ignoreSpace*/);\n    node = getRootListNode(region, ListSelector, node);\n    if (isNodeInRegion(region, node) && isListElement(node)) {\n        if (isNext) {\n            if (!safeInstanceOf(node, 'HTMLOListElement') || node.start == 1) {\n                // Only include sibling list when\n                // 1. This is a unordered list, OR\n                // 2. This list starts from 1\n                nodes.push(node);\n            }\n        } else {\n            nodes.unshift(node);\n        }\n    }\n}\n\nfunction createVListFromItemNode(node: Node): VList {\n    // Wrap all child nodes under a single one, and put the new list under original root node\n    // so that the list can carry over styles under the root node.\n    const childNodes = toArray(node.childNodes);\n    const nodeForItem = childNodes.length == 1 ? childNodes[0] : wrap(childNodes, 'SPAN');\n\n    // Create a temporary OL root element for this list.\n    const listNode = node.ownerDocument!.createElement('ol'); // Either OL or UL is ok here\n    node.appendChild(listNode);\n\n    // Create the VList and append items\n    const vList = new VList(listNode);\n    vList.appendItem(nodeForItem, ListType.None);\n\n    return vList;\n}\n"]}