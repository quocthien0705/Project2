import { __values } from "tslib";
import getObjectKeys from '../jsUtils/getObjectKeys';
var RomanValues = {
    M: 1000,
    CM: 900,
    D: 500,
    CD: 400,
    C: 100,
    XC: 90,
    L: 50,
    XL: 40,
    X: 10,
    IX: 9,
    V: 5,
    IV: 4,
    I: 1,
};
/**
 * Convert decimal numbers into roman numbers
 * @param decimal The decimal number that needs to be converted
 * @param isLowerCase if true the roman value will appear in lower case
 * @returns
 */
export default function convertDecimalsToRoman(decimal, isLowerCase) {
    var e_1, _a;
    var romanValue = '';
    try {
        for (var _b = __values(getObjectKeys(RomanValues)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var i = _c.value;
            var timesRomanCharAppear = Math.floor(decimal / RomanValues[i]);
            decimal = decimal - timesRomanCharAppear * RomanValues[i];
            romanValue = romanValue + i.repeat(timesRomanCharAppear);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return isLowerCase ? romanValue.toLocaleLowerCase() : romanValue;
}
//# sourceMappingURL=convertDecimalsToRomans.js.map