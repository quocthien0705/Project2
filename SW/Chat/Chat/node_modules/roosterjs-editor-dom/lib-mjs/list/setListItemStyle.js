import ContentTraverser from '../contentTraverser/ContentTraverser';
import findClosestElementAncestor from '../utils/findClosestElementAncestor';
import safeInstanceOf from '../utils/safeInstanceOf';
/**
 * Set the Style of a List Item provided, with the styles that the inline child elements have
 * If the child inline elements have different styles, it will not modify the styles of the list item
 * @param element the LI Element to set the styles
 * @param styles The styles that should be applied to the element.
 * @param isCssStyle True means the given styles are CSS style names, false means they are HTML attributes @default true
 */
export default function setListItemStyle(element, styles, isCssStyle) {
    if (isCssStyle === void 0) { isCssStyle = true; }
    var elementsStyles = getInlineChildElementsStyle(element, styles, isCssStyle);
    styles.forEach(function (styleName) {
        var styleValues = elementsStyles.map(function (style) {
            return style[styleName] !== undefined ? style[styleName] : '';
        });
        if (styleValues &&
            (styleValues.length == 1 || new Set(styleValues).size == 1) &&
            styleValues[0]) {
            if (isCssStyle) {
                element.style.setProperty(styleName, styleValues[0]);
            }
            else {
                element.setAttribute(styleName, styleValues[0]);
            }
        }
    });
}
function getInlineChildElementsStyle(element, styles, isCssStyle) {
    var _a, _b;
    var result = [];
    var contentTraverser = ContentTraverser.createBodyTraverser(element);
    var currentInlineElement = null;
    var _loop_1 = function () {
        currentInlineElement = contentTraverser.currentInlineElement;
        var currentNode = (currentInlineElement === null || currentInlineElement === void 0 ? void 0 : currentInlineElement.getContainerNode()) || null;
        var currentStyle = null;
        currentNode = currentNode ? findClosestElementAncestor(currentNode) : null;
        var _loop_2 = function () {
            var element_1 = currentNode;
            styles.forEach(function (styleName) {
                var styleValue = isCssStyle
                    ? element_1.style.getPropertyValue(styleName)
                    : element_1.getAttribute(styleName);
                if (!currentStyle) {
                    currentStyle = {};
                }
                if (styleValue && !currentStyle[styleName]) {
                    currentStyle[styleName] = styleValue;
                }
            });
            if (((_b = currentNode === null || currentNode === void 0 ? void 0 : currentNode.parentNode) === null || _b === void 0 ? void 0 : _b.childNodes.length) === 1) {
                currentNode = currentNode.parentNode;
            }
            else {
                currentNode = null;
            }
        };
        // we should consider of when it is the single child node of element, the parentNode's style should add
        // such as the "i", "b", "span" node in <li><span><b><i>aa</i></b></span></li>
        while (currentNode &&
            currentNode !== element &&
            safeInstanceOf(currentNode, 'HTMLElement') &&
            (result.length == 0 || (((_a = currentNode.textContent) === null || _a === void 0 ? void 0 : _a.trim().length) || 0) > 0)) {
            _loop_2();
        }
        if (currentStyle) {
            result.push(currentStyle);
        }
        contentTraverser.getNextInlineElement();
    };
    while (contentTraverser.currentInlineElement != currentInlineElement) {
        _loop_1();
    }
    return result;
}
//# sourceMappingURL=setListItemStyle.js.map