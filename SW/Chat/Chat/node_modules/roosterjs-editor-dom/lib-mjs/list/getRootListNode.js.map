{"version":3,"file":"getRootListNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/list/getRootListNode.ts"],"names":[],"mappings":"AAAA,OAAO,0BAA0B,MAAM,qCAAqC,CAAC;AAa7E;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,UAAU,eAAe,CACnC,MAAkB,EAClB,QAAmB,EACnB,IAAiB;IAEjB,IAAI,IAAI,GACJ,MAAM;QACL,0BAA0B,CACvB,IAAI,EACJ,MAAM,CAAC,QAAQ,EACf,QAAQ,CACsB,CAAC;IAEvC,IAAI,IAAI,EAAE;QACN,IAAI,QAAQ,SAA8B,CAAC;QAC3C,OACI,CAAC,QAAQ,GAAG,0BAA0B,CAClC,IAAI,CAAC,UAAU,EACf,MAAM,CAAC,QAAQ,EACf,QAAQ,CACqB,CAAC,EACpC;YACE,IAAI,GAAG,QAAQ,CAAC;SACnB;KACJ;IAED,OAAO,IAAI,CAAC;AAChB,CAAC","sourcesContent":["import findClosestElementAncestor from '../utils/findClosestElementAncestor';\nimport type { RegionBase } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * A type map from selector string to HTML element type\n */\nexport interface SelectorToTypeMap {\n    ol: HTMLOListElement;\n    ul: HTMLUListElement;\n    'ol,ul': HTMLOListElement | HTMLUListElement;\n}\n\n/**\n * @internal\n * Get Root list node from the given node within the given region\n * @param region Region to scope the search into\n * @param selector The selector to search\n * @param node The start node\n */\nexport default function getRootListNode<TSelector extends keyof SelectorToTypeMap>(\n    region: RegionBase,\n    selector: TSelector,\n    node: Node | null\n): SelectorToTypeMap[TSelector] {\n    let list =\n        region &&\n        (findClosestElementAncestor(\n            node,\n            region.rootNode,\n            selector\n        ) as SelectorToTypeMap[TSelector]);\n\n    if (list) {\n        let ancestor: SelectorToTypeMap[TSelector];\n        while (\n            (ancestor = findClosestElementAncestor(\n                list.parentNode,\n                region.rootNode,\n                selector\n            ) as SelectorToTypeMap[TSelector])\n        ) {\n            list = ancestor;\n        }\n    }\n\n    return list;\n}\n"]}