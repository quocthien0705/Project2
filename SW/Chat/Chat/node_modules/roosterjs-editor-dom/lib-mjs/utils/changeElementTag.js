import { __read } from "tslib";
import getComputedStyles from './getComputedStyles';
import getTagOfNode from './getTagOfNode';
import moveChildNodes from './moveChildNodes';
export default function changeElementTag(element, newTag) {
    var _a;
    if (!element || !newTag) {
        return null;
    }
    var origianlTag = getTagOfNode(element);
    if (origianlTag == newTag.toUpperCase()) {
        // Already in the target tag, no need to change
        return element;
    }
    var newElement = element.ownerDocument.createElement(newTag);
    for (var i = 0; i < element.attributes.length; i++) {
        var attr = element.attributes[i];
        newElement.setAttribute(attr.name, attr.value);
    }
    moveChildNodes(newElement, element);
    if (origianlTag == 'P' || getTagOfNode(newElement) == 'P') {
        _a = __read(getComputedStyles(element, [
            'margin-top',
            'margin-bottom',
        ]), 2), newElement.style.marginTop = _a[0], newElement.style.marginBottom = _a[1];
    }
    if (element.parentNode) {
        element.parentNode.replaceChild(newElement, element);
    }
    return newElement;
}
//# sourceMappingURL=changeElementTag.js.map