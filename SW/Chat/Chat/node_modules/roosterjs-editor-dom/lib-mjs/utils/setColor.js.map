{"version":3,"file":"setColor.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/setColor.ts"],"names":[],"mappings":"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","sourcesContent":["import parseColor from './parseColor';\nimport type { DarkColorHandler, ModeIndependentColor } from 'roosterjs-editor-types';\n\nconst WHITE = '#ffffff';\nconst GRAY = '#333333';\nconst BLACK = '#000000';\nconst TRANSPARENT = 'transparent';\nconst enum ColorTones {\n    BRIGHT,\n    DARK,\n    NONE,\n}\n\n//Using the HSL (hue, saturation and lightness) representation for RGB color values, if the value of the lightness is less than 20, the color is dark\nconst DARK_COLORS_LIGHTNESS = 20;\n//If the value of the lightness is more than 80, the color is bright\nconst BRIGHT_COLORS_LIGHTNESS = 80;\n\n/**\n * Set text color or background color to the given element\n * @param element The element to set color to\n * @param color The color to set, it can be a string of color name/value or a ModeIndependentColor object\n * @param isBackgroundColor Whether set background color or text color\n * @param isDarkMode Whether current mode is dark mode. @default false\n * @param shouldAdaptTheFontColor Whether the font color needs to be adapted to be visible in a dark or bright background color. @default false\n * @param darkColorHandler A dark color handler object. This is now required.\n * We keep it optional only for backward compatibility. If it is not passed, color will not be set.\n */\nexport default function setColor(\n    element: HTMLElement,\n    color: string | ModeIndependentColor,\n    isBackgroundColor: boolean,\n    isDarkMode?: boolean,\n    shouldAdaptTheFontColor?: boolean,\n    darkColorHandler?: DarkColorHandler | null\n) {\n    const colorString = typeof color === 'string' ? color.trim() : '';\n    const modeIndependentColor = typeof color === 'string' ? null : color;\n    const cssName = isBackgroundColor ? 'background-color' : 'color';\n\n    if (colorString || modeIndependentColor) {\n        if (darkColorHandler) {\n            const colorValue = darkColorHandler.registerColor(\n                modeIndependentColor?.lightModeColor || colorString,\n                !!isDarkMode,\n                modeIndependentColor?.darkModeColor\n            );\n\n            element.style.setProperty(cssName, colorValue);\n        }\n\n        if (isBackgroundColor && shouldAdaptTheFontColor) {\n            adaptFontColorToBackgroundColor(\n                element,\n                modeIndependentColor?.lightModeColor || colorString,\n                isDarkMode,\n                darkColorHandler\n            );\n        }\n    }\n}\n\n/**\n * Change the font color to white or some other color, so the text can be visible with a darker background\n * @param element The element that contains text.\n * @param lightModeBackgroundColor Existing background color in light mode\n * @param isDarkMode Whether the content is in dark mode\n * @param darkColorHandler A dark color handler object.  This is now required.\n * We keep it optional only for backward compatibility. If it is not passed, color will not be set.\n */\nfunction adaptFontColorToBackgroundColor(\n    element: HTMLElement,\n    lightModeBackgroundColor: string,\n    isDarkMode?: boolean,\n    darkColorHandler?: DarkColorHandler | null\n) {\n    if (!lightModeBackgroundColor || lightModeBackgroundColor === TRANSPARENT) {\n        return;\n    }\n\n    const isADarkOrBrightOrNone = isADarkOrBrightColor(lightModeBackgroundColor!);\n\n    switch (isADarkOrBrightOrNone) {\n        case ColorTones.DARK:\n            const fontForDark: ModeIndependentColor = {\n                lightModeColor: WHITE,\n                darkModeColor: GRAY,\n            };\n            setColor(\n                element,\n                fontForDark,\n                false /*isBackground*/,\n                isDarkMode,\n                false /*shouldAdaptFontColor*/,\n                darkColorHandler\n            );\n            break;\n        case ColorTones.BRIGHT:\n            const fontForLight: ModeIndependentColor = {\n                lightModeColor: BLACK,\n                darkModeColor: WHITE,\n            };\n            setColor(\n                element,\n                fontForLight,\n                false /*isBackground*/,\n                isDarkMode,\n                false /*shouldAdaptFontColor*/,\n                darkColorHandler\n            );\n            break;\n    }\n}\n\nfunction isADarkOrBrightColor(color: string): ColorTones {\n    const lightness = calculateLightness(color);\n    if (lightness < DARK_COLORS_LIGHTNESS) {\n        return ColorTones.DARK;\n    } else if (lightness > BRIGHT_COLORS_LIGHTNESS) {\n        return ColorTones.BRIGHT;\n    }\n\n    return ColorTones.NONE;\n}\n\n/**\n * Calculate the lightness of HSL (hue, saturation and lightness) representation\n * @param color a RBG or RGBA COLOR\n * @returns\n */\nfunction calculateLightness(color: string) {\n    const colorValues = parseColor(color);\n\n    // Use the values of r,g,b to calculate the lightness in the HSl representation\n    //First calculate the fraction of the light in each color, since in css the value of r,g,b is in the interval of [0,255], we have\n    if (colorValues) {\n        const red = colorValues[0] / 255;\n        const green = colorValues[1] / 255;\n        const blue = colorValues[2] / 255;\n\n        //Then the lightness in the HSL representation is the average between maximum fraction of r,g,b and the minimum fraction\n        return (Math.max(red, green, blue) + Math.min(red, green, blue)) * 50;\n    } else {\n        return 255;\n    }\n}\n"]}