import { __values } from "tslib";
import createElement from './createElement';
import fromHtml from './fromHtml';
import safeInstanceOf from './safeInstanceOf';
export default function wrap(nodes, wrapper) {
    var e_1, _a;
    nodes = !nodes ? [] : safeInstanceOf(nodes, 'Node') ? [nodes] : nodes;
    if (nodes.length == 0 || !nodes[0] || !nodes[0].ownerDocument) {
        return null;
    }
    if (!wrapper) {
        wrapper = 'div';
    }
    if (!safeInstanceOf(wrapper, 'HTMLElement')) {
        var document_1 = nodes[0].ownerDocument;
        if (typeof wrapper === 'string') {
            wrapper = /^\w+$/.test(wrapper)
                ? document_1.createElement(wrapper)
                : fromHtml(wrapper, document_1)[0]; // This will be removed in next major release
        }
        else {
            wrapper = createElement(wrapper, document_1);
        }
    }
    var parentNode = nodes[0].parentNode;
    if (parentNode) {
        parentNode.insertBefore(wrapper, nodes[0]);
    }
    try {
        for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
            var node = nodes_1_1.value;
            wrapper.appendChild(node);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return wrapper;
}
//# sourceMappingURL=wrap.js.map