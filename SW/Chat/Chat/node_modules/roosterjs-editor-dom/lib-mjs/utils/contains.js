import safeInstanceOf from './safeInstanceOf';
export default function contains(container, contained, treatSameNodeAsContain) {
    if (!container || !contained) {
        return false;
    }
    if (treatSameNodeAsContain && container == contained) {
        return true;
    }
    if (safeInstanceOf(contained, 'Range')) {
        contained = contained && contained.commonAncestorContainer;
        treatSameNodeAsContain = true;
    }
    if (contained && contained.nodeType == 3 /* Text */) {
        contained = contained.parentNode;
        treatSameNodeAsContain = true;
    }
    if (container.nodeType != 1 /* Element */ && container.nodeType != 11 /* DocumentFragment */) {
        return !!treatSameNodeAsContain && container == contained;
    }
    return (!!(treatSameNodeAsContain || container != contained) &&
        internalContains(container, contained));
}
function internalContains(container, contained) {
    if (container.contains) {
        return container.contains(contained);
    }
    else {
        while (contained) {
            if (contained == container) {
                return true;
            }
            contained = contained.parentNode;
        }
        return false;
    }
}
//# sourceMappingURL=contains.js.map