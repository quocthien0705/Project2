import { __read, __spreadArray } from "tslib";
import normalizeRect from './normalizeRect';
/**
 * Get the intersected Rect of elements provided
 *
 * @example
 * The result of the following Elements Rects would be:
    {
        top: Element2.top,
        bottom: Element1.bottom,
        left: Element2.left,
        right: Element2.right
    }
    +-------------------------+
    | Element 1               |
    |   +-----------------+   |
    |   | Element2        |   |
    |   |                 |   |
    |   |                 |   |
    +-------------------------+
        |                 |
        +-----------------+

 * @param elements Elements to use.
 * @param additionalRects additional rects to use
 * @returns If the Rect is valid return the rect, if not, return null.
 */
export default function getIntersectedRect(elements, additionalRects) {
    if (additionalRects === void 0) { additionalRects = []; }
    var rects = elements
        .map(function (element) { return normalizeRect(element.getBoundingClientRect()); })
        .concat(additionalRects)
        .filter(function (element) { return !!element; });
    var result = {
        top: Math.max.apply(Math, __spreadArray([], __read(rects.map(function (r) { return r.top; })), false)),
        bottom: Math.min.apply(Math, __spreadArray([], __read(rects.map(function (r) { return r.bottom; })), false)),
        left: Math.max.apply(Math, __spreadArray([], __read(rects.map(function (r) { return r.left; })), false)),
        right: Math.min.apply(Math, __spreadArray([], __read(rects.map(function (r) { return r.right; })), false)),
    };
    return result.top < result.bottom && result.left < result.right ? result : null;
}
//# sourceMappingURL=getIntersectedRect.js.map