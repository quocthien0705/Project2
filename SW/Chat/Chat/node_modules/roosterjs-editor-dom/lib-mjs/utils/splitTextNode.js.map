{"version":3,"file":"splitTextNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/splitTextNode.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,MAAM,CAAC,OAAO,UAAU,aAAa,CAAC,QAAc,EAAE,MAAc,EAAE,eAAwB;;IAC1F,IAAM,SAAS,GAAG,CAAA,MAAA,QAAQ,CAAC,SAAS,0CAAE,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,KAAI,EAAE,CAAC;IACjE,IAAM,UAAU,GAAG,CAAA,MAAA,QAAQ,CAAC,SAAS,0CAAE,SAAS,CAAC,MAAM,CAAC,KAAI,EAAE,CAAC;IAC/D,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAChG,QAAQ,CAAC,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;IAC9D,MAAA,QAAQ,CAAC,UAAU,0CAAE,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC9F,OAAO,OAAO,CAAC;AACnB,CAAC","sourcesContent":["/**\r\n * Split a text node into two parts by an offset number, and return one of them\r\n * @param textNode The text node to split\r\n * @param offset The offset number to split at\r\n * @param returnFirstPart True to return the first part, then the passed in textNode will become the second part.\r\n * Otherwise return the second part, and the passed in textNode will become the first part\r\n */\r\nexport default function splitTextNode(textNode: Text, offset: number, returnFirstPart: boolean) {\r\n    const firstPart = textNode.nodeValue?.substring(0, offset) || '';\r\n    const secondPart = textNode.nodeValue?.substring(offset) || '';\r\n    const newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode?.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n"]}