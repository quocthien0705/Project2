{"version":3,"file":"changeElementTag.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts"],"names":[],"mappings":";AAAA,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAqB9C,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAC,OAAoB,EAAE,MAAc;;IACzE,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,EAAE;QACrB,OAAO,IAAI,CAAC;KACf;IAED,IAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;IAE1C,IAAI,WAAW,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;QACrC,+CAA+C;QAC/C,OAAO,OAAO,CAAC;KAClB;IAED,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAE/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAChD,IAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACnC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAClD;IAED,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAEpC,IAAI,WAAW,IAAI,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,GAAG,EAAE;QACvD,KAAA,OAA8D,iBAAiB,CAAC,OAAO,EAAE;YACrF,YAAY;YACZ,eAAe;SAClB,CAAC,IAAA,EAHD,UAAU,CAAC,KAAK,CAAC,SAAS,QAAA,EAAE,UAAU,CAAC,KAAK,CAAC,YAAY,QAAA,CAGvD;KACN;IAED,IAAI,OAAO,CAAC,UAAU,EAAE;QACpB,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;KACxD;IAED,OAAO,UAAU,CAAC;AACtB,CAAC","sourcesContent":["import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\nimport moveChildNodes from './moveChildNodes';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement | null;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement | null {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    const origianlTag = getTagOfNode(element);\r\n\r\n    if (origianlTag == newTag.toUpperCase()) {\r\n        // Already in the target tag, no need to change\r\n        return element;\r\n    }\r\n\r\n    const newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        const attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    moveChildNodes(newElement, element);\r\n\r\n    if (origianlTag == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n"]}