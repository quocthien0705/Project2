import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';
import getTagOfNode from '../utils/getTagOfNode';
import ImageInlineElement from './ImageInlineElement';
import LinkInlineElement from './LinkInlineElement';
import NodeInlineElement from './NodeInlineElement';
import safeInstanceOf from '../utils/safeInstanceOf';
export default function getInlineElementAtNode(parent, node) {
    // An inline element has to be in a block element, get the block first and then resolve through the factory
    var parentBlock = safeInstanceOf(parent, 'Node')
        ? getBlockElementAtNode(parent, node)
        : parent;
    return node && parentBlock && resolveInlineElement(node, parentBlock);
}
/**
 * Resolve an inline element by a leaf node
 * @param node The node to resolve from
 * @param parentBlock The parent block element
 */
function resolveInlineElement(node, parentBlock) {
    var nodeChain = [node];
    for (var parent_1 = node.parentNode; parent_1 && parentBlock.contains(parent_1); parent_1 = parent_1.parentNode) {
        nodeChain.push(parent_1);
    }
    var inlineElement;
    for (var i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {
        var currentNode = nodeChain[i];
        var tag = getTagOfNode(currentNode);
        if (tag == 'A') {
            inlineElement = new LinkInlineElement(currentNode, parentBlock);
        }
        else if (tag == 'IMG') {
            inlineElement = new ImageInlineElement(currentNode, parentBlock);
        }
    }
    return inlineElement || new NodeInlineElement(node, parentBlock);
}
//# sourceMappingURL=getInlineElementAtNode.js.map