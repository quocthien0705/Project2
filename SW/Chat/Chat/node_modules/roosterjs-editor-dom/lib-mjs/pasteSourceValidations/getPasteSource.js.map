{"version":3,"file":"getPasteSource.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/pasteSourceValidations/getPasteSource.ts"],"names":[],"mappings":"AAAA,OAAO,0BAA0B,MAAM,8BAA8B,CAAC;AACtE,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AAC9D,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,2BAA2B,MAAM,+BAA+B,CAAC;AACxE,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,0BAA0B,MAAM,8BAA8B,CAAC;AAmBtE,IAAM,kBAAkB,GAAG,IAAI,GAAG,CAA0C;IACxE,sBAAmC,qBAAqB,CAAC;IACzD,uBAAoC,sBAAsB,CAAC;IAC3D,sBAAmC,qBAAqB,CAAC;IACzD,4BAAyC,2BAA2B,CAAC;IACrE,wBAAqC,0BAA0B,CAAC;IAChE,uBAAoC,qBAAqB,CAAC;IAC1D,sBAAmC,0BAA0B,CAAC;CACjE,CAAC,CAAC;AAEH;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,cAAc,CAClC,KAAuB,EACvB,wBAAiC;IAEzB,IAAA,cAAc,GAA8B,KAAK,eAAnC,EAAE,aAAa,GAAe,KAAK,cAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;IAE1D,IAAI,MAAM,GAAgC,IAAI,CAAC;IAC/C,IAAM,KAAK,GAAyB;QAChC,cAAc,gBAAA;QACd,QAAQ,UAAA;QACR,wBAAwB,0BAAA;QACxB,aAAa,eAAA;KAChB,CAAC;IAEF,kBAAkB,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;QACjC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,GAAG,GAAG,CAAC;SAChB;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,aAAN,MAAM,cAAN,MAAM,kBAAgC,CAAC;AAClD,CAAC","sourcesContent":["import documentContainWacElements from './documentContainWacElements';\nimport isExcelDesktopDocument from './isExcelDesktopDocument';\nimport isExcelOnlineDocument from './isExcelOnlineDocument';\nimport isGoogleSheetDocument from './isGoogleSheetDocument';\nimport isPowerPointDesktopDocument from './isPowerPointDesktopDocument';\nimport isWordDesktopDocument from './isWordDesktopDocument';\nimport shouldConvertToSingleImage from './shouldConvertToSingleImage';\nimport { KnownPasteSourceType } from 'roosterjs-editor-types';\nimport type { BeforePasteEvent, ClipboardData } from 'roosterjs-editor-types';\n\n/**\n * @internal\n */\nexport type getSourceInputParams = {\n    htmlAttributes: Record<string, string>;\n    fragment: DocumentFragment;\n    shouldConvertSingleImage: boolean;\n    clipboardData: ClipboardData;\n};\n\n/**\n * @internal\n */\nexport type getSourceFunction = (props: getSourceInputParams) => boolean;\n\nconst getSourceFunctions = new Map<KnownPasteSourceType, getSourceFunction>([\n    [KnownPasteSourceType.WordDesktop, isWordDesktopDocument],\n    [KnownPasteSourceType.ExcelDesktop, isExcelDesktopDocument],\n    [KnownPasteSourceType.ExcelOnline, isExcelOnlineDocument],\n    [KnownPasteSourceType.PowerPointDesktop, isPowerPointDesktopDocument],\n    [KnownPasteSourceType.WacComponents, documentContainWacElements],\n    [KnownPasteSourceType.GoogleSheets, isGoogleSheetDocument],\n    [KnownPasteSourceType.SingleImage, shouldConvertToSingleImage],\n]);\n\n/**\n * This function tries to get the source of the Pasted content\n * @param event the before paste event\n * @param shouldConvertSingleImage Whether convert single image is enabled.\n * @returns The Type of pasted content, if no type found will return {KnownSourceType.Default}\n */\nexport default function getPasteSource(\n    event: BeforePasteEvent,\n    shouldConvertSingleImage: boolean\n): KnownPasteSourceType {\n    const { htmlAttributes, clipboardData, fragment } = event;\n\n    let result: KnownPasteSourceType | null = null;\n    const param: getSourceInputParams = {\n        htmlAttributes,\n        fragment,\n        shouldConvertSingleImage,\n        clipboardData,\n    };\n\n    getSourceFunctions.forEach((func, key) => {\n        if (!result && func(param)) {\n            result = key;\n        }\n    });\n\n    return result ?? KnownPasteSourceType.Default;\n}\n"]}