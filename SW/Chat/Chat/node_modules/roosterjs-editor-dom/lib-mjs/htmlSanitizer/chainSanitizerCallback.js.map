{"version":3,"file":"chainSanitizerCallback.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/htmlSanitizer/chainSanitizerCallback.ts"],"names":[],"mappings":";AAAA;;;;;;;GAOG;AACH,MAAM,CAAC,OAAO,UAAU,sBAAsB,CAC1C,GAAkD,EAClD,IAAY,EACZ,WAAuB;IAEvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACZ,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;KAC3B;SAAM;QACH,IAAM,kBAAgB,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,GAAG,CAAC,IAAI,CAAC,GAAG;YAAC,cAAsB;iBAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;gBAAtB,yBAAsB;;YAC/B,kBAAgB,wCAAI,IAAI,WAAE;YAC1B,OAAO,WAAW,wCAAI,IAAI,WAAE;QAChC,CAAC,CAAC;KACL;AACL,CAAC","sourcesContent":["/**\n * Chain all callback for an attribute together\n * @param map The source callback map\n * @param name Name of the property to chain\n * @param newCallback A new callback to process the given name on the given map.\n * If the same property got multiple callbacks, the final return value will be the return\n * value of the latest callback\n */\nexport default function chainSanitizerCallback<TOriginalArgs extends any[], TChainedFn extends (...args: TOriginalArgs) => R,  R>(\n    map: Record<string, (...args: TOriginalArgs) => R>,\n    name: string,\n    newCallback: TChainedFn\n) {\n    if (!map[name]) {\n        map[name] = newCallback;\n    } else {\n        const originalCallback = map[name];\n        map[name] = (...args: TOriginalArgs) => {\n            originalCallback(...args);\n            return newCallback(...args);\n        };\n    }\n}\n"]}