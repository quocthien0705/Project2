import { __read, __spreadArray } from "tslib";
/**
 * Chain all callback for an attribute together
 * @param map The source callback map
 * @param name Name of the property to chain
 * @param newCallback A new callback to process the given name on the given map.
 * If the same property got multiple callbacks, the final return value will be the return
 * value of the latest callback
 */
export default function chainSanitizerCallback(map, name, newCallback) {
    if (!map[name]) {
        map[name] = newCallback;
    }
    else {
        var originalCallback_1 = map[name];
        map[name] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            originalCallback_1.apply(void 0, __spreadArray([], __read(args), false));
            return newCallback.apply(void 0, __spreadArray([], __read(args), false));
        };
    }
}
//# sourceMappingURL=chainSanitizerCallback.js.map