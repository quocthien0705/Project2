{"version":3,"file":"HtmlSanitizer.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/htmlSanitizer/HtmlSanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["import changeElementTag from '../utils/changeElementTag';\nimport getInheritableStyles from './getInheritableStyles';\nimport getObjectKeys from '../jsUtils/getObjectKeys';\nimport getPredefinedCssForElement from './getPredefinedCssForElement';\nimport getStyles from '../style/getStyles';\nimport getTagOfNode from '../utils/getTagOfNode';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport setStyles from '../style/setStyles';\nimport toArray from '../jsUtils/toArray';\nimport { cloneObject } from './cloneObject';\nimport { isCssVariable, processCssVariable } from './processCssVariable';\nimport { NodeType } from 'roosterjs-editor-types';\nimport {\n    getAllowedAttributes,\n    getAllowedCssClassesRegex,\n    getTagReplacement,\n    getDefaultStyleValues,\n    getStyleCallbacks,\n} from './getAllowedValues';\nimport type {\n    AttributeCallbackMap,\n    CssStyleCallbackMap,\n    ElementCallbackMap,\n    HtmlSanitizerOptions,\n    PredefinedCssMap,\n    SanitizeHtmlOptions,\n    StringMap,\n} from 'roosterjs-editor-types';\n\n/**\n * HTML sanitizer class provides two features:\n * 1. Convert global CSS to inline CSS\n * 2. Sanitize an HTML document, remove unnecessary/dangerous attribute/nodes\n */\nexport default class HtmlSanitizer {\n    /**\n     * @deprecated Use new HtmlSanitizer().convertGlobalCssToInlineCss() instead\n     * Convert global CSS to inline CSS if any\n     * @param html HTML source\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\n     */\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\n        const sanitizer = new HtmlSanitizer({\n            additionalGlobalStyleNodes: additionalStyleNodes,\n        });\n        return sanitizer.exec(html, true /*convertCssOnly*/);\n    }\n\n    /**\n     * @deprecated Use new HtmlSanitizer().sanitize() instead\n     * Sanitize HTML string, remove any unused HTML node/attribute/CSS.\n     * @param html HTML source string\n     * @param options Options used for this sanitizing process\n     */\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\n        options = options || {};\n        const sanitizer = new HtmlSanitizer(options);\n        const currentStyles = safeInstanceOf(options.currentElementOrStyle, 'HTMLElement')\n            ? getInheritableStyles(options.currentElementOrStyle)\n            : options.currentElementOrStyle;\n        return sanitizer.exec(html, options.convertCssOnly, currentStyles);\n    }\n\n    private elementCallbacks: ElementCallbackMap;\n    private styleCallbacks: CssStyleCallbackMap;\n    private attributeCallbacks: AttributeCallbackMap;\n    private tagReplacements: Record<string, string | null>;\n    private allowedAttributes: string[];\n    private allowedCssClassesRegex: RegExp | null;\n    private defaultStyleValues: StringMap;\n    private additionalPredefinedCssForElement: PredefinedCssMap | null;\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\n    private preserveHtmlComments: boolean;\n    private unknownTagReplacement: string | null;\n\n    /**\n     * Construct a new instance of HtmlSanitizer\n     * @param options Options for HtmlSanitizer\n     */\n    constructor(options?: HtmlSanitizerOptions) {\n        options = options || {};\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\n        this.styleCallbacks = getStyleCallbacks(options.cssStyleCallbacks);\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\n        this.tagReplacements = getTagReplacement(options.additionalTagReplacements);\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowedAttributes);\n        this.allowedCssClassesRegex = getAllowedCssClassesRegex(\n            options.additionalAllowedCssClasses\n        );\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\n        this.additionalPredefinedCssForElement = options.additionalPredefinedCssForElement || null;\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\n        this.preserveHtmlComments = options.preserveHtmlComments || false;\n        this.unknownTagReplacement = options.unknownTagReplacement || null;\n    }\n\n    /**\n     * @deprecated Use HtmlSanitizer.convertGlobalCssToInlineCss() and HtmlSanitizer.sanitize() instead\n     * Sanitize HTML string\n     * This function will do the following work:\n     * 1. Convert global CSS into inline CSS\n     * 2. Remove dangerous HTML tags and attributes\n     * 3. Remove useless CSS properties\n     * @param html The input HTML\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\n     * @param currentStyles Current inheritable CSS styles\n     */\n    exec(html: string, convertCssOnly?: boolean, currentStyles?: StringMap): string {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html || '', 'text/html');\n\n        if (doc && doc.body && doc.body.firstChild) {\n            this.convertGlobalCssToInlineCss(doc);\n            if (!convertCssOnly) {\n                this.sanitize(doc.body, currentStyles);\n            }\n        }\n        return (doc && doc.body && doc.body.innerHTML) || '';\n    }\n\n    /**\n     * Splits CSS selectors, avoiding splits within parentheses\n     * @param selectorText The CSS selector string\n     * @return Array of trimmed selectors\n     */\n    private splitSelectors(selectorText: string) {\n        const regex = /(?![^(]*\\)),/;\n        return selectorText.split(regex).map(s => s.trim());\n    }\n\n    /**\n     * Sanitize an HTML element, remove unnecessary or dangerous elements/attribute/CSS rules\n     * @param rootNode Root node to sanitize\n     * @param currentStyles Current CSS styles. Inheritable styles in the given node which has\n     * the same value with current styles will be ignored.\n     */\n    sanitize(rootNode: Node, currentStyles?: StringMap) {\n        if (!rootNode) {\n            return '';\n        }\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\n        this.processNode(rootNode, currentStyles, {});\n    }\n\n    /**\n     * Convert global CSS into inline CSS\n     * @param rootNode The HTML Document\n     */\n    convertGlobalCssToInlineCss(rootNode: ParentNode) {\n        const styleNodes = toArray(rootNode.querySelectorAll('style'));\n        const styleSheets = this.additionalGlobalStyleNodes\n            .reverse()\n            .map(node => node.sheet as CSSStyleSheet)\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\n            .filter(sheet => sheet);\n        for (const styleSheet of styleSheets) {\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\n                // Skip any none-style rule, i.e. @page\n                const styleRule = styleSheet.cssRules[j] as CSSStyleRule;\n                const text = styleRule && styleRule.style ? styleRule.style.cssText : null;\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\n                    continue;\n                }\n                // Make sure the selector is not empty\n                for (const selector of this.splitSelectors(styleRule.selectorText)) {\n                    if (!selector || !selector.trim()) {\n                        continue;\n                    }\n                    const nodes = toArray(rootNode.querySelectorAll(selector));\n                    // Always put existing styles after so that they have higher priority\n                    // Which means if both global style and inline style apply to the same element,\n                    // inline style will have higher priority\n                    nodes.forEach(node =>\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\n                    );\n                }\n            }\n        }\n\n        styleNodes.forEach(node => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\n        const nodeType = node.nodeType;\n        const isElement = nodeType == NodeType.Element;\n        const isText = nodeType == NodeType.Text;\n        const isFragment = nodeType == NodeType.DocumentFragment;\n        const isComment = nodeType == NodeType.Comment;\n\n        let shouldKeep = false;\n\n        if (isElement) {\n            const tag = getTagOfNode(node);\n            const callback = this.elementCallbacks[tag];\n            let replacement: string | null | undefined = this.tagReplacements[tag.toLowerCase()];\n\n            if (replacement === undefined) {\n                replacement = this.unknownTagReplacement;\n            }\n\n            if (callback) {\n                shouldKeep = callback(node as HTMLElement, context);\n            } else if (tag.indexOf(':') > 0) {\n                shouldKeep = true;\n            } else if (tag == replacement || replacement == '*') {\n                shouldKeep = true;\n            } else if (replacement && /^[a-zA-Z][\\w\\-]*$/.test(replacement)) {\n                node = changeElementTag(node as HTMLElement, replacement)!;\n                shouldKeep = true;\n            }\n        } else if (isText) {\n            const whiteSpace = currentStyle['white-space'];\n            shouldKeep =\n                whiteSpace == 'pre' ||\n                whiteSpace == 'pre-line' ||\n                whiteSpace == 'pre-wrap' ||\n                !/^[\\r\\n]*$/g.test(node.nodeValue || '');\n        } else if (isFragment) {\n            shouldKeep = true;\n        } else if (isComment) {\n            shouldKeep = this.preserveHtmlComments;\n        } else {\n            shouldKeep = false;\n        }\n\n        if (!shouldKeep) {\n            node.parentNode?.removeChild(node);\n        } else if (\n            isText &&\n            (currentStyle['white-space'] == 'pre' || currentStyle['white-space'] == 'pre-wrap')\n        ) {\n            node.nodeValue = (node.nodeValue || '')\n                .replace(/^ /gm, '\\u00A0')\n                .replace(/ {2}/g, ' \\u00A0');\n        } else if (isElement || isFragment) {\n            const thisStyle = cloneObject(currentStyle);\n            const element = <HTMLElement>node;\n            if (isElement) {\n                this.processAttributes(element, context);\n                this.preprocessCss(element, thisStyle);\n                this.processCss(element, thisStyle, context);\n            }\n\n            let child: Node | null = element.firstChild;\n            let next: Node | null;\n            for (; child; child = next) {\n                next = child.nextSibling;\n                this.processNode(child, thisStyle, context);\n            }\n        }\n    }\n\n    private preprocessCss(element: HTMLElement, thisStyle: StringMap) {\n        const predefinedStyles = getPredefinedCssForElement(\n            element,\n            this.additionalPredefinedCssForElement\n        );\n        if (predefinedStyles) {\n            getObjectKeys(predefinedStyles).forEach(name => {\n                thisStyle[name] = predefinedStyles[name];\n            });\n        }\n    }\n\n    private processCss(element: HTMLElement, thisStyle: StringMap, context: Object) {\n        const styles = getStyles(element);\n        getObjectKeys(styles).forEach(name => {\n            let value = styles[name];\n            const callback = this.styleCallbacks[name];\n            const isInheritable = thisStyle[name] != undefined;\n            let keep = true;\n\n            if (keep && !!callback) {\n                keep = callback(value, element, thisStyle, context);\n            }\n\n            if (keep && isCssVariable(value)) {\n                value = processCssVariable(value);\n                keep = !!value;\n            }\n\n            keep =\n                keep &&\n                value != 'inherit' &&\n                value.indexOf('expression') < 0 &&\n                name.substr(0, 1) != '-' &&\n                this.defaultStyleValues[name] != value &&\n                ((isInheritable && value != thisStyle[name]) ||\n                    (!isInheritable && value != 'initial' && value != 'normal'));\n            if (keep && isInheritable) {\n                thisStyle[name] = value;\n            }\n\n            if (keep) {\n                styles[name] = value;\n            } else {\n                delete styles[name];\n            }\n        });\n\n        setStyles(element, styles);\n    }\n\n    private processAttributes(element: HTMLElement, context: Object) {\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\n            const attribute = element.attributes[i];\n            const name = attribute.name.toLowerCase().trim();\n            const value = attribute.value;\n            const callback = this.attributeCallbacks[name];\n\n            let newValue = callback\n                ? callback(value, element, context)\n                : this.allowedAttributes.indexOf(name) >= 0 || name.indexOf('data-') == 0\n                ? value\n                : null;\n\n            if (name == 'class' && this.allowedCssClassesRegex) {\n                newValue = this.processCssClass(value, newValue);\n            }\n\n            if (\n                newValue === null ||\n                newValue === undefined ||\n                newValue.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) // match script: with any NewLine inside. Browser will ignore those NewLine char and still treat it as script prefix\n            ) {\n                element.removeAttribute(name);\n            } else {\n                attribute.value = newValue;\n            }\n        }\n    }\n\n    private processCssClass(originalValue: string, calculatedValue: string | null): string | null {\n        const originalClasses = originalValue ? originalValue.split(' ') : [];\n        const calculatedClasses = calculatedValue ? calculatedValue.split(' ') : [];\n\n        originalClasses.forEach(className => {\n            if (\n                this.allowedCssClassesRegex?.test(className) &&\n                calculatedClasses.indexOf(className) < 0\n            ) {\n                calculatedClasses.push(className);\n            }\n        });\n\n        return calculatedClasses?.length > 0 ? calculatedClasses.join(' ') : null;\n    }\n}\n"]}