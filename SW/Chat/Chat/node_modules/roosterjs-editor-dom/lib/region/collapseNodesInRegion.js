"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var collapseNodes_1 = require("../utils/collapseNodes");
var isNodeInRegion_1 = require("./isNodeInRegion");
var safeInstanceOf_1 = require("../utils/safeInstanceOf");
/**
 * Collapse nodes within this region to their common ancestor node under this region
 * @param region The region to collapse nodes in.
 * @param nodesOrBlockElements Nodes or block elements to collapse. When take BlockElement[] as input,
 * start node of the first BlockElement and end node of the last BlockElement will be used as the nodes.
 * All nodes not contained by the given region will be ignored.
 */
function collapseNodesInRegion(region, nodesOrBlockElements) {
    if (!nodesOrBlockElements || nodesOrBlockElements.length == 0) {
        return [];
    }
    var nodes = (0, safeInstanceOf_1.default)(nodesOrBlockElements[0], 'Node')
        ? nodesOrBlockElements
        : [
            nodesOrBlockElements[0].getStartNode(),
            nodesOrBlockElements[nodesOrBlockElements.length - 1].getEndNode(),
        ];
    nodes = nodes && nodes.filter(function (node) { return (0, isNodeInRegion_1.default)(region, node); });
    var firstNode = nodes[0];
    var lastNode = nodes[nodes.length - 1];
    if ((0, isNodeInRegion_1.default)(region, firstNode) && (0, isNodeInRegion_1.default)(region, lastNode)) {
        return (0, collapseNodes_1.default)(region.rootNode, firstNode, lastNode, true /*canSplitParent*/);
    }
    else {
        return [];
    }
}
exports.default = collapseNodesInRegion;
//# sourceMappingURL=collapseNodesInRegion.js.map