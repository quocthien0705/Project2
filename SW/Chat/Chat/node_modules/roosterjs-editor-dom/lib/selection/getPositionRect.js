"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createElement_1 = require("../utils/createElement");
var createRange_1 = require("./createRange");
var normalizeRect_1 = require("../utils/normalizeRect");
/**
 * Get bounding rect of this position
 * @param position The position to get rect from
 */
function getPositionRect(position) {
    var _a;
    if (!position) {
        return null;
    }
    var range = (0, createRange_1.default)(position);
    // 1) try to get rect using range.getBoundingClientRect()
    var rect = range.getBoundingClientRect && (0, normalizeRect_1.default)(range.getBoundingClientRect());
    if (rect) {
        return rect;
    }
    // 2) try to get rect using range.getClientRects
    position = position.normalize();
    var rects = range.getClientRects && range.getClientRects();
    rect = rects && rects.length == 1 ? (0, normalizeRect_1.default)(rects[0]) : null;
    if (rect) {
        return rect;
    }
    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others
    if (position.node.nodeType == 3 /* Text */ && position.node.ownerDocument) {
        var span = (0, createElement_1.default)({ tag: 'span', children: ['\u200b'] }, position.node.ownerDocument);
        range = (0, createRange_1.default)(position);
        range.insertNode(span);
        rect = span.getBoundingClientRect && (0, normalizeRect_1.default)(span.getBoundingClientRect());
        (_a = span.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(span);
        if (rect) {
            return rect;
        }
    }
    // 4) try getBoundingClientRect on element
    var element = position.element;
    if (element && element.getBoundingClientRect) {
        rect = (0, normalizeRect_1.default)(element.getBoundingClientRect());
        if (rect) {
            return rect;
        }
    }
    return null;
}
exports.default = getPositionRect;
//# sourceMappingURL=getPositionRect.js.map