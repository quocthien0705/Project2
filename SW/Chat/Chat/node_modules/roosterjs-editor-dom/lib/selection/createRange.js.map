{"version":3,"file":"createRange.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/selection/createRange.ts"],"names":[],"mappings":"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","sourcesContent":["import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport safeInstanceOf from '../utils/safeInstanceOf';\r\nimport { NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport type { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a range around the given node(s)\r\n * @param startNode The start node to create range from\r\n * @param endNode The end node to create range from. If specified, the range will start before startNode and\r\n * end after endNode, otherwise, the range will start before and end after the start node\r\n * @returns A range start before the given node and end after the given node\r\n */\r\nexport default function createRange(startNode: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a collapsed range at the given node and offset\r\n * @param node The container node of the range\r\n * @param offset The offset of the range, can be a number or value of PositionType\r\n * @returns A range at the given node and offset\r\n */\r\nexport default function createRange(node: Node, offset: number | PositionType): Range;\r\n\r\n/**\r\n * Create a range with the given start/end container node and offset\r\n * @param startNode The start container node of the range\r\n * @param startOffset The start offset of the range\r\n * @param endNode The end container node of the range\r\n * @param endOffset The end offset of the range\r\n * @returns A range at the given start/end container node and offset\r\n */\r\nexport default function createRange(\r\n    startNode: Node,\r\n    startOffset: number | PositionType,\r\n    endNode: Node,\r\n    endOffset: number | PositionType\r\n): Range;\r\n\r\n/**\r\n * Create a range under the given rootNode with start and end selection paths\r\n * @param rootNode The root node that the selection paths start from\r\n * @param startPath The selection path of the start position of the range\r\n * @param endPath The selection path of the end position of the range\r\n * @returns A range with the given start and end selection paths\r\n */\r\nexport default function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n\r\n/**\r\n * Create a range with the start and end position\r\n * @param startPosition The start position of the range\r\n * @param endPosition The end position of the range, if not specified, the range will be collapsed at start position\r\n * @returns A range start at startPosition, end at endPosition, or startPosition when endPosition is not specified\r\n */\r\nexport default function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n\r\nexport default function createRange(\r\n    arg1: Node | NodePosition,\r\n    arg2?: number | number[] | Node | NodePosition,\r\n    arg3?: Node | number[],\r\n    arg4?: number\r\n): Range | null {\r\n    let start: NodePosition | null = null;\r\n    let end: NodePosition | null = null;\r\n\r\n    if (isNodePosition(arg1)) {\r\n        // function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n        start = arg1;\r\n        end = isNodePosition(arg2) ? arg2 : null;\r\n    } else if (safeInstanceOf(arg1, 'Node')) {\r\n        if (Array.isArray(arg2)) {\r\n            // function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n            start = getPositionFromPath(arg1, arg2);\r\n            end = Array.isArray(arg3) ? getPositionFromPath(arg1, arg3) : null;\r\n        } else if (typeof arg2 == 'number') {\r\n            // function createRange(node: Node, offset: number | PositionType): Range;\r\n            // function createRange(startNode: Node, startOffset: number | PositionType, endNode: Node, endOffset: number | PositionType): Range;\r\n            start = new Position(arg1, arg2);\r\n            end = safeInstanceOf(arg3, 'Node') ? new Position(arg3, arg4!) : null;\r\n        } else if (safeInstanceOf(arg2, 'Node') || !arg2) {\r\n            // function createRange(startNode: Node, endNode?: Node): Range;\r\n            start = new Position(arg1, PositionType.Before);\r\n            end = new Position(<Node>arg2 || arg1, PositionType.After);\r\n        }\r\n    }\r\n\r\n    if (start?.node?.ownerDocument) {\r\n        const range = start.node.ownerDocument.createRange();\r\n        start = getFocusablePosition(start);\r\n        end = getFocusablePosition(end || start);\r\n        range.setStart(start.node, start.offset);\r\n        range.setEnd(end.node, end.offset);\r\n\r\n        return range;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n\r\nfunction isNodePosition(arg: any): arg is NodePosition {\r\n    return arg && arg.node;\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition | null {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number = 0;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n"]}