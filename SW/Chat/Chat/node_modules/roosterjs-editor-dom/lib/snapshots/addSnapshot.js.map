{"version":3,"file":"addSnapshot.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/snapshots/addSnapshot.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AA+BlE,SAAwB,WAAW,CAC/B,SAAuB,EACvB,QAAW,EACX,sBAA+B,EAC/B,SAAmC,EACnC,OAAiD;IAEjD,SAAS,GAAG,SAAS,IAAI,CAAC,UAAA,GAAG,YAAI,OAAA,CAAA,MAAe,GAAK,0CAAE,MAAM,KAAI,CAAC,CAAA,EAAA,CAAC,CAAC;IACpE,OAAO,GAAG,OAAO,IAAI,cAAc,CAAC;IAEpC,IAAM,eAAe,GAAG,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACpE,IAAM,cAAc,GAAG,eAAe,IAAI,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IAE7E,IAAI,SAAS,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,cAAc,EAAE;QACnE,IAAA,kCAAwB,EAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/C,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,SAAS,CAAC,YAAY,EAAE,CAAC;QACzB,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,OACI,WAAW,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM;YACxC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,EACzC;YACE,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YACnE,WAAW,EAAE,CAAC;SACjB;QAED,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAC3C,SAAS,CAAC,YAAY,IAAI,WAAW,CAAC;YACtC,SAAS,CAAC,iBAAiB,IAAI,WAAW,CAAC;SAC9C;QAED,IAAI,sBAAsB,EAAE;YACxB,SAAS,CAAC,iBAAiB,GAAG,SAAS,CAAC,YAAY,CAAC;SACxD;KACJ;SAAM,IAAI,cAAc,EAAE;QACvB,qEAAqE;QACrE,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;KACnE;AACL,CAAC;AAzCD,8BAyCC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CACzB,SAA8B,EAC9B,QAAkB,EAClB,sBAA+B;IAE/B,WAAW,CACP,SAAS,EACT,QAAQ,EACR,sBAAsB,EACtB,UAAA,CAAC,YAAI,OAAA,CAAA,MAAA,CAAC,CAAC,IAAI,0CAAE,MAAM,KAAI,CAAC,CAAA,EAAA,EACxB,gBAAgB,CACnB,CAAC;AACN,CAAC;AAZD,sCAYC;AAED,SAAS,gBAAgB,CAAC,EAAY,EAAE,EAAY;IAChD,OAAO,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC;AACtE,CAAC;AAED,SAAS,cAAc,CAAI,EAAK,EAAE,EAAK;IACnC,OAAO,EAAE,IAAI,EAAE,CAAC;AACpB,CAAC","sourcesContent":["import clearProceedingSnapshots from './clearProceedingSnapshots';\r\nimport type { Snapshot, Snapshots } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Add a new snapshot to the given snapshots data structure\r\n * @param snapshots The snapshots data structure to add new snapshot into\r\n * @param html The snapshot HTML to add\r\n * @param isAutoCompleteSnapshot Whether this is a snapshot before auto complete action\r\n */\r\nexport default function addSnapshot(\r\n    snapshots: Snapshots<string>,\r\n    html: string,\r\n    isAutoCompleteSnapshot: boolean\r\n): void;\r\n\r\n/**\r\n * Add a new snapshot to the given snapshots data structure\r\n * @param snapshots The snapshots data structure to add new snapshot into\r\n * @param snapshot The generic snapshot object to add\r\n * @param isAutoCompleteSnapshot Whether this is a snapshot before auto complete action\r\n * @param getLength A callback function to calculate length of the snapshot\r\n * @param isSame A callback function to check if the given snapshots are the same\r\n */\r\nexport default function addSnapshot<T>(\r\n    snapshots: Snapshots<T>,\r\n    snapshot: T,\r\n    isAutoCompleteSnapshot: boolean,\r\n    getLength: (snapshot: T) => number,\r\n    isSame: (snapshot1: T, snapshot2: T) => boolean\r\n): void;\r\n\r\nexport default function addSnapshot<T>(\r\n    snapshots: Snapshots<T>,\r\n    snapshot: T,\r\n    isAutoCompleteSnapshot: boolean,\r\n    getLength?: (snapshot: T) => number,\r\n    compare?: (snapshot1: T, snapshot2: T) => boolean\r\n) {\r\n    getLength = getLength || (str => (<string>(<any>str))?.length || 0);\r\n    compare = compare || defaultCompare;\r\n\r\n    const currentSnapshot = snapshots.snapshots[snapshots.currentIndex];\r\n    const isSameSnapshot = currentSnapshot && compare(currentSnapshot, snapshot);\r\n\r\n    if (snapshots.currentIndex < 0 || !currentSnapshot || !isSameSnapshot) {\r\n        clearProceedingSnapshots(snapshots, getLength);\r\n        snapshots.snapshots.push(snapshot);\r\n        snapshots.currentIndex++;\r\n        snapshots.totalSize += getLength(snapshot);\r\n\r\n        let removeCount = 0;\r\n        while (\r\n            removeCount < snapshots.snapshots.length &&\r\n            snapshots.totalSize > snapshots.maxSize\r\n        ) {\r\n            snapshots.totalSize -= getLength(snapshots.snapshots[removeCount]);\r\n            removeCount++;\r\n        }\r\n\r\n        if (removeCount > 0) {\r\n            snapshots.snapshots.splice(0, removeCount);\r\n            snapshots.currentIndex -= removeCount;\r\n            snapshots.autoCompleteIndex -= removeCount;\r\n        }\r\n\r\n        if (isAutoCompleteSnapshot) {\r\n            snapshots.autoCompleteIndex = snapshots.currentIndex;\r\n        }\r\n    } else if (isSameSnapshot) {\r\n        // replace the currentSnapshot's metadata so the selection is updated\r\n        snapshots.snapshots.splice(snapshots.currentIndex, 1, snapshot);\r\n    }\r\n}\r\n\r\n/**\r\n * Add a new snapshot to the given snapshots data structure\r\n * @param snapshots The snapshots data structure to add new snapshot into\r\n * @param snapshot The snapshot object to add\r\n * @param isAutoCompleteSnapshot Whether this is a snapshot before auto complete action\r\n */\r\nexport function addSnapshotV2(\r\n    snapshots: Snapshots<Snapshot>,\r\n    snapshot: Snapshot,\r\n    isAutoCompleteSnapshot: boolean\r\n) {\r\n    addSnapshot(\r\n        snapshots,\r\n        snapshot,\r\n        isAutoCompleteSnapshot,\r\n        s => s.html?.length || 0,\r\n        compareSnapshots\r\n    );\r\n}\r\n\r\nfunction compareSnapshots(s1: Snapshot, s2: Snapshot) {\r\n    return s1.html == s2.html && !s1.entityStates && !s2.entityStates;\r\n}\r\n\r\nfunction defaultCompare<T>(s1: T, s2: T) {\r\n    return s1 == s2;\r\n}\r\n"]}