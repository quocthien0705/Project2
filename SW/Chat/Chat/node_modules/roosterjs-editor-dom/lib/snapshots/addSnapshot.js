"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSnapshotV2 = void 0;
var clearProceedingSnapshots_1 = require("./clearProceedingSnapshots");
function addSnapshot(snapshots, snapshot, isAutoCompleteSnapshot, getLength, compare) {
    getLength = getLength || (function (str) { var _a; return ((_a = str) === null || _a === void 0 ? void 0 : _a.length) || 0; });
    compare = compare || defaultCompare;
    var currentSnapshot = snapshots.snapshots[snapshots.currentIndex];
    var isSameSnapshot = currentSnapshot && compare(currentSnapshot, snapshot);
    if (snapshots.currentIndex < 0 || !currentSnapshot || !isSameSnapshot) {
        (0, clearProceedingSnapshots_1.default)(snapshots, getLength);
        snapshots.snapshots.push(snapshot);
        snapshots.currentIndex++;
        snapshots.totalSize += getLength(snapshot);
        var removeCount = 0;
        while (removeCount < snapshots.snapshots.length &&
            snapshots.totalSize > snapshots.maxSize) {
            snapshots.totalSize -= getLength(snapshots.snapshots[removeCount]);
            removeCount++;
        }
        if (removeCount > 0) {
            snapshots.snapshots.splice(0, removeCount);
            snapshots.currentIndex -= removeCount;
            snapshots.autoCompleteIndex -= removeCount;
        }
        if (isAutoCompleteSnapshot) {
            snapshots.autoCompleteIndex = snapshots.currentIndex;
        }
    }
    else if (isSameSnapshot) {
        // replace the currentSnapshot's metadata so the selection is updated
        snapshots.snapshots.splice(snapshots.currentIndex, 1, snapshot);
    }
}
exports.default = addSnapshot;
/**
 * Add a new snapshot to the given snapshots data structure
 * @param snapshots The snapshots data structure to add new snapshot into
 * @param snapshot The snapshot object to add
 * @param isAutoCompleteSnapshot Whether this is a snapshot before auto complete action
 */
function addSnapshotV2(snapshots, snapshot, isAutoCompleteSnapshot) {
    addSnapshot(snapshots, snapshot, isAutoCompleteSnapshot, function (s) { var _a; return ((_a = s.html) === null || _a === void 0 ? void 0 : _a.length) || 0; }, compareSnapshots);
}
exports.addSnapshotV2 = addSnapshotV2;
function compareSnapshots(s1, s2) {
    return s1.html == s2.html && !s1.entityStates && !s2.entityStates;
}
function defaultCompare(s1, s2) {
    return s1 == s2;
}
//# sourceMappingURL=addSnapshot.js.map