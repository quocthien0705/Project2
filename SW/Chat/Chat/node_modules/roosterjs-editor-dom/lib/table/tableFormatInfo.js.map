{"version":3,"file":"tableFormatInfo.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/table/tableFormatInfo.ts"],"names":[],"mappings":";;;AAAA,iDAAgE;AAGhE,qEAKwC;AAExC,IAAM,oBAAoB,GAAG,IAAA,2CAAsB,EAC/C,KAAK,CAAC,iBAAiB,EACvB,SAAS,CAAC,YAAY,EACtB,IAAI,CAAC,gBAAgB,CACxB,CAAC;AAEF,IAAM,iBAAiB,GAAG,IAAA,4CAAuB,EAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAE3E,IAAM,mBAAmB,GAAG,IAAA,2CAAsB,EAC9C;IACI,cAAc,EAAE,oBAAoB;IACpC,iBAAiB,EAAE,oBAAoB;IACvC,mBAAmB,EAAE,oBAAoB;IACzC,YAAY,EAAE,iBAAiB;IAC/B,cAAc,EAAE,oBAAoB;IACpC,cAAc,EAAE,iBAAiB;IACjC,gBAAgB,EAAE,iBAAiB;IACnC,aAAa,EAAE,iBAAiB;IAChC,WAAW,EAAE,oBAAoB;IACjC,UAAU,EAAE,oBAAoB;IAChC,iBAAiB,EAAE,IAAA,2CAAsB,EACrC,KAAK,CAAC,iBAAiB,EACvB,SAAS,CAAC,WAAW,iCAGxB;IACD,aAAa,EAAE,IAAA,4CAAuB,EAAC,IAAI,CAAC,iBAAiB,CAAC;IAC9D,aAAa,EAAE,oBAAoB;CACtC,EACD,KAAK,CAAC,gBAAgB,EACtB,IAAI,CAAC,gBAAgB,CACxB,CAAC;AAEF;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,KAAuB;IACtD,OAAO,IAAA,sBAAW,EAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;AACnD,CAAC;AAFD,gDAEC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,KAAuB,EAAE,MAAmB;IACtE,IAAI,KAAK,IAAI,MAAM,EAAE;QACjB,IAAA,sBAAW,EAAC,KAAK,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;KACnD;AACL,CAAC;AAJD,sCAIC","sourcesContent":["import { getMetadata, setMetadata } from '../metadata/metadata';\nimport { TableBorderFormat } from 'roosterjs-editor-types';\nimport type { TableFormat } from 'roosterjs-editor-types';\nimport {\n    createBooleanDefinition,\n    createNumberDefinition,\n    createObjectDefinition,\n    createStringDefinition,\n} from '../metadata/definitionCreators';\n\nconst NullStringDefinition = createStringDefinition(\n    false /** isOptional */,\n    undefined /** value */,\n    true /** allowNull */\n);\n\nconst BooleanDefinition = createBooleanDefinition(false /** isOptional */);\n\nconst TableFormatMetadata = createObjectDefinition<Required<TableFormat>>(\n    {\n        topBorderColor: NullStringDefinition,\n        bottomBorderColor: NullStringDefinition,\n        verticalBorderColor: NullStringDefinition,\n        hasHeaderRow: BooleanDefinition,\n        headerRowColor: NullStringDefinition,\n        hasFirstColumn: BooleanDefinition,\n        hasBandedColumns: BooleanDefinition,\n        hasBandedRows: BooleanDefinition,\n        bgColorEven: NullStringDefinition,\n        bgColorOdd: NullStringDefinition,\n        tableBorderFormat: createNumberDefinition(\n            false /** isOptional */,\n            undefined /* value */,\n            TableBorderFormat.DEFAULT /* first table border format, TODO: Use Min/Max to specify valid values */,\n            TableBorderFormat.CLEAR /* last table border format, , TODO: Use Min/Max to specify valid values */\n        ),\n        keepCellShade: createBooleanDefinition(true /** isOptional */),\n        verticalAlign: NullStringDefinition,\n    },\n    false /* isOptional */,\n    true /** allowNull */\n);\n\n/**\n * Get the format info of a table\n * If the table does not have a info saved, it will be retrieved from the css styles\n * @param table The table that has the info\n */\nexport function getTableFormatInfo(table: HTMLTableElement) {\n    return getMetadata(table, TableFormatMetadata);\n}\n\n/**\n * @internal\n * Save the format info of a table\n * @param table The table the info will be saved\n * @param format The format of the table\n */\nexport function saveTableInfo(table: HTMLTableElement, format: TableFormat) {\n    if (table && format) {\n        setMetadata(table, format, TableFormatMetadata);\n    }\n}\n"]}