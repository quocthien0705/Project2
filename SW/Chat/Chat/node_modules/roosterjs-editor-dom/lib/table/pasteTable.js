"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cloneCellStyles_1 = require("./cloneCellStyles");
var moveChildNodes_1 = require("../utils/moveChildNodes");
var VTable_1 = require("./VTable");
/**
 * @internal
 * Pastes a table inside another, modifying the original to create a merged one
 * @param currentTd The cell where the cursor is in the table to paste into
 * @param rootNodeToInsert A Node containing the table to be inserted
 * @param position The position to paste the table
 * @param range The selected range of the table
 *
 * Position and range are here for when table selection allows to move pivot point
 */
function pasteTable(currentTd, rootNodeToInsert, position, range) {
    var _a, _b, _c, _d;
    // This is the table on the clipboard
    var newTable = new VTable_1.default(rootNodeToInsert);
    // This table is already on the editor
    var currentTable = new VTable_1.default(currentTd);
    // Which cell in the currentTable is the cursor placed
    var cursorRow = currentTable.row;
    var cursorCol = currentTable.col;
    // Total rows and columns of the final table
    var rows = (_b = cursorRow + ((_a = newTable.cells) === null || _a === void 0 ? void 0 : _a.length)) !== null && _b !== void 0 ? _b : 0;
    var columns = (_d = cursorCol + ((_c = newTable.cells) === null || _c === void 0 ? void 0 : _c[0].length)) !== null && _d !== void 0 ? _d : 0;
    // Add new rows
    currentTable.row = currentTable.cells.length - 1;
    while (currentTable.cells.length < rows) {
        currentTable.edit(1 /* InsertBelow */);
    }
    // Add new columns
    currentTable.col = currentTable.cells[0].length - 1;
    while (currentTable.cells[0].length < columns) {
        currentTable.edit(3 /* InsertRight */);
    }
    // Create final table
    for (var i = cursorRow; i < rows; i++) {
        for (var j = cursorCol; j < columns; j++) {
            var cell = currentTable.getCell(i, j);
            var newCell = newTable.getTd(i - cursorRow, j - cursorCol);
            if (cell.td && newCell) {
                (0, moveChildNodes_1.default)(cell.td, newCell);
                (0, cloneCellStyles_1.default)(cell.td, newCell);
            }
            else {
                cell.td = document.createElement('td');
            }
        }
    }
    currentTable.writeBack();
}
exports.default = pasteTable;
//# sourceMappingURL=pasteTable.js.map