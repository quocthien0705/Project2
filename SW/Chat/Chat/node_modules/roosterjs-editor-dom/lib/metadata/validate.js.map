{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/metadata/validate.ts"],"names":[],"mappings":";;AAAA,0DAAqD;AAIrD;;;;;GAKG;AACH,SAAwB,QAAQ,CAAI,KAAU,EAAE,GAAkB;IAC9D,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,KAAK,KAAK,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC,EAAE;QACvF,MAAM,GAAG,IAAI,CAAC;KACjB;SAAM,IACH,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,KAAK,KAAK,WAAW,CAAC;QACjD,CAAC,CAAC,GAAG,CAAC,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC,EACpC;QACE,OAAO,KAAK,CAAC;KAChB;SAAM;QACH,QAAQ,GAAG,CAAC,IAAI,EAAE;YACd;gBACI,MAAM;oBACF,OAAO,KAAK,KAAK,QAAQ;wBACzB,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC9D,MAAM;YAEV;gBACI,MAAM;oBACF,OAAO,KAAK,KAAK,QAAQ;wBACzB,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK,WAAW,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBACtE,CAAC,OAAO,GAAG,CAAC,QAAQ,KAAK,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC;wBAC9D,CAAC,OAAO,GAAG,CAAC,QAAQ,KAAK,WAAW,IAAI,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACnE,MAAM;YAEV;gBACI,MAAM;oBACF,OAAO,KAAK,KAAK,SAAS;wBAC1B,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC9D,MAAM;YAEV;gBACI,MAAM;oBACF,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;wBACpB,CAAC,OAAO,GAAG,CAAC,SAAS,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,SAAS,CAAC;wBACvE,CAAC,OAAO,GAAG,CAAC,SAAS,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,SAAS,CAAC;wBACvE,KAAK,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;gBAC/C,MAAM;YAEV;gBACI,MAAM;oBACF,OAAO,KAAK,KAAK,QAAQ;wBACzB,IAAA,uBAAa,EAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC;4BAClC,OAAA,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAAtC,CAAsC,CACzC,CAAC;gBACN,MAAM;YAEV;gBACI,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC9B,MAAM;SACb;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAtDD,2BAsDC;AAED,SAAS,cAAc,CAAC,EAAU,EAAE,EAAU;IAC1C,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AACpC,CAAC","sourcesContent":["import getObjectKeys from '../jsUtils/getObjectKeys';\nimport { DefinitionType } from 'roosterjs-editor-types';\nimport type { Definition } from 'roosterjs-editor-types';\n\n/**\n * Validate the given object with a type definition object\n * @param input The object to validate\n * @param def The type definition object used for validation\n * @returns True if the object passed the validation, otherwise false\n */\nexport default function validate<T>(input: any, def: Definition<T>): input is T {\n    let result = false;\n    if ((def.isOptional && typeof input === 'undefined') || (def.allowNull && input === null)) {\n        result = true;\n    } else if (\n        (!def.isOptional && typeof input === 'undefined') ||\n        (!def.allowNull && input === null)\n    ) {\n        return false;\n    } else {\n        switch (def.type) {\n            case DefinitionType.String:\n                result =\n                    typeof input === 'string' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case DefinitionType.Number:\n                result =\n                    typeof input === 'number' &&\n                    (typeof def.value === 'undefined' || areSameNumbers(def.value, input)) &&\n                    (typeof def.minValue === 'undefined' || input >= def.minValue) &&\n                    (typeof def.maxValue === 'undefined' || input <= def.maxValue);\n                break;\n\n            case DefinitionType.Boolean:\n                result =\n                    typeof input === 'boolean' &&\n                    (typeof def.value === 'undefined' || input === def.value);\n                break;\n\n            case DefinitionType.Array:\n                result =\n                    Array.isArray(input) &&\n                    (typeof def.minLength === 'undefined' || input.length >= def.minLength) &&\n                    (typeof def.maxLength === 'undefined' || input.length <= def.maxLength) &&\n                    input.every(x => validate(x, def.itemDef));\n                break;\n\n            case DefinitionType.Object:\n                result =\n                    typeof input === 'object' &&\n                    getObjectKeys(def.propertyDef).every(x =>\n                        validate(input[x], def.propertyDef[x])\n                    );\n                break;\n\n            case DefinitionType.Customize:\n                result = def.validator(input);\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction areSameNumbers(n1: number, n2: number) {\n    return Math.abs(n1 - n2) < 1e-3;\n}\n"]}