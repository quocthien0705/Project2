{"version":3,"file":"moveChildNodes.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/moveChildNodes.ts"],"names":[],"mappings":";;AAAA;;;;;GAKG;AACH,SAAwB,cAAc,CAClC,MAAY,EACZ,MAAa,EACb,oBAA8B;IAE9B,IAAI,CAAC,MAAM,EAAE;QACT,OAAO;KACV;IAED,OAAO,CAAC,oBAAoB,IAAI,MAAM,CAAC,UAAU,EAAE;QAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACzC;IAED,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,EAAE;QACvB,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACzC;AACL,CAAC;AAhBD,iCAgBC","sourcesContent":["/**\n * Replace all child nodes of the given target node to the child nodes of source node.\n * @param target Target node, all child nodes of this node will be removed if keepExistingChildren is not set to true\n * @param source (Optional) source node, all child nodes of this node will be move to target node\n * @param keepExistingChildren (Optional) When set to true, all existing child nodes of target will be kept\n */\nexport default function moveChildNodes(\n    target: Node,\n    source?: Node,\n    keepExistingChildren?: boolean\n) {\n    if (!target) {\n        return;\n    }\n\n    while (!keepExistingChildren && target.firstChild) {\n        target.removeChild(target.firstChild);\n    }\n\n    while (source?.firstChild) {\n        target.appendChild(source.firstChild);\n    }\n}\n"]}