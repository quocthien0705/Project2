{"version":3,"file":"findClosestElementAncestor.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qDAAgD;AAGhD;;;;;;;GAOG;AACH,SAAwB,0BAA0B,CAC9C,IAAiB,EACjB,IAAW,EACX,QAAiB;IAEjB,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,mBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IACjF,IAAI,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,mBAAoB,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAEnF,IAAI,OAAO,IAAI,QAAQ,EAAE;QACrB,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAgB,CAAC;SACtD;aAAM;YACH,OAAO,OAAO,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,IAAA,yBAAe,EAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACtE,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;aACnC;SACJ;KACJ;IAED,OAAO,CAAC,IAAI,IAAI,IAAA,kBAAQ,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;AAC7D,CAAC;AAnBD,6CAmBC","sourcesContent":["import contains from './contains';\r\nimport matchesSelector from './matchesSelector';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node | null,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement | null {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (element && element != root && !matchesSelector(element, selector)) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n"]}