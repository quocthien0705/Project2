{"version":3,"file":"wrap.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/wrap.ts"],"names":[],"mappings":";;;AAAA,iDAA4C;AAC5C,uCAAkC;AAClC,mDAA8C;AA6C9C,SAAwB,IAAI,CACxB,KAAoB,EACpB,OAK2C;;IAE3C,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,wBAAc,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACtE,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE;QAC3D,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,GAAG,KAAK,CAAC;KACnB;IAED,IAAI,CAAC,IAAA,wBAAc,EAAC,OAAO,EAAE,aAAa,CAAC,EAAE;QACzC,IAAM,UAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QAExC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;gBAC3B,CAAC,CAAC,UAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;gBACjC,CAAC,CAAE,IAAA,kBAAQ,EAAC,OAAO,EAAE,UAAQ,CAAC,CAAC,CAAC,CAAiB,CAAC,CAAC,6CAA6C;SACvG;aAAM;YACH,OAAO,GAAG,IAAA,uBAAa,EAAC,OAAO,EAAE,UAAQ,CAAgB,CAAC;SAC7D;KACJ;IAED,IAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;IAEvC,IAAI,UAAU,EAAE;QACZ,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9C;;QAED,KAAmB,IAAA,UAAA,sBAAA,KAAK,CAAA,4BAAA,+CAAE;YAArB,IAAM,IAAI,kBAAA;YACX,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC7B;;;;;;;;;IAED,OAAO,OAAO,CAAC;AACnB,CAAC;AAzCD,uBAyCC","sourcesContent":["import createElement from './createElement';\r\nimport fromHtml from './fromHtml';\r\nimport safeInstanceOf from './safeInstanceOf';\r\nimport type { CreateElementData, KnownCreateElementDataIndex } from 'roosterjs-editor-types';\r\nimport type { CompatibleKnownCreateElementDataIndex } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * @deprecated\r\n * Wrap all the nodes with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the nodes with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\n/**\r\n * Wraps all the nodes with CreateElementData or an index of a known CreateElementData\r\n * @param nodes The nodes to wrap\r\n * @param wrapper The CreateElementData or an index of a known CreateElementData\r\n */\r\nexport default function wrap(\r\n    nodes: Node | Node[],\r\n    wrapper?:\r\n        | CreateElementData\r\n        | KnownCreateElementDataIndex\r\n        | CompatibleKnownCreateElementDataIndex\r\n): HTMLElement;\r\n\r\nexport default function wrap(\r\n    nodes: Node | Node[],\r\n    wrapper?:\r\n        | string\r\n        | HTMLElement\r\n        | CreateElementData\r\n        | KnownCreateElementDataIndex\r\n        | CompatibleKnownCreateElementDataIndex\r\n): HTMLElement | null {\r\n    nodes = !nodes ? [] : safeInstanceOf(nodes, 'Node') ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0] || !nodes[0].ownerDocument) {\r\n        return null;\r\n    }\r\n\r\n    if (!wrapper) {\r\n        wrapper = 'div';\r\n    }\r\n\r\n    if (!safeInstanceOf(wrapper, 'HTMLElement')) {\r\n        const document = nodes[0].ownerDocument;\r\n\r\n        if (typeof wrapper === 'string') {\r\n            wrapper = /^\\w+$/.test(wrapper)\r\n                ? document.createElement(wrapper)\r\n                : (fromHtml(wrapper, document)[0] as HTMLElement); // This will be removed in next major release\r\n        } else {\r\n            wrapper = createElement(wrapper, document) as HTMLElement;\r\n        }\r\n    }\r\n\r\n    const parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (const node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n"]}