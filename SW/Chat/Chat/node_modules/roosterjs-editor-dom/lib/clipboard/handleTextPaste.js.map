{"version":3,"file":"handleTextPaste.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/clipboard/handleTextPaste.ts"],"names":[],"mappings":";;;AAAA,sCAAiC;AAGjC,IAAM,SAAS,GAAG,QAAQ,CAAC;AAC3B,IAAM,SAAS,GAAG,QAAQ,CAAC;AAC3B,IAAM,UAAU,GAAG,CAAC,CAAC;AAErB;;;;;GAKG;AACH,SAAwB,eAAe,CACnC,IAAY,EACZ,QAA6B,EAC7B,QAA0B;IAE1B,IAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;IACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,KAAK;QACxC,IAAI,GAAG,IAAI;aACN,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC;aACzB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;aAClB,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,SAAS,CAAC,CAAC;QAEvC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,GAAG,sBAAsB,CAAC,IAAI,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3E;QAED,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAE/C,yBAAyB;QACzB,iCAAiC;QACjC,2CAA2C;QAC3C,+HAA+H;QAC/H,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;YACjC,gCAAgC;YAChC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC/B,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD;aAAM,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9C,mDAAmD;YACnD,QAAQ,CAAC,WAAW,CAAC,IAAA,cAAI,EAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SACpF;aAAM;YACH,6BAA6B;YAC7B,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SAClC;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAlCD,kCAkCC;AAED;;;;;GAKG;AAEH,SAAgB,sBAAsB,CAAC,KAAa,EAAE,aAAyB;IAAzB,8BAAA,EAAA,iBAAyB;IAC3E,IAAI,IAAI,GAAG,KAAK,CAAC;IACjB,IAAI,MAAc,CAAC;IACnB,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QACxC,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACzC,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzC,IAAM,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,aAAa,CAAC,GAAG,UAAU,CAAC,CAAC;QACjF,IAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,GAAG,UAAU,GAAG,MAAM,GAAG,SAAS,CAAC;KAC1C;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAXD,wDAWC","sourcesContent":["import wrap from '../utils/wrap';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\nconst NBSP_HTML = '\\u00A0';\nconst ENSP_HTML = '\\u2002';\nconst TAB_SPACES = 6;\n\n/**\n * handle the content when using the text only option\n * @param text Text from clipboard\n * @param position current position of the clipboard\n * @param fragment fragment that contains the paste content.\n */\nexport default function handleTextPaste(\n    text: string,\n    position: NodePosition | null,\n    fragment: DocumentFragment\n) {\n    const document = fragment.ownerDocument;\n    text.split('\\n').forEach((line, index, lines) => {\n        line = line\n            .replace(/^ /g, NBSP_HTML)\n            .replace(/\\r/g, '')\n            .replace(/ {2}/g, ' ' + NBSP_HTML);\n\n        if (line.includes('\\t')) {\n            line = transformTabCharacters(line, index === 0 ? position?.offset : 0);\n        }\n\n        const textNode = document.createTextNode(line);\n\n        // There are 3 scenarios:\n        // 1. Single line: Paste as it is\n        // 2. Two lines: Add <br> between the lines\n        // 3. 3 or More lines, For first and last line, paste as it is. For middle lines, wrap with DIV, and add BR if it is empty line\n        if (lines.length == 2 && index == 0) {\n            // 1 of 2 lines scenario, add BR\n            fragment.appendChild(textNode);\n            fragment.appendChild(document.createElement('br'));\n        } else if (index > 0 && index < lines.length - 1) {\n            // Middle line of >=3 lines scenario, wrap with DIV\n            fragment.appendChild(wrap(line == '' ? document.createElement('br') : textNode));\n        } else {\n            // All others, paste as it is\n            fragment.appendChild(textNode);\n        }\n    });\n}\n\n/**\n * @internal\n * Transform \\t characters into EN SPACE characters\n * @param input string NOT containing \\n characters\n * @example t(\"\\thello\", 2) => \"&ensp;&ensp;&ensp;&ensp;hello\"\n */\n\nexport function transformTabCharacters(input: string, initialOffset: number = 0) {\n    let line = input;\n    let tIndex: number;\n    while ((tIndex = line.indexOf('\\t')) != -1) {\n        const lineBefore = line.slice(0, tIndex);\n        const lineAfter = line.slice(tIndex + 1);\n        const tabCount = TAB_SPACES - ((lineBefore.length + initialOffset) % TAB_SPACES);\n        const tabStr = Array(tabCount).fill(ENSP_HTML).join('');\n        line = lineBefore + tabStr + lineAfter;\n    }\n    return line;\n}\n"]}