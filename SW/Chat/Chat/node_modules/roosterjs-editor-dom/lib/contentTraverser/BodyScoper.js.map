{"version":3,"file":"BodyScoper.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts"],"names":[],"mappings":";;AAAA,8CAAyC;AACzC,gFAA2E;AAC3E,sFAAiF;AACjF,mFAA8E;AAC9E,yFAAoF;AAIpF;;;GAGG;AACH;IAGI;;;;OAIG;IACH,oBAAmB,QAAc,EAAE,SAAgB;QAAhC,aAAQ,GAAR,QAAQ,CAAM;QAC7B,IAAI,CAAC,SAAS,GAAG,IAAA,kBAAQ,EAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,SAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IACvE,CAAC;IAED;;OAEG;IACI,yCAAoB,GAA3B;QACI,OAAO,IAAI,CAAC,SAAS;YACjB,CAAC,CAAC,IAAA,+BAAqB,EAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC;YACtD,CAAC,CAAC,IAAA,kCAAwB,EAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,0CAAqB,GAA5B;QACI,OAAO,IAAI,CAAC,SAAS;YACjB,CAAC,CAAC,IAAA,gCAAsB,EAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC;YACvD,CAAC,CAAC,IAAA,iDAAqB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,mCAAc,GAArB,UAAsB,YAA0B;QAC5C,OAAO,IAAA,kBAAQ,EAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACI,sCAAiB,GAAxB,UAAyB,aAA4B;QACjD,OAAO,aAAa,CAAC;IACzB,CAAC;IACL,iBAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import contains from '../utils/contains';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getFirstLastBlockElement from '../blockElements/getFirstLastBlockElement';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\nimport type TraversingScoper from './TraversingScoper';\r\nimport type { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * @internal\r\n * provides a scope object for traversing the entire editor body starting from the beginning\r\n */\r\nexport default class BodyScoper implements TraversingScoper {\r\n    private startNode: Node | null;\r\n\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    constructor(public rootNode: Node, startNode?: Node) {\r\n        this.startNode = contains(rootNode, startNode) ? startNode! : null;\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement | null {\r\n        return this.startNode\r\n            ? getBlockElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstLastBlockElement(this.rootNode, true /*isFirst*/);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement | null {\r\n        return this.startNode\r\n            ? getInlineElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n"]}