{"version":3,"file":"TraversingScoper.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/contentTraverser/TraversingScoper.ts"],"names":[],"mappings":"","sourcesContent":["import type { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * @internal\r\n * A scoper provides two things to a content traverser:\r\n * 1) a start position -- a start inline or block element\r\n * 2) check if a block and inline element is in scope\r\n *\r\n * The reason why the inline element check is made as trimInlineElement (instead of isInlineInScope) is to accommodate\r\n * selection scoping where the traverser may give a full inline element and only a partial of it\r\n * falls within the selection. In that case, we want to trim the inline to return a partial inline element\r\n */\r\nexport default interface TraversingScoper {\r\n    /**\r\n     * The root node of this scoper\r\n     */\r\n    rootNode: Node;\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    getStartBlockElement: () => BlockElement | null;\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    getStartInlineElement: () => InlineElement | null;\r\n\r\n    /**\r\n     * Check if the given block element is in this scope\r\n     */\r\n    isBlockInScope: (blockElement: BlockElement) => boolean;\r\n\r\n    /**\r\n     * Trim the given inline element to match this scope\r\n     */\r\n    trimInlineElement: (inlineElement: InlineElement) => InlineElement | null;\r\n}\r\n"]}