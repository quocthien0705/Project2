{"version":3,"file":"getFirstLastBlockElement.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts"],"names":[],"mappings":";;AAAA,iEAA4D;AAG5D;;;;;GAKG;AACH,SAAwB,wBAAwB,CAC5C,QAAc,EACd,OAAgB;IAEhB,IAAI,IAAI,GAAgB,QAAQ,CAAC;IACjC,GAAG;QACC,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC/D,QAAQ,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;IAClC,OAAO,CAAC,IAAI,IAAI,IAAA,+BAAqB,EAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;AACnE,CAAC;AATD,2CASC","sourcesContent":["import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport type { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(\r\n    rootNode: Node,\r\n    isFirst: boolean\r\n): BlockElement | null {\r\n    let node: Node | null = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return (node && getBlockElementAtNode(rootNode, node)) || null;\r\n}\r\n"]}