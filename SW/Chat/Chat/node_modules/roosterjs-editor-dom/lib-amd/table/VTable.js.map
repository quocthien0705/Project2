{"version":3,"file":"VTable.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/table/VTable.ts"],"names":[],"mappings":"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","sourcesContent":["import applyTableFormat from './applyTableFormat';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport moveChildNodes from '../utils/moveChildNodes';\r\nimport normalizeRect from '../utils/normalizeRect';\r\nimport safeInstanceOf from '../utils/safeInstanceOf';\r\nimport toArray from '../jsUtils/toArray';\r\nimport { getTableCellMetadata, saveTableCellMetadata } from './tableCellInfo';\r\nimport { getTableFormatInfo, saveTableInfo } from './tableFormatInfo';\r\nimport { removeMetadata } from '../metadata/metadata';\r\nimport { TableBorderFormat, TableOperation } from 'roosterjs-editor-types';\r\nimport type {\r\n    SizeTransformer,\r\n    TableFormat,\r\n    TableSelection,\r\n    VCell,\r\n    DarkColorHandler,\r\n} from 'roosterjs-editor-types';\r\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\nconst DEFAULT_FORMAT: Required<TableFormat> = {\r\n    topBorderColor: '#ABABAB',\r\n    bottomBorderColor: '#ABABAB',\r\n    verticalBorderColor: '#ABABAB',\r\n    hasHeaderRow: false,\r\n    hasFirstColumn: false,\r\n    hasBandedRows: false,\r\n    hasBandedColumns: false,\r\n    bgColorEven: null,\r\n    bgColorOdd: '#ABABAB20',\r\n    headerRowColor: '#ABABAB',\r\n    tableBorderFormat: TableBorderFormat.DEFAULT,\r\n    keepCellShade: false,\r\n    verticalAlign: null,\r\n};\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][] | null = null;\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number | undefined;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number | undefined;\r\n\r\n    /**\r\n     * Current format of the table\r\n     */\r\n    formatInfo: Required<TableFormat> | null = null;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    private tableSelection: TableSelection | null = null;\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     * @param normalizeSize Whether table size needs to be normalized\r\n     * @param zoomScale When the table is under a zoomed container, pass in the zoom scale here\r\n     */\r\n    constructor(\r\n        node: HTMLTableElement | HTMLTableCellElement,\r\n        normalizeSize?: boolean,\r\n        zoomScale?: number | SizeTransformer\r\n    ) {\r\n        this.table = safeInstanceOf(node, 'HTMLTableElement') ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            const currentTd = safeInstanceOf(node, 'HTMLTableElement') ? null : node;\r\n            const trs = toArray(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells![rowIndex][targetCol]; targetCol++) {}\r\n                    const td = tr.cells[sourceCol];\r\n\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            const hasTd: boolean = colSpan + rowSpan == 0;\r\n                            const rect = td.getBoundingClientRect();\r\n                            if (this.cells?.[rowIndex + rowSpan]) {\r\n                                this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                    td: hasTd ? td : null,\r\n                                    spanLeft: colSpan > 0,\r\n                                    spanAbove: rowSpan > 0,\r\n                                    width: hasTd ? rect.width : undefined,\r\n                                    height: hasTd ? rect.height : undefined,\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let col = 0; col < this.cells![rowIndex].length; col++) {\r\n                    if (!this.cells![rowIndex][col]) {\r\n                        this.cells![rowIndex][col] = {\r\n                            td: null,\r\n                            spanLeft: false,\r\n                            spanAbove: false,\r\n                            width: undefined,\r\n                            height: undefined,\r\n                        };\r\n                    }\r\n                }\r\n            });\r\n            this.formatInfo = getTableFormatInfo(this.table);\r\n            if (normalizeSize) {\r\n                this.normalizeSize(typeof zoomScale == 'number' ? n => n / zoomScale : zoomScale);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selected range of cells with the coordinates of the first and last cell selected.\r\n     */\r\n    public get selection(): TableSelection | null {\r\n        return this.tableSelection || null;\r\n    }\r\n\r\n    public set selection(value: TableSelection | null) {\r\n        if (value) {\r\n            const { firstCell } = value;\r\n            this.row = firstCell?.y;\r\n            this.col = firstCell?.x;\r\n        }\r\n        this.tableSelection = value;\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     * @param skipApplyFormat Do not reapply table format when write back. Only use this parameter when you are pretty sure there is no format or table structure change during the process.\r\n     * @param darkColorHandler An object to handle dark background colors, if not passed the cell background color will not be set\r\n     */\r\n    writeBack(skipApplyFormat?: boolean, darkColorHandler?: DarkColorHandler | null) {\r\n        if (this.cells) {\r\n            moveChildNodes(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                const tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n\r\n                if (tr) {\r\n                    this.table.appendChild(tr);\r\n                    row.forEach((cell, c) => {\r\n                        if (cell.td) {\r\n                            this.recalculateSpans(r, c);\r\n                            this.recalculateCellHeight(cell.td);\r\n                            tr!.appendChild(cell.td);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            if (this.formatInfo && !skipApplyFormat) {\r\n                saveTableInfo(this.table, this.formatInfo);\r\n                applyTableFormat(this.table, this.cells, this.formatInfo, darkColorHandler);\r\n            }\r\n        } else if (this.table) {\r\n            this.table.parentNode?.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    private recalculateCellHeight(td: HTMLTableCellElement) {\r\n        if (this.isEmptyCell(td) && td.rowSpan > 1) {\r\n            for (let i = 1; i < td.rowSpan; i++) {\r\n                const br = document.createElement('br');\r\n                td.appendChild(br);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n        this.formatInfo = {\r\n            ...DEFAULT_FORMAT,\r\n            ...(this.formatInfo || {}),\r\n            ...(format || {}),\r\n        };\r\n        if (!this.formatInfo.keepCellShade) {\r\n            this.deleteCellShadeDataset(this.cells);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the cellShade dataset to apply a new style format at the cell.\r\n     * @param cells\r\n     */\r\n    private deleteCellShadeDataset(cells: VCell[][] | null) {\r\n        cells?.forEach(row => {\r\n            row.forEach(cell => {\r\n                if (cell.td) {\r\n                    removeMetadata(cell.td, 'bgColorOverride');\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation | CompatibleTableOperation) {\r\n        if (!this.table || !this.cells || this.row === undefined || this.col == undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentRow = this.cells[this.row];\r\n        const currentCell = currentRow[this.col];\r\n        const firstRow = this.selection ? this.selection.firstCell.y : this.row;\r\n        const lastRow = this.selection ? this.selection.lastCell.y : this.row;\r\n        const firstColumn = this.selection ? this.selection.firstCell.x : this.col;\r\n        const lastColumn = this.selection ? this.selection.lastCell.x : this.col;\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                for (let i = firstRow; i <= lastRow; i++) {\r\n                    this.cells.splice(firstRow, 0, currentRow.map(cloneCell));\r\n                }\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                for (let i = firstRow; i <= lastRow; i++) {\r\n                    const newRow = lastRow + this.countSpanAbove(lastRow, this.col);\r\n                    this.cells.splice(\r\n                        newRow,\r\n                        0,\r\n                        this.cells[newRow - 1].map((cell, colIndex) => {\r\n                            const nextCell = this.getCell(newRow, colIndex);\r\n\r\n                            if (nextCell.spanAbove) {\r\n                                return cloneCell(nextCell);\r\n                            } else if (cell.spanLeft) {\r\n                                const newCell = cloneCell(cell);\r\n                                newCell.spanAbove = false;\r\n                                return newCell;\r\n                            } else {\r\n                                return {\r\n                                    td: cloneNode(this.getTd(this.row!, colIndex)),\r\n                                };\r\n                            }\r\n                        })\r\n                    );\r\n                }\r\n\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                for (let i = firstColumn; i <= lastColumn; i++) {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(i, 0, cloneCell(cell));\r\n                    });\r\n                }\r\n\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                for (let i = firstColumn; i <= lastColumn; i++) {\r\n                    const newCol = lastColumn + this.countSpanLeft(this.row, lastColumn);\r\n                    this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                        const nextCell = this.getCell(i, newCol);\r\n                        let newCell: VCell;\r\n                        if (nextCell.spanLeft) {\r\n                            newCell = cloneCell(nextCell);\r\n                        } else if (cell.spanAbove) {\r\n                            newCell = cloneCell(cell);\r\n                            newCell.spanLeft = false;\r\n                        } else {\r\n                            newCell = {\r\n                                td: cloneNode(this.getTd(i, this.col!)),\r\n                            };\r\n                        }\r\n\r\n                        row.splice(newCol, 0, newCell);\r\n                    });\r\n                }\r\n\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\r\n                    this.forEachCellOfRow(rowIndex, (cell: VCell, i: number) => {\r\n                        const nextCell = this.getCell(rowIndex + 1, i);\r\n                        if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                            nextCell.td = cell.td;\r\n                        }\r\n                    });\r\n                }\r\n                const removedRows = this.selection\r\n                    ? this.selection.lastCell.y - this.selection.firstCell.y\r\n                    : 0;\r\n                this.cells.splice(firstRow, removedRows + 1);\r\n                if (this.cells.length === 0) {\r\n                    this.cells = null;\r\n                }\r\n\r\n                break;\r\n            case TableOperation.DeleteColumn:\r\n                let deletedColumns = 0;\r\n                for (let colIndex = firstColumn; colIndex <= lastColumn; colIndex++) {\r\n                    this.forEachCellOfColumn(colIndex, (cell, row, i) => {\r\n                        const nextCell = this.getCell(i, colIndex + 1);\r\n                        if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                            nextCell.td = cell.td;\r\n                        }\r\n                        const removedColumns = this.selection\r\n                            ? colIndex - deletedColumns\r\n                            : this.col!;\r\n                        row.splice(removedColumns, 1);\r\n                    });\r\n                    deletedColumns++;\r\n                }\r\n                if (this.cells?.length === 0 || this.cells?.every(row => row.length === 0)) {\r\n                    this.cells = null;\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                const rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    const cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        const aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        const belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        this.mergeCells(aboveCell, belowCell);\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                const colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    const cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        const leftCell = colIndex < this.col ? cell : currentCell;\r\n                        const rightCell = colIndex < this.col ? currentCell : cell;\r\n                        this.mergeCells(leftCell, rightCell, true /** horizontally */);\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeCells:\r\n                for (let colIndex = firstColumn; colIndex <= lastColumn; colIndex++) {\r\n                    for (let rowIndex = firstRow + 1; rowIndex <= lastRow; rowIndex++) {\r\n                        const cell = this.getCell(firstRow, colIndex);\r\n                        const nextCellBelow = this.getCell(rowIndex, colIndex);\r\n                        this.mergeCells(cell, nextCellBelow);\r\n                    }\r\n                }\r\n                for (let colIndex = firstColumn + 1; colIndex <= lastColumn; colIndex++) {\r\n                    const cell = this.getCell(firstRow, firstColumn);\r\n                    const nextCellRight = this.getCell(firstRow, colIndex);\r\n                    this.mergeCells(cell, nextCellRight, true /** horizontally */);\r\n                }\r\n\r\n                break;\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td && currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    const splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td && currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col! + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n            case TableOperation.AlignCenter:\r\n                this.table.style.marginLeft = 'auto';\r\n                this.table.style.marginRight = 'auto';\r\n                break;\r\n            case TableOperation.AlignLeft:\r\n                this.table.style.marginLeft = '';\r\n                this.table.style.marginRight = 'auto';\r\n                break;\r\n            case TableOperation.AlignRight:\r\n                this.table.style.marginLeft = 'auto';\r\n                this.table.style.marginRight = '';\r\n                break;\r\n            case TableOperation.AlignCellCenter:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'center'\r\n                );\r\n                break;\r\n            case TableOperation.AlignCellLeft:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'left'\r\n                );\r\n                break;\r\n            case TableOperation.AlignCellRight:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'right'\r\n                );\r\n                break;\r\n            case TableOperation.AlignCellTop:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'top',\r\n                    true /** isVertical */\r\n                );\r\n                break;\r\n            case TableOperation.AlignCellMiddle:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'middle',\r\n                    true /** isVertical */\r\n                );\r\n                break;\r\n            case TableOperation.AlignCellBottom:\r\n                this.setAlignmentToSelectedCells(\r\n                    firstRow,\r\n                    lastRow,\r\n                    firstColumn,\r\n                    lastColumn,\r\n                    'bottom',\r\n                    true /** isVertical */\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n    setAlignmentToSelectedCells(\r\n        firstRow: number,\r\n        lastRow: number,\r\n        firstColumn: number,\r\n        lastColumn: number,\r\n        alignmentType: string,\r\n        isVertical?: boolean\r\n    ) {\r\n        for (let i = firstRow; i <= lastRow; i++) {\r\n            for (let j = firstColumn; j <= lastColumn; j++) {\r\n                if (this.cells) {\r\n                    const cell = this.cells[i][j].td;\r\n                    if (isVertical && cell) {\r\n                        cell.style?.setProperty('vertical-align', alignmentType);\r\n                        const meta = getTableCellMetadata(cell);\r\n                        saveTableCellMetadata(cell, { ...meta, vAlignOverride: true });\r\n                    } else if (cell) {\r\n                        cell.style?.setProperty('text-align', alignmentType);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private mergeCells(cell: VCell, nextCell: VCell, horizontally?: boolean) {\r\n        const checkSpans = horizontally\r\n            ? cell.td?.rowSpan === nextCell.td?.rowSpan && !cell.spanLeft\r\n            : cell.td?.colSpan === nextCell.td?.colSpan && !cell.spanAbove;\r\n        if (cell.td && nextCell.td && checkSpans) {\r\n            this.mergeCellContents(cell.td, nextCell.td);\r\n            nextCell.td = null;\r\n            if (horizontally) {\r\n                nextCell.spanLeft = true;\r\n            } else {\r\n                nextCell.spanAbove = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isEmptyCell(td: HTMLTableCellElement) {\r\n        return td.childElementCount === 1 && getTagOfNode(td.firstChild) === 'BR';\r\n    }\r\n\r\n    private mergeCellContents(cellTd: HTMLTableCellElement, nextCellTd: HTMLTableCellElement) {\r\n        if (this.isEmptyCell(nextCellTd)) {\r\n            moveChildNodes(cellTd, nextCellTd, false /*keepExistingChildren*/);\r\n        } else {\r\n            const br = document.createElement('br');\r\n            cellTd.appendChild(br);\r\n            moveChildNodes(cellTd, nextCellTd, true /*keepExistingChildren*/);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each table cell and get all the cells that share the same border from one side\r\n     * The result is an array of table cell elements\r\n     * @param borderPos The position of the border\r\n     * @param getLeftCells Get left-hand-side or right-hand-side cells of the border\r\n     *\r\n     * Example, consider having a 3 by 4 table as below with merged and split cells\r\n     *\r\n     *     | 1 | 4 | 7 | 8 |\r\n     *     |   5   |   9   |\r\n     *     |   3   |   10  |\r\n     *\r\n     *  input => borderPos: the 3rd border, getLeftCells: true\r\n     *  output => [4, 5, 3]\r\n     *\r\n     *  input => borderPos: the 3rd border, getLeftCells: false\r\n     *  output => [7, 9, 10]\r\n     *\r\n     *  input => borderPos: the 2nd border, getLeftCells: true\r\n     *  output => [1]\r\n     *\r\n     *  input => borderPos: the 2nd border, getLeftCells: false\r\n     *  output => [4]\r\n     */\r\n    getCellsWithBorder(borderPos: number, getLeftCells: boolean): HTMLTableCellElement[] {\r\n        const cells: HTMLTableCellElement[] = [];\r\n        for (let i = 0; this.cells && i < this.cells.length; i++) {\r\n            for (let j = 0; j < this.cells[i].length; j++) {\r\n                const cell = this.getCell(i, j);\r\n                if (cell.td) {\r\n                    const cellRect = normalizeRect(cell.td.getBoundingClientRect());\r\n\r\n                    if (cellRect) {\r\n                        let found: boolean = false;\r\n                        if (getLeftCells) {\r\n                            if (cellRect.right == borderPos) {\r\n                                found = true;\r\n                                cells.push(cell.td);\r\n                            } else if (found) {\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            if (cellRect.left == borderPos) {\r\n                                found = true;\r\n                                cells.push(cell.td);\r\n                            } else if (found) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement | null {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    /**\r\n     * Get the Table Cell in a provided coordinate\r\n     * @param row row of the cell\r\n     * @param col column of the cell\r\n     */\r\n    getTd(row: number | undefined, col: number | undefined) {\r\n        if (this.cells && row !== undefined && col !== undefined) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = this.cells[row] ? Math.min(this.cells[row].length - 1, col) : col;\r\n            if (!isNaN(row) && !isNaN(col)) {\r\n                while (row >= 0 && col >= 0) {\r\n                    const cell = this.getCell(row, col);\r\n                    if (cell.td) {\r\n                        return cell.td;\r\n                    } else if (cell.spanLeft) {\r\n                        col--;\r\n                    } else if (cell.spanAbove) {\r\n                        row--;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number | undefined,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        if (col !== undefined) {\r\n            for (let i = 0; this.cells && i < this.cells.length; i++) {\r\n                callback(this.getCell(i, col), this.cells[i], i);\r\n            }\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number | undefined, callback: (cell: VCell, i: number) => any) {\r\n        if (row !== undefined) {\r\n            for (let i = 0; this.cells && i < this.cells[row].length; i++) {\r\n                callback(this.getCell(row, i), i);\r\n            }\r\n        }\r\n    }\r\n\r\n    private recalculateSpans(row: number, col: number) {\r\n        const td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; this.cells && i < this.cells[row].length; i++) {\r\n            const cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; this.cells && i < this.cells.length; i++) {\r\n            const cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private normalizeEmptyTableCells() {\r\n        for (let i = 0, row; (row = this.table.rows[i]); i++) {\r\n            for (let j = 0, cell; (cell = row.cells[j]); j++) {\r\n                if (cell) {\r\n                    if (!cell.innerHTML || !cell.innerHTML.trim()) {\r\n                        cell.appendChild(document.createElement('br'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* normalize width/height for each cell in the table */\r\n    public normalizeTableCellSize(zoomScale?: number | SizeTransformer) {\r\n        // remove width/height for each row\r\n        for (let i = 0, row; (row = this.table.rows[i]); i++) {\r\n            row.removeAttribute('width');\r\n            row.style.setProperty('width', null);\r\n            row.removeAttribute('height');\r\n            row.style.setProperty('height', null);\r\n        }\r\n\r\n        // set width/height for each cell\r\n        for (let i = 0; this.cells && i < this.cells.length; i++) {\r\n            for (let j = 0; j < this.cells[i].length; j++) {\r\n                const cell = this.cells[i][j];\r\n                if (cell) {\r\n                    const func =\r\n                        typeof zoomScale == 'number' ? (n: number) => n / zoomScale : zoomScale;\r\n                    const width = cell.width || 0;\r\n                    const height = cell.height || 0;\r\n\r\n                    setHTMLElementSizeInPx(\r\n                        cell.td,\r\n                        func?.(width) || width,\r\n                        func?.(height) || height\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private normalizeSize(sizeTransformer: SizeTransformer | undefined) {\r\n        this.normalizeEmptyTableCells();\r\n        this.normalizeTableCellSize(sizeTransformer);\r\n\r\n        const rect = this.table.getBoundingClientRect();\r\n\r\n        // Make sure table width/height is fixed to avoid shifting effect\r\n        setHTMLElementSizeInPx(\r\n            this.table,\r\n            sizeTransformer?.(rect.width) || rect.width,\r\n            sizeTransformer?.(rect.height) || rect.height\r\n        );\r\n    }\r\n}\r\n\r\nfunction setHTMLElementSizeInPx(\r\n    element: HTMLElement | null | undefined,\r\n    newWidth: number,\r\n    newHeight: number\r\n) {\r\n    if (!!element) {\r\n        element.removeAttribute('width');\r\n        element.removeAttribute('height');\r\n        element.style.boxSizing = 'border-box';\r\n        element.style.width = `${newWidth}px`;\r\n        element.style.height = `${newHeight}px`;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result: Element | null = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T | null | undefined): T | null {\r\n    const newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (safeInstanceOf(newNode, 'HTMLTableCellElement')) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node!.ownerDocument!.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n"]}