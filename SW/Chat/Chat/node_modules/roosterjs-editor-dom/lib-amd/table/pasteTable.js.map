{"version":3,"file":"pasteTable.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/table/pasteTable.ts"],"names":[],"mappings":";;;IAMA;;;;;;;;;OASG;IACH,SAAwB,UAAU,CAC9B,SAA+B,EAC/B,gBAAkC,EAClC,QAAuB,EACvB,KAAa;;QAEb,qCAAqC;QACrC,IAAM,QAAQ,GAAG,IAAI,gBAAM,CAAC,gBAAgB,CAAC,CAAC;QAC9C,sCAAsC;QACtC,IAAM,YAAY,GAAG,IAAI,gBAAM,CAAC,SAAS,CAAC,CAAC;QAE3C,sDAAsD;QACtD,IAAM,SAAS,GAAG,YAAY,CAAC,GAAI,CAAC;QACpC,IAAM,SAAS,GAAG,YAAY,CAAC,GAAI,CAAC;QAEpC,4CAA4C;QAC5C,IAAM,IAAI,GAAG,MAAA,SAAS,IAAG,MAAA,QAAQ,CAAC,KAAK,0CAAE,MAAO,CAAA,mCAAI,CAAC,CAAC;QACtD,IAAM,OAAO,GAAG,MAAA,SAAS,IAAG,MAAA,QAAQ,CAAC,KAAK,0CAAG,CAAC,EAAE,MAAO,CAAA,mCAAI,CAAC,CAAC;QAE7D,eAAe;QACf,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,KAAM,CAAC,MAAO,GAAG,CAAC,CAAC;QACnD,OAAO,YAAY,CAAC,KAAM,CAAC,MAAO,GAAG,IAAI,EAAE;YACvC,YAAY,CAAC,IAAI,qBAA4B,CAAC;SACjD;QAED,kBAAkB;QAClB,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,MAAO,GAAG,CAAC,CAAC;QACtD,OAAO,YAAY,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,MAAO,GAAG,OAAO,EAAE;YAC7C,YAAY,CAAC,IAAI,qBAA4B,CAAC;SACjD;QAED,qBAAqB;QACrB,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxC,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;gBAC7D,IAAI,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE;oBACpB,IAAA,wBAAc,EAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBACjC,IAAA,yBAAe,EAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACrC;qBAAM;oBACH,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;iBAC1C;aACJ;SACJ;QAED,YAAY,CAAC,SAAS,EAAE,CAAC;IAC7B,CAAC;IA9CD,6BA8CC","sourcesContent":["import cloneCellStyles from './cloneCellStyles';\nimport moveChildNodes from '../utils/moveChildNodes';\nimport VTable from './VTable';\nimport { TableOperation } from 'roosterjs-editor-types';\nimport type { NodePosition } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Pastes a table inside another, modifying the original to create a merged one\n * @param currentTd The cell where the cursor is in the table to paste into\n * @param rootNodeToInsert A Node containing the table to be inserted\n * @param position The position to paste the table\n * @param range The selected range of the table\n *\n * Position and range are here for when table selection allows to move pivot point\n */\nexport default function pasteTable(\n    currentTd: HTMLTableCellElement,\n    rootNodeToInsert: HTMLTableElement,\n    position?: NodePosition,\n    range?: Range\n) {\n    // This is the table on the clipboard\n    const newTable = new VTable(rootNodeToInsert);\n    // This table is already on the editor\n    const currentTable = new VTable(currentTd);\n\n    // Which cell in the currentTable is the cursor placed\n    const cursorRow = currentTable.row!;\n    const cursorCol = currentTable.col!;\n\n    // Total rows and columns of the final table\n    const rows = cursorRow + newTable.cells?.length! ?? 0;\n    const columns = cursorCol + newTable.cells?.[0].length! ?? 0;\n\n    // Add new rows\n    currentTable.row = currentTable.cells!.length! - 1;\n    while (currentTable.cells!.length! < rows) {\n        currentTable.edit(TableOperation.InsertBelow);\n    }\n\n    // Add new columns\n    currentTable.col = currentTable.cells![0].length! - 1;\n    while (currentTable.cells![0].length! < columns) {\n        currentTable.edit(TableOperation.InsertRight);\n    }\n\n    // Create final table\n    for (let i = cursorRow; i < rows; i++) {\n        for (let j = cursorCol; j < columns; j++) {\n            const cell = currentTable.getCell(i, j);\n            const newCell = newTable.getTd(i - cursorRow, j - cursorCol);\n            if (cell.td && newCell) {\n                moveChildNodes(cell.td, newCell);\n                cloneCellStyles(cell.td, newCell);\n            } else {\n                cell.td = document.createElement('td');\n            }\n        }\n    }\n\n    currentTable.writeBack();\n}\n"]}