{"version":3,"file":"applyTableFormat.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/table/applyTableFormat.ts"],"names":[],"mappings":"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","sourcesContent":["import changeElementTag from '../utils/changeElementTag';\nimport setColor from '../utils/setColor';\nimport { getTableCellMetadata } from './tableCellInfo';\nimport { TableBorderFormat } from 'roosterjs-editor-types';\nimport type { DarkColorHandler, TableFormat, VCell } from 'roosterjs-editor-types';\nconst TRANSPARENT = 'transparent';\nconst TABLE_CELL_TAG_NAME = 'TD';\nconst TABLE_HEADER_TAG_NAME = 'TH';\n\n/**\n * @internal\n * Apply the given table format to this virtual table\n * @param format Table format to apply\n * @param darkColorHandler An object to handle dark background colors, if not passed the cell background color will not be set\n */\nexport default function applyTableFormat(\n    table: HTMLTableElement,\n    cells: VCell[][],\n    format: Required<TableFormat>,\n    darkColorHandler?: DarkColorHandler | null\n) {\n    if (!format) {\n        return;\n    }\n    table.style.borderCollapse = 'collapse';\n    setBordersType(cells, format);\n    setCellFormat(cells, format, darkColorHandler);\n    setFirstColumnFormat(cells, format);\n    setHeaderRowFormat(cells, format, darkColorHandler);\n}\n\n/**\n * Check if the cell has shade meta override\n * @param cell\n * @returns\n */\nfunction hasCellShadeOverride(cell: VCell) {\n    if (!cell.td) {\n        return false;\n    }\n\n    return !!getTableCellMetadata(cell.td)?.bgColorOverride;\n}\n\n/**\n * Check if the cell has vertical align meta override\n * @param cell\n * @returns\n */\nfunction hasValignOverride(cell: VCell) {\n    if (!cell.td) {\n        return false;\n    }\n\n    return !!getTableCellMetadata(cell.td)?.vAlignOverride;\n}\n\n/**\n * Check if the cell has any modified border meta override\n * @param cell\n * @returns\n */\nfunction hasBorderOverride(cell: VCell) {\n    if (!cell.td) {\n        return false;\n    }\n\n    return !!getTableCellMetadata(cell.td)?.borderOverride;\n}\n/**\n * Set color and vertical align to the table\n * @param format the format that must be applied\n * @param darkColorHandler An object to handle dark background colors, if not passed the cell background color will not be set\n */\nfunction setCellFormat(\n    cells: VCell[][],\n    format: TableFormat,\n    darkColorHandler?: DarkColorHandler | null\n) {\n    const color = (index: number) => (index % 2 === 0 ? format.bgColorEven : format.bgColorOdd);\n    const { hasBandedRows, hasBandedColumns, bgColorOdd, bgColorEven } = format;\n    const shouldColorWholeTable = !hasBandedRows && bgColorOdd === bgColorEven ? true : false;\n    cells.forEach((row, index) => {\n        row.forEach(cell => {\n            if (cell.td) {\n                // Set cell color\n                if (!hasCellShadeOverride(cell)) {\n                    if (hasBandedRows) {\n                        const backgroundColor = color(index);\n                        setColor(\n                            cell.td,\n                            backgroundColor || TRANSPARENT,\n                            true /** isBackgroundColor*/,\n                            undefined /** isDarkMode **/,\n                            true /** shouldAdaptFontColor */,\n                            darkColorHandler\n                        );\n                    } else if (shouldColorWholeTable) {\n                        setColor(\n                            cell.td,\n                            format.bgColorOdd || TRANSPARENT,\n                            true /** isBackgroundColor*/,\n                            undefined /** isDarkMode **/,\n                            true /** shouldAdaptFontColor */,\n                            darkColorHandler\n                        );\n                    } else {\n                        setColor(\n                            cell.td,\n                            TRANSPARENT,\n                            true /** isBackgroundColor*/,\n                            undefined /** isDarkMode **/,\n                            true /** shouldAdaptFontColor */,\n                            darkColorHandler\n                        );\n                    }\n                }\n                // Set cell vertical align\n                if (format.verticalAlign && !hasValignOverride(cell)) {\n                    cell.td.style.verticalAlign = format.verticalAlign;\n                }\n            }\n        });\n    });\n    if (hasBandedColumns) {\n        cells.forEach(row => {\n            row.forEach((cell, index) => {\n                const backgroundColor = color(index);\n                if (cell.td && backgroundColor && !hasCellShadeOverride(cell)) {\n                    setColor(\n                        cell.td,\n                        backgroundColor,\n                        true /** isBackgroundColor*/,\n                        undefined /** isDarkMode **/,\n                        true /** shouldAdaptFontColor */,\n                        darkColorHandler\n                    );\n                }\n            });\n        });\n    }\n}\n\n/**\n * Set color to borders of an table\n * @param format\n * @returns\n */\nfunction setBorderColors(td: HTMLTableCellElement, format: Partial<TableFormat>) {\n    td.style.borderTop = getBorderStyle(format.topBorderColor);\n    td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\n    td.style.borderRight = getBorderStyle(format.verticalBorderColor);\n    td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\n}\n\n/**\n * Format the border type\n * @returns\n */\nfunction formatBorders(\n    format: TableFormat,\n    td: HTMLTableCellElement,\n    isFirstRow: boolean,\n    isLastRow: boolean,\n    isFirstColumn: boolean,\n    isLastColumn: boolean\n) {\n    setBorderColors(td, format);\n    switch (format.tableBorderFormat) {\n        case TableBorderFormat.DEFAULT:\n            return;\n        case TableBorderFormat.LIST_WITH_SIDE_BORDERS:\n            if (!isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (!isLastColumn) {\n                td.style.borderRightColor = TRANSPARENT;\n            }\n\n            break;\n        case TableBorderFormat.FIRST_COLUMN_HEADER_EXTERNAL:\n            if (!isFirstRow) {\n                td.style.borderTopColor = TRANSPARENT;\n            }\n\n            if (!isLastRow && !isFirstRow) {\n                td.style.borderBottomColor = TRANSPARENT;\n            }\n            if (!isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (!isLastColumn && !isFirstColumn) {\n                td.style.borderRightColor = TRANSPARENT;\n            }\n            if (isFirstColumn && isFirstRow) {\n                td.style.borderRightColor = TRANSPARENT;\n            }\n\n            break;\n        case TableBorderFormat.NO_HEADER_BORDERS:\n            if (isFirstRow) {\n                td.style.borderTopColor = TRANSPARENT;\n                td.style.borderRightColor = TRANSPARENT;\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (isLastColumn) {\n                td.style.borderRightColor = TRANSPARENT;\n            }\n            break;\n        case TableBorderFormat.NO_SIDE_BORDERS:\n            if (isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (isLastColumn) {\n                td.style.borderRightColor = TRANSPARENT;\n            }\n            break;\n        case TableBorderFormat.ESPECIAL_TYPE_1:\n            if (isFirstRow) {\n                td.style.borderRightColor = TRANSPARENT;\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (isFirstColumn) {\n                td.style.borderBottomColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n            }\n            if (isFirstRow && isFirstColumn) {\n                td.style.borderLeftColor = format.verticalBorderColor || TRANSPARENT;\n                td.style.borderBottomColor = format.bottomBorderColor || TRANSPARENT;\n                td.style.borderTopColor = format.topBorderColor || TRANSPARENT;\n            }\n            break;\n        case TableBorderFormat.ESPECIAL_TYPE_2:\n            if (isFirstRow) {\n                td.style.borderRightColor = TRANSPARENT;\n                td.style.borderLeftColor = TRANSPARENT;\n            }\n            if (isFirstColumn) {\n                td.style.borderBottomColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n            }\n            if (isFirstRow && isFirstColumn) {\n                td.style.borderLeftColor = format.verticalBorderColor || TRANSPARENT;\n                td.style.borderBottomColor = format.bottomBorderColor || TRANSPARENT;\n                td.style.borderTopColor = format.topBorderColor || TRANSPARENT;\n            }\n            if (!isFirstRow && !isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n                td.style.borderBottomColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n                td.style.borderRightColor = TRANSPARENT;\n            }\n\n            break;\n        case TableBorderFormat.ESPECIAL_TYPE_3:\n            if (isFirstRow) {\n                td.style.borderLeftColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n                td.style.borderRightColor = TRANSPARENT;\n            }\n            if (isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n                td.style.borderBottomColor = TRANSPARENT;\n            }\n            if (!isFirstRow && !isFirstColumn) {\n                td.style.borderLeftColor = TRANSPARENT;\n                td.style.borderBottomColor = TRANSPARENT;\n                td.style.borderTopColor = TRANSPARENT;\n                td.style.borderRightColor = TRANSPARENT;\n            }\n            if (isFirstRow && isFirstColumn) {\n                td.style.borderBottomColor = format.bottomBorderColor || TRANSPARENT;\n            }\n            break;\n    }\n}\n\n/**\n * Organize the borders of table according to a border type\n * @param format\n * @returns\n */\nfunction setBordersType(cells: VCell[][], format: TableFormat) {\n    cells.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n            if (cell.td && !hasBorderOverride(cell)) {\n                formatBorders(\n                    format,\n                    cell.td,\n                    rowIndex === 0,\n                    rowIndex === cells.length - 1,\n                    cellIndex === 0,\n                    cellIndex === row.length - 1\n                );\n            }\n        });\n    });\n}\n\n/**\n * Apply custom design to the first table column\n * @param format\n * @returns\n */\nfunction setFirstColumnFormat(cells: VCell[][], format: Partial<TableFormat>) {\n    if (!format.hasFirstColumn) {\n        cells.forEach(row => {\n            row.forEach((cell, cellIndex) => {\n                if (cell.td && cellIndex === 0) {\n                    cell.td = changeElementTag(\n                        cell.td,\n                        TABLE_CELL_TAG_NAME\n                    ) as HTMLTableCellElement;\n                    cell.td.scope = '';\n                }\n            });\n        });\n        return;\n    }\n    cells.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n            if (cell.td && cellIndex === 0) {\n                if (rowIndex !== 0 && !hasCellShadeOverride(cell)) {\n                    cell.td.style.borderTopColor = TRANSPARENT;\n                    setColor(\n                        cell.td,\n                        TRANSPARENT,\n                        true /** isBackgroundColor*/,\n                        undefined /** isDarkMode **/,\n                        true /** shouldAdaptFontColor */\n                    );\n                }\n                if (rowIndex !== cells.length - 1 && rowIndex !== 0) {\n                    cell.td.style.borderBottomColor = TRANSPARENT;\n                }\n                cell.td = changeElementTag(cell.td, TABLE_HEADER_TAG_NAME) as HTMLTableCellElement;\n                cell.td.scope = 'col';\n            }\n        });\n    });\n}\n\n/**\n * Apply custom design to the Header Row\n * @param format\n * @param darkColorHandler An object to handle dark background colors, if not passed the cell background color will not be set\n * @returns\n */\nfunction setHeaderRowFormat(\n    cells: VCell[][],\n    format: TableFormat,\n    darkColorHandler?: DarkColorHandler | null\n) {\n    if (!format.hasHeaderRow) {\n        cells[0]?.forEach(cell => {\n            if (cell.td) {\n                cell.td = changeElementTag(cell.td, TABLE_CELL_TAG_NAME) as HTMLTableCellElement;\n                cell.td.scope = '';\n            }\n        });\n        return;\n    }\n    cells[0]?.forEach(cell => {\n        if (cell.td && format.headerRowColor) {\n            if (!hasCellShadeOverride(cell)) {\n                setColor(\n                    cell.td,\n                    format.headerRowColor,\n                    true /** isBackgroundColor*/,\n                    undefined /** isDarkMode **/,\n                    true /** shouldAdaptFontColor */,\n                    darkColorHandler\n                );\n            }\n            cell.td.style.borderRightColor = format.headerRowColor;\n            cell.td.style.borderLeftColor = format.headerRowColor;\n            cell.td.style.borderTopColor = format.headerRowColor;\n            cell.td = changeElementTag(cell.td, TABLE_HEADER_TAG_NAME) as HTMLTableCellElement;\n            cell.td.scope = 'row';\n        }\n    });\n}\n\nfunction getBorderStyle(style?: string | null) {\n    const color = style ? style : 'transparent';\n    return 'solid 1px ' + color;\n}\n"]}