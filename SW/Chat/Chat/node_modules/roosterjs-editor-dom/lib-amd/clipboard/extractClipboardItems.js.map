{"version":3,"file":"extractClipboardItems.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/clipboard/extractClipboardItems.ts"],"names":[],"mappings":"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","sourcesContent":["import readFile from '../utils/readFile';\r\nimport { Browser } from '../utils/Browser';\r\nimport { ContentType, ContentTypePrefix } from 'roosterjs-editor-types';\r\nimport type {\r\n    ClipboardData,\r\n    EdgeLinkPreview,\r\n    ExtractClipboardItemsOption,\r\n} from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\nconst OTHER_TEXT_TYPE = ContentTypePrefix.Text + '*';\r\nconst EDGE_LINK_PREVIEW = 'link-preview';\r\nconst ContentHandlers: {\r\n    [contentType: string]: (data: ClipboardData, value: string, type?: string) => void;\r\n} = {\r\n    [ContentType.HTML]: (data, value) =>\r\n        (data.rawHtml = Browser.isEdge ? workaroundForEdge(value) : value),\r\n    [ContentType.PlainText]: (data, value) => (data.text = value),\r\n    [OTHER_TEXT_TYPE]: (data, value, type?) => !!type && (data.customValues[type] = value),\r\n    [ContentTypePrefix.Text + EDGE_LINK_PREVIEW]: tryParseLinkPreview,\r\n};\r\n\r\n/**\r\n * Extract clipboard items to be a ClipboardData object for IE\r\n * @param items The clipboard items retrieve from a DataTransfer object\r\n * @param callback Callback function when data is ready\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardItems(\r\n    items: DataTransferItem[],\r\n    options?: ExtractClipboardItemsOption,\r\n    pasteNativeEvent?: boolean\r\n): Promise<ClipboardData> {\r\n    const data: ClipboardData = {\r\n        types: [],\r\n        text: '',\r\n        image: null,\r\n        files: [],\r\n        rawHtml: null,\r\n        customValues: {},\r\n        pasteNativeEvent: pasteNativeEvent,\r\n    };\r\n\r\n    return Promise.all(\r\n        (items || []).map(item => {\r\n            const type = item.type;\r\n\r\n            if (type.indexOf(ContentTypePrefix.Image) == 0 && !data.image && item.kind == 'file') {\r\n                data.types.push(type);\r\n                data.image = item.getAsFile();\r\n                return new Promise<void>(resolve => {\r\n                    if (data.image) {\r\n                        readFile(data.image, dataUrl => {\r\n                            data.imageDataUri = dataUrl;\r\n                            resolve();\r\n                        });\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            } else if (item.kind == 'file') {\r\n                return new Promise<void>(resolve => {\r\n                    const file = item.getAsFile();\r\n                    if (!!file) {\r\n                        data.types.push(type);\r\n                        data.files!.push(file);\r\n                    }\r\n                    resolve();\r\n                });\r\n            } else {\r\n                const customType = getAllowedCustomType(type, options?.allowedCustomPasteType);\r\n                const handler =\r\n                    ContentHandlers[type] || (customType ? ContentHandlers[OTHER_TEXT_TYPE] : null);\r\n                return new Promise<void>(resolve =>\r\n                    handler\r\n                        ? item.getAsString(value => {\r\n                              data.types.push(type);\r\n                              handler(data, value, customType);\r\n                              resolve();\r\n                          })\r\n                        : resolve()\r\n                );\r\n            }\r\n        })\r\n    ).then(() => data);\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    const headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues?.length == 3) {\r\n        const start = parseInt(headerValues[1]);\r\n        const end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n\r\nfunction tryParseLinkPreview(data: ClipboardData, value: string) {\r\n    try {\r\n        data.customValues[EDGE_LINK_PREVIEW] = value;\r\n        data.linkPreview = JSON.parse(value) as EdgeLinkPreview;\r\n    } catch {}\r\n}\r\n\r\nfunction getAllowedCustomType(type: string, allowedCustomPasteType?: string[]) {\r\n    const textType =\r\n        type.indexOf(ContentTypePrefix.Text) == 0\r\n            ? type.substring(ContentTypePrefix.Text.length)\r\n            : null;\r\n    const index =\r\n        allowedCustomPasteType && textType ? allowedCustomPasteType.indexOf(textType) : -1;\r\n    return textType && index >= 0 ? textType : undefined;\r\n}\r\n"]}