{"version":3,"file":"extractClipboardItemsForIE.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/clipboard/extractClipboardItemsForIE.ts"],"names":[],"mappings":";;;IAKA;;;;;;;;;;;OAWG;IACH,SAAwB,0BAA0B,CAC9C,YAA0B,EAC1B,QAAuC,EACvC,OAA2C;;QAE3C,IAAM,aAAa,GAAkB;YACjC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,iBAAO,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;YAC5D,IAAI,EAAE,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;YAClC,KAAK,EAAE,IAAI;YACX,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,EAAE;YAChB,gBAAgB,EAAE,IAAI;SACzB,CAAC;QAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3E,IAAM,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,0CAAE,OAAO,sBAAyB,KAAI,CAAC,EAAE;gBACnD,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC;gBAC3B,MAAM;aACT;SACJ;QAED,IAAM,QAAQ,GAAG;YACb,IAAI,aAAa,CAAC,KAAK,EAAE;gBACrB,IAAA,kBAAQ,EAAC,aAAa,CAAC,KAAK,EAAE,UAAA,OAAO;oBACjC,aAAa,CAAC,YAAY,GAAG,OAAO,CAAC;oBACrC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,QAAQ,CAAC,aAAa,CAAC,CAAC;aAC3B;QACL,CAAC,CAAC;QAEF,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA,EAAE;YAC/C,IAAM,KAAG,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACjC,KAAG,CAAC,eAAe,GAAG,MAAM,CAAC;YAC7B,KAAG,CAAC,SAAS,GAAG,EAAE,CAAC;YACnB,KAAG,CAAC,KAAK,EAAE,CAAC;YACZ,MAAA,MAAA,KAAG,CAAC,aAAa,0CAAE,WAAW,0CAAE,UAAU,CAAC;;gBACvC,aAAa,CAAC,OAAO,GAAG,KAAG,CAAC,SAAS,CAAC;gBACtC,MAAA,OAAO,CAAC,aAAa,+CAArB,OAAO,EAAiB,KAAG,CAAC,CAAC;gBAC7B,QAAQ,EAAE,CAAC;YACf,CAAC,EAAE,CAAC,CAAC,CAAC;SACT;aAAM;YACH,aAAa,CAAC,OAAO,GAAG,SAAS,CAAC;YAClC,QAAQ,EAAE,CAAC;SACd;IACL,CAAC;IAhDD,6CAgDC","sourcesContent":["import readFile from '../utils/readFile';\r\nimport toArray from '../jsUtils/toArray';\r\nimport { ContentTypePrefix } from 'roosterjs-editor-types';\r\nimport type { ClipboardData, ExtractClipboardItemsForIEOptions } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Extract clipboard items to be a ClipboardData object for IE\r\n * @param dataTransfer The clipboard items retrieve from a DataTransfer object\r\n * @param callback Callback function when data is ready\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardItemsForIE(\r\n    dataTransfer: DataTransfer,\r\n    callback: (data: ClipboardData) => void,\r\n    options?: ExtractClipboardItemsForIEOptions\r\n) {\r\n    const clipboardData: ClipboardData = {\r\n        types: dataTransfer.types ? toArray(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: null,\r\n        files: [],\r\n        rawHtml: null,\r\n        customValues: {},\r\n        pasteNativeEvent: true,\r\n    };\r\n\r\n    for (let i = 0; i < (dataTransfer.files ? dataTransfer.files.length : 0); i++) {\r\n        const file = dataTransfer.files.item(i);\r\n        if (file?.type?.indexOf(ContentTypePrefix.Image) == 0) {\r\n            clipboardData.image = file;\r\n            break;\r\n        }\r\n    }\r\n\r\n    const nextStep = () => {\r\n        if (clipboardData.image) {\r\n            readFile(clipboardData.image, dataUrl => {\r\n                clipboardData.imageDataUri = dataUrl;\r\n                callback(clipboardData);\r\n            });\r\n        } else {\r\n            callback(clipboardData);\r\n        }\r\n    };\r\n\r\n    if (options?.getTempDiv && options?.removeTempDiv) {\r\n        const div = options.getTempDiv();\r\n        div.contentEditable = 'true';\r\n        div.innerHTML = '';\r\n        div.focus();\r\n        div.ownerDocument?.defaultView?.setTimeout(() => {\r\n            clipboardData.rawHtml = div.innerHTML;\r\n            options.removeTempDiv?.(div);\r\n            nextStep();\r\n        }, 0);\r\n    } else {\r\n        clipboardData.rawHtml = undefined;\r\n        nextStep();\r\n    }\r\n}\r\n"]}