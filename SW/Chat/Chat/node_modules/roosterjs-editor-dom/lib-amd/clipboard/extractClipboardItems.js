define(["require", "exports", "../utils/readFile", "../utils/Browser"], function (require, exports, readFile_1, Browser_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    // HTML header to indicate where is the HTML content started from.
    // Sample header:
    // Version:0.9
    // StartHTML:71
    // EndHTML:170
    // StartFragment:140
    // EndFragment:160
    // StartSelection:140
    // EndSelection:160
    var CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\.]+\s+StartHTML:\s*([0-9]+)\s+EndHTML:\s*([0-9]+)\s+/i;
    var OTHER_TEXT_TYPE = "text/" /* Text */ + '*';
    var EDGE_LINK_PREVIEW = 'link-preview';
    var ContentHandlers = (_a = {},
        _a["text/html" /* HTML */] = function (data, value) {
            return (data.rawHtml = Browser_1.Browser.isEdge ? workaroundForEdge(value) : value);
        },
        _a["text/plain" /* PlainText */] = function (data, value) { return (data.text = value); },
        _a[OTHER_TEXT_TYPE] = function (data, value, type) { return !!type && (data.customValues[type] = value); },
        _a["text/" /* Text */ + EDGE_LINK_PREVIEW] = tryParseLinkPreview,
        _a);
    /**
     * Extract clipboard items to be a ClipboardData object for IE
     * @param items The clipboard items retrieve from a DataTransfer object
     * @param callback Callback function when data is ready
     * @returns An object with the following properties:
     *  types: Available types from the clipboard event
     *  text: Plain text from the clipboard event
     *  image: Image file from the clipboard event
     *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.
     *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is
     *   not supported by browser.
     */
    function extractClipboardItems(items, options, pasteNativeEvent) {
        var data = {
            types: [],
            text: '',
            image: null,
            files: [],
            rawHtml: null,
            customValues: {},
            pasteNativeEvent: pasteNativeEvent,
        };
        return Promise.all((items || []).map(function (item) {
            var type = item.type;
            if (type.indexOf("image/" /* Image */) == 0 && !data.image && item.kind == 'file') {
                data.types.push(type);
                data.image = item.getAsFile();
                return new Promise(function (resolve) {
                    if (data.image) {
                        (0, readFile_1.default)(data.image, function (dataUrl) {
                            data.imageDataUri = dataUrl;
                            resolve();
                        });
                    }
                    else {
                        resolve();
                    }
                });
            }
            else if (item.kind == 'file') {
                return new Promise(function (resolve) {
                    var file = item.getAsFile();
                    if (!!file) {
                        data.types.push(type);
                        data.files.push(file);
                    }
                    resolve();
                });
            }
            else {
                var customType_1 = getAllowedCustomType(type, options === null || options === void 0 ? void 0 : options.allowedCustomPasteType);
                var handler_1 = ContentHandlers[type] || (customType_1 ? ContentHandlers[OTHER_TEXT_TYPE] : null);
                return new Promise(function (resolve) {
                    return handler_1
                        ? item.getAsString(function (value) {
                            data.types.push(type);
                            handler_1(data, value, customType_1);
                            resolve();
                        })
                        : resolve();
                });
            }
        })).then(function () { return data; });
    }
    exports.default = extractClipboardItems;
    /**
     * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.
     * So we need to remove it in our code
     * @param html The HTML string got from clipboard
     */
    function workaroundForEdge(html) {
        var headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);
        if ((headerValues === null || headerValues === void 0 ? void 0 : headerValues.length) == 3) {
            var start = parseInt(headerValues[1]);
            var end = parseInt(headerValues[2]);
            if (start > 0 && end > start) {
                html = html.substring(start, end);
            }
        }
        return html;
    }
    function tryParseLinkPreview(data, value) {
        try {
            data.customValues[EDGE_LINK_PREVIEW] = value;
            data.linkPreview = JSON.parse(value);
        }
        catch (_a) { }
    }
    function getAllowedCustomType(type, allowedCustomPasteType) {
        var textType = type.indexOf("text/" /* Text */) == 0
            ? type.substring("text/" /* Text */.length)
            : null;
        var index = allowedCustomPasteType && textType ? allowedCustomPasteType.indexOf(textType) : -1;
        return textType && index >= 0 ? textType : undefined;
    }
});
//# sourceMappingURL=extractClipboardItems.js.map