{"version":3,"file":"extractClipboardEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/clipboard/extractClipboardEvent.ts"],"names":[],"mappings":";;;IAUA;;;;;;;;;;;;;;OAcG;IACH,SAAwB,qBAAqB,CACzC,KAAqB,EACrB,QAAgD,EAChD,OAAqC,EACrC,gBAAwB;;QAExB,IAAM,YAAY,GACd,KAAK,CAAC,aAAa;YACnB,CAAwB,MAAO,KAAK,CAAC,MAAO,CAAC,aAAa,0CAAE,WAAa,CAAA,CAAC,aAAa,CAAC;QAE5F,IAAI,YAAY,CAAC,KAAK,EAAE;YACpB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAA,+BAAqB,EACjB,IAAA,iBAAO,EAAC,YAAY,CAAC,KAAK,CAAC,EAC3B,OAAO,EACP,IAAI,CAAC,uBAAuB,CAC/B,CAAC,IAAI,CAAC,UAAC,aAA4B;gBAChC,cAAc,CAAC,gBAAgB,CAAC,CAAC;gBACjC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;SACN;aAAM;YACH,IAAA,oCAA0B,EAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC/D;IACL,CAAC;IAvBD,wCAuBC;IAED,SAAS,cAAc,CAAC,KAAa;QACjC,IAAI,iBAAO,CAAC,SAAS,IAAI,KAAK,EAAE;YAC5B,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;IACL,CAAC","sourcesContent":["import extractClipboardItems from './extractClipboardItems';\nimport extractClipboardItemsForIE from './extractClipboardItemsForIE';\nimport toArray from '../jsUtils/toArray';\nimport { Browser } from '../utils/Browser';\nimport type { ClipboardData, ExtractClipboardEventOption } from 'roosterjs-editor-types';\n\ninterface WindowForIE extends Window {\n    clipboardData: DataTransfer;\n}\n\n/**\n * @deprecated Use extractClipboardItems and extractClipboardItemsForIE instead\n * Extract a Clipboard event\n * @param event The paste event\n * @param callback Callback function when data is ready\n * @param options Options to retrieve more items from the event, including HTML string and other customized items\n * @param rangeBeforePaste Optional range to be removed when pasting in Android\n * @returns An object with the following properties:\n *  types: Available types from the clipboard event\n *  text: Plain text from the clipboard event\n *  image: Image file from the clipboard event\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\n *   not supported by browser.\n */\nexport default function extractClipboardEvent(\n    event: ClipboardEvent,\n    callback: (clipboardData: ClipboardData) => void,\n    options?: ExtractClipboardEventOption,\n    rangeBeforePaste?: Range\n) {\n    const dataTransfer =\n        event.clipboardData ||\n        (<WindowForIE>(<unknown>(<Node>event.target).ownerDocument?.defaultView)).clipboardData;\n\n    if (dataTransfer.items) {\n        event.preventDefault();\n        extractClipboardItems(\n            toArray(dataTransfer.items),\n            options,\n            true /** pasteNativeEvent */\n        ).then((clipboardData: ClipboardData) => {\n            removeContents(rangeBeforePaste);\n            callback(clipboardData);\n        });\n    } else {\n        extractClipboardItemsForIE(dataTransfer, callback, options);\n    }\n}\n\nfunction removeContents(range?: Range) {\n    if (Browser.isAndroid && range) {\n        range.deleteContents();\n    }\n}\n"]}