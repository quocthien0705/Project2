{"version":3,"file":"mergeBlocksInRegion.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/region/mergeBlocksInRegion.ts"],"names":[],"mappings":";;;IAWA;;;;;OAKG;IACH,SAAwB,mBAAmB,CAAC,MAAkB,EAAE,OAAa,EAAE,UAAgB;;QAC3F,IAAI,KAA0B,CAAC;QAE/B,IACI,CAAC,IAAA,wBAAc,EAAC,MAAM,EAAE,OAAO,CAAC;YAChC,CAAC,IAAA,wBAAc,EAAC,MAAM,EAAE,UAAU,CAAC;YACnC,CAAC,CAAC,KAAK,GAAG,IAAA,+BAAqB,EAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC7D,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EACzB;YACE,OAAO;SACV;QAED,IAAM,SAAS,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC;QAClD,IAAM,eAAe,GAAG,IAAA,wBAAQ,EAC5B,MAAM,CAAC,QAAQ,EACf,SAAS,EACT,OAAO,EACP,KAAK,CAAC,WAAW,EACjB,IAAI,CAAC,kBAAkB,CAC1B,CAAC;QAEF,6CAA6C;QAC7C,KAAK,IAAI,IAAI,GAAgB,SAAS,EAAE,IAAA,kBAAQ,EAAC,eAAe,EAAE,IAAI,CAAC,GAAI;YACvE,IAAM,QAAM,GAAgB,IAAK,CAAC,UAAU,CAAC;YAC7C,IAAI,IAAA,wBAAc,EAAC,QAAM,EAAE,aAAa,CAAC,EAAE;gBACvC,IAAM,MAAM,yEACL,CAAC,IAAA,oCAA0B,EAAC,QAAM,CAAC,IAAI,EAAE,CAAC,GAC1C,IAAA,mBAAS,EAAC,QAAM,CAAC,GACjB,IAAA,mBAAS,EAAC,SAAS,CAAC,CAC1B,CAAC;gBACF,IAAA,mBAAS,EAAC,SAAS,EAAE,MAAM,CAAC,CAAC;aAChC;YACD,IAAI,GAAG,QAAM,CAAC;SACjB;QAED,IAAI,YAAY,GAAgB,IAAI,CAAC;QACrC,IAAM,WAAW,GACb,SAAS,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC;YAChE,CAAC,CAAC,SAAS,CAAC,UAAW;YACvB,CAAC,CAAC,IAAA,0BAAgB,EAAC,SAAS,EAAE,MAAM,CAAE,CAAC;QAE/C,oBAAoB;QACpB,KACI,IAAI,IAAI,GAAgB,WAAW,EACnC,IAAA,kBAAQ,EAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,UAAU,CAAC,MAAM,KAAI,CAAC,EAC1E,IAAI,GAAG,IAAK,CAAC,UAAU,EACzB;YACE,8FAA8F;YAC9F,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;SAClC;QAED,gDAAgD;QAChD,MAAA,OAAO,CAAC,UAAU,0CAAE,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;QACnE,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,UAAU,0CAAE,WAAW,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAtDD,sCAsDC","sourcesContent":["import changeElementTag from '../utils/changeElementTag';\nimport contains from '../utils/contains';\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\nimport getPredefinedCssForElement from '../htmlSanitizer/getPredefinedCssForElement';\nimport getStyles from '../style/getStyles';\nimport isNodeInRegion from './isNodeInRegion';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport setStyles from '../style/setStyles';\nimport { collapse } from '../utils/collapseNodes';\nimport type { BlockElement, RegionBase } from 'roosterjs-editor-types';\n\n/**\n * Merge a BlockElement of given node after another node\n * @param region Region to operate in\n * @param refNode The node to merge after\n * @param targetNode The node of target block element\n */\nexport default function mergeBlocksInRegion(region: RegionBase, refNode: Node, targetNode: Node) {\n    let block: BlockElement | null;\n\n    if (\n        !isNodeInRegion(region, refNode) ||\n        !isNodeInRegion(region, targetNode) ||\n        !(block = getBlockElementAtNode(region.rootNode, targetNode)) ||\n        block.contains(refNode)\n    ) {\n        return;\n    }\n\n    const blockRoot = block.collapseToSingleElement();\n    const commonContainer = collapse(\n        region.rootNode,\n        blockRoot,\n        refNode,\n        false /*isStart*/,\n        true /*canSplitParent*/\n    );\n\n    // Copy styles of parent nodes into blockRoot\n    for (let node: Node | null = blockRoot; contains(commonContainer, node); ) {\n        const parent: Node | null = node!.parentNode;\n        if (safeInstanceOf(parent, 'HTMLElement')) {\n            const styles = {\n                ...(getPredefinedCssForElement(parent) || {}),\n                ...getStyles(parent),\n                ...getStyles(blockRoot),\n            };\n            setStyles(blockRoot, styles);\n        }\n        node = parent;\n    }\n\n    let nodeToRemove: Node | null = null;\n    const nodeToMerge =\n        blockRoot.childNodes.length == 1 && blockRoot.attributes.length == 0\n            ? blockRoot.firstChild!\n            : changeElementTag(blockRoot, 'SPAN')!;\n\n    // Remove empty node\n    for (\n        let node: Node | null = nodeToMerge;\n        contains(commonContainer, node) && node.parentNode?.childNodes.length == 1;\n        node = node!.parentNode\n    ) {\n        // If the only child is the one which is about to be removed, this node should also be removed\n        nodeToRemove = node.parentNode;\n    }\n\n    // Finally, merge blocks, and remove empty nodes\n    refNode.parentNode?.insertBefore(nodeToMerge, refNode.nextSibling);\n    nodeToRemove?.parentNode?.removeChild(nodeToRemove);\n}\n"]}