{"version":3,"file":"getSelectionRangeInRegion.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/region/getSelectionRangeInRegion.ts"],"names":[],"mappings":";;;IAKA;;;;;OAKG;IACH,SAAwB,yBAAyB,CAAC,UAAsB;QACpE,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,IAAI,CAAC;SACf;QAEO,IAAA,UAAU,GAAoC,UAAU,WAA9C,EAAE,SAAS,GAAyB,UAAU,UAAnC,EAAE,QAAQ,GAAe,UAAU,SAAzB,EAAE,QAAQ,GAAK,UAAU,SAAf,CAAgB;QACjE,IAAM,SAAS,GAAG,UAAU;YACxB,CAAC,CAAC,IAAA,mCAAkB,EAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC;YAC1E,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC1B,IAAM,OAAO,GAAG,SAAS;YACrB,CAAC,CAAC,IAAA,uCAAsB,EAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC;YACvD,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC;QACzB,IAAM,WAAW,GAAG,SAAS,IAAI,OAAO,IAAI,IAAA,qBAAW,EAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5E,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACvB,OAAO,WAAW,CAAC;SACtB;aAAM,IAAI,WAAW,EAAE;YACpB,IAAM,WAAW,GAAG,kBAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAC/D,IAAM,SAAS,GAAG,kBAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YACnD,IAAA,gBAAgB,GAAyB,UAAU,iBAAnC,EAAE,kBAAkB,GAAK,UAAU,mBAAf,CAAgB;YAE5D,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;gBAClF,IAAM,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,WAAW,CAAC;oBACjD,CAAC,CAAC,kBAAkB;oBACpB,CAAC,CAAC,WAAW,CAAC;gBAClB,IAAM,GAAG,GAAG,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC;gBAE/E,OAAO,IAAA,qBAAW,EAAC,KAAK,EAAE,GAAG,CAAC,CAAC;aAClC;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAhCD,4CAgCC;IAED,SAAS,QAAQ,CAAC,UAAsB;QACpC,IAAM,MAAM,GAAG,UAAoB,CAAC;QACpC,OAAO,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC;IACpE,CAAC","sourcesContent":["import createRange from '../selection/createRange';\nimport Position from '../selection/Position';\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\nimport type { Region, RegionBase } from 'roosterjs-editor-types';\n\n/**\n * Get the selection range in the given region.\n * The original range can cover multiple regions, this function will narrow the original selection\n * of a region into current region\n * @param regionBase The region to get range from\n */\nexport default function getSelectionRangeInRegion(regionBase: RegionBase): Range | null {\n    if (!regionBase) {\n        return null;\n    }\n\n    const { nodeBefore, nodeAfter, rootNode, skipTags } = regionBase;\n    const startNode = nodeBefore\n        ? getNextLeafSibling(regionBase.rootNode, nodeBefore, regionBase.skipTags)\n        : rootNode.firstChild;\n    const endNode = nodeAfter\n        ? getPreviousLeafSibling(rootNode, nodeAfter, skipTags)\n        : rootNode.lastChild;\n    const regionRange = startNode && endNode && createRange(startNode, endNode);\n\n    if (!isRegion(regionBase)) {\n        return regionRange;\n    } else if (regionRange) {\n        const regionStart = Position.getStart(regionRange).normalize();\n        const regionEnd = Position.getEnd(regionRange).normalize();\n        const { fullSelectionEnd, fullSelectionStart } = regionBase;\n\n        if (!fullSelectionStart.isAfter(regionEnd) && !regionStart.isAfter(fullSelectionEnd)) {\n            const start = fullSelectionStart.isAfter(regionStart)\n                ? fullSelectionStart\n                : regionStart;\n            const end = fullSelectionEnd.isAfter(regionEnd) ? regionEnd : fullSelectionEnd;\n\n            return createRange(start, end);\n        }\n    }\n\n    return null;\n}\n\nfunction isRegion(regionBase: RegionBase): regionBase is Region {\n    const region = regionBase as Region;\n    return !!region.fullSelectionEnd && !!region.fullSelectionStart;\n}\n"]}