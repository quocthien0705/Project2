define(["require", "exports", "../contentTraverser/ContentTraverser", "../utils/createElement", "../blockElements/getBlockElementAtNode", "./getSelectionRangeInRegion", "../utils/shouldSkipNode"], function (require, exports, ContentTraverser_1, createElement_1, getBlockElementAtNode_1, getSelectionRangeInRegion_1, shouldSkipNode_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Get all block elements covered by the selection under this region
     * @param regionBase The region to get block elements from
     * @param createBlockIfEmpty When set to true, a new empty block element will be created if there is not
     * any blocks in the region. Default value is false
     * @param deprecated Deprecated parameter, not used
     */
    function getSelectedBlockElementsInRegion(regionBase, createBlockIfEmpty, deprecated) {
        var range = (0, getSelectionRangeInRegion_1.default)(regionBase);
        var blocks = [];
        if (range) {
            var rootNode = regionBase.rootNode, skipTags = regionBase.skipTags;
            var traverser = ContentTraverser_1.default.createSelectionTraverser(rootNode, range, skipTags);
            for (var block = traverser === null || traverser === void 0 ? void 0 : traverser.currentBlockElement; !!block; block = traverser.getNextBlockElement()) {
                blocks.push(block);
            }
            // Remove meaningless nodes
            blocks = blocks.filter(function (block) {
                var _a;
                var startNode = block.getStartNode();
                var endNode = block.getEndNode();
                if (startNode == endNode && (0, shouldSkipNode_1.default)(startNode, true /*ignoreSpace*/)) {
                    (_a = startNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(startNode);
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        if (blocks.length == 0 && regionBase && !regionBase.rootNode.firstChild && createBlockIfEmpty) {
            var newNode = (0, createElement_1.default)(1 /* EmptyLine */, regionBase.rootNode.ownerDocument);
            regionBase.rootNode.appendChild(newNode);
            var block = (0, getBlockElementAtNode_1.default)(regionBase.rootNode, newNode);
            if (block) {
                blocks.push(block);
            }
        }
        return blocks;
    }
    exports.default = getSelectedBlockElementsInRegion;
});
//# sourceMappingURL=getSelectedBlockElementsInRegion.js.map