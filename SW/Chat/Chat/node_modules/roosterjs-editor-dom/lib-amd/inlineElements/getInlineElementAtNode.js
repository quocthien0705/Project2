define(["require", "exports", "../blockElements/getBlockElementAtNode", "../utils/getTagOfNode", "./ImageInlineElement", "./LinkInlineElement", "./NodeInlineElement", "../utils/safeInstanceOf"], function (require, exports, getBlockElementAtNode_1, getTagOfNode_1, ImageInlineElement_1, LinkInlineElement_1, NodeInlineElement_1, safeInstanceOf_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getInlineElementAtNode(parent, node) {
        // An inline element has to be in a block element, get the block first and then resolve through the factory
        var parentBlock = (0, safeInstanceOf_1.default)(parent, 'Node')
            ? (0, getBlockElementAtNode_1.default)(parent, node)
            : parent;
        return node && parentBlock && resolveInlineElement(node, parentBlock);
    }
    exports.default = getInlineElementAtNode;
    /**
     * Resolve an inline element by a leaf node
     * @param node The node to resolve from
     * @param parentBlock The parent block element
     */
    function resolveInlineElement(node, parentBlock) {
        var nodeChain = [node];
        for (var parent_1 = node.parentNode; parent_1 && parentBlock.contains(parent_1); parent_1 = parent_1.parentNode) {
            nodeChain.push(parent_1);
        }
        var inlineElement;
        for (var i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {
            var currentNode = nodeChain[i];
            var tag = (0, getTagOfNode_1.default)(currentNode);
            if (tag == 'A') {
                inlineElement = new LinkInlineElement_1.default(currentNode, parentBlock);
            }
            else if (tag == 'IMG') {
                inlineElement = new ImageInlineElement_1.default(currentNode, parentBlock);
            }
        }
        return inlineElement || new NodeInlineElement_1.default(node, parentBlock);
    }
});
//# sourceMappingURL=getInlineElementAtNode.js.map