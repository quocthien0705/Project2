{"version":3,"file":"getInlineElementAtNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts"],"names":[],"mappings":";;;IAyBA,SAAwB,sBAAsB,CAC1C,MAA2B,EAC3B,IAAiB;QAEjB,2GAA2G;QAC3G,IAAM,WAAW,GAAG,IAAA,wBAAc,EAAC,MAAM,EAAE,MAAM,CAAC;YAC9C,CAAC,CAAC,IAAA,+BAAqB,EAAC,MAAM,EAAE,IAAI,CAAC;YACrC,CAAC,CAAC,MAAM,CAAC;QACb,OAAO,IAAI,IAAI,WAAW,IAAI,oBAAoB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC1E,CAAC;IATD,yCASC;IAED;;;;OAIG;IACH,SAAS,oBAAoB,CAAC,IAAU,EAAE,WAAyB;QAC/D,IAAM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;QACzB,KACI,IAAI,QAAM,GAAG,IAAI,CAAC,UAAU,EAC5B,QAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAM,CAAC,EACtC,QAAM,GAAG,QAAM,CAAC,UAAU,EAC5B;YACE,SAAS,CAAC,IAAI,CAAC,QAAM,CAAC,CAAC;SAC1B;QAED,IAAI,aAAwC,CAAC;QAE7C,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YAC9D,IAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YACjC,IAAM,GAAG,GAAG,IAAA,sBAAY,EAAC,WAAW,CAAC,CAAC;YACtC,IAAI,GAAG,IAAI,GAAG,EAAE;gBACZ,aAAa,GAAG,IAAI,2BAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;aACnE;iBAAM,IAAI,GAAG,IAAI,KAAK,EAAE;gBACrB,aAAa,GAAG,IAAI,4BAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;aACpE;SACJ;QAED,OAAO,aAAa,IAAI,IAAI,2BAAiB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC","sourcesContent":["import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport safeInstanceOf from '../utils/safeInstanceOf';\r\nimport type { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node | null): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node | null\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node | null\r\n): InlineElement | null {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    const parentBlock = safeInstanceOf(parent, 'Node')\r\n        ? getBlockElementAtNode(parent, node)\r\n        : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    const nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement | undefined;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        const currentNode = nodeChain[i];\r\n        const tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n"]}