{"version":3,"file":"addDelimiters.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/delimiter/addDelimiters.ts"],"names":[],"mappings":";;;;IAIA,IAAM,gBAAgB,GAAG,QAAQ,CAAC;IAElC;;;OAGG;IACH,SAAwB,aAAa,CAAC,IAAa;QAC3C,IAAA,KAAA,oBAAoC,aAAa,CAAC,IAAI,CAAC,IAAA,EAAtD,cAAc,QAAA,EAAE,eAAe,QAAuB,CAAC;QAE5D,IAAI,CAAC,cAAc,EAAE;YACjB,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,eAAe,EAAE;YAClB,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC9C;QACD,OAAO,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;IAC7C,CAAC;IAVD,gCAUC;IAED;;;OAGG;IACH,SAAgB,iBAAiB,CAAC,OAAgB;QAC9C,OAAO,eAAe,CAAC,OAAO,+CAAmC,CAAC;IACtE,CAAC;IAFD,8CAEC;IAED;;;OAGG;IACH,SAAgB,kBAAkB,CAAC,OAAgB;QAC/C,OAAO,eAAe,CAAC,OAAO,iDAAoC,CAAC;IACvE,CAAC;IAFD,gDAEC;IAED,SAAS,aAAa,CAAC,aAAsB;QACzC,IAAM,MAAM,GAA4B,EAAE,CAAC;QACnC,IAAA,kBAAkB,GAA6B,aAAa,mBAA1C,EAAE,sBAAsB,GAAK,aAAa,uBAAlB,CAAmB;QACrE,MAAM,CAAC,IAAI,CACP,WAAW,CAAC,kBAAkB,+CAAmC,EACjE,WAAW,CAAC,sBAAsB,iDAAoC,CACzE,CAAC;QAEF,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,SAAS,WAAW,CAAC,EAAkB,EAAE,SAAiB;QACtD,OAAO,EAAE,IAAI,IAAA,iCAAuB,EAAC,EAAE,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAClG,CAAC;IAED,SAAS,eAAe,CAAC,OAAgB,EAAE,cAAgC;QACvE,IAAM,IAAI,GAAG,IAAA,uBAAa,EACtB;YACI,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,cAAc;YACzB,QAAQ,EAAE,CAAC,gBAAgB,CAAC;SAC/B,EACD,OAAO,CAAC,aAAa,CACT,CAAC;QACjB,IAAI,IAAI,EAAE;YACN,IAAM,cAAc,GAChB,cAAc,gDAAoC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;YACpF,OAAO,CAAC,qBAAqB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;SACvD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC","sourcesContent":["import createElement from '../utils/createElement';\nimport getDelimiterFromElement from './getDelimiterFromElement';\nimport { DelimiterClasses } from 'roosterjs-editor-types';\n\nconst ZERO_WIDTH_SPACE = '\\u200B';\n\n/**\n * Adds delimiters to the element provided. If the delimiters already exists, will not be added\n * @param node the node to add the delimiters\n */\nexport default function addDelimiters(node: Element): Element[] {\n    let [delimiterAfter, delimiterBefore] = getDelimiters(node);\n\n    if (!delimiterAfter) {\n        delimiterAfter = addDelimiterAfter(node);\n    }\n    if (!delimiterBefore) {\n        delimiterBefore = addDelimiterBefore(node);\n    }\n    return [delimiterAfter, delimiterBefore];\n}\n\n/**\n * Adds delimiter after the element provided.\n * @param element element to use\n */\nexport function addDelimiterAfter(element: Element) {\n    return insertDelimiter(element, DelimiterClasses.DELIMITER_AFTER);\n}\n\n/**\n * Adds delimiter before the element provided.\n * @param element element to use\n */\nexport function addDelimiterBefore(element: Element) {\n    return insertDelimiter(element, DelimiterClasses.DELIMITER_BEFORE);\n}\n\nfunction getDelimiters(entityWrapper: Element): (Element | undefined)[] {\n    const result: (Element | undefined)[] = [];\n    const { nextElementSibling, previousElementSibling } = entityWrapper;\n    result.push(\n        isDelimiter(nextElementSibling, DelimiterClasses.DELIMITER_AFTER),\n        isDelimiter(previousElementSibling, DelimiterClasses.DELIMITER_BEFORE)\n    );\n\n    return result;\n}\n\nfunction isDelimiter(el: Element | null, className: string): Element | undefined {\n    return el && getDelimiterFromElement(el) && el.classList.contains(className) ? el : undefined;\n}\n\nfunction insertDelimiter(element: Element, delimiterClass: DelimiterClasses) {\n    const span = createElement(\n        {\n            tag: 'span',\n            className: delimiterClass,\n            children: [ZERO_WIDTH_SPACE],\n        },\n        element.ownerDocument\n    ) as HTMLElement;\n    if (span) {\n        const insertPosition: InsertPosition =\n            delimiterClass == DelimiterClasses.DELIMITER_AFTER ? 'afterend' : 'beforebegin';\n        element.insertAdjacentElement(insertPosition, span);\n    }\n\n    return span;\n}\n"]}