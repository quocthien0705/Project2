{"version":3,"file":"cacheGetEventData.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/event/cacheGetEventData.ts"],"names":[],"mappings":";;;IAEA;;;;;;OAMG;IACH,SAAwB,iBAAiB,CACrC,KAAyB,EACzB,GAAW,EACX,MAAe;QAEf,IAAM,MAAM,GACR,KAAK,IAAI,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC;YACrE,CAAC,CAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC;YAC9B,CAAC,CAAC,MAAM,EAAE,CAAC;QACnB,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC;YAClD,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;SACtC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAfD,oCAeC","sourcesContent":["import type { PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * Gets the cached event data by cache key from event object if there is already one.\n * Otherwise, call getter function to create one, and cache it.\n * @param event The event object\n * @param key Cache key string, need to be unique\n * @param getter Getter function to get the object when it is not in cache yet\n */\nexport default function cacheGetEventData<T>(\n    event: PluginEvent | null,\n    key: string,\n    getter: () => T\n): T {\n    const result =\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\n            ? <T>event.eventDataCache[key]\n            : getter();\n    if (event) {\n        event.eventDataCache = event.eventDataCache || {};\n        event.eventDataCache[key] = result;\n    }\n\n    return result;\n}\n"]}