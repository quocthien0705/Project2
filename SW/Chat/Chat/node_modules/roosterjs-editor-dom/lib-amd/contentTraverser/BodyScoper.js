define(["require", "exports", "../utils/contains", "../blockElements/getBlockElementAtNode", "../blockElements/getFirstLastBlockElement", "../inlineElements/getInlineElementAtNode", "../inlineElements/getFirstLastInlineElement"], function (require, exports, contains_1, getBlockElementAtNode_1, getFirstLastBlockElement_1, getInlineElementAtNode_1, getFirstLastInlineElement_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @internal
     * provides a scope object for traversing the entire editor body starting from the beginning
     */
    var BodyScoper = /** @class */ (function () {
        /**
         * Construct a new instance of BodyScoper class
         * @param rootNode Root node of the body
         * @param startNode The node to start from. If not passed, it will start from the beginning of the body
         */
        function BodyScoper(rootNode, startNode) {
            this.rootNode = rootNode;
            this.startNode = (0, contains_1.default)(rootNode, startNode) ? startNode : null;
        }
        /**
         * Get the start block element
         */
        BodyScoper.prototype.getStartBlockElement = function () {
            return this.startNode
                ? (0, getBlockElementAtNode_1.default)(this.rootNode, this.startNode)
                : (0, getFirstLastBlockElement_1.default)(this.rootNode, true /*isFirst*/);
        };
        /**
         * Get the start inline element
         */
        BodyScoper.prototype.getStartInlineElement = function () {
            return this.startNode
                ? (0, getInlineElementAtNode_1.default)(this.rootNode, this.startNode)
                : (0, getFirstLastInlineElement_1.getFirstInlineElement)(this.rootNode);
        };
        /**
         * Since the scope is global, all blocks under the root node are in scope
         */
        BodyScoper.prototype.isBlockInScope = function (blockElement) {
            return (0, contains_1.default)(this.rootNode, blockElement.getStartNode());
        };
        /**
         * Since we're at body scope, inline elements never need to be trimmed
         */
        BodyScoper.prototype.trimInlineElement = function (inlineElement) {
            return inlineElement;
        };
        return BodyScoper;
    }());
    exports.default = BodyScoper;
});
//# sourceMappingURL=BodyScoper.js.map