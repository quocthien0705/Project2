{"version":3,"file":"entityPlaceholderUtils.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/entity/entityPlaceholderUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import getEntityFromElement from './getEntityFromElement';\nimport getEntitySelector from './getEntitySelector';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport { EntityClasses } from 'roosterjs-editor-types';\nimport type { Entity, KnownEntityItem } from 'roosterjs-editor-types';\n\nconst EntityPlaceHolderTagName = 'ENTITY-PLACEHOLDER';\n\n/**\n * @deprecated\n * Create a placeholder comment node for entity\n * @param entity The entity to create placeholder from\n * @returns A placeholder comment node as\n */\nexport function createEntityPlaceholder(entity: Entity): HTMLElement {\n    const placeholder = entity.wrapper.ownerDocument.createElement(EntityPlaceHolderTagName);\n    placeholder.id = entity.id;\n\n    return placeholder;\n}\n\n/**\n * Move content from a container into a new Document fragment, and try keep entities to be reusable by creating placeholder\n * for them in the document fragment.\n * If an entity is directly under root container, the whole entity can be reused and no need to move it at all.\n * If an entity is not directly under root container, it is still reusable, but it may need some movement.\n * In any case, entities will be replaced with a placeholder in the target document fragment.\n * We will use an entity map (the \"entities\" parameter) to save the map from entity id to its wrapper element.\n * @param root The root element\n * @param entities A map from entity id to entity wrapper element\n * @returns A new document fragment contains all the content and entity placeholders\n */\nexport function moveContentWithEntityPlaceholders(\n    root: HTMLDivElement,\n    entities: Record<string, HTMLElement>\n) {\n    const entitySelector = getEntitySelector();\n    const fragment = root.ownerDocument.createDocumentFragment();\n    let next: Node | null = null;\n\n    for (let child: Node | null = root.firstChild; child; child = next) {\n        let entity: Entity | null;\n        let nodeToAppend = child;\n\n        next = child.nextSibling;\n\n        if (safeInstanceOf(child, 'HTMLElement')) {\n            if ((entity = getEntityFromElement(child))) {\n                nodeToAppend = getPlaceholder(entity, entities);\n            } else {\n                child.querySelectorAll<HTMLElement>(entitySelector).forEach(wrapper => {\n                    if ((entity = getEntityFromElement(wrapper))) {\n                        const placeholder = getPlaceholder(entity, entities);\n\n                        wrapper.parentNode?.replaceChild(placeholder, wrapper);\n                    }\n                });\n            }\n        }\n\n        fragment.appendChild(nodeToAppend);\n    }\n\n    fragment.normalize();\n\n    return fragment;\n}\n\n/**\n * Restore HTML content from a document fragment that may contain entity placeholders.\n * @param source Source document fragment that contains HTML content and entity placeholders\n * @param target Target container, usually to be editor root container\n * @param entities A map from entity id to entity wrapper, used for reusing existing DOM structure for entity\n * @param insertClonedNode When pass true, merge with a cloned copy of the nodes from source fragment rather than the nodes themselves @default false\n */\nexport function restoreContentWithEntityPlaceholder(\n    source: ParentNode,\n    target: HTMLElement,\n    entities: Record<string, HTMLElement | KnownEntityItem> | null,\n    insertClonedNode?: boolean\n) {\n    let anchor = target.firstChild;\n\n    const entitySelector = getEntitySelector();\n\n    for (let current = source.firstChild; current; ) {\n        const next = current.nextSibling;\n        const wrapper = tryGetWrapperFromEntityPlaceholder(entities, current);\n\n        if (wrapper) {\n            anchor = removeUntil(anchor, wrapper);\n\n            if (anchor) {\n                anchor = anchor.nextSibling;\n            } else {\n                target.appendChild(wrapper);\n            }\n        } else {\n            const nodeToInsert = insertClonedNode ? current.cloneNode(true /*deep*/) : current;\n            target.insertBefore(nodeToInsert, anchor);\n\n            if (safeInstanceOf(nodeToInsert, 'HTMLElement')) {\n                nodeToInsert.querySelectorAll(entitySelector).forEach(placeholder => {\n                    const wrapper = tryGetWrapperFromEntityPlaceholder(entities, placeholder);\n\n                    if (wrapper) {\n                        placeholder.parentNode?.replaceChild(wrapper, placeholder);\n                    }\n                });\n            }\n        }\n\n        current = next;\n    }\n\n    removeUntil(anchor);\n}\n\nfunction removeUntil(anchor: ChildNode | null, nodeToStop?: HTMLElement) {\n    while (anchor && (!nodeToStop || anchor != nodeToStop)) {\n        const nodeToRemove = anchor;\n        anchor = anchor.nextSibling;\n        nodeToRemove.parentNode?.removeChild(nodeToRemove);\n    }\n    return anchor;\n}\n\nfunction tryGetWrapperFromEntityPlaceholder(\n    entities: Record<string, HTMLElement | KnownEntityItem> | null,\n    node: Node\n): HTMLElement | null {\n    const id =\n        safeInstanceOf(node, 'HTMLElement') &&\n        node.classList.contains(EntityClasses.ENTITY_INFO_NAME) &&\n        getEntityFromElement(node as HTMLElement)?.id;\n    const item = id ? entities?.[id] : null;\n\n    return !item\n        ? null\n        : safeInstanceOf(item, 'HTMLElement')\n        ? item\n        : item?.canPersist\n        ? item.element\n        : null;\n}\n\nfunction getPlaceholder(entity: Entity, entities: Record<string, HTMLElement>) {\n    entities[entity.id] = entity.wrapper;\n\n    return entity.wrapper.cloneNode(true /*deep*/);\n}\n"]}