{"version":3,"file":"commitEntity.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/entity/commitEntity.ts"],"names":[],"mappings":";;;IAEA,IAAM,gBAAgB,GAAG,iBAAiB,CAAC;IAE3C;;;;;;OAMG;IACH,SAAwB,YAAY,CAChC,OAAoB,EACpB,IAAY,EACZ,UAAmB,EACnB,EAAW;QAEX,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,SAAS,GAAG,8EAEjB,IAAI,UAAI,EAAE,CAAC,CAAC,CAAC,sCAAoC,EAAE,MAAG,CAAC,CAAC,CAAC,EAAE,kDAE3D,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAE,CAAC;YAE5B,IAAI,UAAU,EAAE;gBACZ,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC;aACrC;iBAAM,IAAI,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE;gBAC/C,OAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;aAC7C;SACJ;IACL,CAAC;IAnBD,+BAmBC","sourcesContent":["import { EntityClasses } from 'roosterjs-editor-types';\n\nconst CONTENT_EDITABLE = 'contenteditable';\n\n/**\n * Commit information of an entity (type, isReadonly, id) into the wrapper node as CSS Classes\n * @param wrapper The entity wrapper element\n * @param type Entity type\n * @param isReadonly Whether this is a readonly entity\n * @param id Optional Id of the entity\n */\nexport default function commitEntity(\n    wrapper: HTMLElement,\n    type: string,\n    isReadonly: boolean,\n    id?: string\n) {\n    if (wrapper) {\n        wrapper.className = `${EntityClasses.ENTITY_INFO_NAME} ${\n            EntityClasses.ENTITY_TYPE_PREFIX\n        }${type} ${id ? `${EntityClasses.ENTITY_ID_PREFIX}${id} ` : ''}${\n            EntityClasses.ENTITY_READONLY_PREFIX\n        }${isReadonly ? '1' : '0'}`;\n\n        if (isReadonly) {\n            wrapper.contentEditable = 'false';\n        } else if (wrapper.getAttribute(CONTENT_EDITABLE)) {\n            wrapper.removeAttribute(CONTENT_EDITABLE);\n        }\n    }\n}\n"]}