define(["require", "exports", "../jsUtils/getObjectKeys"], function (require, exports, getObjectKeys_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Validate the given object with a type definition object
     * @param input The object to validate
     * @param def The type definition object used for validation
     * @returns True if the object passed the validation, otherwise false
     */
    function validate(input, def) {
        var result = false;
        if ((def.isOptional && typeof input === 'undefined') || (def.allowNull && input === null)) {
            result = true;
        }
        else if ((!def.isOptional && typeof input === 'undefined') ||
            (!def.allowNull && input === null)) {
            return false;
        }
        else {
            switch (def.type) {
                case 2 /* String */:
                    result =
                        typeof input === 'string' &&
                            (typeof def.value === 'undefined' || input === def.value);
                    break;
                case 1 /* Number */:
                    result =
                        typeof input === 'number' &&
                            (typeof def.value === 'undefined' || areSameNumbers(def.value, input)) &&
                            (typeof def.minValue === 'undefined' || input >= def.minValue) &&
                            (typeof def.maxValue === 'undefined' || input <= def.maxValue);
                    break;
                case 0 /* Boolean */:
                    result =
                        typeof input === 'boolean' &&
                            (typeof def.value === 'undefined' || input === def.value);
                    break;
                case 3 /* Array */:
                    result =
                        Array.isArray(input) &&
                            (typeof def.minLength === 'undefined' || input.length >= def.minLength) &&
                            (typeof def.maxLength === 'undefined' || input.length <= def.maxLength) &&
                            input.every(function (x) { return validate(x, def.itemDef); });
                    break;
                case 4 /* Object */:
                    result =
                        typeof input === 'object' &&
                            (0, getObjectKeys_1.default)(def.propertyDef).every(function (x) {
                                return validate(input[x], def.propertyDef[x]);
                            });
                    break;
                case 5 /* Customize */:
                    result = def.validator(input);
                    break;
            }
        }
        return result;
    }
    exports.default = validate;
    function areSameNumbers(n1, n2) {
        return Math.abs(n1 - n2) < 1e-3;
    }
});
//# sourceMappingURL=validate.js.map