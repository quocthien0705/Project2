{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/metadata/metadata.ts"],"names":[],"mappings":";;;;IAGA,IAAM,mBAAmB,GAAG,aAAa,CAAC;IAE1C;;;;;;;;OAQG;IACH,SAAgB,WAAW,CACvB,OAAoB,EACpB,UAA0B,EAC1B,YAAgB;QAEhB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACjD,IAAI,GAAQ,CAAC;QAEb,IAAI;YACA,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SACtC;QAAC,WAAM,GAAE;QAEV,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;YAC5B,IAAI,CAAC,UAAU,EAAE;gBACb,OAAO,GAAQ,CAAC;aACnB;iBAAM,IAAI,IAAA,kBAAQ,EAAC,GAAG,EAAE,UAAU,CAAC,EAAE;gBAClC,OAAO,GAAG,CAAC;aACd;SACJ;QAED,IAAI,YAAY,EAAE;YACd,OAAO,YAAY,CAAC;SACvB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAzBD,kCAyBC;IAED;;;;;;;OAOG;IACH,SAAgB,WAAW,CAAI,OAAoB,EAAE,QAAW,EAAE,GAAmB;QACjF,IAAI,CAAC,GAAG,IAAI,IAAA,kBAAQ,EAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;YACjC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAPD,kCAOC;IAED;;;;OAIG;IACH,SAAgB,cAAc,CAAI,OAAoB,EAAE,WAAoB;QACxE,IAAI,WAAW,EAAE;YACb,IAAM,eAAe,GAAQ,WAAW,CAAI,OAAO,CAAC,CAAC;YACrD,IAAI,eAAe,EAAE;gBACjB,OAAO,eAAe,CAAC,WAAW,CAAC,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;aAC1E;SACJ;aAAM;YACH,OAAO,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;SAC/C;IACL,CAAC;IAVD,wCAUC","sourcesContent":["import validate from './validate';\nimport type { Definition } from 'roosterjs-editor-types';\n\nconst MetadataDataSetName = 'editingInfo';\n\n/**\n * Get metadata object from an HTML element\n * @param element The HTML element to get metadata object from\n * @param definition The type definition of this metadata used for validate this metadata object.\n * If not specified, no validation will be performed and always return whatever we get from the element\n * @param defaultValue The default value to return if the retrieved object cannot pass the validation,\n * or there is no metadata object at all\n * @returns The strong-type metadata object if it can be validated, or null\n */\nexport function getMetadata<T>(\n    element: HTMLElement,\n    definition?: Definition<T>,\n    defaultValue?: T\n): T | null {\n    const str = element.dataset[MetadataDataSetName];\n    let obj: any;\n\n    try {\n        obj = str ? JSON.parse(str) : null;\n    } catch {}\n\n    if (typeof obj !== 'undefined') {\n        if (!definition) {\n            return obj as T;\n        } else if (validate(obj, definition)) {\n            return obj;\n        }\n    }\n\n    if (defaultValue) {\n        return defaultValue;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Set metadata object into an HTML element\n * @param element The HTML element to set metadata object to\n * @param metadata The metadata object to set\n * @param def An optional type definition object used for validate this metadata object.\n * If not specified, metadata will be set without validation\n * @returns True if metadata is set, otherwise false\n */\nexport function setMetadata<T>(element: HTMLElement, metadata: T, def?: Definition<T>): boolean {\n    if (!def || validate(metadata, def)) {\n        element.dataset[MetadataDataSetName] = JSON.stringify(metadata);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Remove metadata from the given element if any\n * @param element The element to remove metadata from\n * @param metadataKey The metadata key to remove, if none provided it will delete all metadata\n */\nexport function removeMetadata<T>(element: HTMLElement, metadataKey?: string) {\n    if (metadataKey) {\n        const currentMetadata: any = getMetadata<T>(element);\n        if (currentMetadata) {\n            delete currentMetadata[metadataKey];\n            element.dataset[MetadataDataSetName] = JSON.stringify(currentMetadata);\n        }\n    } else {\n        delete element.dataset[MetadataDataSetName];\n    }\n}\n"]}