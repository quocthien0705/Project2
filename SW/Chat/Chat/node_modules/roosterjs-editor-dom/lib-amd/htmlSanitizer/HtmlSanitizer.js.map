{"version":3,"file":"HtmlSanitizer.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/htmlSanitizer/HtmlSanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["import changeElementTag from '../utils/changeElementTag';\nimport getInheritableStyles from './getInheritableStyles';\nimport getObjectKeys from '../jsUtils/getObjectKeys';\nimport getPredefinedCssForElement from './getPredefinedCssForElement';\nimport getStyles from '../style/getStyles';\nimport getTagOfNode from '../utils/getTagOfNode';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport setStyles from '../style/setStyles';\nimport toArray from '../jsUtils/toArray';\nimport { cloneObject } from './cloneObject';\nimport { isCssVariable, processCssVariable } from './processCssVariable';\nimport { NodeType } from 'roosterjs-editor-types';\nimport {\n    getAllowedAttributes,\n    getAllowedCssClassesRegex,\n    getTagReplacement,\n    getDefaultStyleValues,\n    getStyleCallbacks,\n} from './getAllowedValues';\nimport type {\n    AttributeCallbackMap,\n    CssStyleCallbackMap,\n    ElementCallbackMap,\n    HtmlSanitizerOptions,\n    PredefinedCssMap,\n    SanitizeHtmlOptions,\n    StringMap,\n} from 'roosterjs-editor-types';\n\n/**\n * HTML sanitizer class provides two features:\n * 1. Convert global CSS to inline CSS\n * 2. Sanitize an HTML document, remove unnecessary/dangerous attribute/nodes\n */\nexport default class HtmlSanitizer {\n    /**\n     * @deprecated Use new HtmlSanitizer().convertGlobalCssToInlineCss() instead\n     * Convert global CSS to inline CSS if any\n     * @param html HTML source\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\n     */\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\n        const sanitizer = new HtmlSanitizer({\n            additionalGlobalStyleNodes: additionalStyleNodes,\n        });\n        return sanitizer.exec(html, true /*convertCssOnly*/);\n    }\n\n    /**\n     * @deprecated Use new HtmlSanitizer().sanitize() instead\n     * Sanitize HTML string, remove any unused HTML node/attribute/CSS.\n     * @param html HTML source string\n     * @param options Options used for this sanitizing process\n     */\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\n        options = options || {};\n        const sanitizer = new HtmlSanitizer(options);\n        const currentStyles = safeInstanceOf(options.currentElementOrStyle, 'HTMLElement')\n            ? getInheritableStyles(options.currentElementOrStyle)\n            : options.currentElementOrStyle;\n        return sanitizer.exec(html, options.convertCssOnly, currentStyles);\n    }\n\n    private elementCallbacks: ElementCallbackMap;\n    private styleCallbacks: CssStyleCallbackMap;\n    private attributeCallbacks: AttributeCallbackMap;\n    private tagReplacements: Record<string, string | null>;\n    private allowedAttributes: string[];\n    private allowedCssClassesRegex: RegExp | null;\n    private defaultStyleValues: StringMap;\n    private additionalPredefinedCssForElement: PredefinedCssMap | null;\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\n    private preserveHtmlComments: boolean;\n    private unknownTagReplacement: string | null;\n\n    /**\n     * Construct a new instance of HtmlSanitizer\n     * @param options Options for HtmlSanitizer\n     */\n    constructor(options?: HtmlSanitizerOptions) {\n        options = options || {};\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\n        this.styleCallbacks = getStyleCallbacks(options.cssStyleCallbacks);\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\n        this.tagReplacements = getTagReplacement(options.additionalTagReplacements);\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowedAttributes);\n        this.allowedCssClassesRegex = getAllowedCssClassesRegex(\n            options.additionalAllowedCssClasses\n        );\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\n        this.additionalPredefinedCssForElement = options.additionalPredefinedCssForElement || null;\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\n        this.preserveHtmlComments = options.preserveHtmlComments || false;\n        this.unknownTagReplacement = options.unknownTagReplacement || null;\n    }\n\n    /**\n     * @deprecated Use HtmlSanitizer.convertGlobalCssToInlineCss() and HtmlSanitizer.sanitize() instead\n     * Sanitize HTML string\n     * This function will do the following work:\n     * 1. Convert global CSS into inline CSS\n     * 2. Remove dangerous HTML tags and attributes\n     * 3. Remove useless CSS properties\n     * @param html The input HTML\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\n     * @param currentStyles Current inheritable CSS styles\n     */\n    exec(html: string, convertCssOnly?: boolean, currentStyles?: StringMap): string {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html || '', 'text/html');\n\n        if (doc && doc.body && doc.body.firstChild) {\n            this.convertGlobalCssToInlineCss(doc);\n            if (!convertCssOnly) {\n                this.sanitize(doc.body, currentStyles);\n            }\n        }\n        return (doc && doc.body && doc.body.innerHTML) || '';\n    }\n\n    /**\n     * Splits CSS selectors, avoiding splits within parentheses\n     * @param selectorText The CSS selector string\n     * @return Array of trimmed selectors\n     */\n    private splitSelectors(selectorText: string) {\n        const regex = /(?![^(]*\\)),/;\n        return selectorText.split(regex).map(s => s.trim());\n    }\n\n    /**\n     * Sanitize an HTML element, remove unnecessary or dangerous elements/attribute/CSS rules\n     * @param rootNode Root node to sanitize\n     * @param currentStyles Current CSS styles. Inheritable styles in the given node which has\n     * the same value with current styles will be ignored.\n     */\n    sanitize(rootNode: Node, currentStyles?: StringMap) {\n        if (!rootNode) {\n            return '';\n        }\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\n        this.processNode(rootNode, currentStyles, {});\n    }\n\n    /**\n     * Convert global CSS into inline CSS\n     * @param rootNode The HTML Document\n     */\n    convertGlobalCssToInlineCss(rootNode: ParentNode) {\n        const styleNodes = toArray(rootNode.querySelectorAll('style'));\n        const styleSheets = this.additionalGlobalStyleNodes\n            .reverse()\n            .map(node => node.sheet as CSSStyleSheet)\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\n            .filter(sheet => sheet);\n        for (const styleSheet of styleSheets) {\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\n                // Skip any none-style rule, i.e. @page\n                const styleRule = styleSheet.cssRules[j] as CSSStyleRule;\n                const text = styleRule && styleRule.style ? styleRule.style.cssText : null;\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\n                    continue;\n                }\n                // Make sure the selector is not empty\n                for (const selector of this.splitSelectors(styleRule.selectorText)) {\n                    if (!selector || !selector.trim()) {\n                        continue;\n                    }\n                    const nodes = toArray(rootNode.querySelectorAll(selector));\n                    // Always put existing styles after so that they have higher priority\n                    // Which means if both global style and inline style apply to the same element,\n                    // inline style will have higher priority\n                    nodes.forEach(node =>\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\n                    );\n                }\n            }\n        }\n\n        styleNodes.forEach(node => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\n        const nodeType = node.nodeType;\n        const isElement = nodeType == NodeType.Element;\n        const isText = nodeType == NodeType.Text;\n        const isFragment = nodeType == NodeType.DocumentFragment;\n        const isComment = nodeType == NodeType.Comment;\n\n        let shouldKeep = false;\n\n        if (isElement) {\n            const tag = getTagOfNode(node);\n            const callback = this.elementCallbacks[tag];\n            let replacement: string | null | undefined = this.tagReplacements[tag.toLowerCase()];\n\n            if (replacement === undefined) {\n                replacement = this.unknownTagReplacement;\n            }\n\n            if (callback) {\n                shouldKeep = callback(node as HTMLElement, context);\n            } else if (tag.indexOf(':') > 0) {\n                shouldKeep = true;\n            } else if (tag == replacement || replacement == '*') {\n                shouldKeep = true;\n            } else if (replacement && /^[a-zA-Z][\\w\\-]*$/.test(replacement)) {\n                node = changeElementTag(node as HTMLElement, replacement)!;\n                shouldKeep = true;\n            }\n        } else if (isText) {\n            const whiteSpace = currentStyle['white-space'];\n            shouldKeep =\n                whiteSpace == 'pre' ||\n                whiteSpace == 'pre-line' ||\n                whiteSpace == 'pre-wrap' ||\n                !/^[\\r\\n]*$/g.test(node.nodeValue || '');\n        } else if (isFragment) {\n            shouldKeep = true;\n        } else if (isComment) {\n            shouldKeep = this.preserveHtmlComments;\n        } else {\n            shouldKeep = false;\n        }\n\n        if (!shouldKeep) {\n            node.parentNode?.removeChild(node);\n        } else if (\n            isText &&\n            (currentStyle['white-space'] == 'pre' || currentStyle['white-space'] == 'pre-wrap')\n        ) {\n            node.nodeValue = (node.nodeValue || '')\n                .replace(/^ /gm, '\\u00A0')\n                .replace(/ {2}/g, ' \\u00A0');\n        } else if (isElement || isFragment) {\n            const thisStyle = cloneObject(currentStyle);\n            const element = <HTMLElement>node;\n            if (isElement) {\n                this.processAttributes(element, context);\n                this.preprocessCss(element, thisStyle);\n                this.processCss(element, thisStyle, context);\n            }\n\n            let child: Node | null = element.firstChild;\n            let next: Node | null;\n            for (; child; child = next) {\n                next = child.nextSibling;\n                this.processNode(child, thisStyle, context);\n            }\n        }\n    }\n\n    private preprocessCss(element: HTMLElement, thisStyle: StringMap) {\n        const predefinedStyles = getPredefinedCssForElement(\n            element,\n            this.additionalPredefinedCssForElement\n        );\n        if (predefinedStyles) {\n            getObjectKeys(predefinedStyles).forEach(name => {\n                thisStyle[name] = predefinedStyles[name];\n            });\n        }\n    }\n\n    private processCss(element: HTMLElement, thisStyle: StringMap, context: Object) {\n        const styles = getStyles(element);\n        getObjectKeys(styles).forEach(name => {\n            let value = styles[name];\n            const callback = this.styleCallbacks[name];\n            const isInheritable = thisStyle[name] != undefined;\n            let keep = true;\n\n            if (keep && !!callback) {\n                keep = callback(value, element, thisStyle, context);\n            }\n\n            if (keep && isCssVariable(value)) {\n                value = processCssVariable(value);\n                keep = !!value;\n            }\n\n            keep =\n                keep &&\n                value != 'inherit' &&\n                value.indexOf('expression') < 0 &&\n                name.substr(0, 1) != '-' &&\n                this.defaultStyleValues[name] != value &&\n                ((isInheritable && value != thisStyle[name]) ||\n                    (!isInheritable && value != 'initial' && value != 'normal'));\n            if (keep && isInheritable) {\n                thisStyle[name] = value;\n            }\n\n            if (keep) {\n                styles[name] = value;\n            } else {\n                delete styles[name];\n            }\n        });\n\n        setStyles(element, styles);\n    }\n\n    private processAttributes(element: HTMLElement, context: Object) {\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\n            const attribute = element.attributes[i];\n            const name = attribute.name.toLowerCase().trim();\n            const value = attribute.value;\n            const callback = this.attributeCallbacks[name];\n\n            let newValue = callback\n                ? callback(value, element, context)\n                : this.allowedAttributes.indexOf(name) >= 0 || name.indexOf('data-') == 0\n                ? value\n                : null;\n\n            if (name == 'class' && this.allowedCssClassesRegex) {\n                newValue = this.processCssClass(value, newValue);\n            }\n\n            if (\n                newValue === null ||\n                newValue === undefined ||\n                newValue.match(/s\\n*c\\n*r\\n*i\\n*p\\n*t\\n*:/i) // match script: with any NewLine inside. Browser will ignore those NewLine char and still treat it as script prefix\n            ) {\n                element.removeAttribute(name);\n            } else {\n                attribute.value = newValue;\n            }\n        }\n    }\n\n    private processCssClass(originalValue: string, calculatedValue: string | null): string | null {\n        const originalClasses = originalValue ? originalValue.split(' ') : [];\n        const calculatedClasses = calculatedValue ? calculatedValue.split(' ') : [];\n\n        originalClasses.forEach(className => {\n            if (\n                this.allowedCssClassesRegex?.test(className) &&\n                calculatedClasses.indexOf(className) < 0\n            ) {\n                calculatedClasses.push(className);\n            }\n        });\n\n        return calculatedClasses?.length > 0 ? calculatedClasses.join(' ') : null;\n    }\n}\n"]}