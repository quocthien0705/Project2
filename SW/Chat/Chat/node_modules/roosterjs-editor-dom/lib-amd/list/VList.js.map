{"version":3,"file":"VList.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/list/VList.ts"],"names":[],"mappings":"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","sourcesContent":["import changeElementTag from '../utils/changeElementTag';\nimport getListTypeFromNode, { isListElement } from './getListTypeFromNode';\nimport getTagOfNode from '../utils/getTagOfNode';\nimport isBlockElement from '../utils/isBlockElement';\nimport isNodeEmpty from '../utils/isNodeEmpty';\nimport Position from '../selection/Position';\nimport queryElements from '../utils/queryElements';\nimport safeInstanceOf from '../utils/safeInstanceOf';\nimport splitParentNode from '../utils/splitParentNode';\nimport toArray from '../jsUtils/toArray';\nimport unwrap from '../utils/unwrap';\nimport VListItem, { ListStyleDefinitionMetadata } from './VListItem';\nimport wrap from '../utils/wrap';\nimport { getMetadata, setMetadata } from '../metadata/metadata';\nimport type { ListStyleMetadata } from './VListItem';\nimport type { NodePosition } from 'roosterjs-editor-types';\nimport {\n    Indentation,\n    ListType,\n    PositionType,\n    NodeType,\n    Alignment,\n    NumberingListType,\n    BulletListType,\n} from 'roosterjs-editor-types';\nimport type {\n    CompatibleAlignment,\n    CompatibleBulletListType,\n    CompatibleIndentation,\n    CompatibleListType,\n    CompatibleNumberingListType,\n} from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * Represent a bullet or a numbering list\n *\n * @example\n * A VList is a logical representation of list items, it contains an item array with node and list type stack.\n * e.g. We have a list like this\n * ```html\n * <ol>\n *   <li>item 1</li>\n *   <li>item 2</li>\n *   <ul>\n *     <li>item 2.1</li>\n *     <li>item 2.2</li>\n *   <ul>\n * </ol>\n * ```\n *\n * A VList of this list will be like this:\n * ```javascript\n * {\n *   rootList: (OL node),\n *   items: [{\n *       node: (LI node with 'item 1'),\n *       listTypes: [null, OL],\n *     }, {\n *       node: (LI node with 'item 2'),\n *       listTypes: [null, OL],\n *     }, {\n *       node: (LI node with 'item 2.1),\n *       listTypes: [null, OL, UL],\n *     }, {\n *       node: (LI node with 'item 2.2'),\n *       listTypes: [null, OL, UL],\n *     }\n *   ]\n * }\n * ```\n *\n * When we want to outdent item 2.1, we just need to remove the last \"UL\" from listTypes of item 2.1, then\n * the writeBack() function will handle everything related to DOM change\n */\nexport default class VList {\n    public readonly items: VListItem[] = [];\n\n    /**\n     * Create a new instance of VList class\n     * @param rootList The root list element, can be either OL or UL tag\n     */\n    constructor(public rootList: HTMLOListElement | HTMLUListElement) {\n        if (!rootList) {\n            throw new Error('rootList must not be null');\n        }\n\n        // Before populate items, we need to normalize the list to make sure it is in a correct format\n        // otherwise further action may mass thing up.\n        //\n        // There are two kinds of normalization to perform.\n        // 1. Move nodes directly under OL/UL into a LI node, unless it is an orphan node\n        // Please see comment for VListItem.isOrphanItem() for more information about orphan node\n        // e.g.:\n        // ```HTML\n        // <ol>\n        //   <li>item 1</li>\n        //   <div>item 2</div>\n        // </ol>\n        // ```\n        // After this step, it should become:\n        // ```html\n        // <ol>\n        //   <li>item 1\n        //     <div>item 2</div>\n        //   <li>\n        // </ol>\n        // ```\n        moveChildNodesToLi(this.rootList);\n        queryElements(this.rootList, 'ol,ul', moveChildNodesToLi);\n\n        // 2. Move LI node embedded into another LI node out to directly under OL/UL node\n        // Ideally browser we do this for us automatically when out the HTML into DOM. However after\n        // step 1, it is possible that we move some LI node into another one. e.g:\n        // ```HTML\n        // <ol>\n        //   <li>item 1</li>\n        //   <div>\n        //     item 1.1\n        //     <li>item 3</li>\n        //   </div>\n        // </ol>\n        // ```\n        // See that the second LI tag is not directly under OL, so after step 1, this will become:\n        // ```html\n        // <ol>\n        //   <li>item 1\n        //     <div>\n        //       item 1.1\n        //       <li>item 2</li>\n        //     </div>\n        //   <li>\n        // </ol>\n        // ```\n        // Now we have a LI tag embedded into another LI tag. So we need step 2 to move the inner LI tag out to be:\n        // ```html\n        // <ol>\n        //   <li>item1\n        //     <div>item 1.1</div>\n        //   </li>\n        //   <li><div>item2</div></li>\n        // </ol>\n        // ```\n        queryElements(this.rootList, 'li', moveLiToList);\n\n        this.populateItems(this.rootList);\n    }\n\n    /**\n     * Check if this list contains the given node\n     * @param node The node to check\n     */\n    contains(node: Node) {\n        // We don't check if the node is contained by this.rootList here, because after some operation,\n        // it is possible a node is logically contained by this list but the container list item hasn't\n        // been put under this.rootList in DOM tree yet.\n        return this.items.some(item => item.contains(node));\n    }\n\n    /**\n     * Get list number of the last item in this VList.\n     * If there is no order list item, result will be undefined\n     */\n    getLastItemNumber(): number | undefined {\n        const start = this.getStart();\n\n        return start === undefined\n            ? start\n            : start -\n                  1 +\n                  this.items.filter(\n                      item =>\n                          item.getListType() == ListType.Ordered &&\n                          item.getLevel() == 1 &&\n                          !item.isDummy()\n                  ).length;\n    }\n\n    /**\n     * Write the result back into DOM tree\n     * After that, this VList becomes unavailable because we set this.rootList to null\n     *\n     * @param shouldReuseAllAncestorListElements Optional - defaults to false.\n     * @param disableListChain Whether we want to disable list chain functionality. @default false\n     */\n    writeBack(shouldReuseAllAncestorListElements?: boolean, disableListChain?: boolean) {\n        if (!this.rootList) {\n            throw new Error('rootList must not be null');\n        }\n\n        const doc = this.rootList.ownerDocument;\n        const listStack: Node[] = [doc.createDocumentFragment()];\n        const placeholder = doc.createTextNode('');\n        let start = this.getStart() || 1;\n        let lastList: Node;\n\n        // Use a placeholder to hold the position since the root list may be moved into document fragment later\n        this.rootList.parentNode!.replaceChild(placeholder, this.rootList);\n\n        this.items.forEach(item => {\n            const newListStart = item.getNewListStart();\n\n            if (newListStart && newListStart != start) {\n                listStack.splice(1, listStack.length - 1);\n                start = newListStart;\n            }\n\n            item.writeBack(listStack, this.rootList, shouldReuseAllAncestorListElements);\n            const topList = listStack[1];\n\n            item.applyListStyle(this.rootList, start);\n\n            if (safeInstanceOf(topList, 'HTMLOListElement')) {\n                if (lastList != topList) {\n                    if (start == 1) {\n                        topList.removeAttribute('start');\n                    } else {\n                        topList.start = start;\n                    }\n                }\n\n                if (item.getLevel() == 1 && !item.isDummy() && !disableListChain) {\n                    start++;\n                }\n            }\n\n            lastList = topList;\n        });\n\n        // Restore the content to the position of placeholder\n        placeholder.parentNode!.replaceChild(listStack[0], placeholder);\n    }\n\n    /**\n     * Sets the New List Start Property, that is going to be used to create a new List in the WriteBack function\n     * @param separator The HTML element that indicates when to split the VList\n     * @param startNumber The start number of the new List\n     */\n    split(separator: HTMLElement, startNumber: number) {\n        if (!this.rootList) {\n            throw new Error('rootList must not be null');\n        }\n\n        //Traverse the items of the VList, when the separator is found, set the New List Start Property\n        for (let index = 0; index < this.items.length; index++) {\n            if (this.items[index].getNode() == separator) {\n                this.items[index].setNewListStart(startNumber);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Set indentation of the given range of this list\n     * @param start Start position to operate from\n     * @param end End position to operate to\n     * @param indentation Indent or outdent\n     */\n    setIndentation(\n        start: NodePosition,\n        end: NodePosition,\n        indentation: Indentation | CompatibleIndentation\n    ): void;\n\n    /**\n     * Outdent the give range of this list\n     * @param start Start position to operate from\n     * @param end End position to operate to\n     * @param indentation Specify to outdent\n     * @param softOutdent (Optional) True to make the item to by dummy (no bullet or number) if the item is not dummy,\n     * otherwise outdent the item\n     * @param preventItemRemoval (Optional) True to prevent the indentation to remove the bullet when outdenting a first\n     * level list item, by default is false\n     */\n    setIndentation(\n        start: NodePosition,\n        end: NodePosition,\n        indentation: Indentation.Decrease | CompatibleIndentation.Decrease,\n        softOutdent?: boolean,\n        preventItemRemoval?: boolean\n    ): void;\n\n    setIndentation(\n        start: NodePosition,\n        end: NodePosition,\n        indentation: Indentation | CompatibleIndentation,\n        softOutdent?: boolean,\n        preventItemRemoval: boolean = false\n    ) {\n        let shouldAddMargin = false;\n        this.findListItems(start, end, item => {\n            shouldAddMargin = shouldAddMargin || this.items.indexOf(item) == 0;\n            indentation == Indentation.Decrease\n                ? softOutdent && !item.isDummy()\n                    ? item.setIsDummy(true /*isDummy*/)\n                    : item.outdent(preventItemRemoval)\n                : item.indent();\n        });\n\n        if (shouldAddMargin && preventItemRemoval) {\n            for (let index = 0; index < this.items.length; index++) {\n                this.items[index].addNegativeMargins();\n            }\n        }\n    }\n\n    /**\n     * Set alignment of the given range of this list\n     * @param start Start position to operate from\n     * @param end End position to operate to\n     * @param alignment Align items left, center or right\n     */\n    setAlignment(\n        start: NodePosition,\n        end: NodePosition,\n        alignment: Alignment | CompatibleAlignment\n    ) {\n        this.rootList.style.display = 'flex';\n        this.rootList.style.flexDirection = 'column';\n        this.findListItems(start, end, item => {\n            let align = 'start';\n            if (alignment == Alignment.Center) {\n                align = 'center';\n            } else if (alignment == Alignment.Right) {\n                align = 'end';\n            }\n            item.getNode().style.alignSelf = align;\n        });\n    }\n\n    /**\n     * Remove margins of a new list\n     */\n    removeMargins() {\n        if (!this.rootList.style.marginTop && !this.rootList.style.marginBottom) {\n            this.rootList.style.marginTop = '0px';\n            this.rootList.style.marginBottom = '0px';\n        }\n    }\n\n    /**\n     * Change list type of the given range of this list.\n     * If some of the items are not real list item yet, this will make them to be list item with given type\n     * If all items in the given range are already in the type to change to, this becomes an outdent operation\n     * @param start Start position to operate from\n     * @param end End position to operate to\n     * @param targetType Target list type\n     */\n    changeListType(\n        start: NodePosition,\n        end: NodePosition,\n        targetType: ListType | CompatibleListType\n    ) {\n        let needChangeType = false;\n\n        this.findListItems(start, end, item => {\n            needChangeType = needChangeType || item.getListType() != targetType;\n        });\n        this.findListItems(start, end, item =>\n            needChangeType ? item.changeListType(targetType) : item.outdent()\n        );\n    }\n\n    /**\n     * Change list style of the given range of this list.\n     * If some of the items are not real list item yet, this will make them to be list item with given style\n     * @param orderedStyle The style of ordered list\n     * @param unorderedStyle The style of unordered list\n     */\n    setListStyleType(\n        orderedStyle?: NumberingListType | CompatibleNumberingListType,\n        unorderedStyle?: BulletListType | CompatibleBulletListType\n    ) {\n        const style = getMetadata<ListStyleMetadata>(this.rootList, ListStyleDefinitionMetadata);\n        const styleMetadata = createListStyleMetadata(\n            style,\n            orderedStyle as NumberingListType,\n            unorderedStyle as BulletListType\n        );\n        setMetadata(this.rootList, styleMetadata, ListStyleDefinitionMetadata);\n    }\n\n    /**\n     * Append a new item to this VList\n     * @param node node of the item to append. If it is not wrapped with LI tag, it will be wrapped\n     * @param type Type of this list item, can be ListType.None\n     */\n    appendItem(node: Node, type: ListType | CompatibleListType) {\n        const nodeTag = getTagOfNode(node);\n\n        // Change DIV tag to SPAN. Otherwise we cannot create new list item by Enter key in Safari\n        if (nodeTag == 'DIV') {\n            node = changeElementTag(<HTMLElement>node, 'LI')!;\n        } else if (nodeTag != 'LI') {\n            node = wrap(node, 'LI');\n        }\n\n        this.items.push(\n            type == ListType.None\n                ? new VListItem(node)\n                : new VListItem(node, <ListType.Ordered | ListType.Unordered>(<any>type))\n        );\n    }\n\n    /**\n     * Merge the given VList into current VList.\n     * - All list items will be removed from the given VList and added into this list.\n     * - The root node of the given VList will be removed from DOM tree\n     * - If there are orphan items in the given VList, they will be merged into the last item\n     *   of this list if any.\n     * @param list The vList to merge from\n     */\n    mergeVList(list: VList) {\n        if (list && list != this) {\n            list.items.forEach(item => this.items.push(item));\n            list.items.splice(0, list.items.length);\n            list.rootList.parentNode?.removeChild(list.rootList);\n        }\n    }\n\n    /**\n     * Get the index of the List Item in the current List\n     * If the root list is:\n     * Ordered list, the listIndex start count is going to be the start property of the OL - 1,\n     * @example For example if we want to find the index of Item 2 in the list below, the returned index is going to be 6\n     *  * ```html\n     * <ol start=\"5\">\n     *   <li>item 1</li>\n     *   <li>item 2</li> <!-- Node to find -->\n     *   <li>item 3</li>\n     * </ol>\n     * ```\n     * Unordered list, the listIndex start count starts from 0\n     * @example For example if we want to find the index of Item 2 in the list below, the returned index is going to be 2\n     * ```html\n     * <ul>\n     *   <li>item 1</li>\n     *   <li>item 2</li> <!-- Node to find -->\n     *   <li>item 3</li>\n     * </ul>\n     * ```\n     * @param input List item to find in the root list\n     */\n    getListItemIndex(input: Node) {\n        if (this.items) {\n            let listIndex = (this.getStart() || 1) - 1;\n\n            for (let index = 0; index < this.items.length; index++) {\n                const child = this.items[index];\n                if (child.getLevel() == 1 && !child.isDummy()) {\n                    listIndex++;\n                }\n\n                if (child.getNode() == input) {\n                    return listIndex;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Get the Start property of the root list of this VList\n     * @returns Start number of the list\n     */\n    getStart(): number | undefined {\n        return safeInstanceOf(this.rootList, 'HTMLOListElement') ? this.rootList.start : undefined;\n    }\n\n    private findListItems(\n        start: NodePosition,\n        end: NodePosition,\n        callback?: (item: VListItem) => any\n    ): VListItem[] {\n        if (this.items.length == 0) {\n            return [];\n        }\n\n        const listStartPos = new Position(this.items[0].getNode(), PositionType.Begin);\n        const listEndPos = new Position(\n            this.items[this.items.length - 1].getNode(),\n            PositionType.End\n        );\n\n        let startIndex = listStartPos.isAfter(start) ? 0 : -1;\n        let endIndex = this.items.length - (end.isAfter(listEndPos) ? 1 : 0);\n\n        this.items.forEach((item, index) => {\n            startIndex = item.contains(start.node) ? index : startIndex;\n            endIndex = item.contains(end.node) ? index : endIndex;\n        });\n\n        startIndex = endIndex < this.items.length ? Math.max(0, startIndex) : startIndex;\n        endIndex = startIndex >= 0 ? Math.min(this.items.length - 1, endIndex) : endIndex;\n\n        const result = startIndex <= endIndex ? this.items.slice(startIndex, endIndex + 1) : [];\n\n        if (callback) {\n            result.forEach(callback);\n        }\n\n        return result;\n    }\n\n    private populateItems(\n        list: HTMLOListElement | HTMLUListElement,\n        listTypes: (\n            | ListType.Ordered\n            | ListType.Unordered\n            | CompatibleListType.Ordered\n            | CompatibleListType.Unordered\n        )[] = []\n    ) {\n        const type = getListTypeFromNode(list);\n        const items = toArray(list.childNodes);\n\n        items.forEach(item => {\n            const newListTypes = [...listTypes, type];\n\n            if (isListElement(item)) {\n                this.populateItems(item, newListTypes);\n            } else if (item.nodeType != NodeType.Text || (item.nodeValue || '').trim() != '') {\n                this.items.push(new VListItem(item, ...newListTypes));\n            }\n        });\n    }\n}\n\n//Normalization\n\n// Step 1: Move all non-LI direct children under list into LI\n// e.g.\n// From: <ul><li>line 1</li>line 2</ul>\n// To:   <ul><li>line 1<div>line 2</div></li></ul>\nfunction moveChildNodesToLi(list: HTMLElement) {\n    let currentItem: HTMLLIElement | null = null;\n\n    toArray(list.childNodes).forEach(child => {\n        if (getTagOfNode(child) == 'LI') {\n            currentItem = child as HTMLLIElement;\n        } else if (isListElement(child)) {\n            currentItem = null;\n        } else if (currentItem && !isNodeEmpty(child, true /*trimContent*/)) {\n            currentItem.appendChild(isBlockElement(child) ? child : wrap(child));\n        }\n    });\n}\n\n// Step 2: Move nested LI up to under list directly\n// e.g.\n// From: <ul><li>line 1<li>line 2</li>line 3</li></ul>\n// To:   <ul><li>line 1</li><li>line 2<div>line 3</div></li></ul>\nfunction moveLiToList(li: HTMLElement) {\n    while (!isListElement(li.parentNode)) {\n        splitParentNode(li, true /*splitBefore*/);\n        let furtherNodes: Node[] = toArray(li.parentNode!.childNodes).slice(1);\n\n        if (furtherNodes.length > 0) {\n            if (!isBlockElement(furtherNodes[0])) {\n                furtherNodes = [wrap(furtherNodes)];\n            }\n            furtherNodes.forEach(node => li.appendChild(node));\n        }\n\n        unwrap(li.parentNode!);\n    }\n}\n\nfunction getValidValue<T>(...values: (T | undefined)[]): T | undefined {\n    return values.filter(x => x !== undefined)[0];\n}\n\nfunction createListStyleMetadata(\n    style: ListStyleMetadata | null,\n    orderedStyle?: NumberingListType | CompatibleNumberingListType,\n    unorderedStyle?: BulletListType | CompatibleBulletListType\n): ListStyleMetadata {\n    return {\n        orderedStyleType: getValidValue(\n            orderedStyle,\n            style?.orderedStyleType,\n            NumberingListType.Decimal\n        ),\n        unorderedStyleType: getValidValue(\n            unorderedStyle,\n            style?.unorderedStyleType,\n            BulletListType.Disc\n        ),\n    };\n}\n"]}