{"version":3,"file":"isPositionAtBeginningOf.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts"],"names":[],"mappings":";;;IAKA;;;;;;OAMG;IACH,SAAwB,uBAAuB,CAAC,QAAsB,EAAE,UAAuB;QAC3F,IAAI,QAAQ,EAAE;YACV,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,IAAI,GAAgB,QAAQ,CAAC,IAAI,CAAC;YACtC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC/B,IAAI,MAAM,IAAI,CAAC,EAAE;gBACb,OAAO,IAAI,IAAI,IAAA,kBAAQ,EAAC,UAAU,EAAE,IAAI,CAAC,IAAI,wBAAwB,CAAC,IAAI,CAAC,EAAE;oBACzE,IAAI,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,KAAI,IAAI,CAAC;iBACnC;gBAED,OAAO,IAAI,IAAI,UAAU,CAAC;aAC7B;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAfD,0CAeC;IAED,SAAS,wBAAwB,CAAC,IAAU;QACxC,OAAO,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;YAC5B,IAAI,IAAA,sBAAY,EAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAA,qBAAW,EAAC,IAAI,CAAC,EAAE;gBAClD,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC","sourcesContent":["import contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport type { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node | null) {\r\n    if (position) {\r\n        position = position.normalize();\r\n        let node: Node | null = position.node;\r\n        const offset = position.offset;\r\n        if (offset == 0) {\r\n            while (node && contains(targetNode, node) && areAllPreviousNodesEmpty(node)) {\r\n                node = node?.parentNode || null;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPreviousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (getTagOfNode(node) == 'BR' || !isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"]}