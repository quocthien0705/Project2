{"version":3,"file":"getPositionRect.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts"],"names":[],"mappings":";;;IAMA;;;OAGG;IACH,SAAwB,eAAe,CAAC,QAAsB;;QAC1D,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,IAAI,CAAC;SACf;QAED,IAAI,KAAK,GAAG,IAAA,qBAAW,EAAC,QAAQ,CAAC,CAAC;QAElC,yDAAyD;QACzD,IAAI,IAAI,GACJ,KAAK,CAAC,qBAAqB,IAAI,IAAA,uBAAa,EAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAEhF,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC;SACf;QAED,gDAAgD;QAChD,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;QAChC,IAAM,KAAK,GAAG,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;QAC7D,IAAI,GAAG,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnE,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC;SACf;QAED,oFAAoF;QACpF,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,gBAAiB,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE;YACxE,IAAM,IAAI,GAAG,IAAA,uBAAa,EACtB,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,EACrC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAC9B,CAAC;YACF,KAAK,GAAG,IAAA,qBAAW,EAAC,QAAQ,CAAC,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,IAAK,CAAC,CAAC;YACxB,IAAI,GAAG,IAAK,CAAC,qBAAqB,IAAI,IAAA,uBAAa,EAAC,IAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACnF,MAAA,IAAK,CAAC,UAAU,0CAAE,WAAW,CAAC,IAAK,CAAC,CAAC;YACrC,IAAI,IAAI,EAAE;gBACN,OAAO,IAAI,CAAC;aACf;SACJ;QAED,0CAA0C;QAC1C,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QACjC,IAAI,OAAO,IAAI,OAAO,CAAC,qBAAqB,EAAE;YAC1C,IAAI,GAAG,IAAA,uBAAa,EAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACtD,IAAI,IAAI,EAAE;gBACN,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAhDD,kCAgDC","sourcesContent":["import createElement from '../utils/createElement';\r\nimport createRange from './createRange';\r\nimport normalizeRect from '../utils/normalizeRect';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\nimport type { NodePosition, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The position to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect | null {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect: Rect | null =\r\n        range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 ? normalizeRect(rects[0]) : null;\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text && position.node.ownerDocument) {\r\n        const span = createElement(\r\n            { tag: 'span', children: ['\\u200b'] },\r\n            position.node.ownerDocument\r\n        );\r\n        range = createRange(position);\r\n        range.insertNode(span!);\r\n        rect = span!.getBoundingClientRect && normalizeRect(span!.getBoundingClientRect());\r\n        span!.parentNode?.removeChild(span!);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    const element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n"]}