{"version":3,"file":"getSelectionPath.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts"],"names":[],"mappings":";;;IAKA;;;;OAIG;IACH,SAAwB,gBAAgB,CACpC,QAAc,EACd,KAAmB;QAEnB,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,IAAI,CAAC;SACf;QAED,IAAM,aAAa,GAAkB;YACjC,KAAK,EAAE,eAAe,CAAC,kBAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC;YAC1D,GAAG,EAAE,eAAe,CAAC,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC;SACzD,CAAC;QAEF,OAAO,aAAa,CAAC;IACzB,CAAC;IAdD,mCAcC;IAED;;;;;;;;;;;OAWG;IACH,SAAS,eAAe,CAAC,QAAsB,EAAE,QAAc;;QAC3D,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;YACxB,OAAO,EAAE,CAAC;SACb;QAED,IAAI,IAAI,GAAgB,QAAQ,CAAC,IAAI,CAAC;QACtC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC7B,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAI,MAAmB,CAAC;QAExB,IAAI,CAAC,IAAA,kBAAQ,EAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE;YACjC,OAAO,EAAE,CAAC;SACb;QAED,IAAI,IAAI,CAAC,QAAQ,gBAAiB,EAAE;YAChC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;YACzB,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,gBAAiB,EAAE;gBAC3E,MAAM,IAAI,CAAA,MAAA,IAAI,CAAC,eAAe,CAAC,SAAS,0CAAE,MAAM,KAAI,CAAC,CAAC;gBACtD,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;aAC/B;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM;YACH,MAAM,GAAG,IAAI,CAAC;YACd,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SAClC;QAED,GAAG;YACC,MAAM,GAAG,CAAC,CAAC;YACX,IAAI,cAAc,GAAG,KAAK,CAAC;YAE3B,KAAK,IAAI,CAAC,GAAgB,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,KAAI,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE;gBACrF,IAAI,CAAC,CAAC,QAAQ,gBAAiB,EAAE;oBAC7B,IAAI,CAAA,MAAA,CAAC,CAAC,SAAS,0CAAE,MAAM,MAAK,CAAC,IAAI,cAAc,EAAE;wBAC7C,SAAS;qBACZ;oBAED,cAAc,GAAG,IAAI,CAAC;iBACzB;qBAAM;oBACH,cAAc,GAAG,KAAK,CAAC;iBAC1B;gBAED,MAAM,EAAE,CAAC;aACZ;YAED,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,IAAI,GAAG,MAAM,CAAC;YACd,MAAM,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,KAAI,IAAI,CAAC;SACvC,QAAQ,IAAI,IAAI,IAAI,IAAI,QAAQ,EAAE;QAEnC,OAAO,MAAM,CAAC;IAClB,CAAC","sourcesContent":["import contains from '../utils/contains';\r\nimport Position from './Position';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\nimport type { NodePosition, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(\r\n    rootNode: Node,\r\n    range: Range | null\r\n): SelectionPath | null {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    const selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indices into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: Node): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let node: Node | null = position.node;\r\n    let offset = position.offset;\r\n    const result: number[] = [];\r\n    let parent: Node | null;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue?.length || 0;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node | null = parent?.firstChild || null; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue?.length === 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent?.parentNode || null;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n"]}