{"version":3,"file":"getPendableFormatState.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/getPendableFormatState.ts"],"names":[],"mappings":";;;;IASA;;OAEG;IACU,QAAA,wBAAwB,GAAsD;QACvF;;WAEG;QACH,MAAM,mBAAsB;QAE5B;;WAEG;QACH,QAAQ,uBAAwB;QAEhC;;WAEG;QACH,WAAW,6BAA2B;QAEtC;;WAEG;QACH,eAAe,qCAA+B;QAE9C;;WAEG;QACH,WAAW,6BAA2B;QAEtC;;WAEG;QACH,aAAa,iCAA6B;KAC7C,CAAC;IAEF;;;;OAIG;IACH,SAAwB,sBAAsB,CAAC,QAAkB;QAC7D,IAAM,IAAI,GAAG,IAAA,uBAAa,EAAC,gCAAwB,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,GAAG;YAC1B,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,iBAAiB,CAAC,gCAAwB,CAAC,GAAG,CAAC,CAAC,CAAC;YACvE,OAAO,KAAK,CAAC;QACjB,CAAC,EAAuB,EAAE,CAAC,CAAC;IAChC,CAAC;IAPD,yCAOC","sourcesContent":["import getObjectKeys from '../jsUtils/getObjectKeys';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport type { PendableFormatState } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Names of Pendable formats\r\n */\r\nexport type PendableFormatNames = keyof PendableFormatState;\r\n\r\n/**\r\n * A map from pendable format name to document command\r\n */\r\nexport const PendableFormatCommandMap: { [key in PendableFormatNames]: DocumentCommand } = {\r\n    /**\r\n     * Bold\r\n     */\r\n    isBold: DocumentCommand.Bold,\r\n\r\n    /**\r\n     * Italic\r\n     */\r\n    isItalic: DocumentCommand.Italic,\r\n\r\n    /**\r\n     * Underline\r\n     */\r\n    isUnderline: DocumentCommand.Underline,\r\n\r\n    /**\r\n     * StrikeThrough\r\n     */\r\n    isStrikeThrough: DocumentCommand.StrikeThrough,\r\n\r\n    /**\r\n     * Subscript\r\n     */\r\n    isSubscript: DocumentCommand.Subscript,\r\n\r\n    /**\r\n     * Superscript\r\n     */\r\n    isSuperscript: DocumentCommand.Superscript,\r\n};\r\n\r\n/**\r\n * Get Pendable Format State at cursor.\r\n * @param document The HTML Document to get format state from\r\n * @returns A PendableFormatState object which contains the values of pendable format states\r\n */\r\nexport default function getPendableFormatState(document: Document): PendableFormatState {\r\n    const keys = getObjectKeys(PendableFormatCommandMap);\r\n\r\n    return keys.reduce((state, key) => {\r\n        state[key] = document.queryCommandState(PendableFormatCommandMap[key]);\r\n        return state;\r\n    }, <PendableFormatState>{});\r\n}\r\n"]}