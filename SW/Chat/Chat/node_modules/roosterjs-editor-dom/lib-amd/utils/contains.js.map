{"version":3,"file":"contains.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/contains.ts"],"names":[],"mappings":";;;IA6BA,SAAwB,QAAQ,CAC5B,SAAkC,EAClC,SAA0C,EAC1C,sBAAgC;QAEhC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,EAAE;YAC1B,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,sBAAsB,IAAI,SAAS,IAAI,SAAS,EAAE;YAClD,OAAO,IAAI,CAAC;SACf;QAED,IAAI,IAAA,wBAAc,EAAC,SAAS,EAAE,OAAO,CAAC,EAAE;YACpC,SAAS,GAAG,SAAS,IAAI,SAAS,CAAC,uBAAuB,CAAC;YAC3D,sBAAsB,GAAG,IAAI,CAAC;SACjC;QAED,IAAI,SAAS,IAAI,SAAS,CAAC,QAAQ,gBAAiB,EAAE;YAClD,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC;YACjC,sBAAsB,GAAG,IAAI,CAAC;SACjC;QAED,IAAI,SAAS,CAAC,QAAQ,mBAAoB,IAAI,SAAS,CAAC,QAAQ,6BAA6B,EAAE;YAC3F,OAAO,CAAC,CAAC,sBAAsB,IAAI,SAAS,IAAI,SAAS,CAAC;SAC7D;QAED,OAAO,CACH,CAAC,CAAC,CAAC,sBAAsB,IAAI,SAAS,IAAI,SAAS,CAAC;YACpD,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CACzC,CAAC;IACN,CAAC;IA/BD,2BA+BC;IAED,SAAS,gBAAgB,CAAC,SAAe,EAAE,SAAsB;QAC7D,IAAI,SAAS,CAAC,QAAQ,EAAE;YACpB,OAAO,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SACxC;aAAM;YACH,OAAO,SAAS,EAAE;gBACd,IAAI,SAAS,IAAI,SAAS,EAAE;oBACxB,OAAO,IAAI,CAAC;iBACf;gBAED,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC;aACpC;YAED,OAAO,KAAK,CAAC;SAChB;IACL,CAAC","sourcesContent":["import safeInstanceOf from './safeInstanceOf';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is inside container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node | null | undefined,\r\n    contained: Node | null | undefined,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is inside container, otherwise false\r\n */\r\nexport default function contains(\r\n    container: Node | null | undefined,\r\n    contained: Range | null | undefined\r\n): boolean;\r\n\r\nexport default function contains(\r\n    container: Node | null | undefined,\r\n    contained: Node | Range | null | undefined,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (safeInstanceOf(contained, 'Range')) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element && container.nodeType != NodeType.DocumentFragment) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return (\r\n        !!(treatSameNodeAsContain || container != contained) &&\r\n        internalContains(container, contained)\r\n    );\r\n}\r\n\r\nfunction internalContains(container: Node, contained: Node | null): boolean {\r\n    if (container.contains) {\r\n        return container.contains(contained);\r\n    } else {\r\n        while (contained) {\r\n            if (contained == container) {\r\n                return true;\r\n            }\r\n\r\n            contained = contained.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}