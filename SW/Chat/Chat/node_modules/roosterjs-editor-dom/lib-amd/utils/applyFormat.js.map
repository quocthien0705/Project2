{"version":3,"file":"applyFormat.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/applyFormat.ts"],"names":[],"mappings":";;;IAGA;;;;;;OAMG;IACH,SAAwB,WAAW,CAC/B,OAAoB,EACpB,MAAqB,EACrB,UAAoB,EACpB,gBAA0C;QAE1C,IAAI,MAAM,EAAE;YACR,IAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC;YAE/B,IAAA,UAAU,GASV,MAAM,WATI,EACV,QAAQ,GAQR,MAAM,SARE,EACR,SAAS,GAOT,MAAM,UAPG,EACT,UAAU,GAMV,MAAM,WANI,EACV,eAAe,GAKf,MAAM,gBALS,EACf,gBAAgB,GAIhB,MAAM,iBAJU,EAChB,IAAI,GAGJ,MAAM,KAHF,EACJ,MAAM,GAEN,MAAM,OAFA,EACN,SAAS,GACT,MAAM,UADG,CACF;YAEX,IAAI,UAAU,EAAE;gBACZ,YAAY,CAAC,UAAU,GAAG,UAAU,CAAC;aACxC;YACD,IAAI,QAAQ,EAAE;gBACV,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACpC;YAED,IAAI,UAAU,EAAE;gBACZ,IAAA,kBAAQ,EACJ,OAAO,EACP,UAAU,EACV,KAAK,CAAC,gBAAgB,EACtB,UAAU,EACV,KAAK,CAAC,wBAAwB,EAC9B,gBAAgB,CACnB,CAAC;aACL;iBAAM,IAAI,SAAS,EAAE;gBAClB,IAAA,kBAAQ,EACJ,OAAO,EACP,SAAS,EACT,KAAK,CAAC,gBAAgB,EACtB,UAAU,EACV,KAAK,CAAC,wBAAwB,EAC9B,gBAAgB,CACnB,CAAC;aACL;YAED,IAAI,gBAAgB,EAAE;gBAClB,IAAA,kBAAQ,EACJ,OAAO,EACP,gBAAgB,EAChB,IAAI,CAAC,gBAAgB,EACrB,UAAU,EACV,KAAK,CAAC,wBAAwB,EAC9B,gBAAgB,CACnB,CAAC;aACL;iBAAM,IAAI,eAAe,EAAE;gBACxB,IAAA,kBAAQ,EACJ,OAAO,EACP,eAAe,EACf,IAAI,CAAC,gBAAgB,EACrB,UAAU,EACV,KAAK,CAAC,wBAAwB,EAC9B,gBAAgB,CACnB,CAAC;aACL;YAED,IAAI,IAAI,EAAE;gBACN,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC;aACpC;YACD,IAAI,MAAM,EAAE;gBACR,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC;aACrC;YACD,IAAI,SAAS,EAAE;gBACX,YAAY,CAAC,cAAc,GAAG,WAAW,CAAC;aAC7C;SACJ;IACL,CAAC;IA7ED,8BA6EC","sourcesContent":["import setColor from './setColor';\r\nimport type { DarkColorHandler, DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n * @param isDarkMode Whether the content should be formatted in dark mode\r\n * @param darkColorHandler An optional dark color handler object. When it is passed, we will use this handler to do variable-based dark color instead of original dataset base dark color\r\n */\r\nexport default function applyFormat(\r\n    element: HTMLElement,\r\n    format: DefaultFormat,\r\n    isDarkMode?: boolean,\r\n    darkColorHandler?: DarkColorHandler | null\r\n) {\r\n    if (format) {\r\n        const elementStyle = element.style;\r\n        const {\r\n            fontFamily,\r\n            fontSize,\r\n            textColor,\r\n            textColors,\r\n            backgroundColor,\r\n            backgroundColors,\r\n            bold,\r\n            italic,\r\n            underline,\r\n        } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n\r\n        if (textColors) {\r\n            setColor(\r\n                element,\r\n                textColors,\r\n                false /*isBackground*/,\r\n                isDarkMode,\r\n                false /*shouldAdaptFontColor*/,\r\n                darkColorHandler\r\n            );\r\n        } else if (textColor) {\r\n            setColor(\r\n                element,\r\n                textColor,\r\n                false /*isBackground*/,\r\n                isDarkMode,\r\n                false /*shouldAdaptFontColor*/,\r\n                darkColorHandler\r\n            );\r\n        }\r\n\r\n        if (backgroundColors) {\r\n            setColor(\r\n                element,\r\n                backgroundColors,\r\n                true /*isBackground*/,\r\n                isDarkMode,\r\n                false /*shouldAdaptFontColor*/,\r\n                darkColorHandler\r\n            );\r\n        } else if (backgroundColor) {\r\n            setColor(\r\n                element,\r\n                backgroundColor,\r\n                true /*isBackground*/,\r\n                isDarkMode,\r\n                false /*shouldAdaptFontColor*/,\r\n                darkColorHandler\r\n            );\r\n        }\r\n\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n"]}