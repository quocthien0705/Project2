{"version":3,"file":"isNodeEmpty.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts"],"names":[],"mappings":";;;IAGA,IAAM,oBAAoB,GAAG,CAAC,KAAK,CAAC,CAAC;IACrC,IAAM,8BAA8B,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxE,IAAM,gBAAgB,GAAG,SAAS,CAAC;IAEnC;;;;;;OAMG;IACH,SAAwB,WAAW,CAC/B,IAAU,EACV,WAAqB,EACrB,sBAAgC;QAEhC,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;aAAM,IAAI,IAAI,CAAC,QAAQ,gBAAiB,EAAE;YACvC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,CAAC;SACxD;aAAM,IAAI,IAAI,CAAC,QAAQ,mBAAoB,EAAE;YAC1C,IAAM,OAAO,GAAG,IAAe,CAAC;YAChC,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,EAAE,WAAW,CAAC,CAAC;YACjE,IAAM,eAAe,GAAG,sBAAsB;gBAC1C,CAAC,CAAI,8BAA8B,QAAK;gBACxC,CAAC,CAAC,8BAA8B,CAAC;YACrC,IACI,WAAW,IAAI,EAAE;gBACjB,oBAAoB,CAAC,OAAO,CAAC,IAAA,sBAAY,EAAC,OAAO,CAAC,CAAC,IAAI,CAAC;gBACxD,OAAO,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAC9C;gBACE,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAxBD,8BAwBC;IAED,SAAS,IAAI,CAAC,CAAS,EAAE,IAAyB;QAC9C,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC","sourcesContent":["import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(\r\n    node: Node,\r\n    trimContent?: boolean,\r\n    shouldCountBrAsVisible?: boolean\r\n) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue || '', trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        const element = node as Element;\r\n        const textContent = trim(element.textContent || '', trimContent);\r\n        const visibleSelector = shouldCountBrAsVisible\r\n            ? `${VISIBLE_CHILD_ELEMENT_SELECTOR},BR`\r\n            : VISIBLE_CHILD_ELEMENT_SELECTOR;\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(visibleSelector)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean | undefined) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n"]}