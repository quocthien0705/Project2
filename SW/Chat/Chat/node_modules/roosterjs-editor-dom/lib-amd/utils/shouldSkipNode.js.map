{"version":3,"file":"shouldSkipNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts"],"names":[],"mappings":";;;IAIA,IAAM,IAAI,GAAG,YAAY,CAAC;IAC1B,IAAM,UAAU,GAAG,wBAAwB,CAAC,CAAC,wFAAwF;IAErI;;;;;;;;;;;;OAYG;IACH,SAAwB,cAAc,CAAC,IAAU,EAAE,WAAqB;QACpE,IAAI,IAAI,CAAC,QAAQ,gBAAiB,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBACxE,OAAO,IAAI,CAAC;aACf;iBAAM,IAAI,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;gBACpE,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,OAAO,KAAK,CAAC;aAChB;SACJ;aAAM,IAAI,IAAI,CAAC,QAAQ,mBAAoB,EAAE;YAC1C,IAAI,IAAA,oCAAgB,EAAC,IAAI,EAAE,SAAS,CAAC,IAAI,MAAM,EAAE;gBAC7C,OAAO,IAAI,CAAC;aACf;YAED,IAAM,GAAG,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;YAE/B,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;gBAC/B,4EAA4E;gBAC5E,+EAA+E;gBAC/E,iDAAiD;gBACjD,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE;oBAClE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE;wBACrC,OAAO,KAAK,CAAC;qBAChB;iBACJ;gBACD,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,kEAAkE;gBAClE,gDAAgD;gBAChD,OAAO,KAAK,CAAC;aAChB;SACJ;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAlCD,iCAkCC","sourcesContent":["import getTagOfNode from './getTagOfNode';\r\nimport { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/g;\r\nconst CRLF_SPACE = /[\\t\\r\\n\\u0020\\u200B]/gm; // We should only find new line, real space or ZeroWidthSpace (TAB, %20, but not &nbsp;)\r\n\r\n/**\r\n * @internal\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n * - it is just <div></div>\r\n * @param node The node to check\r\n * @param ignoreSpace (Optional) True to ignore pure space text node of the node when check.\r\n * If the value of a node value is only space, set this to true will treat this node can be skipped.\r\n * Default value is false\r\n */\r\nexport default function shouldSkipNode(node: Node, ignoreSpace?: boolean): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        if (!node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue)) {\r\n            return true;\r\n        } else if (ignoreSpace && node.nodeValue.replace(CRLF_SPACE, '') == '') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        if (getComputedStyle(node, 'display') == 'none') {\r\n            return true;\r\n        }\r\n\r\n        const tag = getTagOfNode(node);\r\n\r\n        if (tag == 'DIV' || tag == 'SPAN') {\r\n            // Empty SPAN/DIV or SPAN/DIV with only meaningless children is meaningless,\r\n            // because it can render nothing. If we keep them here, there may be unexpected\r\n            // LI elements added for those meaningless nodes.\r\n            for (let child = node.firstChild; !!child; child = child.nextSibling) {\r\n                if (!shouldSkipNode(child, ignoreSpace)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            // There may still be other cases that the node is not meaningful.\r\n            // We can add those cases here once we hit them.\r\n            return false;\r\n        }\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n"]}