define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HEX3_REGEX = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/;
    var HEX6_REGEX = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/;
    var RGB_REGEX = /^rgb\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*\)$/;
    var RGBA_REGEX = /^rgba\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*\)$/;
    /**
     * Parse color string to r/g/b value.
     * If the given color is not in a recognized format, return null
     */
    function parseColor(color) {
        color = (color || '').trim();
        var match;
        if ((match = color.match(HEX3_REGEX))) {
            return [
                parseInt(match[1] + match[1], 16),
                parseInt(match[2] + match[2], 16),
                parseInt(match[3] + match[3], 16),
            ];
        }
        else if ((match = color.match(HEX6_REGEX))) {
            return [parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16)];
        }
        else if ((match = color.match(RGB_REGEX) || color.match(RGBA_REGEX))) {
            return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];
        }
        else {
            // CSS color names such as red, green is not included for now.
            // If need, we can add those colors from https://www.w3.org/wiki/CSS/Properties/color/keywords
            return null;
        }
    }
    exports.default = parseColor;
});
//# sourceMappingURL=parseColor.js.map