{"version":3,"file":"getLeafNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts"],"names":[],"mappings":";;;;IAGA;;;;OAIG;IACH,SAAS,WAAW,CAAC,QAAc,EAAE,OAAgB;QACjD,IAAM,QAAQ,GAAG,UAAC,IAAU,IAAkB,OAAA,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAA5C,CAA4C,CAAC;QAC3F,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,IAAI,MAAM,IAAI,IAAA,wBAAc,EAAC,MAAM,CAAC,EAAE;YAClC,MAAM,GAAG,IAAA,+BAAc,EAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACtD;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,SAAgB,gBAAgB,CAAC,QAAc;QAC3C,OAAO,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAFD,4CAEC;IAED;;;OAGG;IACH,SAAgB,eAAe,CAAC,QAAc;QAC1C,OAAO,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAFD,0CAEC","sourcesContent":["import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node | null {\r\n    const getChild = (node: Node): Node | null => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node | null {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node | null {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n"]}