{"version":3,"file":"safeInstanceOf.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/safeInstanceOf.ts"],"names":[],"mappings":";;;;IAEA,qDAAqD;IACrD,2DAA2D;IAE3D;;;;OAIG;IACH,SAAgB,eAAe,CAAwC,IAAU;QAC7E,IAAM,QAAQ,GACV,IAAI;YACJ,CAAC,IAAI,CAAC,aAAa;gBACf,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,uBAAuB;oBAC7D,CAAC,CAAW,IAAI;oBAChB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAErB,sHAAsH;QACtH,IAAM,YAAY,GAAG,QAAQ,IAAK,CAAC,QAAQ,CAAC,WAAW,IAAI,MAAM,CAAS,CAAC;QAC3E,OAAO,YAAiB,CAAC;IAC7B,CAAC;IAXD,0CAWC;IAED;;;;OAIG;IACH,SAAwB,cAAc,CAClC,GAAQ,EACR,QAAW;;QAEX,IAAI,QAAQ,IAAI,OAAO,EAAE;YACrB,OAAO,CACH,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,gBAAgB;gBACxD,CAAC,CAAC,CAAA,MAAQ,GAAI,0CAAE,uBAAuB,CAAA,CAC1C,CAAC;SACL;QAED,IAAM,YAAY,GAAG,eAAe,CAAI,GAAG,CAAC,CAAC;QAC7C,IAAM,UAAU,GAAG,YAAY,IAAK,YAAY,CAAC,QAAQ,CAAS,CAAC;QACnE,IAAM,UAAU,GAAI,MAAmB,CAAC;QACxC,IAAM,cAAc,GAAG,UAAU,IAAK,UAAU,CAAC,QAAQ,CAAS,CAAC;QACnE,OAAO,CACH,CAAC,cAAc,IAAI,GAAG,YAAY,cAAc,CAAC;YACjD,CAAC,UAAU,IAAI,GAAG,YAAY,UAAU,CAAC,CAC5C,CAAC;IACN,CAAC;IAnBD,iCAmBC","sourcesContent":["import type { TargetWindow } from 'roosterjs-editor-types';\n\n// NOTE: Type TargetWindow is an auto-generated type.\n// Run node ./tools/generateTargetWindow.js to generate it.\n\n/**\n * @internal Export for test only\n * Try get window from the given node or range\n * @param node Source node to get window from\n */\nexport function getTargetWindow<T extends TargetWindow = TargetWindow>(node: Node): T {\n    const document =\n        node &&\n        (node.ownerDocument ||\n            (Object.prototype.toString.apply(node) == '[object HTMLDocument]'\n                ? <Document>node\n                : null));\n\n    // If document exists but document.defaultView doesn't exist, it is a detached object, just use current window instead\n    const targetWindow = document && ((document.defaultView || window) as any);\n    return targetWindow as T;\n}\n\n/**\n * Check if the given object is instance of the target type\n * @param obj Object to check\n * @param typeName Target type name\n */\nexport default function safeInstanceOf<T extends keyof W, W extends TargetWindow = TargetWindow>(\n    obj: any,\n    typeName: T\n): obj is W[T] {\n    if (typeName == 'Range') {\n        return (\n            Object.prototype.toString.apply(obj) == '[object Range]' &&\n            !!(<Range>obj)?.commonAncestorContainer\n        );\n    }\n\n    const targetWindow = getTargetWindow<W>(obj);\n    const targetType = targetWindow && (targetWindow[typeName] as any);\n    const mainWindow = (window as any) as W;\n    const mainWindowType = mainWindow && (mainWindow[typeName] as any);\n    return (\n        (mainWindowType && obj instanceof mainWindowType) ||\n        (targetType && obj instanceof targetType)\n    );\n}\n"]}