define(["require", "exports", "./parseColor"], function (require, exports, parseColor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WHITE = '#ffffff';
    var GRAY = '#333333';
    var BLACK = '#000000';
    var TRANSPARENT = 'transparent';
    var ColorTones;
    (function (ColorTones) {
        ColorTones[ColorTones["BRIGHT"] = 0] = "BRIGHT";
        ColorTones[ColorTones["DARK"] = 1] = "DARK";
        ColorTones[ColorTones["NONE"] = 2] = "NONE";
    })(ColorTones || (ColorTones = {}));
    //Using the HSL (hue, saturation and lightness) representation for RGB color values, if the value of the lightness is less than 20, the color is dark
    var DARK_COLORS_LIGHTNESS = 20;
    //If the value of the lightness is more than 80, the color is bright
    var BRIGHT_COLORS_LIGHTNESS = 80;
    /**
     * Set text color or background color to the given element
     * @param element The element to set color to
     * @param color The color to set, it can be a string of color name/value or a ModeIndependentColor object
     * @param isBackgroundColor Whether set background color or text color
     * @param isDarkMode Whether current mode is dark mode. @default false
     * @param shouldAdaptTheFontColor Whether the font color needs to be adapted to be visible in a dark or bright background color. @default false
     * @param darkColorHandler A dark color handler object. This is now required.
     * We keep it optional only for backward compatibility. If it is not passed, color will not be set.
     */
    function setColor(element, color, isBackgroundColor, isDarkMode, shouldAdaptTheFontColor, darkColorHandler) {
        var colorString = typeof color === 'string' ? color.trim() : '';
        var modeIndependentColor = typeof color === 'string' ? null : color;
        var cssName = isBackgroundColor ? 'background-color' : 'color';
        if (colorString || modeIndependentColor) {
            if (darkColorHandler) {
                var colorValue = darkColorHandler.registerColor((modeIndependentColor === null || modeIndependentColor === void 0 ? void 0 : modeIndependentColor.lightModeColor) || colorString, !!isDarkMode, modeIndependentColor === null || modeIndependentColor === void 0 ? void 0 : modeIndependentColor.darkModeColor);
                element.style.setProperty(cssName, colorValue);
            }
            if (isBackgroundColor && shouldAdaptTheFontColor) {
                adaptFontColorToBackgroundColor(element, (modeIndependentColor === null || modeIndependentColor === void 0 ? void 0 : modeIndependentColor.lightModeColor) || colorString, isDarkMode, darkColorHandler);
            }
        }
    }
    exports.default = setColor;
    /**
     * Change the font color to white or some other color, so the text can be visible with a darker background
     * @param element The element that contains text.
     * @param lightModeBackgroundColor Existing background color in light mode
     * @param isDarkMode Whether the content is in dark mode
     * @param darkColorHandler A dark color handler object.  This is now required.
     * We keep it optional only for backward compatibility. If it is not passed, color will not be set.
     */
    function adaptFontColorToBackgroundColor(element, lightModeBackgroundColor, isDarkMode, darkColorHandler) {
        if (!lightModeBackgroundColor || lightModeBackgroundColor === TRANSPARENT) {
            return;
        }
        var isADarkOrBrightOrNone = isADarkOrBrightColor(lightModeBackgroundColor);
        switch (isADarkOrBrightOrNone) {
            case 1 /* DARK */:
                var fontForDark = {
                    lightModeColor: WHITE,
                    darkModeColor: GRAY,
                };
                setColor(element, fontForDark, false /*isBackground*/, isDarkMode, false /*shouldAdaptFontColor*/, darkColorHandler);
                break;
            case 0 /* BRIGHT */:
                var fontForLight = {
                    lightModeColor: BLACK,
                    darkModeColor: WHITE,
                };
                setColor(element, fontForLight, false /*isBackground*/, isDarkMode, false /*shouldAdaptFontColor*/, darkColorHandler);
                break;
        }
    }
    function isADarkOrBrightColor(color) {
        var lightness = calculateLightness(color);
        if (lightness < DARK_COLORS_LIGHTNESS) {
            return 1 /* DARK */;
        }
        else if (lightness > BRIGHT_COLORS_LIGHTNESS) {
            return 0 /* BRIGHT */;
        }
        return 2 /* NONE */;
    }
    /**
     * Calculate the lightness of HSL (hue, saturation and lightness) representation
     * @param color a RBG or RGBA COLOR
     * @returns
     */
    function calculateLightness(color) {
        var colorValues = (0, parseColor_1.default)(color);
        // Use the values of r,g,b to calculate the lightness in the HSl representation
        //First calculate the fraction of the light in each color, since in css the value of r,g,b is in the interval of [0,255], we have
        if (colorValues) {
            var red = colorValues[0] / 255;
            var green = colorValues[1] / 255;
            var blue = colorValues[2] / 255;
            //Then the lightness in the HSL representation is the average between maximum fraction of r,g,b and the minimum fraction
            return (Math.max(red, green, blue) + Math.min(red, green, blue)) * 50;
        }
        else {
            return 255;
        }
    }
});
//# sourceMappingURL=setColor.js.map