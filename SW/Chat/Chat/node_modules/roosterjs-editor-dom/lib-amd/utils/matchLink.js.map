{"version":3,"file":"matchLink.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-dom/lib/utils/matchLink.ts"],"names":[],"mappings":"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","sourcesContent":["import getObjectKeys from '../jsUtils/getObjectKeys';\r\nimport type { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in particular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid since it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexps below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: Record<string, LinkMatchRule> = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData | null {\r\n    if (url) {\r\n        for (const schema of getObjectKeys(linkMatchRules)) {\r\n            const rule = linkMatchRules[schema];\r\n            const matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n"]}