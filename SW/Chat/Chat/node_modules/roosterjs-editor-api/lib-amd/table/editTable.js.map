{"version":3,"file":"editTable.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/table/editTable.ts"],"names":[],"mappings":";;;IAMA;;;;OAIG;IACH,SAAwB,SAAS,CAC7B,MAAe,EACf,SAAoD;QAEpD,IAAM,EAAE,GAAG,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAyB,CAAC;QACtE,IAAI,EAAE,EAAE;YACJ,IAAA,4BAAkB,EACd,MAAM,EACN;gBACI,IAAM,MAAM,GAAG,IAAI,6BAAM,CAAC,EAAE,CAAC,CAAC;gBAE9B,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACvB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAC7E,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAE1C,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;oBACpD,OAAO;iBACV;gBACK,IAAA,KAAqB,qBAAqB,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAA3E,MAAM,YAAA,EAAE,MAAM,YAA6D,CAAC;gBACpF,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC;gBAChD,IAAI,KAAK,EAAE;oBACP,MAAM,CAAC,MAAM,CAAC,KAAK,gBAAqB,CAAC;iBAC5C;YACL,CAAC,EACD,WAAW,CACd,CAAC;SACL;IACL,CAAC;IA7BD,4BA6BC;IAED,SAAS,WAAW,CAAC,CAAqB;QACtC,OAAO,CAAC,IAAI,SAAS,CAAC;IAC1B,CAAC;IAED,SAAS,qBAAqB,CAC1B,SAAoD,EACpD,UAAkB,EAClB,UAAkB;QAElB,IAAI,MAAM,GAAG,UAAU,CAAC;QACxB,IAAI,MAAM,GAAG,UAAU,CAAC;QACxB,QAAQ,SAAS,EAAE;YACf;gBACI,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACV;gBACI,MAAM,IAAI,CAAC,CAAC;gBACZ,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACV;gBACI,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACV;gBACI,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM,IAAI,CAAC,CAAC;gBACZ,MAAM;SACb;QAED,OAAO;YACH,MAAM,QAAA;YACN,MAAM,QAAA;SACT,CAAC;IACN,CAAC;IAED,SAAS,kBAAkB,CAAC,MAAe,EAAE,MAAc;;QACvD,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,2BAAuC,EAAE;YACpE,MAAM,CAAC,SAAS,GAAG,MAAA,SAAS,CAAC,WAAW,mCAAI,IAAI,CAAC;SACpD;IACL,CAAC","sourcesContent":["import formatUndoSnapshot from '../utils/formatUndoSnapshot';\r\nimport { PositionType, SelectionRangeTypes, TableOperation } from 'roosterjs-editor-types';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(\r\n    editor: IEditor,\r\n    operation: TableOperation | CompatibleTableOperation\r\n) {\r\n    const td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        formatUndoSnapshot(\r\n            editor,\r\n            () => {\r\n                const vtable = new VTable(td);\r\n\r\n                saveTableSelection(editor, vtable);\r\n                vtable.edit(operation);\r\n                vtable.writeBack(false /** skipApplyFormat */, editor.getDarkColorHandler());\r\n                editor.transformToDarkColor(vtable.table);\r\n\r\n                editor.focus();\r\n                if (isUndefined(vtable.row) || isUndefined(vtable.col)) {\r\n                    return;\r\n                }\r\n                const { newCol, newRow } = calculateCellToSelect(operation, vtable.row, vtable.col);\r\n                const newTd = vtable.getCell(newRow, newCol).td;\r\n                if (newTd) {\r\n                    editor.select(newTd, PositionType.Begin);\r\n                }\r\n            },\r\n            'editTable'\r\n        );\r\n    }\r\n}\r\n\r\nfunction isUndefined(n: number | undefined): n is undefined {\r\n    return n == undefined;\r\n}\r\n\r\nfunction calculateCellToSelect(\r\n    operation: TableOperation | CompatibleTableOperation,\r\n    currentRow: number,\r\n    currentCol: number\r\n) {\r\n    let newRow = currentRow;\r\n    let newCol = currentCol;\r\n    switch (operation) {\r\n        case TableOperation.InsertAbove:\r\n            newCol = 0;\r\n            break;\r\n        case TableOperation.InsertBelow:\r\n            newRow += 1;\r\n            newCol = 0;\r\n            break;\r\n        case TableOperation.InsertLeft:\r\n            newRow = 0;\r\n            break;\r\n        case TableOperation.InsertRight:\r\n            newRow = 0;\r\n            newCol += 1;\r\n            break;\r\n    }\r\n\r\n    return {\r\n        newRow,\r\n        newCol,\r\n    };\r\n}\r\n\r\nfunction saveTableSelection(editor: IEditor, vtable: VTable) {\r\n    const selection = editor.getSelectionRangeEx();\r\n    if (selection && selection.type === SelectionRangeTypes.TableSelection) {\r\n        vtable.selection = selection.coordinates ?? null;\r\n    }\r\n}\r\n"]}