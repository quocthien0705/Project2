{"version":3,"file":"applyListItemWrap.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/applyListItemWrap.ts"],"names":[],"mappings":";;;IAIA;;;;;;OAMG;IACH,SAAwB,sBAAsB,CAC1C,MAAe,EACf,SAAiB,EACjB,cAAoE,EACpE,OAAe;QAEf,IAAM,WAAW,GAAW,EAAE,CAAC;QAC/B,IAAA,0BAAgB,EACZ,MAAM,EACN,UAAC,OAAO,EAAE,WAAW;YACjB,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAErC,IAAM,MAAM,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACxD,IAAI,MAAM,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC9C,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC5B;QACL,CAAC,EACD,OAAO,CACV,CAAC;QAEF,qBAAqB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IACpD,CAAC;IArBD,yCAqBC;IAED;;;;;OAKG;IACH,SAAS,qBAAqB,CAAC,WAAmB,EAAE,MAAgB;QAChE,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI;YACpB,IAAI,IAAA,qCAAc,EAAC,IAAI,EAAE,eAAe,CAAC,EAAE;gBACvC,IAAA,uCAAgB,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aAClC;QACL,CAAC,CAAC,CAAC;IACP,CAAC","sourcesContent":["import applyInlineStyle from '../utils/applyInlineStyle';\nimport { safeInstanceOf, setListItemStyle } from 'roosterjs-editor-dom';\nimport type { IEditor } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Set the List Item Style when all inner inline element have the same style\n * @param editor The editor instance\n * @param styleName Name of the style to apply to the list item\n * @param formatCallback callback to apply the style to each element\n */\nexport default function applyListItemStyleWrap(\n    editor: IEditor,\n    styleName: string,\n    formatCallback: (element: HTMLElement, isInnerNode?: boolean) => any,\n    apiName: string\n) {\n    const parentNodes: Node[] = [];\n    applyInlineStyle(\n        editor,\n        (element, isInnerNode) => {\n            formatCallback(element, isInnerNode);\n\n            const parent = editor.getElementAtCursor('LI', element);\n            if (parent && parentNodes.indexOf(parent) === -1) {\n                parentNodes.push(parent);\n            }\n        },\n        apiName\n    );\n\n    applyStyleToListItems(parentNodes, [styleName]);\n}\n\n/**\n * @internal\n * Checks if the parent element is a List Item, if it is, apply the style elements to the list item\n * @param parentNodes parentNodes to apply the style\n * @param styles styles to apply to the List Item Element\n */\nfunction applyStyleToListItems(parentNodes: Node[], styles: string[]) {\n    parentNodes.forEach(node => {\n        if (safeInstanceOf(node, 'HTMLLIElement')) {\n            setListItemStyle(node, styles);\n        }\n    });\n}\n"]}