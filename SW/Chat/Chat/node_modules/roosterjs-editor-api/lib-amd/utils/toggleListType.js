define(["require", "exports", "../utils/blockFormat", "roosterjs-editor-dom"], function (require, exports, blockFormat_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Toggle List Type at selection
     * If ListType Provided is Ordered:
     *      If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one
     *      If selection contains bullet list, toggle numbering will convert the bullet list into number list
     *      If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding
     *       realization of browser execCommand API
     * If ListType Provided is Unordered:
     *      If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one
     *      If selection contains number list, toggle bullet will convert the number list into bullet list
     *      If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding
     *      browser execCommand API
     * @param editor The editor instance
     * @param listType The list type to toggle
     * @param startNumber (Optional) Start number of the list
     * @param includeSiblingLists Sets wether the operation should include Sibling Lists, by default true
     * @param orderedStyle (Optional) the style of an ordered. If not defined, the style will be set to decimal.
     * @param unorderedStyle (Optional) the style of an unordered list. If not defined, the style will be set to disc.
     * @param apiNameOverride (Optional) Set a new api name, if empty the api name will be 'toggleListType'.
     */
    function toggleListType(editor, listType, startNumber, includeSiblingLists, orderedStyle, unorderedStyle, apiNameOverride) {
        if (startNumber === void 0) { startNumber = 0; }
        if (includeSiblingLists === void 0) { includeSiblingLists = true; }
        (0, blockFormat_1.default)(editor, function (region, start, end, chains) {
            var _a, _b;
            var chain = startNumber > 0 && chains.filter(function (chain) { return chain.canAppendAtCursor(startNumber); })[0];
            var block = (_b = (0, roosterjs_editor_dom_1.getBlockElementAtNode)(region.rootNode, (_a = start === null || start === void 0 ? void 0 : start.node) !== null && _a !== void 0 ? _a : null)) === null || _b === void 0 ? void 0 : _b.collapseToSingleElement();
            if (!block) {
                return;
            }
            var vList = chain && end && (start === null || start === void 0 ? void 0 : start.equalTo(end))
                ? chain.createVListAtBlock(block, startNumber)
                : (0, roosterjs_editor_dom_1.createVListFromRegion)(region, startNumber === 1 ? false : includeSiblingLists);
            if (vList && start && end) {
                vList.changeListType(start, end, listType);
                vList.setListStyleType(orderedStyle, unorderedStyle);
                if (isNewList(vList)) {
                    vList.removeMargins();
                }
                vList.writeBack(editor.isFeatureEnabled("ReuseAllAncestorListElements" /* ReuseAllAncestorListElements */), editor.isFeatureEnabled("DisableListChain" /* DisableListChain */));
            }
        }, undefined /* beforeRunCallback */, apiNameOverride || 'toggleListType');
    }
    exports.default = toggleListType;
    function isNewList(vList) {
        var list = vList === null || vList === void 0 ? void 0 : vList.rootList;
        if (list) {
            return list.childElementCount === 0;
        }
        return false;
    }
});
//# sourceMappingURL=toggleListType.js.map