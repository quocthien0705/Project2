{"version":3,"file":"collapseSelectedBlocks.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts"],"names":[],"mappings":";;;IAIA;;;;;OAKG;IACH,SAAwB,sBAAsB,CAC1C,MAAe,EACf,eAA8C;QAE9C,IAAM,SAAS,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;QACjD,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO;SACV;QACD,IAAI,KAAK,GAAG,SAAS,CAAC,mBAAmB,CAAC;QAC1C,IAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,OAAO,KAAK,EAAE;YACV,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;YACD,KAAK,GAAG,SAAS,CAAC,mBAAmB,EAAE,CAAC;SAC3C;QAED,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YAChB,IAAM,OAAO,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC;YAChD,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IArBD,yCAqBC;IAED,SAAS,mBAAmB,CAAC,KAAmB;QAC5C,IAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QAEvC,OAAO,CACH,SAAS,IAAI,KAAK,CAAC,UAAU,EAAE;YAC/B,SAAS,CAAC,QAAQ,gBAAiB;YACnC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAA,mCAAY,EAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CACnE,CAAC;IACN,CAAC","sourcesContent":["import { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\nimport type { BlockElement, IEditor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * @internal\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocks(\r\n    editor: IEditor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    const traverser = editor.getSelectionTraverser();\r\n    if (!traverser) {\r\n        return;\r\n    }\r\n    let block = traverser.currentBlockElement;\r\n    const blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        const element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    const startNode = block.getStartNode();\r\n\r\n    return (\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n"]}