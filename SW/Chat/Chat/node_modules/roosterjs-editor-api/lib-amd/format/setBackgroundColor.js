define(["require", "exports", "../utils/applyInlineStyle", "roosterjs-editor-dom"], function (require, exports, applyInlineStyle_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Set background color at current selection
     * @param editor The editor instance
     * @param color One of two options:
     * The color string, can be any of the predefined color names (e.g, 'red')
     * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.
     * Currently there's no validation to the string, if the passed string is invalid, it won't take effect
     * Alternatively, you can pass a @typedef ModeIndependentColor. If in light mode, the lightModeColor property will be used.
     * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.
     **/
    function setBackgroundColor(editor, color) {
        (0, applyInlineStyle_1.default)(editor, function (element, isInnerNode) {
            (0, roosterjs_editor_dom_1.setColor)(element, isInnerNode ? '' : color, true /*isBackground*/, editor.isDarkMode(), false /*shouldAdaptFontColor*/, editor.getDarkColorHandler());
        }, 'setBackgroundColor');
    }
    exports.default = setBackgroundColor;
});
//# sourceMappingURL=setBackgroundColor.js.map