import type { Entity, IEditor, NodePosition } from 'roosterjs-editor-types';
import { ContentPosition } from 'roosterjs-editor-types';
import type { CompatibleContentPosition } from 'roosterjs-editor-types/lib/compatibleTypes';
/**
 * Insert an entity into editor.
 * @param editor The editor to insert entity into.
 * @param type Type of the entity
 * @param contentNode Root element of the entity
 * @param isBlock Whether the entity will be shown as a block
 * @param isReadonly Whether the entity will be a readonly entity
 * @param position @optional The position to insert into. If not specified, current position will be used.
 * If isBlock is true, entity will be insert below this position
 * @param insertToRegionRoot @optional When pass true, insert the entity at the root level of current region.
 * Parent nodes will be split if need
 * @param focusAfterEntity @optional When pass true, focus will be moved next to the entity. For inline entity,
 * focus will be after right after the entity (and the delimiter if exist). For block entity, focus will be in
 * the new empty line below the entity
 */
export default function insertEntity(editor: IEditor, type: string, contentNode: Node, isBlock: boolean, isReadonly: boolean, position?: NodePosition | ContentPosition.Begin | ContentPosition.End | ContentPosition.DomEnd | CompatibleContentPosition.Begin | CompatibleContentPosition.End | CompatibleContentPosition.DomEnd, insertToRegionRoot?: boolean, focusAfterEntity?: boolean): Entity;
