{"version":3,"file":"setIndentation.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/setIndentation.ts"],"names":[],"mappings":"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","sourcesContent":["import blockFormat from '../utils/blockFormat';\r\nimport normalizeBlockquote from '../utils/normalizeBlockquote';\r\nimport type { BlockElement, IEditor, RegionBase } from 'roosterjs-editor-types';\r\nimport {\r\n    ExperimentalFeatures,\r\n    Indentation,\r\n    KnownCreateElementDataIndex,\r\n    SelectionRangeTypes,\r\n} from 'roosterjs-editor-types';\r\nimport type { VList } from 'roosterjs-editor-dom';\r\nimport {\r\n    collapseNodesInRegion,\r\n    createVListFromRegion,\r\n    findClosestElementAncestor,\r\n    getSelectedBlockElementsInRegion,\r\n    getTagOfNode,\r\n    isNodeInRegion,\r\n    isWholeTableSelected,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n    unwrap,\r\n    VTable,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\nimport type { CompatibleIndentation } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(\r\n    editor: IEditor,\r\n    indentation: Indentation | CompatibleIndentation\r\n) {\r\n    const handler = indentation == Indentation.Increase ? indent : outdent;\r\n\r\n    blockFormat(\r\n        editor,\r\n        (region, start, end) => {\r\n            const blocks = getSelectedBlockElementsInRegion(region, true /*createBlockIfEmpty*/);\r\n            const blockGroups: BlockElement[][] = [[]];\r\n\r\n            for (let i = 0; i < blocks.length; i++) {\r\n                const startNode = blocks[i].getStartNode();\r\n                const vList = createVListFromRegion(\r\n                    region,\r\n                    true /*includeSiblingLists*/,\r\n                    startNode\r\n                );\r\n\r\n                if (vList) {\r\n                    while (blocks[i + 1] && vList.contains(blocks[i + 1].getStartNode())) {\r\n                        i++;\r\n                    }\r\n\r\n                    const isTabKeyTextFeaturesEnabled = editor.isFeatureEnabled(\r\n                        ExperimentalFeatures.TabKeyTextFeatures\r\n                    );\r\n\r\n                    if (\r\n                        isTabKeyTextFeaturesEnabled &&\r\n                        isFirstItem(vList, startNode) &&\r\n                        shouldHandleWithBlockquotes(indentation, editor, startNode)\r\n                    ) {\r\n                        const block = editor.getBlockElementAtNode(vList.rootList);\r\n                        if (block) {\r\n                            blockGroups.push([block]);\r\n                        }\r\n                    } else {\r\n                        if (start && end) {\r\n                            indentation == Indentation.Decrease\r\n                                ? vList.setIndentation(\r\n                                      start,\r\n                                      end,\r\n                                      indentation,\r\n                                      false /* softOutdent */,\r\n                                      isTabKeyTextFeaturesEnabled /* preventItemRemoval */\r\n                                  )\r\n                                : vList.setIndentation(start, end, indentation);\r\n                            vList.writeBack(\r\n                                editor.isFeatureEnabled(\r\n                                    ExperimentalFeatures.ReuseAllAncestorListElements\r\n                                ),\r\n                                editor.isFeatureEnabled(ExperimentalFeatures.DisableListChain)\r\n                            );\r\n                            blockGroups.push([]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    blockGroups[blockGroups.length - 1].push(blocks[i]);\r\n                }\r\n            }\r\n\r\n            blockGroups.forEach(group => handler(region, group));\r\n        },\r\n        () => {\r\n            const selection = editor.getSelectionRangeEx();\r\n            if (\r\n                selection.type == SelectionRangeTypes.TableSelection &&\r\n                selection.coordinates &&\r\n                isWholeTableSelected(new VTable(selection.table), selection.coordinates)\r\n            ) {\r\n                if (indentation == Indentation.Decrease) {\r\n                    const quote = editor.getElementAtCursor('blockquote', selection.table);\r\n                    if (quote) {\r\n                        unwrap(quote);\r\n                    }\r\n                } else if (indentation == Indentation.Increase) {\r\n                    wrap(selection.table, KnownCreateElementDataIndex.BlockquoteWrapper);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n        'setIndentation'\r\n    );\r\n\r\n    function indent(region: RegionBase, blocks: BlockElement[]) {\r\n        const nodes = collapseNodesInRegion(region, blocks);\r\n        wrap(nodes, KnownCreateElementDataIndex.BlockquoteWrapper);\r\n        const quotesHandled: Node[] = [];\r\n        nodes.forEach(node => normalizeBlockquote(node, quotesHandled));\r\n    }\r\n}\r\n\r\nfunction outdent(region: RegionBase, blocks: BlockElement[]) {\r\n    blocks.forEach(blockElement => {\r\n        let node: Node | null = blockElement.collapseToSingleElement();\r\n        const quote = findClosestElementAncestor(node, region.rootNode, 'blockquote');\r\n        if (quote) {\r\n            if (node == quote) {\r\n                node = wrap(toArray(node.childNodes));\r\n            }\r\n\r\n            while (node && isNodeInRegion(region, node) && getTagOfNode(node) != 'BLOCKQUOTE') {\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n\r\n            if (node && isNodeInRegion(region, node)) {\r\n                unwrap(node);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction isFirstItem(vList: VList, startNode: Node) {\r\n    return (\r\n        vList.items[0]?.getNode() == startNode &&\r\n        vList.getListItemIndex(startNode) == (vList.getStart() || 1)\r\n    );\r\n}\r\n\r\nfunction shouldHandleWithBlockquotes(\r\n    indentation: Indentation | CompatibleIndentation,\r\n    editor: IEditor,\r\n    startNode: Node\r\n) {\r\n    return (\r\n        indentation == Indentation.Increase || editor.getElementAtCursor('blockquote', startNode)\r\n    );\r\n}\r\n"]}