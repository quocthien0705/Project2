{"version":3,"file":"replaceWithNode.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/replaceWithNode.ts"],"names":[],"mappings":";;;IAmCA,SAAwB,eAAe,CACnC,MAAe,EACf,WAA2B,EAC3B,IAAU,EACV,UAAmB,EACnB,QAAmC;;QAEnC,uCAAuC;QACvC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,EAAE;YACvB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,KAAmB,CAAC;QAExB,IAAI,OAAO,WAAW,IAAI,QAAQ,EAAE;YAChC,QAAQ,GAAG,MAAA,CAAC,QAAQ,IAAI,MAAM,CAAC,0BAA0B,EAAE,CAAC,mCAAI,SAAS,CAAC;YAC1E,KAAK,GAAG,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,mCAAI,IAAI,CAAC;SACvE;aAAM;YACH,KAAK,GAAG,WAAW,CAAC;SACvB;QAED,IAAI,KAAK,EAAE;YACP,IAAM,WAAW,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAE/C,wFAAwF;YACxF,IACI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS;gBACtB,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC,cAAc;gBAChD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,WAAW,EAC5C;gBACE,UAAU,GAAG,IAAI,CAAC;aACrB;YAED,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE;gBACpB,QAAQ,eAAuB;gBAC/B,YAAY,EAAE,UAAU;gBACxB,gBAAgB,EAAE,IAAI;gBACtB,eAAe,EAAE,KAAK;gBACtB,KAAK,EAAE,KAAK;aACf,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IA7CD,kCA6CC","sourcesContent":["import { ContentPosition } from 'roosterjs-editor-types';\r\nimport type { IEditor, IPositionContentSearcher } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Replace text before current selection with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param text The text for matching. We will try to match the text with the text before cursor\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the target text and selection\r\n * @param searcher Optional PositionContentSearcher of current selection to help search text\r\n */\r\nexport default function replaceWithNode(\r\n    editor: IEditor,\r\n    text: string,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: IPositionContentSearcher\r\n): boolean;\r\n\r\n/**\r\n * Replace a given range with a node, current selection will be kept if possible\r\n * @param editor The editor instance\r\n * @param range The range to replace from\r\n * @param node The node to replace the text with\r\n * @param exactMatch True if the text must appear exactly before selection,\r\n * otherwise there can be some text between the target text and selection\r\n */\r\nexport default function replaceWithNode(\r\n    editor: IEditor,\r\n    range: Range,\r\n    node: Node,\r\n    exactMatch: boolean\r\n): boolean;\r\n\r\nexport default function replaceWithNode(\r\n    editor: IEditor,\r\n    textOrRange: string | Range,\r\n    node: Node,\r\n    exactMatch: boolean,\r\n    searcher?: IPositionContentSearcher\r\n): boolean {\r\n    // Make sure the text and node is valid\r\n    if (!textOrRange || !node) {\r\n        return false;\r\n    }\r\n\r\n    let range: Range | null;\r\n\r\n    if (typeof textOrRange == 'string') {\r\n        searcher = (searcher || editor.getContentSearcherOfCursor()) ?? undefined;\r\n        range = searcher?.getRangeFromText(textOrRange, exactMatch) ?? null;\r\n    } else {\r\n        range = textOrRange;\r\n    }\r\n\r\n    if (range) {\r\n        const backupRange = editor.getSelectionRange();\r\n\r\n        // If the range to replace is right before current cursor, it is actually an exact match\r\n        if (\r\n            backupRange?.collapsed &&\r\n            range.endContainer == backupRange.startContainer &&\r\n            range.endOffset == backupRange.startOffset\r\n        ) {\r\n            exactMatch = true;\r\n        }\r\n\r\n        editor.insertNode(node, {\r\n            position: ContentPosition.Range,\r\n            updateCursor: exactMatch,\r\n            replaceSelection: true,\r\n            insertOnNewLine: false,\r\n            range: range,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n"]}