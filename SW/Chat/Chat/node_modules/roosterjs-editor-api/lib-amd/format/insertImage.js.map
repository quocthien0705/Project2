{"version":3,"file":"insertImage.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/insertImage.ts"],"names":[],"mappings":";;;IAIA;;;;;OAKG;IACH,SAAwB,WAAW,CAC/B,MAAe,EACf,cAA6B,EAC7B,UAAmC;QAEnC,IAAI,OAAO,cAAc,IAAI,QAAQ,EAAE;YACnC,kBAAkB,CAAC,MAAM,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;SAC1D;aAAM;YACH,IAAA,+BAAQ,EAAC,cAAc,EAAE,UAAA,OAAO;gBAC5B,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE;oBACjC,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;iBACnD;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAdD,8BAcC;IAED,SAAS,kBAAkB,CAAC,MAAe,EAAE,GAAW,EAAE,UAAmC;QACzF,IAAA,4BAAkB,EACd,MAAM,EACN;YACI,IAAM,KAAK,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACxD,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;YAEhB,IAAI,UAAU,EAAE;gBACZ,IAAA,oCAAa,EAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;oBACvC,OAAA,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;gBAApD,CAAoD,CACvD,CAAC;aACL;YACD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC,EACD,aAAa,CAChB,CAAC;IACN,CAAC","sourcesContent":["import formatUndoSnapshot from '../utils/formatUndoSnapshot';\r\nimport { getObjectKeys, readFile } from 'roosterjs-editor-dom';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFileOrSrc Either the image file blob or source string of the image.\r\n * @param attributes Optional image element attributes\r\n */\r\nexport default function insertImage(\r\n    editor: IEditor,\r\n    imageFileOrSrc: File | string,\r\n    attributes?: Record<string, string>\r\n): void {\r\n    if (typeof imageFileOrSrc == 'string') {\r\n        insertImageWithSrc(editor, imageFileOrSrc, attributes);\r\n    } else {\r\n        readFile(imageFileOrSrc, dataUrl => {\r\n            if (dataUrl && !editor.isDisposed()) {\r\n                insertImageWithSrc(editor, dataUrl, attributes);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction insertImageWithSrc(editor: IEditor, src: string, attributes?: Record<string, string>) {\r\n    formatUndoSnapshot(\r\n        editor,\r\n        () => {\r\n            const image = editor.getDocument().createElement('img');\r\n            image.src = src;\r\n\r\n            if (attributes) {\r\n                getObjectKeys(attributes).forEach(attribute =>\r\n                    image.setAttribute(attribute, attributes[attribute])\r\n                );\r\n            }\r\n            editor.insertNode(image);\r\n        },\r\n        'insertImage'\r\n    );\r\n}\r\n"]}