{"version":3,"file":"clearFormat.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/clearFormat.ts"],"names":[],"mappings":"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","sourcesContent":["import applyListItemStyleWrap from '../utils/applyListItemWrap';\r\nimport blockFormat from '../utils/blockFormat';\r\nimport execCommand from '../utils/execCommand';\r\nimport formatUndoSnapshot from '../utils/formatUndoSnapshot';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, ClearFormatMode, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\nimport {\r\n    collapseNodesInRegion,\r\n    getObjectKeys,\r\n    getSelectedBlockElementsInRegion,\r\n    getStyles,\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    isNodeInRegion,\r\n    isVoidHtmlElement,\r\n    PartialInlineElement,\r\n    NodeInlineElement,\r\n    safeInstanceOf,\r\n    setStyles,\r\n    splitBalancedNodeRange,\r\n    toArray,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\nimport type { CompatibleClearFormatMode } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\nconst TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nconst ATTRIBUTES_TO_PRESERVE = ['href', 'src', 'cellpadding', 'cellspacing'];\r\nconst TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\n\r\n/**\r\n * @param editor The editor instance\r\n * @returns if the current selection is composed of two or more block elements\r\n */\r\nfunction isMultiBlockSelection(editor: IEditor): boolean {\r\n    const transverser = editor.getSelectionTraverser();\r\n    const blockElement = transverser?.currentBlockElement;\r\n    if (!blockElement) {\r\n        return false;\r\n    }\r\n\r\n    const nextBlockElement = transverser?.getNextBlockElement();\r\n\r\n    //At least two blocks are selected\r\n    return !!nextBlockElement;\r\n}\r\n\r\nfunction clearNodeFormat(node: Node): boolean {\r\n    // 1. Recursively clear format of all its child nodes\r\n    const areBlockElements = toArray(node.childNodes).map(clearNodeFormat);\r\n    const areAllChildrenBlock = areBlockElements.every(b => b);\r\n    const returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. Unwrap the tag if necessary\r\n    const tag = getTagOfNode(node);\r\n    if (tag) {\r\n        if (\r\n            TAGS_TO_UNWRAP.indexOf(tag) >= 0 ||\r\n            (areAllChildrenBlock &&\r\n                !isVoidHtmlElement(node) &&\r\n                TAGS_TO_STOP_UNWRAP.indexOf(tag) < 0)\r\n        ) {\r\n            if (returnBlockElement && !areAllChildrenBlock) {\r\n                wrap(node);\r\n            }\r\n            unwrap(node);\r\n        } else {\r\n            // 3. Otherwise, remove all attributes\r\n            clearAttribute(node as HTMLElement);\r\n        }\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement) {\r\n    const isTableCell = safeInstanceOf(element, 'HTMLTableCellElement');\r\n    const isTable = safeInstanceOf(element, 'HTMLTableElement');\r\n\r\n    for (const attr of toArray(element.attributes)) {\r\n        if (isTableCell && attr.name == 'style') {\r\n            removeNonBorderStyles(element);\r\n        } else if (isTable && attr.name == 'style') {\r\n            removeNotTableDefaultStyles(element);\r\n        } else if (\r\n            ATTRIBUTES_TO_PRESERVE.indexOf(attr.name.toLowerCase()) < 0 &&\r\n            attr.name.indexOf('data-') != 0\r\n        ) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateStyles(\r\n    element: HTMLElement,\r\n    callbackfn: (\r\n        value: string,\r\n        styles: Record<string, string>,\r\n        result: Record<string, string>\r\n    ) => void\r\n) {\r\n    const styles = getStyles(element);\r\n    const result: Record<string, string> = {};\r\n\r\n    getObjectKeys(styles).forEach(style => callbackfn(style, styles, result));\r\n\r\n    setStyles(element, styles);\r\n\r\n    return result;\r\n}\r\n\r\nfunction removeNonBorderStyles(element: HTMLElement): Record<string, string> {\r\n    return updateStyles(element, (name, styles, result) => {\r\n        if (name.indexOf('border') < 0) {\r\n            result[name] = styles[name];\r\n            delete styles[name];\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeNotTableDefaultStyles(element: HTMLTableElement) {\r\n    return updateStyles(element, (name, styles, result) => {\r\n        if (name != 'border-collapse') {\r\n            result[name] = styles[name];\r\n            delete styles[name];\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Verifies recursively if a node and its parents have any siblings with text content\r\n * Ignoring the children of contentDiv and returning true if any node is LI\r\n * @returns `true` if this node, and its parents (minus the children of the contentDiv) have no siblings with text content\r\n */\r\nfunction isNodeWholeBlock(node: Node, editor: IEditor) {\r\n    let currentNode: ParentNode | Node | null = node;\r\n    while (currentNode && editor.contains(currentNode.parentNode)) {\r\n        if (currentNode.nextSibling || currentNode.previousSibling) {\r\n            if (safeInstanceOf(currentNode, 'HTMLLIElement')) {\r\n                return true;\r\n            }\r\n            let isOnlySiblingWithContent = true;\r\n            currentNode.parentNode?.childNodes.forEach(node => {\r\n                if (node != currentNode && node.textContent?.length) {\r\n                    isOnlySiblingWithContent = false;\r\n                }\r\n            });\r\n            return isOnlySiblingWithContent;\r\n        }\r\n        currentNode = currentNode.parentNode;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Clear the format of the selected text or list of blocks\r\n * If the current selection is compose of multiple block elements then remove the text and struture format for all the selected blocks\r\n * If the current selection is compose of a partial inline element then only the text format is removed from the current selection\r\n * @param editor The editor instance\r\n */\r\nfunction clearAutoDetectFormat(editor: IEditor) {\r\n    const isMultiBlock = isMultiBlockSelection(editor);\r\n    if (!isMultiBlock) {\r\n        const transverser = editor.getSelectionTraverser();\r\n        const inlineElement = transverser?.currentInlineElement;\r\n        const isPartial =\r\n            inlineElement instanceof PartialInlineElement ||\r\n            (inlineElement instanceof NodeInlineElement &&\r\n                !isNodeWholeBlock(inlineElement.getContainerNode(), editor));\r\n        if (isPartial) {\r\n            clearFormat(editor);\r\n            return;\r\n        }\r\n    }\r\n    clearBlockFormat(editor);\r\n}\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n */\r\nfunction clearBlockFormat(editor: IEditor) {\r\n    formatUndoSnapshot(\r\n        editor,\r\n        () => {\r\n            blockFormat(editor, region => {\r\n                const blocks = getSelectedBlockElementsInRegion(region);\r\n                let nodes = collapseNodesInRegion(region, blocks);\r\n\r\n                if (editor.contains(region.rootNode)) {\r\n                    // If there are styles on table cell, wrap all its children and move down all non-border styles.\r\n                    // So that we can preserve styles for unselected blocks as well as border styles for table\r\n                    const nonborderStyles = removeNonBorderStyles(region.rootNode);\r\n                    if (getObjectKeys(nonborderStyles).length > 0) {\r\n                        const wrapper = wrap(toArray(region.rootNode.childNodes));\r\n                        setStyles(wrapper, nonborderStyles);\r\n                    }\r\n                }\r\n\r\n                while (\r\n                    nodes.length > 0 &&\r\n                    nodes[0].parentNode &&\r\n                    isNodeInRegion(region, nodes[0].parentNode)\r\n                ) {\r\n                    const balancedNodes = splitBalancedNodeRange(nodes);\r\n                    nodes = balancedNodes ? [balancedNodes] : [];\r\n                }\r\n\r\n                nodes.forEach(clearNodeFormat);\r\n            });\r\n            setDefaultFormat(editor);\r\n        },\r\n        'clearBlockFormat'\r\n    );\r\n}\r\n\r\nfunction clearInlineFormat(editor: IEditor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        setDefaultFormat(editor);\r\n\r\n        return 'clearInlineFormat';\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction setDefaultFontWeight(editor: IEditor, fontWeight: string = '400') {\r\n    applyListItemStyleWrap(\r\n        editor,\r\n        'font-weight',\r\n        element => (element.style.fontWeight = fontWeight),\r\n        'setDefaultFontWeight'\r\n    );\r\n}\r\n\r\nfunction setDefaultFormat(editor: IEditor) {\r\n    const defaultFormat = editor.getDefaultFormat();\r\n    const isDefaultFormatEmpty = getObjectKeys(defaultFormat).length === 0;\r\n    editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n        const tag = getTagOfNode(node);\r\n        if (TAGS_TO_STOP_UNWRAP.indexOf(tag) == -1) {\r\n            removeStyles(tag, node, isDefaultFormatEmpty);\r\n        } else {\r\n            node.childNodes.forEach(node => {\r\n                node.childNodes.forEach(cNode => {\r\n                    const tag = getTagOfNode(cNode);\r\n                    if (safeInstanceOf(cNode, 'HTMLElement')) {\r\n                        removeStyles(tag, cNode, isDefaultFormatEmpty);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    if (!isDefaultFormatEmpty) {\r\n        if (defaultFormat.fontFamily) {\r\n            setFontName(editor, defaultFormat.fontFamily);\r\n        }\r\n        if (defaultFormat.fontSize) {\r\n            setFontSize(editor, defaultFormat.fontSize);\r\n        }\r\n        if (defaultFormat.textColor) {\r\n            const setColorIgnoredElements = editor.queryElements<HTMLElement>(\r\n                'a *, a',\r\n                QueryScope.OnSelection\r\n            );\r\n\r\n            const shouldApplyInlineStyle =\r\n                setColorIgnoredElements.length > 0\r\n                    ? (element: HTMLElement) => setColorIgnoredElements.indexOf(element) == -1\r\n                    : undefined;\r\n\r\n            if (defaultFormat.textColors) {\r\n                setTextColor(editor, defaultFormat.textColors, shouldApplyInlineStyle);\r\n            } else {\r\n                setTextColor(editor, defaultFormat.textColor, shouldApplyInlineStyle);\r\n            }\r\n        }\r\n        if (defaultFormat.backgroundColor) {\r\n            if (defaultFormat.backgroundColors) {\r\n                setBackgroundColor(editor, defaultFormat.backgroundColors);\r\n            } else {\r\n                setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n            }\r\n        }\r\n        if (defaultFormat.bold) {\r\n            toggleBold(editor);\r\n        } else {\r\n            setDefaultFontWeight(editor);\r\n        }\r\n        if (defaultFormat.italic) {\r\n            toggleItalic(editor);\r\n        }\r\n        if (defaultFormat.underline) {\r\n            toggleUnderline(editor);\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeStyles(tag: string, node: HTMLElement, isDefaultFormatEmpty: boolean) {\r\n    if (TAGS_TO_STOP_UNWRAP.indexOf(tag) == -1) {\r\n        STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n        // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n        // (note: because default format is empty, we're not adding style back in)\r\n        if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n            node.removeAttribute('style');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n * @param formatType type of format to apply\r\n */\r\nexport default function clearFormat(\r\n    editor: IEditor,\r\n    formatType: ClearFormatMode | CompatibleClearFormatMode = ClearFormatMode.Inline\r\n) {\r\n    switch (formatType) {\r\n        case ClearFormatMode.Inline:\r\n            clearInlineFormat(editor);\r\n            break;\r\n        case ClearFormatMode.Block:\r\n            clearBlockFormat(editor);\r\n            break;\r\n        default:\r\n            clearAutoDetectFormat(editor);\r\n    }\r\n}\r\n"]}