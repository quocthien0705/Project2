import blockFormat from './blockFormat';
import { collapseNodesInRegion, getSelectedBlockElementsInRegion, getTagOfNode, isNodeInRegion, splitBalancedNodeRange, toArray, wrap, } from 'roosterjs-editor-dom';
/**
 * @internal
 * Toggle a tag at selection, if selection already contains elements of such tag,
 * the elements will be untagged and other elements will take no effect
 * @param editor The editor instance
 * @param wrapFunction  The wrap function
 * @param beforeRunCallback A callback function to run before looping all regions. If it returns false,
 * the loop for regions will be skipped
 */
export default function blockWrap(editor, wrapFunction, beforeRunCallback, apiName) {
    blockFormat(editor, function (region) {
        var blocks = getSelectedBlockElementsInRegion(region, true /*createBlockIfEmpty*/);
        var nodes = collapseNodesInRegion(region, blocks);
        if (nodes.length > 0) {
            if (nodes.length == 1) {
                var NodeTag = getTagOfNode(nodes[0]);
                if (NodeTag == 'BR') {
                    nodes = [wrap(nodes[0])];
                }
                else if (NodeTag == 'LI' || NodeTag == 'TD') {
                    nodes = toArray(nodes[0].childNodes);
                }
            }
            while (nodes[0] &&
                nodes[0].parentNode &&
                isNodeInRegion(region, nodes[0].parentNode) &&
                nodes.some(function (node) { return getTagOfNode(node) == 'LI'; })) {
                var result = splitBalancedNodeRange(nodes);
                nodes = result ? [result] : [];
            }
            wrapFunction(nodes);
        }
    }, beforeRunCallback, apiName);
}
//# sourceMappingURL=blockWrap.js.map