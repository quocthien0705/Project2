{"version":3,"file":"blockFormat.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/blockFormat.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,2BAA2B,CAAC;AACzD,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD;;GAEG;AACH,MAAM,CAAC,OAAO,UAAU,WAAW,CAC/B,MAAe,EACf,QAKS,EACT,iBAAiC,EACjC,OAAgB;IAEhB,MAAM,CAAC,KAAK,EAAE,CAAC;IACf,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;IAE/C,kBAAkB,CACd,MAAM,EACN,UAAC,KAAK,EAAE,GAAG;QACP,IAAI,CAAC,iBAAiB,IAAI,iBAAiB,EAAE,EAAE;YAC3C,IAAM,OAAO,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;YAC5C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,IAAM,QAAM,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,CAAC;gBACjE,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,QAAM,CAAC,EAApC,CAAoC,CAAC,CAAC;gBAChE,gBAAgB,CAAC,MAAM,EAAE,QAAM,CAAC,CAAC;aACpC;SACJ;QACD,IAAI,SAAS,CAAC,IAAI,kBAA8B,IAAI,KAAK,IAAI,GAAG,EAAE;YAC9D,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SAC7B;aAAM;YACH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC5B;IACL,CAAC,EACD,OAAO,CACV,CAAC;AACN,CAAC","sourcesContent":["import commitListChains from '../utils/commitListChains';\nimport formatUndoSnapshot from './formatUndoSnapshot';\nimport { SelectionRangeTypes } from 'roosterjs-editor-types';\nimport { VListChain } from 'roosterjs-editor-dom';\nimport type { IEditor, NodePosition, Region } from 'roosterjs-editor-types';\n\n/**\n * Split selection into regions, and perform a block-wise formatting action for each region.\n */\nexport default function blockFormat(\n    editor: IEditor,\n    callback: (\n        region: Region,\n        start: NodePosition | null,\n        end: NodePosition | null,\n        chains: VListChain[]\n    ) => void,\n    beforeRunCallback?: () => boolean,\n    apiName?: string\n) {\n    editor.focus();\n    const selection = editor.getSelectionRangeEx();\n\n    formatUndoSnapshot(\n        editor,\n        (start, end) => {\n            if (!beforeRunCallback || beforeRunCallback()) {\n                const regions = editor.getSelectedRegions();\n                if (regions.length > 0) {\n                    const chains = VListChain.createListChains(regions, start?.node);\n                    regions.forEach(region => callback(region, start, end, chains));\n                    commitListChains(editor, chains);\n                }\n            }\n            if (selection.type == SelectionRangeTypes.Normal && start && end) {\n                editor.select(start, end);\n            } else {\n                editor.select(selection);\n            }\n        },\n        apiName\n    );\n}\n"]}