{"version":3,"file":"execCommand.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/execCommand.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAM/E;;;;;;;;;GASG;AACH,MAAM,CAAC,OAAO,UAAU,WAAW,CAC/B,MAAe,EACf,OAAoD,EACpD,OAAgB;IAEhB,MAAM,CAAC,KAAK,EAAE,CAAC;IAEf,IAAM,SAAS,GAAG,cAAM,OAAA,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,EAA3D,CAA2D,CAAC;IAEpF,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;IAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,eAAe,EAAE;QACxC,MAAM,CAAC,eAAe,EAAE,CAAC;QACzB,IAAM,WAAW,GAAG,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;QACpF,SAAS,EAAE,CAAC;QACZ,IAAM,UAAU,GAAG,aAAa,CAAC,wBAAwB,CAAC,CAAC,MAAM,CAC7D,UAAA,CAAC,IAAI,OAAA,wBAAwB,CAAC,CAAC,CAAC,IAAI,OAAO,EAAtC,CAAsC,CAC9C,CAAC,CAAC,CAAwB,CAAC;QAE5B,IAAI,UAAU,EAAE;YACZ,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,kBAAkB,qCAA4C;gBACjE,WAAW,EAAE,WAAW;aAC3B,CAAC,CAAC;SACN;KACJ;SAAM;QACH,kBAAkB,CACd,MAAM,EACN;YACI,IAAM,qBAAqB,GAAG,SAAS,CAAC,IAAI,kBAA8B,CAAC;YAE3E,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;gBAC1B,IAAI,qBAAqB,EAAE;oBACvB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACxB;gBACD,SAAS,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,IAAI,qBAAqB,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aAC5B;QACL,CAAC,EACD,OAAO,CACV,CAAC;KACL;AACL,CAAC","sourcesContent":["import formatUndoSnapshot from './formatUndoSnapshot';\nimport { getObjectKeys, PendableFormatCommandMap } from 'roosterjs-editor-dom';\nimport { PluginEventType, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type { PendableFormatNames } from 'roosterjs-editor-dom';\nimport type { DocumentCommand, IEditor } from 'roosterjs-editor-types';\nimport type { CompatibleDocumentCommand } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n * Execute a document command\n * @param editor The editor instance\n * @param command The command to execute\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\n * Default value is false.\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\n * Default value is false.\n */\nexport default function execCommand(\n    editor: IEditor,\n    command: DocumentCommand | CompatibleDocumentCommand,\n    apiName?: string\n) {\n    editor.focus();\n\n    const formatter = () => editor.getDocument().execCommand(command, false, undefined);\n\n    const selection = editor.getSelectionRangeEx();\n    if (selection && selection.areAllCollapsed) {\n        editor.addUndoSnapshot();\n        const formatState = editor.getPendableFormatState(false /* forceGetStateFromDom */);\n        formatter();\n        const formatName = getObjectKeys(PendableFormatCommandMap).filter(\n            x => PendableFormatCommandMap[x] == command\n        )[0] as PendableFormatNames;\n\n        if (formatName) {\n            formatState[formatName] = !formatState[formatName];\n            editor.triggerPluginEvent(PluginEventType.PendingFormatStateChanged, {\n                formatState: formatState,\n            });\n        }\n    } else {\n        formatUndoSnapshot(\n            editor,\n            () => {\n                const needToSwitchSelection = selection.type != SelectionRangeTypes.Normal;\n\n                selection.ranges.forEach(range => {\n                    if (needToSwitchSelection) {\n                        editor.select(range);\n                    }\n                    formatter();\n                });\n\n                if (needToSwitchSelection) {\n                    editor.select(selection);\n                }\n            },\n            apiName\n        );\n    }\n}\n"]}