import formatUndoSnapshot from './formatUndoSnapshot';
import { getObjectKeys, PendableFormatCommandMap } from 'roosterjs-editor-dom';
/**
 * @internal
 * Execute a document command
 * @param editor The editor instance
 * @param command The command to execute
 * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.
 * Default value is false.
 * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.
 * Default value is false.
 */
export default function execCommand(editor, command, apiName) {
    editor.focus();
    var formatter = function () { return editor.getDocument().execCommand(command, false, undefined); };
    var selection = editor.getSelectionRangeEx();
    if (selection && selection.areAllCollapsed) {
        editor.addUndoSnapshot();
        var formatState = editor.getPendableFormatState(false /* forceGetStateFromDom */);
        formatter();
        var formatName = getObjectKeys(PendableFormatCommandMap).filter(function (x) { return PendableFormatCommandMap[x] == command; })[0];
        if (formatName) {
            formatState[formatName] = !formatState[formatName];
            editor.triggerPluginEvent(13 /* PendingFormatStateChanged */, {
                formatState: formatState,
            });
        }
    }
    else {
        formatUndoSnapshot(editor, function () {
            var needToSwitchSelection = selection.type != 0 /* Normal */;
            selection.ranges.forEach(function (range) {
                if (needToSwitchSelection) {
                    editor.select(range);
                }
                formatter();
            });
            if (needToSwitchSelection) {
                editor.select(selection);
            }
        }, apiName);
    }
}
//# sourceMappingURL=execCommand.js.map