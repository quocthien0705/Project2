{"version":3,"file":"editTable.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/table/editTable.ts"],"names":[],"mappings":";;AAAA,kEAA6D;AAE7D,6DAA8C;AAI9C;;;;GAIG;AACH,SAAwB,SAAS,CAC7B,MAAe,EACf,SAAoD;IAEpD,IAAM,EAAE,GAAG,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAyB,CAAC;IACtE,IAAI,EAAE,EAAE;QACJ,IAAA,4BAAkB,EACd,MAAM,EACN;YACI,IAAM,MAAM,GAAG,IAAI,6BAAM,CAAC,EAAE,CAAC,CAAC;YAE9B,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACvB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7E,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;gBACpD,OAAO;aACV;YACK,IAAA,KAAqB,qBAAqB,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAA3E,MAAM,YAAA,EAAE,MAAM,YAA6D,CAAC;YACpF,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC;YAChD,IAAI,KAAK,EAAE;gBACP,MAAM,CAAC,MAAM,CAAC,KAAK,gBAAqB,CAAC;aAC5C;QACL,CAAC,EACD,WAAW,CACd,CAAC;KACL;AACL,CAAC;AA7BD,4BA6BC;AAED,SAAS,WAAW,CAAC,CAAqB;IACtC,OAAO,CAAC,IAAI,SAAS,CAAC;AAC1B,CAAC;AAED,SAAS,qBAAqB,CAC1B,SAAoD,EACpD,UAAkB,EAClB,UAAkB;IAElB,IAAI,MAAM,GAAG,UAAU,CAAC;IACxB,IAAI,MAAM,GAAG,UAAU,CAAC;IACxB,QAAQ,SAAS,EAAE;QACf;YACI,MAAM,GAAG,CAAC,CAAC;YACX,MAAM;QACV;YACI,MAAM,IAAI,CAAC,CAAC;YACZ,MAAM,GAAG,CAAC,CAAC;YACX,MAAM;QACV;YACI,MAAM,GAAG,CAAC,CAAC;YACX,MAAM;QACV;YACI,MAAM,GAAG,CAAC,CAAC;YACX,MAAM,IAAI,CAAC,CAAC;YACZ,MAAM;KACb;IAED,OAAO;QACH,MAAM,QAAA;QACN,MAAM,QAAA;KACT,CAAC;AACN,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAe,EAAE,MAAc;;IACvD,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;IAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,2BAAuC,EAAE;QACpE,MAAM,CAAC,SAAS,GAAG,MAAA,SAAS,CAAC,WAAW,mCAAI,IAAI,CAAC;KACpD;AACL,CAAC","sourcesContent":["import formatUndoSnapshot from '../utils/formatUndoSnapshot';\r\nimport { PositionType, SelectionRangeTypes, TableOperation } from 'roosterjs-editor-types';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\nimport type { CompatibleTableOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(\r\n    editor: IEditor,\r\n    operation: TableOperation | CompatibleTableOperation\r\n) {\r\n    const td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        formatUndoSnapshot(\r\n            editor,\r\n            () => {\r\n                const vtable = new VTable(td);\r\n\r\n                saveTableSelection(editor, vtable);\r\n                vtable.edit(operation);\r\n                vtable.writeBack(false /** skipApplyFormat */, editor.getDarkColorHandler());\r\n                editor.transformToDarkColor(vtable.table);\r\n\r\n                editor.focus();\r\n                if (isUndefined(vtable.row) || isUndefined(vtable.col)) {\r\n                    return;\r\n                }\r\n                const { newCol, newRow } = calculateCellToSelect(operation, vtable.row, vtable.col);\r\n                const newTd = vtable.getCell(newRow, newCol).td;\r\n                if (newTd) {\r\n                    editor.select(newTd, PositionType.Begin);\r\n                }\r\n            },\r\n            'editTable'\r\n        );\r\n    }\r\n}\r\n\r\nfunction isUndefined(n: number | undefined): n is undefined {\r\n    return n == undefined;\r\n}\r\n\r\nfunction calculateCellToSelect(\r\n    operation: TableOperation | CompatibleTableOperation,\r\n    currentRow: number,\r\n    currentCol: number\r\n) {\r\n    let newRow = currentRow;\r\n    let newCol = currentCol;\r\n    switch (operation) {\r\n        case TableOperation.InsertAbove:\r\n            newCol = 0;\r\n            break;\r\n        case TableOperation.InsertBelow:\r\n            newRow += 1;\r\n            newCol = 0;\r\n            break;\r\n        case TableOperation.InsertLeft:\r\n            newRow = 0;\r\n            break;\r\n        case TableOperation.InsertRight:\r\n            newRow = 0;\r\n            newCol += 1;\r\n            break;\r\n    }\r\n\r\n    return {\r\n        newRow,\r\n        newCol,\r\n    };\r\n}\r\n\r\nfunction saveTableSelection(editor: IEditor, vtable: VTable) {\r\n    const selection = editor.getSelectionRangeEx();\r\n    if (selection && selection.type === SelectionRangeTypes.TableSelection) {\r\n        vtable.selection = selection.coordinates ?? null;\r\n    }\r\n}\r\n"]}