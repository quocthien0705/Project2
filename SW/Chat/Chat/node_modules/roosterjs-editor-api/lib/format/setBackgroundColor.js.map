{"version":3,"file":"setBackgroundColor.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts"],"names":[],"mappings":";;AAAA,8DAAyD;AACzD,6DAAgD;AAGhD;;;;;;;;;IASI;AACJ,SAAwB,kBAAkB,CAAC,MAAe,EAAE,KAAoC;IAC5F,IAAA,0BAAgB,EACZ,MAAM,EACN,UAAC,OAAO,EAAE,WAAW;QACjB,IAAA,+BAAQ,EACJ,OAAO,EACP,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EACxB,IAAI,CAAC,gBAAgB,EACrB,MAAM,CAAC,UAAU,EAAE,EACnB,KAAK,CAAC,wBAAwB,EAC9B,MAAM,CAAC,mBAAmB,EAAE,CAC/B,CAAC;IACN,CAAC,EACD,oBAAoB,CACvB,CAAC;AACN,CAAC;AAfD,qCAeC","sourcesContent":["import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { setColor } from 'roosterjs-editor-dom';\r\nimport type { IEditor, ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take effect\r\n * Alternatively, you can pass a @typedef ModeIndependentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n **/\r\nexport default function setBackgroundColor(editor: IEditor, color: string | ModeIndependentColor) {\r\n    applyInlineStyle(\r\n        editor,\r\n        (element, isInnerNode) => {\r\n            setColor(\r\n                element,\r\n                isInnerNode ? '' : color,\r\n                true /*isBackground*/,\r\n                editor.isDarkMode(),\r\n                false /*shouldAdaptFontColor*/,\r\n                editor.getDarkColorHandler()\r\n            );\r\n        },\r\n        'setBackgroundColor'\r\n    );\r\n}\r\n"]}