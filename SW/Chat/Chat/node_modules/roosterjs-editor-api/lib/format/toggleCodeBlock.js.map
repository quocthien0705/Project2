{"version":3,"file":"toggleCodeBlock.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts"],"names":[],"mappings":";;AAAA,gDAA2C;AAE3C,6DAAoD;AAGpD,IAAM,OAAO,GAAG,KAAK,CAAC;AACtB,IAAM,QAAQ,GAAG,MAAM,CAAC;AACxB,IAAM,QAAQ,GAAM,OAAO,SAAI,QAAU,CAAC;AAE1C;;;;;GAKG;AACH,SAAwB,eAAe,CACnC,MAAe,EACf,MAAuC;IAEvC,IAAA,mBAAS,EACL,MAAM,EACN,UAAA,KAAK;QACD,IAAM,IAAI,GAAG,IAAA,2BAAI,EAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACnC,IAAM,GAAG,GAAG,IAAA,2BAAI,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAChC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,GAAG,CAAC,CAAC;IAClB,CAAC,EACD;QACI,OAAA,MAAM,CAAC,aAAa,CAAC,QAAQ,uBAA0B,UAAA,IAAI;YACvD,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBAC5C,IAAM,QAAM,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC/B,IAAA,6BAAM,EAAC,IAAI,CAAC,CAAC;gBACb,IAAI,QAAM,EAAE;oBACR,IAAA,6BAAM,EAAC,QAAM,CAAC,CAAC;iBAClB;aACJ;QACL,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC;IARd,CAQc,EAClB,iBAAiB,CACpB,CAAC;AACN,CAAC;AAvBD,kCAuBC","sourcesContent":["import blockWrap from '../utils/blockWrap';\r\nimport { QueryScope } from 'roosterjs-editor-types';\r\nimport { unwrap, wrap } from 'roosterjs-editor-dom';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst SELECTOR = `${PRE_TAG}>${CODE_TAG}`;\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: IEditor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    blockWrap(\r\n        editor,\r\n        nodes => {\r\n            const code = wrap(nodes, CODE_TAG);\r\n            const pre = wrap(code, PRE_TAG);\r\n            styler?.(pre);\r\n        },\r\n        () =>\r\n            editor.queryElements(SELECTOR, QueryScope.OnSelection, code => {\r\n                if (!code.previousSibling && !code.nextSibling) {\r\n                    const parent = code.parentNode;\r\n                    unwrap(code);\r\n                    if (parent) {\r\n                        unwrap(parent);\r\n                    }\r\n                }\r\n            }).length == 0,\r\n        'toggleCodeBlock'\r\n    );\r\n}\r\n"]}