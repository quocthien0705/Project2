"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var blockFormat_1 = require("../utils/blockFormat");
var execCommand_1 = require("../utils/execCommand");
var formatUndoSnapshot_1 = require("../utils/formatUndoSnapshot");
var normalizeBlockquote_1 = require("../utils/normalizeBlockquote");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * Set content alignment
 * @param editor The editor instance
 * @param alignment The alignment option:
 * Alignment.Center, Alignment.Left, Alignment.Right
 */
function setAlignment(editor, alignment) {
    (0, formatUndoSnapshot_1.default)(editor, function () {
        var selection = editor.getSelectionRangeEx();
        var isATable = selection && selection.type === 1 /* TableSelection */;
        var elementAtCursor = editor.getElementAtCursor();
        if (isATable &&
            selection.coordinates &&
            (0, roosterjs_editor_dom_1.isWholeTableSelected)(new roosterjs_editor_dom_1.VTable(selection.table), selection.coordinates)) {
            alignTable(selection, alignment);
        }
        else if (elementAtCursor && isList(elementAtCursor)) {
            alignList(editor, alignment);
        }
        else {
            alignText(editor, alignment);
        }
    }, 'setAlignment');
}
exports.default = setAlignment;
/**
 * Align text using the margins
 * @param editor
 * @param element
 * @param alignment
 * @param addUndoSnapshot
 * @returns
 */
function alignTable(selection, alignment) {
    var table = selection.table;
    if (alignment == 1 /* Center */) {
        table.style.marginLeft = 'auto';
        table.style.marginRight = 'auto';
    }
    else if (alignment == 2 /* Right */) {
        table.style.marginLeft = 'auto';
        table.style.marginRight = '';
    }
    else {
        table.style.marginLeft = '';
        table.style.marginRight = 'auto';
    }
}
/**
 * Align text using the text-align
 * @param editor
 * @param alignment
 * @returns
 */
function alignText(editor, alignment) {
    var align = 'left';
    var command = "justifyLeft" /* JustifyLeft */;
    if (alignment == 1 /* Center */) {
        command = "justifyCenter" /* JustifyCenter */;
        align = 'center';
    }
    else if (alignment == 2 /* Right */) {
        command = "justifyRight" /* JustifyRight */;
        align = 'right';
    }
    (0, execCommand_1.default)(editor, command);
    var elements = editor.queryElements('[align]', 1 /* OnSelection */, function (node) {
        node.style.textAlign = align;
        (0, normalizeBlockquote_1.default)(node);
    });
    if (elements.length == 0) {
        var node = editor.getElementAtCursor();
        if (node) {
            (0, normalizeBlockquote_1.default)(node);
        }
    }
}
function isList(element) {
    return (0, roosterjs_editor_dom_1.findClosestElementAncestor)(element, undefined /** root */, 'LI');
}
function alignList(editor, alignment) {
    (0, blockFormat_1.default)(editor, function (region, start, end) {
        var blocks = (0, roosterjs_editor_dom_1.getSelectedBlockElementsInRegion)(region);
        var startNode = blocks[0].getStartNode();
        var vList = (0, roosterjs_editor_dom_1.createVListFromRegion)(region, true /*includeSiblingLists*/, startNode);
        if (start && end) {
            vList === null || vList === void 0 ? void 0 : vList.setAlignment(start, end, alignment);
        }
    }, undefined /* beforeRunCallback */, 'alignList');
}
//# sourceMappingURL=setAlignment.js.map