"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var applyListItemWrap_1 = require("../utils/applyListItemWrap");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * Set text color at selection
 * @param editor The editor instance
 * @param color One of two options:
 * The color string, can be any of the predefined color names (e.g, 'red')
 * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.
 * Currently there's no validation to the string, if the passed string is invalid, it won't take affect
 * Alternatively, you can pass a @typedef ModeIndependentColor. If in light mode, the lightModeColor property will be used.
 * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.
 * @param shouldApplyInlineStyle Optional callback function to be invoked to verify if the current element should have the inline Style applied
 */
function setTextColor(editor, color, shouldApplyInlineStyle) {
    (0, applyListItemWrap_1.default)(editor, 'color', function (element, isInnerNode) {
        if (!shouldApplyInlineStyle || shouldApplyInlineStyle(element)) {
            (0, roosterjs_editor_dom_1.setColor)(element, isInnerNode ? '' : color, false /*isBackground*/, editor.isDarkMode(), false /*shouldAdaptFontColor*/, editor.getDarkColorHandler());
        }
    }, 'setTextColor');
}
exports.default = setTextColor;
//# sourceMappingURL=setTextColor.js.map