{"version":3,"file":"changeCapitalization.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/changeCapitalization.ts"],"names":[],"mappings":";;AAAA,8DAAyD;AAEzD,6DAA4E;AAI5E;;;;;;;GAOG;AACH,SAAwB,oBAAoB,CACxC,MAAe,EACf,cAAyD,EACzD,QAAiB;IAEjB,IAAA,0BAAgB,EACZ,MAAM,EACN,UAAA,OAAO;QACH,KACI,IAAI,IAAI,GAAG,IAAA,uCAAgB,EAAC,OAAO,CAAC,EACpC,IAAI,EACJ,IAAI,GAAG,IAAA,yCAAkB,EAAC,OAAO,EAAE,IAAI,CAAC,EAC1C;YACE,IAAI,IAAI,CAAC,QAAQ,gBAAiB,EAAE;gBAChC,IAAI;oBACA,IAAI,CAAC,WAAW,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;iBACrE;gBAAC,WAAM;oBACJ,IAAI,CAAC,WAAW,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;iBACtE;aACJ;SACJ;IACL,CAAC,EACD,sBAAsB,CACzB,CAAC;IAEF,SAAS,kBAAkB,CACvB,YAA2B,EAC3B,QAA4B;QAE5B,IAAI,YAAY,KAAK,IAAI,EAAE;YACvB,OAAO,YAAY,CAAC;SACvB;QACD,QAAQ,cAAc,EAAE;YACpB;gBACI,OAAO,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACpD;gBACI,OAAO,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACpD;gBACI,IAAM,SAAS,GAAG,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,SAAS,CAAC,CAAC,CAAC;wBACR,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAClF;gBACD,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC/B;gBACI,wEAAwE;gBACxE,IAAM,gBAAgB,GAAG,aAAa,CAAC;gBACvC,2CAA2C;gBAC3C,2EAA2E;gBAC3E,2EAA2E;gBAC3E,uEAAuE;gBACvE,sDAAsD;gBACtD,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,WAAW,GAAG,gBAAgB,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC1E,OAAO,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,UAAA,KAAK;oBAChE,OAAO,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;YACP;gBACI,OAAO,YAAY,CAAC;SAC3B;IACL,CAAC;AACL,CAAC;AA5DD,uCA4DC","sourcesContent":["import applyInlineStyle from '../utils/applyInlineStyle';\nimport { Capitalization, NodeType } from 'roosterjs-editor-types';\nimport { getFirstLeafNode, getNextLeafSibling } from 'roosterjs-editor-dom';\nimport type { IEditor } from 'roosterjs-editor-types';\nimport type { CompatibleCapitalization } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * Change the capitalization of text in the selection\n * @param editor The editor instance\n * @param capitalization The case option\n * @param language Optional parameter for language string that should comply to \"IETF BCP 47 Tags for\n * Identifying Languages\". For example: 'en' or 'en-US' for English, 'tr' for Turkish.\n * Default is the host environmentâ€™s current locale.\n */\nexport default function changeCapitalization(\n    editor: IEditor,\n    capitalization: Capitalization | CompatibleCapitalization,\n    language?: string\n) {\n    applyInlineStyle(\n        editor,\n        element => {\n            for (\n                let node = getFirstLeafNode(element);\n                node;\n                node = getNextLeafSibling(element, node)\n            ) {\n                if (node.nodeType == NodeType.Text) {\n                    try {\n                        node.textContent = getCapitalizedText(node.textContent, language);\n                    } catch {\n                        node.textContent = getCapitalizedText(node.textContent, undefined);\n                    }\n                }\n            }\n        },\n        'changeCapitalization'\n    );\n\n    function getCapitalizedText(\n        originalText: string | null,\n        language: string | undefined\n    ): string | null {\n        if (originalText === null) {\n            return originalText;\n        }\n        switch (capitalization) {\n            case Capitalization.Lowercase:\n                return originalText.toLocaleLowerCase(language);\n            case Capitalization.Uppercase:\n                return originalText.toLocaleUpperCase(language);\n            case Capitalization.CapitalizeEachWord:\n                const wordArray = originalText.toLocaleLowerCase(language).split(' ');\n                for (let i = 0; i < wordArray.length; i++) {\n                    wordArray[i] =\n                        wordArray[i].charAt(0).toLocaleUpperCase(language) + wordArray[i].slice(1);\n                }\n                return wordArray.join(' ');\n            case Capitalization.Sentence:\n                // TODO: Add rules on punctuation for internationalization - TASK 104769\n                const punctuationMarks = '[\\\\.\\\\!\\\\?]';\n                // Find a match of a word character either:\n                // - At the beginning of a string with or without preceding whitespace, for\n                // example: '  hello world' and 'hello world' strings would both match 'h'.\n                // - Or preceded by a punctuation mark and at least one whitespace, for\n                // example 'yes. hello world' would match 'y' and 'h'.\n                const regex = new RegExp('^\\\\s*\\\\w|' + punctuationMarks + '\\\\s+\\\\w', 'g');\n                return originalText.toLocaleLowerCase(language).replace(regex, match => {\n                    return match.toLocaleUpperCase(language);\n                });\n            default:\n                return originalText;\n        }\n    }\n}\n"]}