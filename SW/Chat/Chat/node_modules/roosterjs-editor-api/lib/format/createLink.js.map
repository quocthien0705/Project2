{"version":3,"file":"createLink.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/format/createLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { HtmlSanitizer, matchLink, wrap } from 'roosterjs-editor-dom';\r\nimport type { IEditor } from 'roosterjs-editor-types';\r\nimport {\r\n    ChangeSource,\r\n    DocumentCommand,\r\n    QueryScope,\r\n    SelectionRangeTypes,\r\n} from 'roosterjs-editor-types';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * @param target Optional display target for the link (\"_blank\"|\"_self\"|\"_parent\"|\"_top\"|\"{framename}\")\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: IEditor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string,\r\n    target?: string\r\n) {\r\n    editor.focus();\r\n    const url = (checkXss(link) || '').trim();\r\n    if (url) {\r\n        const linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        const normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        const originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            const selection = editor.getSelectionRangeEx();\r\n            let anchor: HTMLAnchorElement | null = null;\r\n            if (selection.type === SelectionRangeTypes.Normal) {\r\n                const range = selection.ranges[0];\r\n                if (range && range.collapsed) {\r\n                    anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                    // If there is already a link, just change its href\r\n                    if (anchor) {\r\n                        anchor.href = normalizedUrl;\r\n                        // Change text content if it is specified\r\n                        updateAnchorDisplayText(anchor, displayText);\r\n                    } else {\r\n                        anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                        anchor.textContent = displayText || originalUrl;\r\n                        anchor.href = normalizedUrl;\r\n                        editor.insertNode(anchor);\r\n                    }\r\n                } else {\r\n                    // the selection is not collapsed, use browser execCommand\r\n                    editor\r\n                        .getDocument()\r\n                        .execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                    const traverser = editor.getSelectionTraverser();\r\n\r\n                    let currentInline = traverser?.getNextInlineElement();\r\n\r\n                    // list for removing unwanted lines\r\n                    const deletionInlineList: Node[] = [];\r\n\r\n                    while (currentInline) {\r\n                        deletionInlineList.push(currentInline.getContainerNode());\r\n                        currentInline = traverser?.getNextInlineElement();\r\n                    }\r\n\r\n                    deletionInlineList.forEach(node => editor.deleteNode(node));\r\n\r\n                    anchor = getAnchorNodeAtCursor(editor);\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                }\r\n            } else if (selection.type === SelectionRangeTypes.ImageSelection) {\r\n                anchor = wrap(selection.image, 'A') as HTMLAnchorElement;\r\n                anchor.href = normalizedUrl;\r\n            }\r\n\r\n            if (altText && anchor) {\r\n                anchor.title = altText;\r\n            }\r\n            if (anchor) {\r\n                updateAnchorTarget(anchor, target);\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: IEditor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText?: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n\r\nfunction updateAnchorTarget(anchor: HTMLAnchorElement, target?: string) {\r\n    if (target) {\r\n        anchor.target = target;\r\n    } else if (!target && anchor.getAttribute('target')) {\r\n        anchor.removeAttribute('target');\r\n    }\r\n}\r\n\r\nfunction checkXss(link: string): string | null {\r\n    const sanitizer = new HtmlSanitizer();\r\n    const a = document.createElement('a');\r\n\r\n    a.href = link || '';\r\n    sanitizer.sanitize(a);\r\n    // We use getAttribute because some browsers will try to make the href property a valid link.\r\n    // This has unintended side effects when the link lacks a protocol.\r\n    return a.getAttribute('href');\r\n}\r\n"]}