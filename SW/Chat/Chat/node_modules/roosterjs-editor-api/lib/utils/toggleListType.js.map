{"version":3,"file":"toggleListType.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/toggleListType.ts"],"names":[],"mappings":";;AAAA,oDAA+C;AAC/C,6DAAoF;AAUpF;;;;;;;;;;;;;;;;;;;GAmBG;AACH,SAAwB,cAAc,CAClC,MAAe,EACf,QAAuC,EACvC,WAAuB,EACvB,mBAAmC,EACnC,YAA8D,EAC9D,cAA0D,EAC1D,eAAwB;IAJxB,4BAAA,EAAA,eAAuB;IACvB,oCAAA,EAAA,0BAAmC;IAKnC,IAAA,qBAAW,EACP,MAAM,EACN,UAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM;;QACvB,IAAM,KAAK,GACP,WAAW,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvF,IAAM,KAAK,GAAG,MAAA,IAAA,4CAAqB,EAC/B,MAAM,CAAC,QAAQ,EACf,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,mCAAI,IAAI,CACtB,0CAAE,uBAAuB,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,EAAE;YACR,OAAO;SACV;QAED,IAAM,KAAK,GACP,KAAK,IAAI,GAAG,KAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,GAAG,CAAC,CAAA;YAC/B,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC;YAC9C,CAAC,CAAC,IAAA,4CAAqB,EACjB,MAAM,EACN,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,CAClD,CAAC;QAEZ,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,EAAE;YACvB,KAAK,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC3C,KAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;YACrD,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;gBAClB,KAAK,CAAC,aAAa,EAAE,CAAC;aACzB;YACD,KAAK,CAAC,SAAS,CACX,MAAM,CAAC,gBAAgB,mEAAmD,EAC1E,MAAM,CAAC,gBAAgB,2CAAuC,CACjE,CAAC;SACL;IACL,CAAC,EACD,SAAS,CAAC,uBAAuB,EACjC,eAAe,IAAI,gBAAgB,CACtC,CAAC;AACN,CAAC;AA7CD,iCA6CC;AAED,SAAS,SAAS,CAAC,KAAmB;IAClC,IAAM,IAAI,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,CAAC;IAC7B,IAAI,IAAI,EAAE;QACN,OAAO,IAAI,CAAC,iBAAiB,KAAK,CAAC,CAAC;KACvC;IACD,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import blockFormat from '../utils/blockFormat';\nimport { createVListFromRegion, getBlockElementAtNode } from 'roosterjs-editor-dom';\nimport { ExperimentalFeatures } from 'roosterjs-editor-types';\nimport type { VList } from 'roosterjs-editor-dom';\nimport type { BulletListType, IEditor, ListType, NumberingListType } from 'roosterjs-editor-types';\nimport type {\n    CompatibleBulletListType,\n    CompatibleListType,\n    CompatibleNumberingListType,\n} from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * Toggle List Type at selection\n * If ListType Provided is Ordered:\n *      If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\n *      If selection contains bullet list, toggle numbering will convert the bullet list into number list\n *      If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\n *       realization of browser execCommand API\n * If ListType Provided is Unordered:\n *      If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\n *      If selection contains number list, toggle bullet will convert the number list into bullet list\n *      If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\n *      browser execCommand API\n * @param editor The editor instance\n * @param listType The list type to toggle\n * @param startNumber (Optional) Start number of the list\n * @param includeSiblingLists Sets wether the operation should include Sibling Lists, by default true\n * @param orderedStyle (Optional) the style of an ordered. If not defined, the style will be set to decimal.\n * @param unorderedStyle (Optional) the style of an unordered list. If not defined, the style will be set to disc.\n * @param apiNameOverride (Optional) Set a new api name, if empty the api name will be 'toggleListType'.\n */\nexport default function toggleListType(\n    editor: IEditor,\n    listType: ListType | CompatibleListType,\n    startNumber: number = 0,\n    includeSiblingLists: boolean = true,\n    orderedStyle?: NumberingListType | CompatibleNumberingListType,\n    unorderedStyle?: BulletListType | CompatibleBulletListType,\n    apiNameOverride?: string\n) {\n    blockFormat(\n        editor,\n        (region, start, end, chains) => {\n            const chain =\n                startNumber > 0 && chains.filter(chain => chain.canAppendAtCursor(startNumber))[0];\n            const block = getBlockElementAtNode(\n                region.rootNode,\n                start?.node ?? null\n            )?.collapseToSingleElement();\n            if (!block) {\n                return;\n            }\n\n            const vList =\n                chain && end && start?.equalTo(end)\n                    ? chain.createVListAtBlock(block, startNumber)\n                    : createVListFromRegion(\n                          region,\n                          startNumber === 1 ? false : includeSiblingLists\n                      );\n\n            if (vList && start && end) {\n                vList.changeListType(start, end, listType);\n                vList.setListStyleType(orderedStyle, unorderedStyle);\n                if (isNewList(vList)) {\n                    vList.removeMargins();\n                }\n                vList.writeBack(\n                    editor.isFeatureEnabled(ExperimentalFeatures.ReuseAllAncestorListElements),\n                    editor.isFeatureEnabled(ExperimentalFeatures.DisableListChain)\n                );\n            }\n        },\n        undefined /* beforeRunCallback */,\n        apiNameOverride || 'toggleListType'\n    );\n}\n\nfunction isNewList(vList: VList | null) {\n    const list = vList?.rootList;\n    if (list) {\n        return list.childElementCount === 0;\n    }\n    return false;\n}\n"]}