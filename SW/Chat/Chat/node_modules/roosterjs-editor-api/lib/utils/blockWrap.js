"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var blockFormat_1 = require("./blockFormat");
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * @internal
 * Toggle a tag at selection, if selection already contains elements of such tag,
 * the elements will be untagged and other elements will take no effect
 * @param editor The editor instance
 * @param wrapFunction  The wrap function
 * @param beforeRunCallback A callback function to run before looping all regions. If it returns false,
 * the loop for regions will be skipped
 */
function blockWrap(editor, wrapFunction, beforeRunCallback, apiName) {
    (0, blockFormat_1.default)(editor, function (region) {
        var blocks = (0, roosterjs_editor_dom_1.getSelectedBlockElementsInRegion)(region, true /*createBlockIfEmpty*/);
        var nodes = (0, roosterjs_editor_dom_1.collapseNodesInRegion)(region, blocks);
        if (nodes.length > 0) {
            if (nodes.length == 1) {
                var NodeTag = (0, roosterjs_editor_dom_1.getTagOfNode)(nodes[0]);
                if (NodeTag == 'BR') {
                    nodes = [(0, roosterjs_editor_dom_1.wrap)(nodes[0])];
                }
                else if (NodeTag == 'LI' || NodeTag == 'TD') {
                    nodes = (0, roosterjs_editor_dom_1.toArray)(nodes[0].childNodes);
                }
            }
            while (nodes[0] &&
                nodes[0].parentNode &&
                (0, roosterjs_editor_dom_1.isNodeInRegion)(region, nodes[0].parentNode) &&
                nodes.some(function (node) { return (0, roosterjs_editor_dom_1.getTagOfNode)(node) == 'LI'; })) {
                var result = (0, roosterjs_editor_dom_1.splitBalancedNodeRange)(nodes);
                nodes = result ? [result] : [];
            }
            wrapFunction(nodes);
        }
    }, beforeRunCallback, apiName);
}
exports.default = blockWrap;
//# sourceMappingURL=blockWrap.js.map