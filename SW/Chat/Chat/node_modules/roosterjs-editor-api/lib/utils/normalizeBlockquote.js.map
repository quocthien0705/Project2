{"version":3,"file":"normalizeBlockquote.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/normalizeBlockquote.ts"],"names":[],"mappings":";;AAAA,6DAAoG;AAEpG;;;;;GAKG;AACH,SAAwB,mBAAmB,CAAC,IAAU,EAAE,aAAsB;IAC1E,IAAI,IAAA,qCAAc,EAAC,IAAI,EAAE,aAAa,CAAC,EAAE;QACrC,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QAEvC,IAAI,KAAK,GAAG,IAAA,iDAA0B,EAAC,IAAI,EAAE,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACjF,IAAI,CAAC,KAAK,EAAE;YACR,OAAO;SACV;QACD,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,aAAa,EAAE;YACf,IAAI,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnC,OAAO;aACV;YACD,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,OAAO,KAAK,EAAE;YACV,IAAI,SAAS,IAAI,QAAQ,EAAE;gBACvB,IAAI,SAAS,EAAE;oBACX,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;oBAC9C,KAAK,CAAC,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC;iBAC1C;qBAAM;oBACH,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;oBAChD,KAAK,CAAC,KAAK,CAAC,eAAe,GAAG,MAAM,CAAC;iBACxC;aACJ;iBAAM;gBACH,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gBAC9C,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;aACnD;YAED,KAAK,GAAG,IAAA,iDAA0B,EAC9B,KAAK,CAAC,aAAa,EACnB,SAAS,CAAC,UAAU,EACpB,YAAY,CACf,CAAC;SACL;KACJ;AACL,CAAC;AAtCD,sCAsCC;AAED,SAAS,KAAK,CAAC,EAAW;IACtB,OAAO,IAAA,uCAAgB,EAAC,EAAE,EAAE,WAAW,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;AACzF,CAAC","sourcesContent":["import { findClosestElementAncestor, getComputedStyle, safeInstanceOf } from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * @param node start node to normalize\n * @param quotesHandled Optional parameter to prevent already modified quotes to be rechecked.\n * @returns\n */\nexport default function normalizeBlockquote(node: Node, quotesHandled?: Node[]): void {\n    if (safeInstanceOf(node, 'HTMLElement')) {\n        const alignment = node.style.textAlign;\n\n        let quote = findClosestElementAncestor(node, undefined /* root */, 'blockquote');\n        if (!quote) {\n            return;\n        }\n        const isNodeRTL = isRTL(node);\n\n        if (quotesHandled) {\n            if (quotesHandled.indexOf(quote) > -1) {\n                return;\n            }\n            quotesHandled.push(quote);\n        }\n\n        while (quote) {\n            if (alignment == 'center') {\n                if (isNodeRTL) {\n                    quote.style.removeProperty('marginInlineEnd');\n                    quote.style.marginInlineStart = 'auto';\n                } else {\n                    quote.style.removeProperty('marginInlineStart');\n                    quote.style.marginInlineEnd = 'auto';\n                }\n            } else {\n                quote.style.removeProperty('marginInlineEnd');\n                quote.style.removeProperty('marginInlineStart');\n            }\n\n            quote = findClosestElementAncestor(\n                quote.parentElement,\n                undefined /* root */,\n                'blockquote'\n            );\n        }\n    }\n}\n\nfunction isRTL(el: Element) {\n    return getComputedStyle(el, 'direction') == 'rtl' || el.getAttribute('dir') == 'rtl';\n}\n"]}