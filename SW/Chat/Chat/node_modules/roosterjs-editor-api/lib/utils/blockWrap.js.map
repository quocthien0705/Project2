{"version":3,"file":"blockWrap.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-api/lib/utils/blockWrap.ts"],"names":[],"mappings":";;AAAA,6CAAwC;AAExC,6DAQ8B;AAE9B;;;;;;;;GAQG;AACH,SAAwB,SAAS,CAC7B,MAAe,EACf,YAAqC,EACrC,iBAAgC,EAChC,OAAgB;IAEhB,IAAA,qBAAW,EACP,MAAM,EACN,UAAA,MAAM;QACF,IAAM,MAAM,GAAG,IAAA,uDAAgC,EAAC,MAAM,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACrF,IAAI,KAAK,GAAG,IAAA,4CAAqB,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAClD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBACnB,IAAM,OAAO,GAAG,IAAA,mCAAY,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,OAAO,IAAI,IAAI,EAAE;oBACjB,KAAK,GAAG,CAAC,IAAA,2BAAI,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5B;qBAAM,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;oBAC3C,KAAK,GAAG,IAAA,8BAAO,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;iBACxC;aACJ;YAED,OACI,KAAK,CAAC,CAAC,CAAC;gBACR,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU;gBACnB,IAAA,qCAAc,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAC3C,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAA,mCAAY,EAAC,IAAI,CAAC,IAAI,IAAI,EAA1B,CAA0B,CAAC,EAChD;gBACE,IAAM,MAAM,GAAG,IAAA,6CAAsB,EAAC,KAAK,CAAC,CAAC;gBAC7C,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;aAClC;YAED,YAAY,CAAC,KAAK,CAAC,CAAC;SACvB;IACL,CAAC,EACD,iBAAiB,EACjB,OAAO,CACV,CAAC;AACN,CAAC;AArCD,4BAqCC","sourcesContent":["import blockFormat from './blockFormat';\nimport type { IEditor } from 'roosterjs-editor-types';\nimport {\n    collapseNodesInRegion,\n    getSelectedBlockElementsInRegion,\n    getTagOfNode,\n    isNodeInRegion,\n    splitBalancedNodeRange,\n    toArray,\n    wrap,\n} from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * Toggle a tag at selection, if selection already contains elements of such tag,\n * the elements will be untagged and other elements will take no effect\n * @param editor The editor instance\n * @param wrapFunction  The wrap function\n * @param beforeRunCallback A callback function to run before looping all regions. If it returns false,\n * the loop for regions will be skipped\n */\nexport default function blockWrap(\n    editor: IEditor,\n    wrapFunction: (nodes: Node[]) => void,\n    beforeRunCallback: () => boolean,\n    apiName?: string\n): void {\n    blockFormat(\n        editor,\n        region => {\n            const blocks = getSelectedBlockElementsInRegion(region, true /*createBlockIfEmpty*/);\n            let nodes = collapseNodesInRegion(region, blocks);\n            if (nodes.length > 0) {\n                if (nodes.length == 1) {\n                    const NodeTag = getTagOfNode(nodes[0]);\n                    if (NodeTag == 'BR') {\n                        nodes = [wrap(nodes[0])];\n                    } else if (NodeTag == 'LI' || NodeTag == 'TD') {\n                        nodes = toArray(nodes[0].childNodes);\n                    }\n                }\n\n                while (\n                    nodes[0] &&\n                    nodes[0].parentNode &&\n                    isNodeInRegion(region, nodes[0].parentNode) &&\n                    nodes.some(node => getTagOfNode(node) == 'LI')\n                ) {\n                    const result = splitBalancedNodeRange(nodes);\n                    nodes = result ? [result] : [];\n                }\n\n                wrapFunction(nodes);\n            }\n        },\n        beforeRunCallback,\n        apiName\n    );\n}\n"]}