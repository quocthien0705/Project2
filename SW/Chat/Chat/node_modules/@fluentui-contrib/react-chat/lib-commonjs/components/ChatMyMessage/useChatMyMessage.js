"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useChatMyMessage_unstable", {
    enumerable: true,
    get: function() {
        return useChatMyMessage_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactcomponents = require("@fluentui/react-components");
const _reacticons = require("@fluentui/react-icons");
const _getDecorationIcon = require("../utils/getDecorationIcon");
const _useChatMessageFocusableGroup = require("../utils/useChatMessageFocusableGroup");
const _useChatMessagePopoverTrigger = require("../utils/useChatMessagePopoverTrigger");
const useChatMyMessage_unstable = (props, ref)=>{
    const { actions , attached , author , body , decoration , decorationIcon , decorationLabel , details , reactions , root , showAnimation , status , statusIcon , statusMessage , timestamp  } = props;
    /**
   * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.
   * The primary slot is the `body` slot in this case.
   */ const nativeProps = (0, _reactcomponents.getPartitionedNativeProps)({
        primarySlotTagName: 'div',
        props,
        excludedPropNames: [
            'tabIndex'
        ]
    });
    const state = {
        attached,
        decoration,
        showAnimation,
        status,
        body: (0, _reactcomponents.resolveShorthand)(body, {
            required: true,
            defaultProps: {
                ref,
                ...nativeProps.primary,
                tabIndex: 0
            }
        }),
        root: (0, _reactcomponents.resolveShorthand)(root, {
            required: true,
            defaultProps: nativeProps.root
        }),
        actions: (0, _reactcomponents.resolveShorthand)(actions),
        author: (0, _reactcomponents.resolveShorthand)(author),
        decorationIcon: (0, _reactcomponents.resolveShorthand)(decorationIcon, {
            required: !!decoration
        }),
        decorationLabel: (0, _reactcomponents.resolveShorthand)(decorationLabel),
        details: (0, _reactcomponents.resolveShorthand)(details),
        reactions: (0, _reactcomponents.resolveShorthand)(reactions),
        statusIcon: (0, _reactcomponents.resolveShorthand)(statusIcon, {
            required: !!status
        }),
        statusMessage: (0, _reactcomponents.resolveShorthand)(statusMessage),
        timestamp: (0, _reactcomponents.resolveShorthand)(timestamp),
        components: {
            actions: 'div',
            author: 'div',
            body: 'div',
            decorationIcon: 'div',
            decorationLabel: 'div',
            details: 'div',
            reactions: 'div',
            root: 'div',
            statusIcon: 'div',
            statusMessage: 'div',
            timestamp: 'span'
        }
    };
    updateStatusWithIcon(state);
    if (state.decorationIcon && !state.decorationIcon.children) {
        state.decorationIcon.children = (0, _getDecorationIcon.getDecorationIcon)(decoration);
    }
    (0, _useChatMessagePopoverTrigger.useChatMessagePopoverTrigger)(state);
    (0, _useChatMessageFocusableGroup.useChatMessageFocusableGroup)(state);
    return state;
};
const updateStatusWithIcon = (state)=>{
    if (state.statusIcon && !state.statusIcon.children) {
        switch(state.status){
            case 'sending':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.Circle16Regular, null);
                break;
            case 'received':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.CheckmarkCircle16Regular, null);
                break;
            case 'read':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.Eye16Filled, null);
                break;
            case 'failed':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.Warning16Filled, null);
                break;
            case 'blocked':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.Flag16Filled, null);
                break;
            case 'scheduled':
                state.statusIcon.children = /*#__PURE__*/ _react.createElement(_reacticons.Clock16Regular, null);
                break;
        }
    }
};

//# sourceMappingURL=useChatMyMessage.js.map