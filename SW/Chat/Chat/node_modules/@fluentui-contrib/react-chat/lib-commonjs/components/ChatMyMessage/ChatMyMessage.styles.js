"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    chatMyMessageClassNames: function() {
        return chatMyMessageClassNames;
    },
    useChatMyMessageStyles_unstable: function() {
        return useChatMyMessageStyles_unstable;
    }
});
const _reactcomponents = require("@fluentui/react-components");
const _sharedmixins = require("../styles/shared.mixins");
const _sharedstyles = require("../styles/shared.styles");
const useChatMyMessageClasses = (0, _reactcomponents.makeStyles)({
    container: {
        alignSelf: 'end',
        marginLeft: '50px',
        columnGap: '8px',
        display: 'grid',
        gridTemplateAreas: `
      "body    status"
      "actions .     "
    `,
        gridTemplateColumns: 'auto 16px',
        paddingTop: '16px'
    },
    attachedContainer: {
        paddingTop: '2px'
    },
    statusIcon: {
        gridColumnStart: 'status',
        gridColumnEnd: 'status',
        gridRowStart: 'status',
        gridRowEnd: 'status',
        alignSelf: 'end',
        color: _reactcomponents.tokens.colorBrandForeground1
    },
    statusIconFailed: _sharedmixins.statusRedStyles,
    actions: {
        gridColumnStart: 'actions',
        gridColumnEnd: 'actions',
        gridRowStart: 'actions',
        gridRowEnd: 'actions',
        justifySelf: 'end'
    }
});
const useChatMyMessageBodyClasses = (0, _reactcomponents.makeStyles)({
    base: {
        ..._sharedmixins.bodyBaseStyles,
        gridColumnStart: 'body',
        gridColumnEnd: 'body',
        gridRowStart: 'body',
        gridRowEnd: 'body',
        flexShrink: 0,
        ..._reactcomponents.shorthands.borderRadius('4px'),
        ..._reactcomponents.shorthands.padding('8px', '16px', '16px', '16px'),
        backgroundColor: _reactcomponents.tokens.colorBrandBackground2,
        justifySelf: 'end'
    },
    hasReactions: {
        marginBottom: '12px'
    },
    hasDecorationIcon: {
        ..._reactcomponents.shorthands.borderLeft('3px', 'solid', _reactcomponents.tokens.colorPaletteRedForeground3)
    },
    details: {
        display: 'flex',
        columnGap: '6px',
        alignItems: 'center'
    },
    statusMessage: {
        color: _reactcomponents.tokens.colorPaletteRedForeground3
    },
    decorationLabel: {
        fontWeight: 700,
        fontSize: '12px',
        lineHeight: '16px',
        textTransform: 'uppercase'
    },
    reactions: {
        ..._sharedmixins.reactionsBaseStyles,
        paddingLeft: '20px',
        right: '0px',
        justifyContent: 'end'
    },
    decorationIcon: {
        color: 'white',
        backgroundColor: _reactcomponents.tokens.colorPaletteRedForeground3,
        height: '24px',
        width: '24px',
        ..._reactcomponents.shorthands.borderRadius('50%'),
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        fontSize: '20px',
        transform: 'translateX(50%)',
        position: 'absolute',
        top: '4px',
        right: '0px'
    },
    nameLineWrapper: {
        display: 'flex',
        columnGap: '12px',
        fontSize: '12px',
        lineHeight: '16px',
        color: _reactcomponents.tokens.colorNeutralForeground3,
        alignItems: 'center'
    },
    screenReaderContainer: _sharedmixins.isOnlyReadableByScreenReaderStyles,
    animation: _sharedmixins.highlightAnimation
});
const chatMyMessageClassNames = {
    root: 'fui-ChatMyMessage',
    actions: 'fui-ChatMyMessage__actions',
    author: 'fui-ChatMyMessage__author',
    body: 'fui-ChatMyMessage__body',
    decorationIcon: 'fui-ChatMyMessage__decorationIcon',
    decorationLabel: 'fui-ChatMyMessage__decorationLabel',
    details: 'fui-ChatMyMessage__details',
    reactions: 'fui-ChatMyMessage__reactions',
    statusIcon: 'fui-ChatMyMessage__statusIcon',
    statusMessage: 'fui-ChatMyMessage__statusMessage',
    timestamp: 'fui-ChatMyMessage__timestamp'
};
const useChatMyMessageStyles_unstable = (state)=>{
    const classes = useChatMyMessageClasses();
    state.root.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.root, classes.container, state.attached && state.attached !== 'top' && classes.attachedContainer, state.root.className);
    const bodyClasses = useChatMyMessageBodyClasses();
    if (state.body) {
        state.body.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.body, bodyClasses.base, state.reactions && bodyClasses.hasReactions, state.decorationIcon && bodyClasses.hasDecorationIcon, state.showAnimation && bodyClasses.animation, state.body.className);
    }
    if (state.timestamp) {
        state.timestamp.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.timestamp, state.attached && state.attached !== 'top' && bodyClasses.screenReaderContainer, state.timestamp.className);
    }
    if (state.details) {
        state.details.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.details, bodyClasses.details, state.details.className);
    }
    if (state.statusMessage) {
        state.statusMessage.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.statusMessage, bodyClasses.statusMessage, state.statusMessage.className);
    }
    const decorationClasses = (0, _sharedstyles.useDecorationClasses)();
    if (state.decorationLabel) {
        state.decorationLabel.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.decorationLabel, bodyClasses.decorationLabel, state.decoration && decorationClasses.default, state.decorationLabel.className);
    }
    if (state.decorationIcon) {
        state.decorationIcon.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.decorationIcon, bodyClasses.decorationIcon, state.decorationIcon.className);
    }
    if (state.reactions) {
        state.reactions.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.reactions, bodyClasses.reactions, state.reactions.className);
    }
    if (state.author) {
        state.author.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.author, bodyClasses.screenReaderContainer, state.author.className);
    }
    if (state.statusIcon) {
        state.statusIcon.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.statusIcon, classes.statusIcon, (state.status === 'failed' || state.status === 'blocked') && classes.statusIconFailed, state.statusIcon.className);
    }
    if (state.actions) {
        state.actions.className = (0, _reactcomponents.mergeClasses)(chatMyMessageClassNames.actions, classes.actions, state.actions.className);
    }
    state.nameLineClassName = bodyClasses.nameLineWrapper;
    return state;
};

//# sourceMappingURL=ChatMyMessage.styles.js.map