"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    chatMessageClassNames: function() {
        return chatMessageClassNames;
    },
    useChatMessageClasses: function() {
        return useChatMessageClasses;
    },
    useChatMessageBodyClasses: function() {
        return useChatMessageBodyClasses;
    },
    useChatMessageStyles_unstable: function() {
        return useChatMessageStyles_unstable;
    }
});
const _reactcomponents = require("@fluentui/react-components");
const _sharedmixins = require("../styles/shared.mixins");
const _sharedstyles = require("../styles/shared.styles");
const chatMessageClassNames = {
    root: 'fui-ChatMessage',
    author: 'fui-ChatMessage__author',
    avatar: 'fui-ChatMessage__avatar',
    body: 'fui-ChatMessage__body',
    decorationIcon: 'fui-ChatMessage__decorationIcon',
    decorationLabel: 'fui-ChatMessage__decorationLabel',
    details: 'fui-ChatMessage__details',
    reactions: 'fui-ChatMessage__reactions',
    timestamp: 'fui-ChatMessage__timestamp'
};
const useChatMessageClasses = (0, _reactcomponents.makeStyles)({
    container: {
        display: 'flex',
        columnGap: '8px',
        paddingTop: '16px'
    },
    attachedContainer: {
        paddingTop: '2px'
    },
    avatarLessContainer: {
        marginLeft: '40px'
    },
    avatar: {
        minWidth: '32px'
    }
});
const useChatMessageBodyClasses = (0, _reactcomponents.makeStyles)({
    base: {
        ..._sharedmixins.bodyBaseStyles,
        ..._reactcomponents.shorthands.borderRadius('4px'),
        ..._reactcomponents.shorthands.padding('8px', '16px', '16px', '16px'),
        maxWidth: 'calc(100% - 100px)',
        backgroundColor: _reactcomponents.tokens.colorNeutralBackground3
    },
    hasReactions: {
        marginBottom: '12px'
    },
    hasDecorationIcon: {
        ..._reactcomponents.shorthands.borderLeft('3px', 'solid', _reactcomponents.tokens.colorPaletteRedForeground3)
    },
    nameLineWrapper: {
        display: 'flex',
        columnGap: '12px',
        fontSize: '12px',
        lineHeight: '16px',
        color: _reactcomponents.tokens.colorNeutralForeground3,
        alignItems: 'center'
    },
    details: {
        display: 'flex',
        columnGap: '6px',
        alignItems: 'center'
    },
    decorationLabel: {
        fontWeight: 700,
        fontSize: '12px',
        lineHeight: '16px',
        textTransform: 'uppercase'
    },
    reactions: {
        ..._sharedmixins.reactionsBaseStyles,
        paddingRight: '20px'
    },
    decorationIcon: {
        color: 'white',
        backgroundColor: _reactcomponents.tokens.colorPaletteRedForeground3,
        height: '24px',
        width: '24px',
        ..._reactcomponents.shorthands.borderRadius('50%'),
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        fontSize: '20px',
        transform: 'translateX(50%)',
        position: 'absolute',
        top: '4px',
        right: '0px'
    },
    screenReaderContainer: _sharedmixins.isOnlyReadableByScreenReaderStyles,
    animation: _sharedmixins.highlightAnimation
});
const useChatMessageStyles_unstable = (state)=>{
    const classes = useChatMessageClasses();
    state.root.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.root, classes.container, state.attached && state.attached !== 'top' && classes.attachedContainer, !state.avatar && classes.avatarLessContainer, state.root.className);
    if (state.avatar) {
        state.avatar.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.avatar, classes.avatar, state.avatar.className);
    }
    const bodyClasses = useChatMessageBodyClasses();
    if (state.body) {
        state.body.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.body, bodyClasses.base, state.reactions && bodyClasses.hasReactions, state.decorationIcon && bodyClasses.hasDecorationIcon, state.showAnimation && bodyClasses.animation, state.body.className);
    }
    if (state.author) {
        state.author.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.author, state.attached && state.attached !== 'top' && bodyClasses.screenReaderContainer, state.author.className);
    }
    if (state.timestamp) {
        state.timestamp.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.timestamp, state.attached && state.attached !== 'top' && bodyClasses.screenReaderContainer, state.timestamp.className);
    }
    if (state.details) {
        state.details.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.details, bodyClasses.details, state.details.className);
    }
    const decorationClasses = (0, _sharedstyles.useDecorationClasses)();
    if (state.decorationLabel) {
        state.decorationLabel.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.decorationLabel, bodyClasses.decorationLabel, state.decoration && decorationClasses.default, state.decoration === 'mention' && decorationClasses.mention, state.decorationLabel.className);
    }
    if (state.decorationIcon) {
        state.decorationIcon.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.decorationIcon, bodyClasses.decorationIcon, state.decorationIcon.className);
    }
    if (state.reactions) {
        state.reactions.className = (0, _reactcomponents.mergeClasses)(chatMessageClassNames.reactions, bodyClasses.reactions, state.reactions.className);
    }
    state.nameLineClassName = bodyClasses.nameLineWrapper;
    return state;
};

//# sourceMappingURL=ChatMessage.styles.js.map