import * as React from 'react';
import { getPartitionedNativeProps, resolveShorthand } from '@fluentui/react-components';
import { CheckmarkCircle16Regular, Circle16Regular, Clock16Regular, Eye16Filled, Flag16Filled, Warning16Filled } from '@fluentui/react-icons';
import { getDecorationIcon } from '../utils/getDecorationIcon';
import { useChatMessageFocusableGroup } from '../utils/useChatMessageFocusableGroup';
import { useChatMessagePopoverTrigger } from '../utils/useChatMessagePopoverTrigger';
export const useChatMyMessage_unstable = (props, ref)=>{
    const { actions , attached , author , body , decoration , decorationIcon , decorationLabel , details , reactions , root , showAnimation , status , statusIcon , statusMessage , timestamp  } = props;
    /**
   * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.
   * The primary slot is the `body` slot in this case.
   */ const nativeProps = getPartitionedNativeProps({
        primarySlotTagName: 'div',
        props,
        excludedPropNames: [
            'tabIndex'
        ]
    });
    const state = {
        attached,
        decoration,
        showAnimation,
        status,
        body: resolveShorthand(body, {
            required: true,
            defaultProps: {
                ref,
                ...nativeProps.primary,
                tabIndex: 0
            }
        }),
        root: resolveShorthand(root, {
            required: true,
            defaultProps: nativeProps.root
        }),
        actions: resolveShorthand(actions),
        author: resolveShorthand(author),
        decorationIcon: resolveShorthand(decorationIcon, {
            required: !!decoration
        }),
        decorationLabel: resolveShorthand(decorationLabel),
        details: resolveShorthand(details),
        reactions: resolveShorthand(reactions),
        statusIcon: resolveShorthand(statusIcon, {
            required: !!status
        }),
        statusMessage: resolveShorthand(statusMessage),
        timestamp: resolveShorthand(timestamp),
        components: {
            actions: 'div',
            author: 'div',
            body: 'div',
            decorationIcon: 'div',
            decorationLabel: 'div',
            details: 'div',
            reactions: 'div',
            root: 'div',
            statusIcon: 'div',
            statusMessage: 'div',
            timestamp: 'span'
        }
    };
    updateStatusWithIcon(state);
    if (state.decorationIcon && !state.decorationIcon.children) {
        state.decorationIcon.children = getDecorationIcon(decoration);
    }
    useChatMessagePopoverTrigger(state);
    useChatMessageFocusableGroup(state);
    return state;
};
const updateStatusWithIcon = (state)=>{
    if (state.statusIcon && !state.statusIcon.children) {
        switch(state.status){
            case 'sending':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(Circle16Regular, null);
                break;
            case 'received':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(CheckmarkCircle16Regular, null);
                break;
            case 'read':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(Eye16Filled, null);
                break;
            case 'failed':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(Warning16Filled, null);
                break;
            case 'blocked':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(Flag16Filled, null);
                break;
            case 'scheduled':
                state.statusIcon.children = /*#__PURE__*/ React.createElement(Clock16Regular, null);
                break;
        }
    }
};

//# sourceMappingURL=useChatMyMessage.js.map