{"version":3,"file":"getStyleBasedFormatState.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/getStyleBasedFormatState.ts"],"names":[],"mappings":"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","sourcesContent":["import { contains, getComputedStyles } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\nimport type { EditorCore, GetStyleBasedFormatState } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * @internal\r\n * Get style based format state from current selection, including font name/size and colors\r\n * @param core The EditorCore objects\r\n * @param node The node to get style from\r\n */\r\nexport const getStyleBasedFormatState: GetStyleBasedFormatState = (\r\n    core: EditorCore,\r\n    node: Node | null\r\n) => {\r\n    if (!node) {\r\n        return {};\r\n    }\r\n\r\n    let override: string[] = [];\r\n    const pendableFormatSpan = core.pendingFormatState.pendableFormatSpan;\r\n\r\n    if (pendableFormatSpan) {\r\n        override = [\r\n            pendableFormatSpan.style.fontFamily,\r\n            pendableFormatSpan.style.fontSize,\r\n            pendableFormatSpan.style.color,\r\n            pendableFormatSpan.style.backgroundColor,\r\n        ];\r\n    }\r\n\r\n    const styles = node\r\n        ? getComputedStyles(node, [\r\n              'font-family',\r\n              'font-size',\r\n              'color',\r\n              'background-color',\r\n              'line-height',\r\n              'margin-top',\r\n              'margin-bottom',\r\n              'text-align',\r\n              'direction',\r\n              'font-weight',\r\n          ])\r\n        : [];\r\n    const { contentDiv, darkColorHandler } = core;\r\n\r\n    let styleTextColor: string | undefined;\r\n    let styleBackColor: string | undefined;\r\n\r\n    while (\r\n        node &&\r\n        contains(contentDiv, node, true /*treatSameNodeAsContain*/) &&\r\n        !(styleTextColor && styleBackColor)\r\n    ) {\r\n        if (node.nodeType == NodeType.Element) {\r\n            const element = node as HTMLElement;\r\n\r\n            styleTextColor = styleTextColor || element.style.getPropertyValue('color');\r\n            styleBackColor = styleBackColor || element.style.getPropertyValue('background-color');\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n\r\n    if (!core.lifecycle.isDarkMode && node == core.contentDiv) {\r\n        styleTextColor = styleTextColor || styles[2];\r\n        styleBackColor = styleBackColor || styles[3];\r\n    }\r\n\r\n    const textColor = darkColorHandler.parseColorValue(override[2] || styleTextColor);\r\n    const backColor = darkColorHandler.parseColorValue(override[3] || styleBackColor);\r\n\r\n    return {\r\n        fontName: override[0] || styles[0],\r\n        fontSize: override[1] || styles[1],\r\n        textColor: textColor.lightModeColor,\r\n        backgroundColor: backColor.lightModeColor,\r\n        textColors: textColor.darkModeColor\r\n            ? {\r\n                  lightModeColor: textColor.lightModeColor,\r\n                  darkModeColor: textColor.darkModeColor,\r\n              }\r\n            : undefined,\r\n        backgroundColors: backColor.darkModeColor\r\n            ? {\r\n                  lightModeColor: backColor.lightModeColor,\r\n                  darkModeColor: backColor.darkModeColor,\r\n              }\r\n            : undefined,\r\n        lineHeight: styles[4],\r\n        marginTop: styles[5],\r\n        marginBottom: styles[6],\r\n        textAlign: styles[7],\r\n        direction: styles[8],\r\n        fontWeight: styles[9],\r\n    };\r\n};\r\n"]}