{"version":3,"file":"attachDomEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/attachDomEvent.ts"],"names":[],"mappings":";;;AAAA,6DAAqD;AASrD;;;;;;;GAOG;AACI,IAAM,cAAc,GAAmB,UAC1C,IAAgB,EAChB,QAAyC;IAEzC,IAAM,SAAS,GAAG,IAAA,oCAAa,EAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;QAC7C,IAAA,KAAsC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAjE,eAAe,qBAAA,EAAE,cAAc,oBAAkC,CAAC;QAC1E,IAAM,SAAS,GAAG,GAAgC,CAAC;QACnD,IAAM,OAAO,GAAG,UAAC,KAA4C;YACzD,IAAI,cAAc,EAAE;gBAChB,cAAc,CAAC,KAAK,CAAC,CAAC;aACzB;YACD,IAAI,eAAe,IAAI,IAAI,EAAE;gBACzB,IAAI,CAAC,GAAG,CAAC,YAAY,CACjB,IAAI,EACY;oBACZ,SAAS,EAAE,eAAe;oBAC1B,QAAQ,EAAE,KAAK;iBAClB,EACD,KAAK,CAAC,aAAa,CACtB,CAAC;aACL;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAErD,OAAO;YACH,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,OAAO,cAAM,OAAA,SAAS,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,EAAE,EAAX,CAAW,CAAC,EAA3C,CAA2C,CAAC;AAC7D,CAAC,CAAC;AA9BW,QAAA,cAAc,kBA8BzB;AAEF,SAAS,cAAc,CAAC,UAA2B;IAC/C,IAAI,MAAM,GAA0B;QAChC,eAAe,EAAE,IAAI;QACrB,cAAc,EAAE,IAAI;KACvB,CAAC;IAEF,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAChC,MAAM,CAAC,eAAe,GAAG,UAAU,CAAC;KACvC;SAAM,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;QACzC,MAAM,CAAC,cAAc,GAAG,UAAU,CAAC;KACtC;SAAM,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QACvC,MAAM,GAAG,UAAU,CAAC;KACvB;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import { getObjectKeys } from 'roosterjs-editor-dom';\nimport type {\n    AttachDomEvent,\n    DOMEventHandler,\n    DOMEventHandlerObject,\n    EditorCore,\n    PluginDomEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Attach a DOM event to the editor content DIV\n * @param core The EditorCore object\n * @param eventName The DOM event name\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\n */\nexport const attachDomEvent: AttachDomEvent = (\n    core: EditorCore,\n    eventMap: Record<string, DOMEventHandler>\n) => {\n    const disposers = getObjectKeys(eventMap || {}).map(key => {\n        const { pluginEventType, beforeDispatch } = extractHandler(eventMap[key]);\n        const eventName = key as keyof HTMLElementEventMap;\n        const onEvent = (event: HTMLElementEventMap[typeof eventName]) => {\n            if (beforeDispatch) {\n                beforeDispatch(event);\n            }\n            if (pluginEventType != null) {\n                core.api.triggerEvent(\n                    core,\n                    <PluginDomEvent>{\n                        eventType: pluginEventType,\n                        rawEvent: event,\n                    },\n                    false /*broadcast*/\n                );\n            }\n        };\n\n        core.contentDiv.addEventListener(eventName, onEvent);\n\n        return () => {\n            core.contentDiv.removeEventListener(eventName, onEvent);\n        };\n    });\n    return () => disposers.forEach(disposers => disposers());\n};\n\nfunction extractHandler(handlerObj: DOMEventHandler): DOMEventHandlerObject {\n    let result: DOMEventHandlerObject = {\n        pluginEventType: null,\n        beforeDispatch: null,\n    };\n\n    if (typeof handlerObj === 'number') {\n        result.pluginEventType = handlerObj;\n    } else if (typeof handlerObj === 'function') {\n        result.beforeDispatch = handlerObj;\n    } else if (typeof handlerObj === 'object') {\n        result = handlerObj;\n    }\n    return result;\n}\n"]}