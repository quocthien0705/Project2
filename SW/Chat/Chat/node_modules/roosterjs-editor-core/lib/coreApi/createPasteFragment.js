"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPasteFragment = void 0;
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * @internal
 * Create a DocumentFragment for paste from a ClipboardData
 * @param core The EditorCore object.
 * @param clipboardData Clipboard data retrieved from clipboard
 * @param position The position to paste to
 * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any
 * @param applyCurrentStyle True if apply format of current selection to the pasted content,
 * false to keep original format
 * @param pasteAsImage True if the image should be pasted as image
 */
var createPasteFragment = function (core, clipboardData, position, pasteAsText, applyCurrentStyle, pasteAsImage) {
    if (pasteAsImage === void 0) { pasteAsImage = false; }
    if (!clipboardData) {
        return null;
    }
    var pasteType = (0, roosterjs_editor_dom_1.getPasteType)(pasteAsText, applyCurrentStyle, pasteAsImage);
    // Step 1: Prepare BeforePasteEvent object
    var event = createBeforePasteEvent(core, clipboardData, pasteType);
    return createFragmentFromClipboardData(core, clipboardData, position, pasteAsText, applyCurrentStyle, pasteAsImage, event);
};
exports.createPasteFragment = createPasteFragment;
function createBeforePasteEvent(core, clipboardData, pasteType) {
    var options = (0, roosterjs_editor_dom_1.createDefaultHtmlSanitizerOptions)();
    // Remove "caret-color" style generated by Safari to make sure caret shows in right color after paste
    options.cssStyleCallbacks['caret-color'] = function () { return false; };
    return {
        eventType: 10 /* BeforePaste */,
        clipboardData: clipboardData,
        fragment: core.contentDiv.ownerDocument.createDocumentFragment(),
        sanitizingOption: options,
        htmlBefore: '',
        htmlAfter: '',
        htmlAttributes: {},
        pasteType: pasteType,
    };
}
/**
 * Create a DocumentFragment for paste from a ClipboardData
 * @param core The EditorCore object.
 * @param clipboardData Clipboard data retrieved from clipboard
 * @param position The position to paste to
 * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any
 * @param applyCurrentStyle True if apply format of current selection to the pasted content,
 * @param pasteAsImage Whether to force paste as image
 * @param event Event to trigger.
 * false to keep original format
 */
function createFragmentFromClipboardData(core, clipboardData, position, pasteAsText, applyCurrentStyle, pasteAsImage, event) {
    var fragment = event.fragment;
    var rawHtml = clipboardData.rawHtml, text = clipboardData.text, imageDataUri = clipboardData.imageDataUri;
    var doc = rawHtml
        ? new DOMParser().parseFromString(core.trustedHTMLHandler(rawHtml), 'text/html')
        : undefined;
    // Step 2: Retrieve Metadata from Html and the Html that was copied.
    (0, roosterjs_editor_dom_1.retrieveMetadataFromClipboard)(doc, event, core.trustedHTMLHandler);
    // Step 3: Fill the BeforePasteEvent object, especially the fragment for paste
    if ((pasteAsImage && imageDataUri) || (!pasteAsText && !text && imageDataUri)) {
        // Paste image
        (0, roosterjs_editor_dom_1.handleImagePaste)(imageDataUri, fragment);
    }
    else if (!pasteAsText && rawHtml && doc ? doc.body : false) {
        (0, roosterjs_editor_dom_1.moveChildNodes)(fragment, doc === null || doc === void 0 ? void 0 : doc.body);
        if (applyCurrentStyle && position) {
            var format_1 = getCurrentFormat(core, position.node);
            (0, roosterjs_editor_dom_1.applyTextStyle)(fragment, function (node) { return (0, roosterjs_editor_dom_1.applyFormat)(node, format_1); });
        }
    }
    else if (text) {
        // Paste text
        (0, roosterjs_editor_dom_1.handleTextPaste)(text, position, fragment);
    }
    // Step 4: Trigger BeforePasteEvent so that plugins can do proper change before paste, when the type of paste is different than Plain Text
    if (event.pasteType !== 1 /* AsPlainText */) {
        core.api.triggerEvent(core, event, true /*broadcast*/);
    }
    // Step 5. Sanitize the fragment before paste to make sure the content is safe
    (0, roosterjs_editor_dom_1.sanitizePasteContent)(event, position);
    return fragment;
}
function getCurrentFormat(core, node) {
    var pendableFormat = core.api.getPendableFormatState(core, true /** forceGetStateFromDOM*/);
    var styleBasedFormat = core.api.getStyleBasedFormatState(core, node);
    return {
        fontFamily: styleBasedFormat.fontName,
        fontSize: styleBasedFormat.fontSize,
        textColor: styleBasedFormat.textColor,
        backgroundColor: styleBasedFormat.backgroundColor,
        textColors: styleBasedFormat.textColors,
        backgroundColors: styleBasedFormat.backgroundColors,
        bold: pendableFormat.isBold,
        italic: pendableFormat.isItalic,
        underline: pendableFormat.isUnderline,
    };
}
//# sourceMappingURL=createPasteFragment.js.map