{"version":3,"file":"setContent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/setContent.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ChangeSource,\n    ColorTransformDirection,\n    PluginEventType,\n    SelectionRangeTypes,\n} from 'roosterjs-editor-types';\nimport {\n    createRange,\n    extractContentMetadata,\n    queryElements,\n    restoreContentWithEntityPlaceholder,\n} from 'roosterjs-editor-dom';\nimport type { ContentMetadata, EditorCore, SetContent } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n * if triggerContentChangedEvent is set to true\n * @param core The EditorCore object\n * @param content HTML content to set in\n * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n * @param metadata @optional Metadata of the content that helps editor know the selection and color mode.\n * If not passed, we will treat content as in light mode without selection\n */\nexport const setContent: SetContent = (\n    core: EditorCore,\n    content: string,\n    triggerContentChangedEvent: boolean,\n    metadata?: ContentMetadata\n) => {\n    let contentChanged = false;\n    if (core.contentDiv.innerHTML != content) {\n        core.api.triggerEvent(\n            core,\n            {\n                eventType: PluginEventType.BeforeSetContent,\n                newContent: content,\n            },\n            true /*broadcast*/\n        );\n\n        const entities = core.entity.entityMap;\n        const html = content || '';\n        const body = new DOMParser().parseFromString(\n            core.trustedHTMLHandler?.(html) ?? html,\n            'text/html'\n        ).body;\n\n        restoreContentWithEntityPlaceholder(body, core.contentDiv, entities);\n\n        const metadataFromContent = extractContentMetadata(core.contentDiv);\n        metadata = metadata || metadataFromContent;\n        selectContentMetadata(core, metadata);\n        contentChanged = true;\n    }\n\n    const isDarkMode = core.lifecycle.isDarkMode;\n\n    if ((!metadata && isDarkMode) || (metadata && !!metadata.isDarkMode != !!isDarkMode)) {\n        core.api.transformColor(\n            core,\n            core.contentDiv,\n            false /*includeSelf*/,\n            null /*callback*/,\n            isDarkMode ? ColorTransformDirection.LightToDark : ColorTransformDirection.DarkToLight,\n            true /*forceTransform*/,\n            metadata?.isDarkMode\n        );\n        contentChanged = true;\n    }\n\n    if (triggerContentChangedEvent && contentChanged) {\n        core.api.triggerEvent(\n            core,\n            {\n                eventType: PluginEventType.ContentChanged,\n                source: ChangeSource.SetContent,\n            },\n            false /*broadcast*/\n        );\n    }\n};\n\nfunction selectContentMetadata(core: EditorCore, metadata: ContentMetadata | undefined) {\n    if (!core.lifecycle.shadowEditSelectionPath && metadata) {\n        core.domEvent.tableSelectionRange = null;\n        core.domEvent.imageSelectionRange = null;\n        core.domEvent.selectionRange = null;\n\n        switch (metadata.type) {\n            case SelectionRangeTypes.Normal:\n                core.api.selectTable(core, null);\n                core.api.selectImage(core, null);\n\n                const range = createRange(core.contentDiv, metadata.start, metadata.end);\n                core.api.selectRange(core, range);\n                break;\n            case SelectionRangeTypes.TableSelection:\n                const table = queryElements(\n                    core.contentDiv,\n                    '#' + metadata.tableId\n                )[0] as HTMLTableElement;\n\n                if (table) {\n                    core.domEvent.tableSelectionRange = core.api.selectTable(core, table, metadata);\n                }\n                break;\n            case SelectionRangeTypes.ImageSelection:\n                const image = queryElements(\n                    core.contentDiv,\n                    '#' + metadata.imageId\n                )[0] as HTMLImageElement;\n\n                if (image) {\n                    core.domEvent.imageSelectionRange = core.api.selectImage(core, image);\n                }\n                break;\n        }\n    }\n}\n"]}