{"version":3,"file":"transformColor.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/transformColor.ts"],"names":[],"mappings":";;;AAIA;;;;;;;;;;GAUG;AACI,IAAM,cAAc,GAAmB,UAC1C,IAAgB,EAChB,QAAqB,EACrB,WAAoB,EACpB,QAA6B,EAC7B,SAAsE,EACtE,cAAwB,EACxB,YAA6B;IAA7B,6BAAA,EAAA,oBAA6B;IAGzB,IAAA,gBAAgB,GAEhB,IAAI,iBAFY,EACH,0BAA0B,GACvC,IAAI,qCADmC,CAClC;IACT,IAAM,UAAU,GAAG,SAAS,uBAAuC,CAAC;IACpE,IAAI,QAAQ,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;QAC3D,IAAM,WAAW,GAAG,0BAA0B;YAC1C,CAAC,CAAC,UAAC,OAAoB;gBACjB,0BAA0B,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;YACpF,CAAC;YACH,CAAC,CAAC,UAAC,OAAoB;gBACjB,gBAAgB,CAAC,qBAAqB,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YAC9E,CAAC,CAAC;QAER,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;KACvD;IAED,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC;AACjB,CAAC,CAAC;AA3BW,QAAA,cAAc,kBA2BzB;AAEF,SAAS,eAAe,CACpB,IAAU,EACV,WAA2C,EAC3C,WAAqB;IAErB,IAAI,WAAW,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QACpC,WAAW,CAAC,IAAI,CAAC,CAAC;KACrB;IAED,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE;QAChE,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;YACtB,WAAW,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,eAAe,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;KACvC;AACL,CAAC;AAED,8GAA8G;AAC9G,kHAAkH;AAClH,kEAAkE;AAClE,SAAS,aAAa,CAAC,IAAU;IAC7B,IAAM,WAAW,GAAgB,IAAI,CAAC;IACtC,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;AACrE,CAAC","sourcesContent":["import { ColorTransformDirection } from 'roosterjs-editor-types';\nimport type { EditorCore, TransformColor } from 'roosterjs-editor-types';\nimport type { CompatibleColorTransformDirection } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n * Edit and transform color of elements between light mode and dark mode\n * @param core The EditorCore object\n * @param rootNode The root HTML elements to transform\n * @param includeSelf True to transform the root node as well, otherwise false\n * @param callback The callback function to invoke before do color transformation\n * @param direction To specify the transform direction, light to dark, or dark to light\n * @param forceTransform By default this function will only work when editor core is in dark mode.\n * Pass true to this value to force do color transformation even editor core is in light mode\n */\nexport const transformColor: TransformColor = (\n    core: EditorCore,\n    rootNode: Node | null,\n    includeSelf: boolean,\n    callback: (() => void) | null,\n    direction: ColorTransformDirection | CompatibleColorTransformDirection,\n    forceTransform?: boolean,\n    fromDarkMode: boolean = false\n) => {\n    const {\n        darkColorHandler,\n        lifecycle: { onExternalContentTransform },\n    } = core;\n    const toDarkMode = direction == ColorTransformDirection.LightToDark;\n    if (rootNode && (forceTransform || core.lifecycle.isDarkMode)) {\n        const transformer = onExternalContentTransform\n            ? (element: HTMLElement) => {\n                  onExternalContentTransform(element, fromDarkMode, toDarkMode, darkColorHandler);\n              }\n            : (element: HTMLElement) => {\n                  darkColorHandler.transformElementColor(element, fromDarkMode, toDarkMode);\n              };\n\n        iterateElements(rootNode, transformer, includeSelf);\n    }\n\n    callback?.();\n};\n\nfunction iterateElements(\n    root: Node,\n    transformer: (element: HTMLElement) => void,\n    includeSelf?: boolean\n) {\n    if (includeSelf && isHTMLElement(root)) {\n        transformer(root);\n    }\n\n    for (let child = root.firstChild; child; child = child.nextSibling) {\n        if (isHTMLElement(child)) {\n            transformer(child);\n        }\n\n        iterateElements(child, transformer);\n    }\n}\n\n// This is not a strict check, we just need to make sure this element has style so that we can set style to it\n// We don't use safeInstanceOf() here since this function will be called very frequently when extract html content\n// in dark mode, so we need to make sure this check is fast enough\nfunction isHTMLElement(node: Node): node is HTMLElement {\n    const htmlElement = <HTMLElement>node;\n    return node.nodeType == Node.ELEMENT_NODE && !!htmlElement.style;\n}\n"]}