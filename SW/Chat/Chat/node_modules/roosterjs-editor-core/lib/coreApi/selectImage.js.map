{"version":3,"file":"selectImage.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/selectImage.ts"],"names":[],"mappings":";;;AAAA,mDAA8C;AAE9C,6DAM8B;AAG9B,IAAM,QAAQ,GAAG,eAAe,CAAC;AACjC,IAAM,cAAc,GAAG,aAAa,CAAC;AACrC,IAAM,QAAQ,GAAG,YAAY,CAAC;AAC9B,IAAM,8BAA8B,GAAG,SAAS,CAAC;AAEjD;;;;;GAKG;AACI,IAAM,WAAW,GAAgB,UAAC,IAAgB,EAAE,KAA8B;IACrF,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEf,IAAI,SAAS,GAA+B,IAAI,CAAC;IAEjD,IAAI,KAAK,EAAE;QACP,IAAM,KAAK,GAAG,IAAA,kCAAW,EAAC,KAAK,CAAC,CAAC;QAEjC,IAAA,qBAAW,EAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC7B,IAAA,qBAAW,EAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAE7C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,IAAA,kCAAW,EAAC,IAAI,+BAAQ,CAAC,KAAK,iBAAqB,CAAC,CAAC,CAAC;QAEjF,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEpB,SAAS,GAAG;YACR,IAAI,wBAAoC;YACxC,MAAM,EAAE,CAAC,KAAK,CAAC;YACf,KAAK,EAAE,KAAK;YACZ,eAAe,EAAE,KAAK,CAAC,SAAS;SACnC,CAAC;KACL;IAED,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAxBW,QAAA,WAAW,eAwBtB;AAEF,IAAM,MAAM,GAAG,UAAC,IAAgB,EAAE,KAAuB;IACrD,IAAA,+CAAwB,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IACtD,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IACjD,IAAA,yCAAkB,EAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,SAAS,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAChG,CAAC,CAAC;AAEF,IAAM,cAAc,GAAG,UAAC,IAAgB,EAAE,OAAe;IACrD,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;IACjC,IAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,IAAI,8BAA8B,CAAC;IAE/E,OAAO,MAAI,KAAK,UAAK,OAAO,uDAAkD,KAAK,oDAAiD,CAAC;AACzI,CAAC,CAAC;AAEF,IAAM,QAAQ,GAAG,UAAC,IAAgB;IAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;IAC1C,IAAA,2CAAoB,EAAC,GAAG,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import addUniqueId from './utils/addUniqueId';\nimport { PositionType, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport {\n    createRange,\n    Position,\n    removeGlobalCssStyle,\n    removeImportantStyleRule,\n    setGlobalCssStyles,\n} from 'roosterjs-editor-dom';\nimport type { EditorCore, ImageSelectionRange, SelectImage } from 'roosterjs-editor-types';\n\nconst IMAGE_ID = 'imageSelected';\nconst CONTENT_DIV_ID = 'contentDiv_';\nconst STYLE_ID = 'imageStyle';\nconst DEFAULT_SELECTION_BORDER_COLOR = '#DB626C';\n\n/**\n * @internal\n * Select a image and save data of the selected range\n * @param image Image to select\n * @returns Selected image information\n */\nexport const selectImage: SelectImage = (core: EditorCore, image: HTMLImageElement | null) => {\n    unselect(core);\n\n    let selection: ImageSelectionRange | null = null;\n\n    if (image) {\n        const range = createRange(image);\n\n        addUniqueId(image, IMAGE_ID);\n        addUniqueId(core.contentDiv, CONTENT_DIV_ID);\n\n        core.api.selectRange(core, createRange(new Position(image, PositionType.After)));\n\n        select(core, image);\n\n        selection = {\n            type: SelectionRangeTypes.ImageSelection,\n            ranges: [range],\n            image: image,\n            areAllCollapsed: range.collapsed,\n        };\n    }\n\n    return selection;\n};\n\nconst select = (core: EditorCore, image: HTMLImageElement) => {\n    removeImportantStyleRule(image, ['border', 'margin']);\n    const borderCSS = buildBorderCSS(core, image.id);\n    setGlobalCssStyles(core.contentDiv.ownerDocument, borderCSS, STYLE_ID + core.contentDiv.id);\n};\n\nconst buildBorderCSS = (core: EditorCore, imageId: string): string => {\n    const divId = core.contentDiv.id;\n    const color = core.imageSelectionBorderColor || DEFAULT_SELECTION_BORDER_COLOR;\n\n    return `#${divId} #${imageId} {outline-style: auto!important;outline-color: ${color}!important;caret-color: transparent!important;}`;\n};\n\nconst unselect = (core: EditorCore) => {\n    const doc = core.contentDiv.ownerDocument;\n    removeGlobalCssStyle(doc, STYLE_ID + core.contentDiv.id);\n};\n"]}