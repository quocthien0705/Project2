"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertNode = void 0;
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
function getInitialRange(core, option) {
    // Selection start replaces based on the current selection.
    // Range inserts based on a provided range.
    // Both have the potential to use the current selection to restore cursor position
    // So in both cases we need to store the selection state.
    var range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);
    var rangeToRestore = null;
    if (option.position == 5 /* Range */) {
        rangeToRestore = range;
        range = option.range;
    }
    else if (range) {
        rangeToRestore = range.cloneRange();
    }
    return { range: range, rangeToRestore: rangeToRestore };
}
/**
 * @internal
 * Insert a DOM node into editor content
 * @param core The EditorCore object. No op if null.
 * @param option An insert option object to specify how to insert the node
 */
var insertNode = function (core, node, option) {
    var _a;
    option = option || {
        position: 3 /* SelectionStart */,
        insertOnNewLine: false,
        updateCursor: true,
        replaceSelection: true,
        insertToRegionRoot: false,
    };
    var contentDiv = core.contentDiv;
    if (option.updateCursor) {
        core.api.focus(core);
    }
    if (option.position == 4 /* Outside */) {
        (_a = contentDiv.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(node, contentDiv.nextSibling);
        return true;
    }
    core.api.transformColor(core, node, true /*includeSelf*/, function () {
        var _a, _b;
        if (!option) {
            return;
        }
        switch (option.position) {
            case 0 /* Begin */:
            case 1 /* End */: {
                var isBegin = option.position == 0 /* Begin */;
                var block = (0, roosterjs_editor_dom_1.getFirstLastBlockElement)(contentDiv, isBegin);
                var insertedNode_1;
                if (block) {
                    var refNode = isBegin ? block.getStartNode() : block.getEndNode();
                    if (option.insertOnNewLine ||
                        refNode.nodeType == 3 /* Text */ ||
                        (0, roosterjs_editor_dom_1.isVoidHtmlElement)(refNode)) {
                        // For insert on new line, or refNode is text or void html element (HR, BR etc.)
                        // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the
                        // first and last node. Insert before 'hello' or after 'world', but still inside DIV
                        if ((0, roosterjs_editor_dom_1.safeInstanceOf)(node, 'DocumentFragment')) {
                            // if the node to be inserted is DocumentFragment, use its childNodes as insertedNode
                            // because insertBefore() returns an empty DocumentFragment
                            insertedNode_1 = (0, roosterjs_editor_dom_1.toArray)(node.childNodes);
                            (_a = refNode.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(node, isBegin ? refNode : refNode.nextSibling);
                        }
                        else {
                            insertedNode_1 = (_b = refNode.parentNode) === null || _b === void 0 ? void 0 : _b.insertBefore(node, isBegin ? refNode : refNode.nextSibling);
                        }
                    }
                    else {
                        // if the refNode can have child, use appendChild (which is like to insert as first/last child)
                        // i.e. <div>hello</div>, the content will be inserted before/after hello
                        insertedNode_1 = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);
                    }
                }
                else {
                    // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv
                    insertedNode_1 = contentDiv.appendChild(node);
                }
                // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,
                // add a DIV wrapping
                if (insertedNode_1 && option.insertOnNewLine) {
                    var nodes = Array.isArray(insertedNode_1) ? insertedNode_1 : [insertedNode_1];
                    if (!(0, roosterjs_editor_dom_1.isBlockElement)(nodes[0]) || !(0, roosterjs_editor_dom_1.isBlockElement)(nodes[nodes.length - 1])) {
                        (0, roosterjs_editor_dom_1.wrap)(nodes);
                    }
                }
                break;
            }
            case 2 /* DomEnd */:
                // Use appendChild to insert the node at the end of the content div.
                var insertedNode = contentDiv.appendChild(node);
                // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,
                // add a DIV wrapping
                if (insertedNode && option.insertOnNewLine && !(0, roosterjs_editor_dom_1.isBlockElement)(insertedNode)) {
                    (0, roosterjs_editor_dom_1.wrap)(insertedNode);
                }
                break;
            case 5 /* Range */:
            case 3 /* SelectionStart */:
                var _c = getInitialRange(core, option), range = _c.range, rangeToRestore = _c.rangeToRestore;
                if (!range) {
                    return;
                }
                // if to replace the selection and the selection is not collapsed, remove the the content at selection first
                if (option.replaceSelection && !range.collapsed) {
                    range.deleteContents();
                }
                var pos = roosterjs_editor_dom_1.Position.getStart(range);
                var blockElement = void 0;
                if (option.insertOnNewLine && option.insertToRegionRoot) {
                    pos = adjustInsertPositionRegionRoot(core, range, pos);
                }
                else if (option.insertOnNewLine &&
                    (blockElement = (0, roosterjs_editor_dom_1.getBlockElementAtNode)(contentDiv, pos.normalize().node))) {
                    pos = adjustInsertPositionNewLine(blockElement, core, pos);
                }
                else {
                    pos = (0, roosterjs_editor_dom_1.adjustInsertPosition)(contentDiv, node, pos, range);
                }
                var nodeForCursor = node.nodeType == 11 /* DocumentFragment */ ? node.lastChild : node;
                range = (0, roosterjs_editor_dom_1.createRange)(pos);
                range.insertNode(node);
                if (option.updateCursor && nodeForCursor) {
                    rangeToRestore = (0, roosterjs_editor_dom_1.createRange)(new roosterjs_editor_dom_1.Position(nodeForCursor, -3 /* After */).normalize());
                }
                if (rangeToRestore) {
                    core.api.selectRange(core, rangeToRestore);
                }
                break;
        }
    }, 0 /* LightToDark */);
    return true;
};
exports.insertNode = insertNode;
function adjustInsertPositionRegionRoot(core, range, position) {
    var region = (0, roosterjs_editor_dom_1.getRegionsFromRange)(core.contentDiv, range, 0 /* Table */)[0];
    var node = position.node;
    if (region) {
        if (node.nodeType == 3 /* Text */ && !position.isAtEnd) {
            node = (0, roosterjs_editor_dom_1.splitTextNode)(node, position.offset, true /*returnFirstPart*/);
        }
        if (node != region.rootNode) {
            while (node && node.parentNode != region.rootNode) {
                (0, roosterjs_editor_dom_1.splitParentNode)(node, false /*splitBefore*/);
                node = node.parentNode;
            }
        }
        if (node) {
            position = new roosterjs_editor_dom_1.Position(node, -3 /* After */);
        }
    }
    return position;
}
function adjustInsertPositionNewLine(blockElement, core, pos) {
    var tempPos = new roosterjs_editor_dom_1.Position(blockElement.getEndNode(), -3 /* After */);
    if ((0, roosterjs_editor_dom_1.safeInstanceOf)(tempPos.node, 'HTMLTableRowElement')) {
        var div = core.contentDiv.ownerDocument.createElement('div');
        var range = (0, roosterjs_editor_dom_1.createRange)(pos);
        range.insertNode(div);
        tempPos = new roosterjs_editor_dom_1.Position(div, 0 /* Begin */);
    }
    return tempPos;
}
//# sourceMappingURL=insertNode.js.map