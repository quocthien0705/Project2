{"version":3,"file":"ensureTypeInContainer.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/ensureTypeInContainer.ts"],"names":[],"mappings":";;;AAEA,6DAS8B;AAE9B;;;;GAIG;AACI,IAAM,qBAAqB,GAA0B,UACxD,IAAgB,EAChB,QAAsB,EACtB,aAA6B;IAE7B,IAAM,KAAK,GAAG,IAAA,iDAA0B,EAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAClF,IAAI,EAAsB,CAAC;IAE3B,IAAI,KAAK,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE;QAC9C,QAAQ,GAAG,IAAI,+BAAQ,CAAC,EAAE,gBAAqB,CAAC;KACnD;IACD,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;IAEhC,IAAM,KAAK,GAAG,IAAA,4CAAqB,EAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IACpE,IAAI,UAA8B,CAAC;IAEnC,IAAI,KAAK,EAAE;QACP,UAAU,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC;QAC7C,IAAI,IAAA,kCAAW,EAAC,UAAU,EAAE,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,4BAA4B,CAAC,EAAE;YACrF,IAAM,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC1D,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,8CAA8C;QAC9C,sFAAsF;QACtF,uFAAuF;QACvF,IAAM,mBAAmB,GACrB,IAAA,kCAAW,EAAC,UAAU,CAAC;YACvB,CAAC,aAAa,IAAI,iCAAiC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;QACpF,UAAU,GAAG,UAAU,IAAI,mBAAmB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;KACtE;SAAM;QACH,oFAAoF;QACpF,gHAAgH;QAChH,8EAA8E;QAC9E,UAAU,GAAG,IAAA,oCAAa,qBAEtB,IAAI,CAAC,UAAU,CAAC,aAAa,CACjB,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE;YAClC,QAAQ,aAAqB;YAC7B,YAAY,EAAE,KAAK;YACnB,gBAAgB,EAAE,KAAK;YACvB,eAAe,EAAE,KAAK;SACzB,CAAC,CAAC;QAEH,0GAA0G;QAC1G,QAAQ,GAAG,IAAI,+BAAQ,CAAC,UAAU,gBAAqB,CAAC;KAC3D;IAED,IAAI,UAAU,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;QAC5C,IAAA,kCAAW,EACP,UAAU,EACV,IAAI,CAAC,SAAS,CAAC,aAAa,EAC5B,IAAI,CAAC,SAAS,CAAC,UAAU,EACzB,IAAI,CAAC,gBAAgB,CACxB,CAAC;KACL;IAED,0EAA0E;IAC1E,IAAI,aAAa,EAAE;QACf,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,IAAA,kCAAW,EAAC,IAAI,+BAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KACnE;AACL,CAAC,CAAC;AA7DW,QAAA,qBAAqB,yBA6DhC;AAEF,SAAS,iCAAiC,CAAC,KAAoB,EAAE,UAAuB;IACpF,OAAO,CACH,IAAA,qCAAc,EAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;QACpC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QACjC,KAAK,CAAC,GAAG,KAAK,UAAU,CAAC,SAAS,CACrC,CAAC;AACN,CAAC","sourcesContent":["import { ContentPosition, KnownCreateElementDataIndex, PositionType } from 'roosterjs-editor-types';\nimport type { EditorCore, EnsureTypeInContainer, NodePosition } from 'roosterjs-editor-types';\nimport {\n    applyFormat,\n    createElement,\n    createRange,\n    findClosestElementAncestor,\n    getBlockElementAtNode,\n    isNodeEmpty,\n    Position,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * When typing goes directly under content div, many things can go wrong\n * We fix it by wrapping it with a div and reposition cursor within the div\n */\nexport const ensureTypeInContainer: EnsureTypeInContainer = (\n    core: EditorCore,\n    position: NodePosition,\n    keyboardEvent?: KeyboardEvent\n) => {\n    const table = findClosestElementAncestor(position.node, core.contentDiv, 'table');\n    let td: HTMLElement | null;\n\n    if (table && (td = table.querySelector('td,th'))) {\n        position = new Position(td, PositionType.Begin);\n    }\n    position = position.normalize();\n\n    const block = getBlockElementAtNode(core.contentDiv, position.node);\n    let formatNode: HTMLElement | null;\n\n    if (block) {\n        formatNode = block.collapseToSingleElement();\n        if (isNodeEmpty(formatNode, false /* trimContent */, true /* shouldCountBrAsVisible */)) {\n            const brEl = formatNode.ownerDocument.createElement('br');\n            formatNode.append(brEl);\n        }\n        // if the block is empty, apply default format\n        // Otherwise, leave it as it is as we don't want to change the style for existing data\n        // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\n        const shouldSetNodeStyles =\n            isNodeEmpty(formatNode) ||\n            (keyboardEvent && wasNodeJustCreatedByKeyboardEvent(keyboardEvent, formatNode));\n        formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\n    } else {\n        // Only reason we don't get the selection block is that we have an empty content div\n        // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\n        // The fix is to add a DIV wrapping, apply default format and move cursor over\n        formatNode = createElement(\n            KnownCreateElementDataIndex.EmptyLine,\n            core.contentDiv.ownerDocument\n        ) as HTMLElement;\n        core.api.insertNode(core, formatNode, {\n            position: ContentPosition.End,\n            updateCursor: false,\n            replaceSelection: false,\n            insertOnNewLine: false,\n        });\n\n        // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\n        position = new Position(formatNode, PositionType.Begin);\n    }\n\n    if (formatNode && core.lifecycle.defaultFormat) {\n        applyFormat(\n            formatNode,\n            core.lifecycle.defaultFormat,\n            core.lifecycle.isDarkMode,\n            core.darkColorHandler\n        );\n    }\n\n    // If this is triggered by a keyboard event, let's select the new position\n    if (keyboardEvent) {\n        core.api.selectRange(core, createRange(new Position(position)));\n    }\n};\n\nfunction wasNodeJustCreatedByKeyboardEvent(event: KeyboardEvent, formatNode: HTMLElement) {\n    return (\n        safeInstanceOf(event.target, 'Node') &&\n        event.target.contains(formatNode) &&\n        event.key === formatNode.innerText\n    );\n}\n"]}