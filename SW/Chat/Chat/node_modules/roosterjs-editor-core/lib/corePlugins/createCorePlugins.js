"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginState = void 0;
var CopyPastePlugin_1 = require("./CopyPastePlugin");
var DOMEventPlugin_1 = require("./DOMEventPlugin");
var EditPlugin_1 = require("./EditPlugin");
var EntityPlugin_1 = require("./EntityPlugin");
var ImageSelection_1 = require("./ImageSelection");
var LifecyclePlugin_1 = require("./LifecyclePlugin");
var MouseUpPlugin_1 = require("./MouseUpPlugin");
var NormalizeTablePlugin_1 = require("./NormalizeTablePlugin");
var PendingFormatStatePlugin_1 = require("./PendingFormatStatePlugin");
var TypeInContainerPlugin_1 = require("./TypeInContainerPlugin");
var UndoPlugin_1 = require("./UndoPlugin");
/**
 * @internal
 * Create Core Plugins
 * @param contentDiv Content DIV of editor
 * @param options Editor options
 */
function createCorePlugins(contentDiv, options) {
    var map = options.corePluginOverride || {};
    // The order matters, some plugin needs to be put before/after others to make sure event
    // can be handled in right order
    return {
        typeInContainer: map.typeInContainer || new TypeInContainerPlugin_1.default(),
        edit: map.edit || new EditPlugin_1.default(),
        pendingFormatState: map.pendingFormatState || new PendingFormatStatePlugin_1.default(),
        _placeholder: null,
        typeAfterLink: null,
        undo: map.undo || new UndoPlugin_1.default(options),
        domEvent: map.domEvent || new DOMEventPlugin_1.default(options, contentDiv),
        mouseUp: map.mouseUp || new MouseUpPlugin_1.default(),
        copyPaste: map.copyPaste || new CopyPastePlugin_1.default(options),
        entity: map.entity || new EntityPlugin_1.default(),
        imageSelection: map.imageSelection || new ImageSelection_1.default(),
        normalizeTable: map.normalizeTable || new NormalizeTablePlugin_1.default(),
        lifecycle: map.lifecycle || new LifecyclePlugin_1.default(options, contentDiv),
    };
}
exports.default = createCorePlugins;
/**
 * @internal
 * Get plugin state of core plugins
 * @param corePlugins CorePlugins object
 */
function getPluginState(corePlugins) {
    return {
        domEvent: corePlugins.domEvent.getState(),
        pendingFormatState: corePlugins.pendingFormatState.getState(),
        edit: corePlugins.edit.getState(),
        lifecycle: corePlugins.lifecycle.getState(),
        undo: corePlugins.undo.getState(),
        entity: corePlugins.entity.getState(),
        copyPaste: corePlugins.copyPaste.getState(),
    };
}
exports.getPluginState = getPluginState;
//# sourceMappingURL=createCorePlugins.js.map