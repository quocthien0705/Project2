"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * @internal
 * TODO: Rename this plugin since it is not only for table now
 *
 * NormalizeTable plugin makes sure each table in editor has TBODY/THEAD/TFOOT tag around TR tags
 *
 * When we retrieve HTML content using innerHTML, browser will always add TBODY around TR nodes if there is not.
 * This causes some issue when we restore the HTML content with selection path since the selection path is
 * deeply coupled with DOM structure. So we need to always make sure there is already TBODY tag whenever
 * new table is inserted, to make sure the selection path we created is correct.
 */
var NormalizeTablePlugin = /** @class */ (function () {
    function NormalizeTablePlugin() {
        this.editor = null;
    }
    /**
     * Get a friendly name of this plugin
     */
    NormalizeTablePlugin.prototype.getName = function () {
        return 'NormalizeTable';
    };
    /**
     * The first method that editor will call to a plugin when editor is initializing.
     * It will pass in the editor instance, plugin should take this chance to save the
     * editor reference so that it can call to any editor method or format API later.
     * @param editor The editor object
     */
    NormalizeTablePlugin.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * The last method that editor will call to a plugin before it is disposed.
     * Plugin can take this chance to clear the reference to editor. After this method is
     * called, plugin should not call to any editor method since it will result in error.
     */
    NormalizeTablePlugin.prototype.dispose = function () {
        this.editor = null;
    };
    /**
     * Core method for a plugin. Once an event happens in editor, editor will call this
     * method of each plugin to handle the event as long as the event is not handled
     * exclusively by another plugin.
     * @param event The event to handle:
     */
    NormalizeTablePlugin.prototype.onPluginEvent = function (event) {
        switch (event.eventType) {
            case 11 /* EditorReady */:
            case 7 /* ContentChanged */:
                if (this.editor) {
                    this.normalizeTables(this.editor.queryElements('table'));
                }
                break;
            case 10 /* BeforePaste */:
                this.normalizeTables((0, roosterjs_editor_dom_1.toArray)(event.fragment.querySelectorAll('table')));
                break;
            case 5 /* MouseDown */:
                this.normalizeTableFromEvent(event.rawEvent);
                break;
            case 0 /* KeyDown */:
                if (event.rawEvent.shiftKey) {
                    this.normalizeTableFromEvent(event.rawEvent);
                }
                break;
            case 8 /* ExtractContentWithDom */:
                normalizeListsForExport(event.clonedRoot);
                break;
        }
    };
    NormalizeTablePlugin.prototype.normalizeTableFromEvent = function (event) {
        var _a;
        var table = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.getElementAtCursor('table', event.target);
        if (table) {
            this.normalizeTables([table]);
        }
    };
    NormalizeTablePlugin.prototype.normalizeTables = function (tables) {
        if (this.editor && tables.length > 0) {
            var rangeEx = this.editor.getSelectionRangeEx();
            var _a = ((rangeEx === null || rangeEx === void 0 ? void 0 : rangeEx.type) == 0 /* Normal */ && rangeEx.ranges[0]) || {}, startContainer = _a.startContainer, endContainer = _a.endContainer, startOffset = _a.startOffset, endOffset = _a.endOffset;
            var isChanged = normalizeTables(tables);
            if (isChanged) {
                if (startContainer &&
                    endContainer &&
                    typeof startOffset === 'number' &&
                    typeof endOffset === 'number') {
                    this.editor.select(startContainer, startOffset, endContainer, endOffset);
                }
                else if ((rangeEx === null || rangeEx === void 0 ? void 0 : rangeEx.type) == 1 /* TableSelection */ &&
                    rangeEx.coordinates) {
                    this.editor.select(rangeEx.table, rangeEx.coordinates);
                }
            }
        }
    };
    return NormalizeTablePlugin;
}());
exports.default = NormalizeTablePlugin;
function normalizeTables(tables) {
    var isDOMChanged = false;
    tables.forEach(function (table) {
        var _a;
        var tbody = null;
        for (var child = table.firstChild; child; child = child.nextSibling) {
            var tag = (0, roosterjs_editor_dom_1.getTagOfNode)(child);
            switch (tag) {
                case 'TR':
                    if (!tbody) {
                        tbody = table.ownerDocument.createElement('tbody');
                        table.insertBefore(tbody, child);
                    }
                    tbody.appendChild(child);
                    child = tbody;
                    isDOMChanged = true;
                    break;
                case 'TBODY':
                    if (tbody) {
                        (0, roosterjs_editor_dom_1.moveChildNodes)(tbody, child, true /*keepExistingChildren*/);
                        (_a = child.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(child);
                        child = tbody;
                        isDOMChanged = true;
                    }
                    else {
                        tbody = child;
                    }
                    break;
                default:
                    tbody = null;
                    break;
            }
        }
        var colgroups = table.querySelectorAll('colgroup');
        var thead = table.querySelector('thead');
        if (thead) {
            colgroups.forEach(function (colgroup) {
                if (!thead.contains(colgroup)) {
                    thead.appendChild(colgroup);
                }
            });
        }
    });
    return isDOMChanged;
}
function normalizeListsForExport(root) {
    (0, roosterjs_editor_dom_1.toArray)(root.querySelectorAll('li')).forEach(function (li) {
        var prevElement = li.previousSibling;
        if (li.style.display == 'block' && (0, roosterjs_editor_dom_1.safeInstanceOf)(prevElement, 'HTMLLIElement')) {
            li.style.removeProperty('display');
            prevElement.appendChild((0, roosterjs_editor_dom_1.changeElementTag)(li, 'div'));
        }
    });
}
//# sourceMappingURL=NormalizeTablePlugin.js.map