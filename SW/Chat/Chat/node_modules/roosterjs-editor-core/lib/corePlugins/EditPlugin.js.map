{"version":3,"file":"EditPlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts"],"names":[],"mappings":";;AAAA,6DAA2D;AAU3D;;;GAGG;AACH;IAII;;;OAGG;IACH;QAPQ,WAAM,GAAmB,IAAI,CAAC;QAQlC,IAAI,CAAC,KAAK,GAAG;YACT,QAAQ,EAAE,EAAE;SACf,CAAC;IACN,CAAC;IAED;;OAEG;IACH,4BAAO,GAAP;QACI,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,+BAAU,GAAV,UAAW,MAAe;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,4BAAO,GAAP;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,6BAAQ,GAAR;QACI,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,kCAAa,GAAb,UAAc,KAAkB;;QAC5B,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,IAAI,QAAQ,GAAoD,IAAI,CAAC;QACrE,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAM,cAAc,GAAG,KAAK,CAAC,SAAS,mBAA2B,CAAC;QAElE,IAAI,cAAc,EAAE;YAChB,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;YAChC,IAAM,KAAK,GAAG,MAAA,IAAI,CAAC,MAAM,0CAAE,iBAAiB,EAAE,CAAC;YAE/C,UAAU,GAAG,IAAA,0CAAmB,EAAC,QAAQ,CAAC,CAAC;YAC3C,cAAc,GAAG,UAAU,IAAI,QAAQ,CAAC,MAAM,CAAC;YAC/C,QAAQ;gBACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;oBACnC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,iBAAY,CAAC,CAAC;SACtE;aAAM,IAAI,KAAK,CAAC,SAAS,0BAAkC,EAAE;YAC1D,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,0BAAqB,CAAC;SACvD;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,IAAI,CAAC,IAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAA,EAAE,CAAC,EAAE,EAAE;YACnD,IAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,IACI,CAAC,OAAO,CAAC,iBAAiB,IAAI,CAAC,cAAc,CAAC;gBAC9C,IAAI,CAAC,MAAM;gBACX,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAC3D;gBACE,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACxC,IAAI,cAAc,EAAE;oBAChB,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;iBACrC;gBACD,MAAM;aACT;SACJ;IACL,CAAC;IACL,iBAAC;AAAD,CAAC,AAjFD,IAiFC","sourcesContent":["import { isCtrlOrMetaPressed } from 'roosterjs-editor-dom';\nimport { Keys, PluginEventType } from 'roosterjs-editor-types';\nimport type {\n    EditPluginState,\n    GenericContentEditFeature,\n    IEditor,\n    PluginEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Edit Component helps handle Content edit features\n */\nexport default class EditPlugin implements PluginWithState<EditPluginState> {\n    private editor: IEditor | null = null;\n    private state: EditPluginState;\n\n    /**\n     * Construct a new instance of EditPlugin\n     * @param options The editor options\n     */\n    constructor() {\n        this.state = {\n            features: {},\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Edit';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        let hasFunctionKey = false;\n        let features: GenericContentEditFeature<PluginEvent>[] | null = null;\n        let ctrlOrMeta = false;\n        const isKeyDownEvent = event.eventType == PluginEventType.KeyDown;\n\n        if (isKeyDownEvent) {\n            const rawEvent = event.rawEvent;\n            const range = this.editor?.getSelectionRange();\n\n            ctrlOrMeta = isCtrlOrMetaPressed(rawEvent);\n            hasFunctionKey = ctrlOrMeta || rawEvent.altKey;\n            features =\n                this.state.features[rawEvent.which] ||\n                (range && !range.collapsed && this.state.features[Keys.RANGE]);\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            features = this.state.features[Keys.CONTENTCHANGED];\n        }\n\n        for (let i = 0; features && i < features?.length; i++) {\n            const feature = features[i];\n            if (\n                (feature.allowFunctionKeys || !hasFunctionKey) &&\n                this.editor &&\n                feature.shouldHandleEvent(event, this.editor, ctrlOrMeta)\n            ) {\n                feature.handleEvent(event, this.editor);\n                if (isKeyDownEvent) {\n                    event.handledByEditFeature = true;\n                }\n                break;\n            }\n        }\n    }\n}\n"]}