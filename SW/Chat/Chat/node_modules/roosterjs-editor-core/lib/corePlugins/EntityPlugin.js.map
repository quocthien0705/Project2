{"version":3,"file":"EntityPlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/EntityPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    inlineEntityOnPluginEvent,\n    normalizeDelimitersInEditor,\n} from './utils/inlineEntityOnPluginEvent';\nimport {\n    Browser,\n    commitEntity,\n    getEntityFromElement,\n    getEntitySelector,\n    isCharacterValue,\n    toArray,\n    arrayPush,\n    createElement,\n    addRangeToSelection,\n    createRange,\n    isBlockElement,\n    getObjectKeys,\n} from 'roosterjs-editor-dom';\nimport type {\n    ContentChangedEvent,\n    Entity,\n    EntityOperationEvent,\n    EntityPluginState,\n    KnownEntityItem,\n    HtmlSanitizerOptions,\n    IEditor,\n    PluginEvent,\n    PluginMouseUpEvent,\n    PluginWithState,\n} from 'roosterjs-editor-types';\nimport {\n    ChangeSource,\n    ContentPosition,\n    EntityClasses,\n    EntityOperation,\n    Keys,\n    PluginEventType,\n    QueryScope,\n} from 'roosterjs-editor-types';\nimport type { CompatibleEntityOperation } from 'roosterjs-editor-types/lib/compatibleTypes';\n\nconst ENTITY_ID_REGEX = /_(\\d{1,8})$/;\n\nconst ENTITY_CSS_REGEX = '^' + EntityClasses.ENTITY_INFO_NAME + '$';\nconst ENTITY_ID_CSS_REGEX = '^' + EntityClasses.ENTITY_ID_PREFIX;\nconst ENTITY_TYPE_CSS_REGEX = '^' + EntityClasses.ENTITY_TYPE_PREFIX;\nconst ENTITY_READONLY_CSS_REGEX = '^' + EntityClasses.ENTITY_READONLY_PREFIX;\nconst ALLOWED_CSS_CLASSES = [\n    ENTITY_CSS_REGEX,\n    ENTITY_ID_CSS_REGEX,\n    ENTITY_TYPE_CSS_REGEX,\n    ENTITY_READONLY_CSS_REGEX,\n];\nconst REMOVE_ENTITY_OPERATIONS: (EntityOperation | CompatibleEntityOperation)[] = [\n    EntityOperation.Overwrite,\n    EntityOperation.PartialOverwrite,\n    EntityOperation.RemoveFromStart,\n    EntityOperation.RemoveFromEnd,\n];\n\n/**\n * @internal\n * Entity Plugin helps handle all operations related to an entity and generate entity specified events\n */\nexport default class EntityPlugin implements PluginWithState<EntityPluginState> {\n    private editor: IEditor | null = null;\n    private state: EntityPluginState;\n\n    /**\n     * Construct a new instance of EntityPlugin\n     */\n    constructor() {\n        this.state = {\n            entityMap: {},\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Entity';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n        this.state.entityMap = {};\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.MouseUp:\n                this.handleMouseUpEvent(event);\n                break;\n            case PluginEventType.KeyDown:\n                this.handleKeyDownEvent(event.rawEvent);\n                break;\n            case PluginEventType.BeforeCutCopy:\n                if (event.isCut) {\n                    this.handleCutEvent(event.rawEvent);\n                }\n                break;\n            case PluginEventType.BeforePaste:\n                this.handleBeforePasteEvent(event.sanitizingOption);\n                break;\n            case PluginEventType.ContentChanged:\n                this.handleContentChangedEvent(event);\n                break;\n            case PluginEventType.EditorReady:\n                this.handleContentChangedEvent();\n                break;\n            case PluginEventType.ExtractContentWithDom:\n                this.handleExtractContentWithDomEvent(event.clonedRoot);\n                break;\n            case PluginEventType.ContextMenu:\n                this.handleContextMenuEvent(event.rawEvent);\n                break;\n            case PluginEventType.EntityOperation:\n                this.handleEntityOperationEvent(event);\n                break;\n        }\n\n        if (this.editor) {\n            inlineEntityOnPluginEvent(event, this.editor);\n        }\n    }\n\n    private handleContextMenuEvent(event: UIEvent) {\n        const node = event.target as Node;\n        const entityElement = node && this.editor?.getElementAtCursor(getEntitySelector(), node);\n\n        if (entityElement) {\n            event.preventDefault();\n            this.triggerEvent(entityElement, EntityOperation.ContextMenu, event);\n        }\n    }\n\n    private handleCutEvent = (event: ClipboardEvent) => {\n        const range = this.editor?.getSelectionRange();\n        if (range && !range.collapsed) {\n            this.checkRemoveEntityForRange(event);\n        }\n    };\n\n    private handleMouseUpEvent(event: PluginMouseUpEvent) {\n        const { rawEvent, isClicking } = event;\n        const node = rawEvent.target as Node;\n        let entityElement: HTMLElement | null;\n\n        if (\n            this.editor &&\n            isClicking &&\n            node &&\n            !!(entityElement = this.editor.getElementAtCursor(getEntitySelector(), node))\n        ) {\n            this.triggerEvent(entityElement, EntityOperation.Click, rawEvent);\n\n            workaroundSelectionIssueForIE(this.editor);\n        }\n    }\n\n    private handleKeyDownEvent(event: KeyboardEvent) {\n        if (\n            isCharacterValue(event) ||\n            event.which == Keys.BACKSPACE ||\n            event.which == Keys.DELETE ||\n            event.which == Keys.ENTER\n        ) {\n            const range = this.editor?.getSelectionRange();\n            if (range && !range.collapsed) {\n                this.checkRemoveEntityForRange(event);\n            }\n        }\n    }\n\n    private handleBeforePasteEvent(sanitizingOption: HtmlSanitizerOptions) {\n        const range = this.editor?.getSelectionRange();\n\n        if (range && !range.collapsed) {\n            this.checkRemoveEntityForRange(null! /*rawEvent*/);\n        }\n\n        if (sanitizingOption.additionalAllowedCssClasses) {\n            arrayPush(sanitizingOption.additionalAllowedCssClasses, ALLOWED_CSS_CLASSES);\n        }\n    }\n\n    private handleContentChangedEvent(event?: ContentChangedEvent) {\n        let shouldNormalizeDelimiters: boolean = false;\n        // 1. find removed entities\n        getObjectKeys(this.state.entityMap).forEach(id => {\n            const item = this.state.entityMap[id];\n            const element = item.element;\n\n            if (this.editor && !item.isDeleted && !this.editor.contains(element)) {\n                item.isDeleted = true;\n\n                this.triggerEvent(element, EntityOperation.Overwrite);\n\n                if (\n                    !shouldNormalizeDelimiters &&\n                    !element.isContentEditable &&\n                    !isBlockElement(element)\n                ) {\n                    shouldNormalizeDelimiters = true;\n                }\n            }\n        });\n\n        // 2. collect all new entities\n        const newEntities =\n            event?.source == ChangeSource.InsertEntity && event.data\n                ? [event.data as Entity]\n                : this.getExistingEntities().filter(entity => {\n                      const item = this.state.entityMap[entity.id];\n\n                      return !item || item.element != entity.wrapper || item.isDeleted;\n                  });\n\n        // 3. Add new entities to known entity list, and hydrate\n        newEntities.forEach(entity => {\n            const { wrapper, type, id, isReadonly } = entity;\n\n            entity.id = this.ensureUniqueId(type, id, wrapper);\n            commitEntity(wrapper, type, isReadonly, entity.id); // Use entity.id here because it is newly updated\n            this.handleNewEntity(entity);\n        });\n\n        if (shouldNormalizeDelimiters && this.editor) {\n            normalizeDelimitersInEditor(this.editor);\n        }\n    }\n\n    private handleEntityOperationEvent(event: EntityOperationEvent) {\n        if (this.editor && REMOVE_ENTITY_OPERATIONS.indexOf(event.operation) >= 0) {\n            const item = this.state.entityMap[event.entity.id];\n\n            if (item) {\n                item.isDeleted = true;\n            }\n        }\n    }\n\n    private handleExtractContentWithDomEvent(root: HTMLElement) {\n        toArray(root.querySelectorAll(getEntitySelector())).forEach(element => {\n            element.removeAttribute('contentEditable');\n\n            this.triggerEvent(element as HTMLElement, EntityOperation.ReplaceTemporaryContent);\n        });\n    }\n\n    private checkRemoveEntityForRange(event: Event) {\n        const editableEntityElements: HTMLElement[] = [];\n        const selector = getEntitySelector();\n        this.editor?.queryElements(selector, QueryScope.OnSelection, element => {\n            if (element.isContentEditable) {\n                editableEntityElements.push(element);\n            } else {\n                this.triggerEvent(element, EntityOperation.Overwrite, event);\n            }\n        });\n\n        // For editable entities, we need to check if it is fully or partially covered by current selection,\n        // and trigger different events;\n        if (this.editor && editableEntityElements.length > 0) {\n            const inSelectionEntityElements = this.editor.queryElements(\n                selector,\n                QueryScope.InSelection\n            );\n            editableEntityElements.forEach(element => {\n                const isFullyCovered = inSelectionEntityElements.indexOf(element) >= 0;\n                this.triggerEvent(\n                    element,\n                    isFullyCovered ? EntityOperation.Overwrite : EntityOperation.PartialOverwrite,\n                    event\n                );\n            });\n        }\n    }\n\n    private triggerEvent(element: HTMLElement, operation: EntityOperation, rawEvent?: Event) {\n        const entity = element && getEntityFromElement(element);\n\n        return entity\n            ? this.editor?.triggerPluginEvent(PluginEventType.EntityOperation, {\n                  operation,\n                  rawEvent,\n                  entity,\n              })\n            : null;\n    }\n\n    private handleNewEntity(entity: Entity) {\n        const { wrapper } = entity;\n        const event = this.triggerEvent(wrapper, EntityOperation.NewEntity);\n\n        const newItem: KnownEntityItem = {\n            element: entity.wrapper,\n        };\n\n        if (event?.shouldPersist) {\n            newItem.canPersist = true;\n        }\n\n        this.state.entityMap[entity.id] = newItem;\n    }\n\n    private getExistingEntities(): Entity[] {\n        return (\n            this.editor\n                ?.queryElements(getEntitySelector())\n                .map(getEntityFromElement)\n                .filter((x): x is Entity => !!x) ?? []\n        );\n    }\n\n    private ensureUniqueId(type: string, id: string, wrapper: HTMLElement) {\n        const match = ENTITY_ID_REGEX.exec(id);\n        const baseId = (match ? id.substr(0, id.length - match[0].length) : id) || type;\n\n        // Make sure entity id is unique\n        let newId = '';\n\n        for (let num = (match && parseInt(match[1])) || 0; ; num++) {\n            newId = num > 0 ? `${baseId}_${num}` : baseId;\n\n            const item = this.state.entityMap[newId];\n\n            if (!item || item.element == wrapper) {\n                break;\n            }\n        }\n\n        return newId;\n    }\n}\n\n/**\n * IE will show a resize border around the readonly content within content editable DIV\n * This is a workaround to remove it by temporarily move focus out of editor\n */\nconst workaroundSelectionIssueForIE = Browser.isIE\n    ? (editor: IEditor) => {\n          editor.runAsync(editor => {\n              const workaroundButton = editor.getCustomData('ENTITY_IE_FOCUS_BUTTON', () => {\n                  const button = createElement(\n                      {\n                          tag: 'button',\n                          style: 'overflow:hidden;position:fixed;width:0;height:0;top:-1000px',\n                      },\n                      editor.getDocument()\n                  ) as HTMLElement;\n                  button.onblur = () => {\n                      button.style.display = 'none';\n                  };\n\n                  editor.insertNode(button, {\n                      position: ContentPosition.Outside,\n                  });\n\n                  return button;\n              });\n\n              workaroundButton.style.display = '';\n              addRangeToSelection(createRange(workaroundButton, 0));\n          });\n      }\n    : () => {};\n"]}