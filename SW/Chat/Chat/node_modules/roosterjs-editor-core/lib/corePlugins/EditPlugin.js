"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
/**
 * @internal
 * Edit Component helps handle Content edit features
 */
var EditPlugin = /** @class */ (function () {
    /**
     * Construct a new instance of EditPlugin
     * @param options The editor options
     */
    function EditPlugin() {
        this.editor = null;
        this.state = {
            features: {},
        };
    }
    /**
     * Get a friendly name of  this plugin
     */
    EditPlugin.prototype.getName = function () {
        return 'Edit';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    EditPlugin.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * Dispose this plugin
     */
    EditPlugin.prototype.dispose = function () {
        this.editor = null;
    };
    /**
     * Get plugin state object
     */
    EditPlugin.prototype.getState = function () {
        return this.state;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    EditPlugin.prototype.onPluginEvent = function (event) {
        var _a;
        var hasFunctionKey = false;
        var features = null;
        var ctrlOrMeta = false;
        var isKeyDownEvent = event.eventType == 0 /* KeyDown */;
        if (isKeyDownEvent) {
            var rawEvent = event.rawEvent;
            var range = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.getSelectionRange();
            ctrlOrMeta = (0, roosterjs_editor_dom_1.isCtrlOrMetaPressed)(rawEvent);
            hasFunctionKey = ctrlOrMeta || rawEvent.altKey;
            features =
                this.state.features[rawEvent.which] ||
                    (range && !range.collapsed && this.state.features[258 /* RANGE */]);
        }
        else if (event.eventType == 7 /* ContentChanged */) {
            features = this.state.features[257 /* CONTENTCHANGED */];
        }
        for (var i = 0; features && i < (features === null || features === void 0 ? void 0 : features.length); i++) {
            var feature = features[i];
            if ((feature.allowFunctionKeys || !hasFunctionKey) &&
                this.editor &&
                feature.shouldHandleEvent(event, this.editor, ctrlOrMeta)) {
                feature.handleEvent(event, this.editor);
                if (isKeyDownEvent) {
                    event.handledByEditFeature = true;
                }
                break;
            }
        }
    };
    return EditPlugin;
}());
exports.default = EditPlugin;
//# sourceMappingURL=EditPlugin.js.map