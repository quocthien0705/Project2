"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var roosterjs_editor_dom_1 = require("roosterjs-editor-dom");
var Escape = 'Escape';
var Delete = 'Delete';
var mouseMiddleButton = 1;
/**
 * @internal
 * Detect image selection and help highlight the image
 */
var ImageSelection = /** @class */ (function () {
    function ImageSelection() {
        this.editor = null;
    }
    /**
     * Get a friendly name of  this plugin
     */
    ImageSelection.prototype.getName = function () {
        return 'ImageSelection';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    ImageSelection.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * Dispose this plugin
     */
    ImageSelection.prototype.dispose = function () {
        var _a;
        (_a = this.editor) === null || _a === void 0 ? void 0 : _a.select(null);
        this.editor = null;
    };
    ImageSelection.prototype.onPluginEvent = function (event) {
        var _a, _b;
        if (this.editor) {
            switch (event.eventType) {
                case 6 /* MouseUp */:
                    var target = event.rawEvent.target;
                    if ((0, roosterjs_editor_dom_1.safeInstanceOf)(target, 'HTMLImageElement') &&
                        target.isContentEditable &&
                        event.rawEvent.button != mouseMiddleButton &&
                        event.isClicking) {
                        this.editor.select(target);
                    }
                    break;
                case 5 /* MouseDown */:
                    var mouseTarget = event.rawEvent.target;
                    var mouseSelection = this.editor.getSelectionRangeEx();
                    if (mouseSelection &&
                        mouseSelection.type === 2 /* ImageSelection */ &&
                        mouseSelection.image !== mouseTarget) {
                        this.editor.select(null);
                    }
                    break;
                case 0 /* KeyDown */:
                    var rawEvent = event.rawEvent;
                    var key = rawEvent.key;
                    var keyDownSelection = this.editor.getSelectionRangeEx();
                    if (!rawEvent.ctrlKey &&
                        !rawEvent.altKey &&
                        !rawEvent.shiftKey &&
                        !rawEvent.metaKey &&
                        keyDownSelection.type === 2 /* ImageSelection */) {
                        var imageParent = (_a = keyDownSelection.image) === null || _a === void 0 ? void 0 : _a.parentNode;
                        if (key === Escape && imageParent) {
                            this.editor.select(keyDownSelection.image, -2 /* Before */);
                            (_b = this.editor.getSelectionRange()) === null || _b === void 0 ? void 0 : _b.collapse();
                            event.rawEvent.stopPropagation();
                        }
                        else if (key === Delete) {
                            this.editor.deleteNode(keyDownSelection.image);
                            event.rawEvent.preventDefault();
                        }
                        else if (imageParent) {
                            this.editor.select(keyDownSelection.image, -2 /* Before */);
                        }
                    }
                    break;
                case 16 /* ContextMenu */:
                    var contextMenuTarget = event.rawEvent.target;
                    var actualSelection = this.editor.getSelectionRangeEx();
                    if ((0, roosterjs_editor_dom_1.safeInstanceOf)(contextMenuTarget, 'HTMLImageElement') &&
                        (actualSelection.type !== 2 /* ImageSelection */ ||
                            actualSelection.image !== contextMenuTarget)) {
                        this.editor.select(contextMenuTarget);
                    }
            }
        }
    };
    return ImageSelection;
}());
exports.default = ImageSelection;
//# sourceMappingURL=ImageSelection.js.map