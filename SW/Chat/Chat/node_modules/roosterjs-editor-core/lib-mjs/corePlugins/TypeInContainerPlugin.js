import { Browser, findClosestElementAncestor, getTagOfNode, isCtrlOrMetaPressed, Position, } from 'roosterjs-editor-dom';
/**
 * @internal
 * Typing Component helps to ensure typing is always happening under a DOM container
 */
var TypeInContainerPlugin = /** @class */ (function () {
    function TypeInContainerPlugin() {
        this.editor = null;
    }
    /**
     * Get a friendly name of  this plugin
     */
    TypeInContainerPlugin.prototype.getName = function () {
        return 'TypeInContainer';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    TypeInContainerPlugin.prototype.initialize = function (editor) {
        this.editor = editor;
    };
    /**
     * Dispose this plugin
     */
    TypeInContainerPlugin.prototype.dispose = function () {
        this.editor = null;
    };
    TypeInContainerPlugin.prototype.isRangeEmpty = function (range) {
        if (range.collapsed &&
            range.startContainer.nodeType === Node.ELEMENT_NODE &&
            getTagOfNode(range.startContainer) == 'DIV' &&
            !range.startContainer.firstChild) {
            return true;
        }
        return false;
    };
    /**
     * Handle events triggered from editor
     * @param event PluginEvent object
     */
    TypeInContainerPlugin.prototype.onPluginEvent = function (event) {
        var _this = this;
        var _a;
        // We need to check if the ctrl key or the meta key is pressed,
        // browsers like Safari fire the "keypress" event when the meta key is pressed.
        if (event.eventType == 1 /* KeyPress */ &&
            this.editor &&
            !(event.rawEvent && isCtrlOrMetaPressed(event.rawEvent))) {
            // If normalization was not possible before the keypress,
            // check again after the keyboard event has been processed by browser native behavior.
            //
            // This handles the case where the keyboard event that first inserts content happens when
            // there is already content under the selection (e.g. Ctrl+a -> type new content).
            //
            // Only schedule when the range is not collapsed to catch this edge case.
            var range = this.editor.getSelectionRange();
            var styledAncestor = range &&
                findClosestElementAncestor(range.startContainer, undefined /* root */, '[style]');
            if (!range || (!this.isRangeEmpty(range) && this.editor.contains(styledAncestor))) {
                return;
            }
            if (range.collapsed) {
                this.editor.ensureTypeInContainer(Position.getStart(range), event.rawEvent);
            }
            else {
                var callback = function () {
                    var _a, _b;
                    var focusedPosition = (_a = _this.editor) === null || _a === void 0 ? void 0 : _a.getFocusedPosition();
                    if (focusedPosition) {
                        (_b = _this.editor) === null || _b === void 0 ? void 0 : _b.ensureTypeInContainer(focusedPosition, event.rawEvent);
                    }
                };
                if (Browser.isMobileOrTablet) {
                    (_a = this.editor.getDocument().defaultView) === null || _a === void 0 ? void 0 : _a.setTimeout(callback, 100);
                }
                else {
                    this.editor.runAsync(callback);
                }
            }
        }
    };
    return TypeInContainerPlugin;
}());
export default TypeInContainerPlugin;
//# sourceMappingURL=TypeInContainerPlugin.js.map