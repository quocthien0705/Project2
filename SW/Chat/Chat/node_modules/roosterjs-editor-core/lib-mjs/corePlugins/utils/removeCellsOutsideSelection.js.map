{"version":3,"file":"removeCellsOutsideSelection.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-core/lib/corePlugins/utils/removeCellsOutsideSelection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAI5D;;;;GAIG;AACH,MAAM,CAAC,IAAM,2BAA2B,GAAG,UAAC,MAAc;IACtD,IAAI,MAAM,CAAC,SAAS,EAAE;QAClB,IAAI,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE;YAChD,OAAO;SACV;QAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAA,KAA0B,MAAM,CAAC,SAAS,EAAxC,SAAS,eAAA,EAAE,QAAQ,cAAqB,CAAC;QACjD,IAAM,aAAW,GAAc,EAAE,CAAC;QAElC,IAAM,QAAM,GAAG,SAAS,CAAC,CAAC,CAAC;QAC3B,IAAM,QAAM,GAAG,SAAS,CAAC,CAAC,CAAC;QAC3B,IAAM,OAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;QACzB,IAAM,OAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;QAEzB,IAAI,MAAM,CAAC,KAAK,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;gBACxB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,QAAM,IAAI,CAAC,IAAI,OAAK,IAAI,CAAC,IAAI,QAAM,IAAI,CAAC,IAAI,OAAK,EAAtD,CAAsD,CAAC,CAAC;gBACnF,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChB,aAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACzB;YACL,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,GAAG,aAAW,CAAC;SAC9B;KACJ;AACL,CAAC,CAAC","sourcesContent":["import { isWholeTableSelected } from 'roosterjs-editor-dom';\nimport type { VTable } from 'roosterjs-editor-dom';\nimport type { VCell } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Remove the cells outside of the selection.\n * @param vTable VTable to remove selection\n */\nexport const removeCellsOutsideSelection = (vTable: VTable) => {\n    if (vTable.selection) {\n        if (isWholeTableSelected(vTable, vTable.selection)) {\n            return;\n        }\n\n        vTable.table.style.removeProperty('width');\n        vTable.table.style.removeProperty('height');\n\n        const { firstCell, lastCell } = vTable.selection;\n        const resultCells: VCell[][] = [];\n\n        const firstX = firstCell.x;\n        const firstY = firstCell.y;\n        const lastX = lastCell.x;\n        const lastY = lastCell.y;\n\n        if (vTable.cells) {\n            vTable.cells.forEach((row, y) => {\n                row = row.filter((_, x) => y >= firstY && y <= lastY && x >= firstX && x <= lastX);\n                if (row.length > 0) {\n                    resultCells.push(row);\n                }\n            });\n            vTable.cells = resultCells;\n        }\n    }\n};\n"]}