import { forEachSelectedCell } from './utils/forEachSelectedCell';
import { removeCellsOutsideSelection } from './utils/removeCellsOutsideSelection';
import { addRangeToSelection, createElement, extractClipboardEvent, moveChildNodes, Browser, setHtmlWithMetadata, createRange, VTable, isWholeTableSelected, } from 'roosterjs-editor-dom';
/**
 * @internal
 * Copy and paste plugin for handling onCopy and onPaste event
 */
var CopyPastePlugin = /** @class */ (function () {
    /**
     * Construct a new instance of CopyPastePlugin
     * @param options The editor options
     */
    function CopyPastePlugin(options) {
        var _this = this;
        this.editor = null;
        this.disposer = null;
        this.onPaste = function (event) {
            var _a;
            var range = null;
            if (_this.editor) {
                var editor_1 = _this.editor;
                extractClipboardEvent(event, function (clipboardData) {
                    if (editor_1 && !editor_1.isDisposed()) {
                        editor_1.paste(clipboardData);
                    }
                }, {
                    allowedCustomPasteType: _this.state.allowedCustomPasteType,
                    getTempDiv: function () {
                        var _a;
                        range = (_a = editor_1.getSelectionRange()) !== null && _a !== void 0 ? _a : null;
                        return _this.getTempDiv(editor_1);
                    },
                    removeTempDiv: function (div) {
                        if (range) {
                            _this.cleanUpAndRestoreSelection(div, range, false /* isCopy */);
                        }
                    },
                }, (_a = _this.editor.getSelectionRange()) !== null && _a !== void 0 ? _a : undefined);
            }
        };
        this.state = {
            allowedCustomPasteType: options.allowedCustomPasteType || [],
        };
    }
    /**
     * Get a friendly name of  this plugin
     */
    CopyPastePlugin.prototype.getName = function () {
        return 'CopyPaste';
    };
    /**
     * Initialize this plugin. This should only be called from Editor
     * @param editor Editor instance
     */
    CopyPastePlugin.prototype.initialize = function (editor) {
        var _this = this;
        this.editor = editor;
        this.disposer = this.editor.addDomEventHandler({
            paste: function (e) { return _this.onPaste(e); },
            copy: function (e) { return _this.onCutCopy(e, false /*isCut*/); },
            cut: function (e) { return _this.onCutCopy(e, true /*isCut*/); },
        });
    };
    /**
     * Dispose this plugin
     */
    CopyPastePlugin.prototype.dispose = function () {
        if (this.disposer) {
            this.disposer();
        }
        this.disposer = null;
        this.editor = null;
    };
    /**
     * Get plugin state object
     */
    CopyPastePlugin.prototype.getState = function () {
        return this.state;
    };
    CopyPastePlugin.prototype.onCutCopy = function (event, isCut) {
        var _this = this;
        if (this.editor) {
            var selection_1 = this.editor.getSelectionRangeEx();
            if (selection_1 && !selection_1.areAllCollapsed) {
                var html = this.editor.getContent(2 /* RawHTMLWithSelection */);
                var tempDiv_1 = this.getTempDiv(this.editor, true /*forceInLightMode*/);
                var metadata = setHtmlWithMetadata(tempDiv_1, html, this.editor.getTrustedHTMLHandler());
                var newRange = null;
                if (selection_1.type === 1 /* TableSelection */ &&
                    selection_1.coordinates) {
                    var table = tempDiv_1.querySelector("#" + selection_1.table.id);
                    newRange = this.createTableRange(table, selection_1.coordinates);
                    if (isCut) {
                        this.deleteTableContent(this.editor, selection_1.table, selection_1.coordinates);
                    }
                }
                else if (selection_1.type === 2 /* ImageSelection */) {
                    var image = tempDiv_1.querySelector('#' + selection_1.image.id);
                    if (image) {
                        newRange = createRange(image);
                        if (isCut) {
                            this.deleteImage(this.editor, selection_1.image.id);
                        }
                    }
                }
                else {
                    newRange =
                        (metadata === null || metadata === void 0 ? void 0 : metadata.type) === 0 /* Normal */
                            ? createRange(tempDiv_1, metadata.start, metadata.end)
                            : null;
                }
                if (newRange) {
                    var cutCopyEvent = this.editor.triggerPluginEvent(9 /* BeforeCutCopy */, {
                        clonedRoot: tempDiv_1,
                        range: newRange,
                        rawEvent: event,
                        isCut: isCut,
                    });
                    if (cutCopyEvent.range) {
                        addRangeToSelection(newRange);
                    }
                    this.editor.runAsync(function (editor) {
                        _this.cleanUpAndRestoreSelection(tempDiv_1, selection_1, !isCut /* isCopy */);
                        if (isCut) {
                            editor.addUndoSnapshot(function () {
                                var position = editor.deleteSelectedContent();
                                editor.focus();
                                editor.select(position);
                            }, "Cut" /* Cut */);
                        }
                    });
                }
            }
        }
    };
    CopyPastePlugin.prototype.getTempDiv = function (editor, forceInLightMode) {
        var div = editor.getCustomData('CopyPasteTempDiv', function () {
            var tempDiv = createElement(3 /* CopyPasteTempDiv */, editor.getDocument());
            editor.getDocument().body.appendChild(tempDiv);
            return tempDiv;
        }, function (tempDiv) { var _a; return (_a = tempDiv.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(tempDiv); });
        if (forceInLightMode) {
            div.style.backgroundColor = 'white';
            div.style.color = 'black';
        }
        div.style.display = '';
        div.focus();
        return div;
    };
    CopyPastePlugin.prototype.cleanUpAndRestoreSelection = function (tempDiv, range, isCopy) {
        var _a, _b, _c;
        if (!!((_a = range) === null || _a === void 0 ? void 0 : _a.type) || range.type == 0) {
            var selection = range;
            switch (selection.type) {
                case 1 /* TableSelection */:
                case 2 /* ImageSelection */:
                    (_b = this.editor) === null || _b === void 0 ? void 0 : _b.select(selection);
                    break;
                case 0 /* Normal */:
                    var range_1 = (_c = selection.ranges) === null || _c === void 0 ? void 0 : _c[0];
                    this.restoreRange(range_1, isCopy);
                    break;
            }
        }
        else {
            this.restoreRange(range, isCopy);
        }
        tempDiv.style.backgroundColor = '';
        tempDiv.style.color = '';
        tempDiv.style.display = 'none';
        moveChildNodes(tempDiv);
    };
    CopyPastePlugin.prototype.restoreRange = function (range, isCopy) {
        if (range && this.editor) {
            if (isCopy && Browser.isAndroid) {
                range.collapse();
            }
            this.editor.select(range);
        }
    };
    CopyPastePlugin.prototype.createTableRange = function (table, selection) {
        var clonedVTable = new VTable(table);
        clonedVTable.selection = selection;
        removeCellsOutsideSelection(clonedVTable);
        clonedVTable.writeBack();
        return createRange(clonedVTable.table);
    };
    CopyPastePlugin.prototype.deleteTableContent = function (editor, table, selection) {
        var selectedVTable = new VTable(table);
        selectedVTable.selection = selection;
        forEachSelectedCell(selectedVTable, function (cell) {
            if (cell === null || cell === void 0 ? void 0 : cell.td) {
                cell.td.innerHTML = editor.getTrustedHTMLHandler()('<br>');
            }
        });
        var wholeTableSelected = isWholeTableSelected(selectedVTable, selection);
        var isWholeColumnSelected = table.rows.length - 1 === selection.lastCell.y && selection.firstCell.y === 0;
        if (wholeTableSelected) {
            selectedVTable.edit(4 /* DeleteTable */);
            selectedVTable.writeBack();
        }
        else if (isWholeColumnSelected) {
            selectedVTable.edit(5 /* DeleteColumn */);
            selectedVTable.writeBack();
        }
        if (wholeTableSelected || isWholeColumnSelected) {
            table.style.removeProperty('width');
            table.style.removeProperty('height');
        }
    };
    CopyPastePlugin.prototype.deleteImage = function (editor, imageId) {
        editor.queryElements('#' + imageId, function (node) {
            editor.deleteNode(node);
        });
    };
    return CopyPastePlugin;
}());
export default CopyPastePlugin;
//# sourceMappingURL=CopyPastePlugin.js.map