import { __assign } from "tslib";
import createCorePlugins, { getPluginState } from '../corePlugins/createCorePlugins';
import DarkColorHandlerImpl from './DarkColorHandlerImpl';
import { arrayPush, getIntersectedRect, getObjectKeys } from 'roosterjs-editor-dom';
import { coreApiMap } from '../coreApi/coreApiMap';
/**
 * Create a new instance of Editor Core
 * @param contentDiv The DIV HTML element which will be the container element of editor
 * @param options An optional options object to customize the editor
 */
export var createEditorCore = function (contentDiv, options) {
    var _a;
    var corePlugins = createCorePlugins(contentDiv, options);
    var plugins = [];
    getObjectKeys(corePlugins).forEach(function (name) {
        if (name == '_placeholder') {
            if (options.plugins) {
                arrayPush(plugins, options.plugins);
            }
        }
        else {
            plugins.push(corePlugins[name]);
        }
    });
    var pluginState = getPluginState(corePlugins);
    var zoomScale = ((_a = options.zoomScale) !== null && _a !== void 0 ? _a : -1) > 0 ? options.zoomScale : 1;
    var getVisibleViewport = options.getVisibleViewport ||
        (function () {
            var scrollContainer = pluginState.domEvent.scrollContainer;
            return getIntersectedRect(scrollContainer == core.contentDiv
                ? [scrollContainer]
                : [scrollContainer, core.contentDiv]);
        });
    var core = __assign(__assign({ contentDiv: contentDiv, api: __assign(__assign({}, coreApiMap), (options.coreApiOverride || {})), originalApi: coreApiMap, plugins: plugins.filter(function (x) { return !!x; }) }, pluginState), { trustedHTMLHandler: options.trustedHTMLHandler || (function (html) { return html; }), zoomScale: zoomScale, sizeTransformer: options.sizeTransformer || (function (size) { return size / zoomScale; }), getVisibleViewport: getVisibleViewport, imageSelectionBorderColor: options.imageSelectionBorderColor, darkColorHandler: new DarkColorHandlerImpl(contentDiv, pluginState.lifecycle.getDarkColor), disposeErrorHandler: options.disposeErrorHandler });
    return core;
};
//# sourceMappingURL=createEditorCore.js.map