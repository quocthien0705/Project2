{"version":3,"file":"createEditorCore.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/editor/createEditorCore.ts"],"names":[],"mappings":";AAAA,OAAO,iBAAiB,EAAE,EAAE,cAAc,EAAE,MAAM,kCAAkC,CAAC;AACrF,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACpF,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAGnD;;;;GAIG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAA2C,UAAC,UAAU,EAAE,OAAO;;IACxF,IAAM,WAAW,GAAG,iBAAiB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC3D,IAAM,OAAO,GAAmB,EAAE,CAAC;IAEnC,aAAa,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QACnC,IAAI,IAAI,IAAI,cAAc,EAAE;YACxB,IAAI,OAAO,CAAC,OAAO,EAAE;gBACjB,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;aACvC;SACJ;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;SACnC;IACL,CAAC,CAAC,CAAC;IAEH,IAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IAChD,IAAM,SAAS,GAAW,CAAC,MAAA,OAAO,CAAC,SAAS,mCAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACjF,IAAM,kBAAkB,GACpB,OAAO,CAAC,kBAAkB;QAC1B,CAAC;YACG,IAAM,eAAe,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC;YAE7D,OAAO,kBAAkB,CACrB,eAAe,IAAI,IAAI,CAAC,UAAU;gBAC9B,CAAC,CAAC,CAAC,eAAe,CAAC;gBACnB,CAAC,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAC3C,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,IAAM,IAAI,uBACN,UAAU,YAAA,EACV,GAAG,wBACI,UAAU,GACV,CAAC,OAAO,CAAC,eAAe,IAAI,EAAE,CAAC,GAEtC,WAAW,EAAE,UAAU,EACvB,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC,IAC9B,WAAW,KACd,kBAAkB,EAAE,OAAO,CAAC,kBAAkB,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,EAC1E,SAAS,EAAE,SAAS,EACpB,eAAe,EAAE,OAAO,CAAC,eAAe,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,IAAI,GAAG,SAAS,EAAhB,CAAgB,CAAC,EAChF,kBAAkB,oBAAA,EAClB,yBAAyB,EAAE,OAAO,CAAC,yBAAyB,EAC5D,gBAAgB,EAAE,IAAI,oBAAoB,CAAC,UAAU,EAAE,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,EAC1F,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,GACnD,CAAC;IAEF,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import createCorePlugins, { getPluginState } from '../corePlugins/createCorePlugins';\nimport DarkColorHandlerImpl from './DarkColorHandlerImpl';\nimport { arrayPush, getIntersectedRect, getObjectKeys } from 'roosterjs-editor-dom';\nimport { coreApiMap } from '../coreApi/coreApiMap';\nimport type { CoreCreator, EditorCore, EditorOptions, EditorPlugin } from 'roosterjs-editor-types';\n\n/**\n * Create a new instance of Editor Core\n * @param contentDiv The DIV HTML element which will be the container element of editor\n * @param options An optional options object to customize the editor\n */\nexport const createEditorCore: CoreCreator<EditorCore, EditorOptions> = (contentDiv, options) => {\n    const corePlugins = createCorePlugins(contentDiv, options);\n    const plugins: EditorPlugin[] = [];\n\n    getObjectKeys(corePlugins).forEach(name => {\n        if (name == '_placeholder') {\n            if (options.plugins) {\n                arrayPush(plugins, options.plugins);\n            }\n        } else {\n            plugins.push(corePlugins[name]);\n        }\n    });\n\n    const pluginState = getPluginState(corePlugins);\n    const zoomScale: number = (options.zoomScale ?? -1) > 0 ? options.zoomScale! : 1;\n    const getVisibleViewport =\n        options.getVisibleViewport ||\n        (() => {\n            const scrollContainer = pluginState.domEvent.scrollContainer;\n\n            return getIntersectedRect(\n                scrollContainer == core.contentDiv\n                    ? [scrollContainer]\n                    : [scrollContainer, core.contentDiv]\n            );\n        });\n\n    const core: EditorCore = {\n        contentDiv,\n        api: {\n            ...coreApiMap,\n            ...(options.coreApiOverride || {}),\n        },\n        originalApi: coreApiMap,\n        plugins: plugins.filter(x => !!x),\n        ...pluginState,\n        trustedHTMLHandler: options.trustedHTMLHandler || ((html: string) => html),\n        zoomScale: zoomScale,\n        sizeTransformer: options.sizeTransformer || ((size: number) => size / zoomScale),\n        getVisibleViewport,\n        imageSelectionBorderColor: options.imageSelectionBorderColor,\n        darkColorHandler: new DarkColorHandlerImpl(contentDiv, pluginState.lifecycle.getDarkColor),\n        disposeErrorHandler: options.disposeErrorHandler,\n    };\n\n    return core;\n};\n"]}