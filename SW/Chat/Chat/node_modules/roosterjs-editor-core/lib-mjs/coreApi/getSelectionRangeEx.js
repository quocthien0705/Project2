import { contains, createRange, findClosestElementAncestor } from 'roosterjs-editor-dom';
/**
 * @internal
 * Get current or cached selection range
 * @param core The EditorCore object
 * @returns A Range object of the selection range
 */
export var getSelectionRangeEx = function (core) {
    var _a, _b, _c;
    var result = null;
    if (core.lifecycle.shadowEditFragment) {
        var _d = core.lifecycle, shadowEditTableSelectionPath = _d.shadowEditTableSelectionPath, shadowEditSelectionPath = _d.shadowEditSelectionPath, shadowEditImageSelectionPath = _d.shadowEditImageSelectionPath;
        if (((shadowEditTableSelectionPath === null || shadowEditTableSelectionPath === void 0 ? void 0 : shadowEditTableSelectionPath.length) || 0) > 0) {
            var ranges = core.lifecycle.shadowEditTableSelectionPath.map(function (path) {
                return createRange(core.contentDiv, path.start, path.end);
            });
            return {
                type: 1 /* TableSelection */,
                ranges: ranges,
                areAllCollapsed: checkAllCollapsed(ranges),
                table: findClosestElementAncestor(ranges[0].startContainer, core.contentDiv, 'table'),
                coordinates: undefined,
            };
        }
        else if (((shadowEditImageSelectionPath === null || shadowEditImageSelectionPath === void 0 ? void 0 : shadowEditImageSelectionPath.length) || 0) > 0) {
            var ranges = core.lifecycle.shadowEditImageSelectionPath.map(function (path) {
                return createRange(core.contentDiv, path.start, path.end);
            });
            return {
                type: 2 /* ImageSelection */,
                ranges: ranges,
                areAllCollapsed: checkAllCollapsed(ranges),
                image: findClosestElementAncestor(ranges[0].startContainer, core.contentDiv, 'img'),
                imageId: undefined,
            };
        }
        else {
            var shadowRange = shadowEditSelectionPath &&
                createRange(core.contentDiv, shadowEditSelectionPath.start, shadowEditSelectionPath.end);
            return createNormalSelectionEx(shadowRange ? [shadowRange] : []);
        }
    }
    else {
        if (core.api.hasFocus(core)) {
            if (core.domEvent.tableSelectionRange) {
                return core.domEvent.tableSelectionRange;
            }
            if (core.domEvent.imageSelectionRange) {
                return core.domEvent.imageSelectionRange;
            }
            var selection = (_a = core.contentDiv.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.getSelection();
            if (!result && selection && selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                if (contains(core.contentDiv, range)) {
                    return createNormalSelectionEx([range]);
                }
            }
        }
        return ((_c = (_b = core.domEvent.tableSelectionRange) !== null && _b !== void 0 ? _b : core.domEvent.imageSelectionRange) !== null && _c !== void 0 ? _c : createNormalSelectionEx(core.domEvent.selectionRange ? [core.domEvent.selectionRange] : []));
    }
};
function createNormalSelectionEx(ranges) {
    return {
        type: 0 /* Normal */,
        ranges: ranges,
        areAllCollapsed: checkAllCollapsed(ranges),
    };
}
function checkAllCollapsed(ranges) {
    return ranges.filter(function (range) { return range === null || range === void 0 ? void 0 : range.collapsed; }).length == ranges.length;
}
//# sourceMappingURL=getSelectionRangeEx.js.map