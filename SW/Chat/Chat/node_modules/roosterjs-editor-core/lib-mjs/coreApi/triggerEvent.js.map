{"version":3,"file":"triggerEvent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/triggerEvent.ts"],"names":[],"mappings":"AAIA,IAAM,yBAAyB,GAAoD;;;;;CAKlF,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,IAAM,YAAY,GAAiB,UACtC,IAAgB,EAChB,WAAwB,EACxB,SAAkB;IAElB,IACI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB;QAC/B,yBAAyB,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClE,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAvC,CAAuC,CAAC,CAAC,EACtF;QACE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACvB,IAAI,MAAM,CAAC,aAAa,EAAE;gBACtB,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;aACrC;QACL,CAAC,CAAC,CAAC;KACN;AACL,CAAC,CAAC;AAEF,SAAS,kBAAkB,CAAC,KAAkB,EAAE,MAAoB;;IAChE,IAAI,MAAM,CAAC,aAAa,KAAI,MAAA,MAAM,CAAC,0BAA0B,+CAAjC,MAAM,EAA8B,KAAK,CAAC,CAAA,EAAE;QACpE,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;KACf;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import { PluginEventType } from 'roosterjs-editor-types';\nimport type { EditorCore, EditorPlugin, PluginEvent, TriggerEvent } from 'roosterjs-editor-types';\nimport type { CompatiblePluginEventType } from 'roosterjs-editor-types/lib/compatibleTypes';\n\nconst allowedEventsInShadowEdit: (PluginEventType | CompatiblePluginEventType)[] = [\n    PluginEventType.EditorReady,\n    PluginEventType.BeforeDispose,\n    PluginEventType.ExtractContentWithDom,\n    PluginEventType.ZoomChanged,\n];\n\n/**\n * @internal\n * Trigger a plugin event\n * @param core The EditorCore object\n * @param pluginEvent The event object to trigger\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\n */\nexport const triggerEvent: TriggerEvent = (\n    core: EditorCore,\n    pluginEvent: PluginEvent,\n    broadcast: boolean\n) => {\n    if (\n        (!core.lifecycle.shadowEditFragment ||\n            allowedEventsInShadowEdit.indexOf(pluginEvent.eventType) >= 0) &&\n        (broadcast || !core.plugins.some(plugin => handledExclusively(pluginEvent, plugin)))\n    ) {\n        core.plugins.forEach(plugin => {\n            if (plugin.onPluginEvent) {\n                plugin.onPluginEvent(pluginEvent);\n            }\n        });\n    }\n};\n\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\n    if (plugin.onPluginEvent && plugin.willHandleEventExclusively?.(event)) {\n        plugin.onPluginEvent(event);\n        return true;\n    }\n\n    return false;\n}\n"]}