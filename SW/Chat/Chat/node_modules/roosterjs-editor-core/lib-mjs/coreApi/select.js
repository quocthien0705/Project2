import { contains, createRange, safeInstanceOf } from 'roosterjs-editor-dom';
/**
 * @internal
 * Select content according to the given information.
 * There are a bunch of allowed combination of parameters. See IEditor.select for more details
 * @param core The editor core object
 * @param arg1 A DOM Range, or SelectionRangeEx, or NodePosition, or Node, or Selection Path
 * @param arg2 (optional) A NodePosition, or an offset number, or a PositionType, or a TableSelection
 * @param arg3 (optional) A Node
 * @param arg4 (optional) An offset number, or a PositionType
 */
export var select = function (core, arg1, arg2, arg3, arg4) {
    var rangeEx = buildRangeEx(core, arg1, arg2, arg3, arg4);
    if (rangeEx) {
        var skipReselectOnFocus = core.domEvent.skipReselectOnFocus;
        // We are applying a new selection, so we don't need to apply cached selection in DOMEventPlugin.
        // Set skipReselectOnFocus to skip this behavior
        core.domEvent.skipReselectOnFocus = true;
        try {
            applyRangeEx(core, rangeEx);
        }
        finally {
            core.domEvent.skipReselectOnFocus = skipReselectOnFocus;
        }
    }
    else {
        core.domEvent.tableSelectionRange = core.api.selectTable(core, null);
        core.domEvent.imageSelectionRange = core.api.selectImage(core, null);
    }
    return !!rangeEx;
};
function buildRangeEx(core, arg1, arg2, arg3, arg4) {
    var rangeEx = null;
    if (isSelectionRangeEx(arg1)) {
        rangeEx = arg1;
    }
    else if (safeInstanceOf(arg1, 'HTMLTableElement') && isTableSelectionOrNull(arg2)) {
        rangeEx = {
            type: 1 /* TableSelection */,
            ranges: [],
            areAllCollapsed: false,
            table: arg1,
            coordinates: arg2 !== null && arg2 !== void 0 ? arg2 : undefined,
        };
    }
    else if (safeInstanceOf(arg1, 'HTMLImageElement') && typeof arg2 == 'undefined') {
        rangeEx = {
            type: 2 /* ImageSelection */,
            ranges: [],
            areAllCollapsed: false,
            image: arg1,
        };
    }
    else {
        var range = !arg1
            ? null
            : safeInstanceOf(arg1, 'Range')
                ? arg1
                : isSelectionPath(arg1)
                    ? createRange(core.contentDiv, arg1.start, arg1.end)
                    : isNodePosition(arg1) || safeInstanceOf(arg1, 'Node')
                        ? createRange(arg1, arg2, arg3, arg4)
                        : null;
        rangeEx = range
            ? {
                type: 0 /* Normal */,
                ranges: [range],
                areAllCollapsed: range.collapsed,
            }
            : null;
    }
    return rangeEx;
}
function applyRangeEx(core, rangeEx) {
    switch (rangeEx === null || rangeEx === void 0 ? void 0 : rangeEx.type) {
        case 1 /* TableSelection */:
            if (contains(core.contentDiv, rangeEx.table)) {
                core.domEvent.imageSelectionRange = core.api.selectImage(core, null);
                core.domEvent.tableSelectionRange = core.api.selectTable(core, rangeEx.table, rangeEx.coordinates);
                rangeEx = core.domEvent.tableSelectionRange;
            }
            break;
        case 2 /* ImageSelection */:
            if (contains(core.contentDiv, rangeEx.image)) {
                core.domEvent.tableSelectionRange = core.api.selectTable(core, null);
                core.domEvent.imageSelectionRange = core.api.selectImage(core, rangeEx.image);
                rangeEx = core.domEvent.imageSelectionRange;
            }
            break;
        case 0 /* Normal */:
            core.domEvent.tableSelectionRange = core.api.selectTable(core, null);
            core.domEvent.imageSelectionRange = core.api.selectImage(core, null);
            if (contains(core.contentDiv, rangeEx.ranges[0])) {
                core.api.selectRange(core, rangeEx.ranges[0]);
            }
            else {
                rangeEx = null;
            }
            break;
    }
    core.api.triggerEvent(core, {
        eventType: 22 /* SelectionChanged */,
        selectionRangeEx: rangeEx,
    }, true /** broadcast **/);
}
function isSelectionRangeEx(obj) {
    var rangeEx = obj;
    return (rangeEx &&
        typeof rangeEx == 'object' &&
        typeof rangeEx.type == 'number' &&
        Array.isArray(rangeEx.ranges));
}
function isTableSelectionOrNull(obj) {
    var selection = obj;
    return (selection === null ||
        (selection &&
            typeof selection == 'object' &&
            typeof selection.firstCell == 'object' &&
            typeof selection.lastCell == 'object'));
}
function isSelectionPath(obj) {
    var path = obj;
    return path && typeof path == 'object' && Array.isArray(path.start) && Array.isArray(path.end);
}
function isNodePosition(obj) {
    var pos = obj;
    return (pos &&
        typeof pos == 'object' &&
        typeof pos.node == 'object' &&
        typeof pos.offset == 'number');
}
//# sourceMappingURL=select.js.map