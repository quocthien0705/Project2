{"version":3,"file":"createPasteFragment.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/createPasteFragment.ts"],"names":[],"mappings":"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","sourcesContent":["import { PasteType, PluginEventType } from 'roosterjs-editor-types';\nimport {\n    applyFormat,\n    applyTextStyle,\n    createDefaultHtmlSanitizerOptions,\n    getPasteType,\n    handleImagePaste,\n    handleTextPaste,\n    moveChildNodes,\n    retrieveMetadataFromClipboard,\n    sanitizePasteContent,\n} from 'roosterjs-editor-dom';\nimport type {\n    BeforePasteEvent,\n    ClipboardData,\n    CreatePasteFragment,\n    EditorCore,\n    NodePosition,\n    DefaultFormat,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Create a DocumentFragment for paste from a ClipboardData\n * @param core The EditorCore object.\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param position The position to paste to\n * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any\n * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n * false to keep original format\n * @param pasteAsImage True if the image should be pasted as image\n */\nexport const createPasteFragment: CreatePasteFragment = (\n    core: EditorCore,\n    clipboardData: ClipboardData,\n    position: NodePosition | null,\n    pasteAsText: boolean,\n    applyCurrentStyle: boolean,\n    pasteAsImage: boolean = false\n) => {\n    if (!clipboardData) {\n        return null;\n    }\n\n    const pasteType = getPasteType(pasteAsText, applyCurrentStyle, pasteAsImage);\n\n    // Step 1: Prepare BeforePasteEvent object\n    const event = createBeforePasteEvent(core, clipboardData, pasteType);\n    return createFragmentFromClipboardData(\n        core,\n        clipboardData,\n        position,\n        pasteAsText,\n        applyCurrentStyle,\n        pasteAsImage,\n        event\n    );\n};\n\nfunction createBeforePasteEvent(\n    core: EditorCore,\n    clipboardData: ClipboardData,\n    pasteType: PasteType\n): BeforePasteEvent {\n    const options = createDefaultHtmlSanitizerOptions();\n\n    // Remove \"caret-color\" style generated by Safari to make sure caret shows in right color after paste\n    options.cssStyleCallbacks['caret-color'] = () => false;\n\n    return {\n        eventType: PluginEventType.BeforePaste,\n        clipboardData,\n        fragment: core.contentDiv.ownerDocument.createDocumentFragment(),\n        sanitizingOption: options,\n        htmlBefore: '',\n        htmlAfter: '',\n        htmlAttributes: {},\n        pasteType: pasteType,\n    };\n}\n\n/**\n * Create a DocumentFragment for paste from a ClipboardData\n * @param core The EditorCore object.\n * @param clipboardData Clipboard data retrieved from clipboard\n * @param position The position to paste to\n * @param pasteAsText True to force use plain text as the content to paste, false to choose HTML or Image if any\n * @param applyCurrentStyle True if apply format of current selection to the pasted content,\n * @param pasteAsImage Whether to force paste as image\n * @param event Event to trigger.\n * false to keep original format\n */\nfunction createFragmentFromClipboardData(\n    core: EditorCore,\n    clipboardData: ClipboardData,\n    position: NodePosition | null,\n    pasteAsText: boolean,\n    applyCurrentStyle: boolean,\n    pasteAsImage: boolean,\n    event: BeforePasteEvent\n) {\n    const { fragment } = event;\n    const { rawHtml, text, imageDataUri } = clipboardData;\n    const doc: Document | undefined = rawHtml\n        ? new DOMParser().parseFromString(core.trustedHTMLHandler(rawHtml), 'text/html')\n        : undefined;\n\n    // Step 2: Retrieve Metadata from Html and the Html that was copied.\n    retrieveMetadataFromClipboard(doc, event, core.trustedHTMLHandler);\n\n    // Step 3: Fill the BeforePasteEvent object, especially the fragment for paste\n    if ((pasteAsImage && imageDataUri) || (!pasteAsText && !text && imageDataUri)) {\n        // Paste image\n        handleImagePaste(imageDataUri, fragment);\n    } else if (!pasteAsText && rawHtml && doc ? doc.body : false) {\n        moveChildNodes(fragment, doc?.body);\n\n        if (applyCurrentStyle && position) {\n            const format = getCurrentFormat(core, position.node);\n            applyTextStyle(fragment, node => applyFormat(node, format));\n        }\n    } else if (text) {\n        // Paste text\n        handleTextPaste(text, position, fragment);\n    }\n\n    // Step 4: Trigger BeforePasteEvent so that plugins can do proper change before paste, when the type of paste is different than Plain Text\n    if (event.pasteType !== PasteType.AsPlainText) {\n        core.api.triggerEvent(core, event, true /*broadcast*/);\n    }\n\n    // Step 5. Sanitize the fragment before paste to make sure the content is safe\n    sanitizePasteContent(event, position);\n\n    return fragment;\n}\n\nfunction getCurrentFormat(core: EditorCore, node: Node): DefaultFormat {\n    const pendableFormat = core.api.getPendableFormatState(core, true /** forceGetStateFromDOM*/);\n    const styleBasedFormat = core.api.getStyleBasedFormatState(core, node);\n    return {\n        fontFamily: styleBasedFormat.fontName,\n        fontSize: styleBasedFormat.fontSize,\n        textColor: styleBasedFormat.textColor,\n        backgroundColor: styleBasedFormat.backgroundColor,\n        textColors: styleBasedFormat.textColors,\n        backgroundColors: styleBasedFormat.backgroundColors,\n        bold: pendableFormat.isBold,\n        italic: pendableFormat.isItalic,\n        underline: pendableFormat.isUnderline,\n    };\n}\n"]}