{"version":3,"file":"focus.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/focus.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAI9E;;;;GAIG;AACH,MAAM,CAAC,IAAM,KAAK,GAAU,UAAC,IAAgB;IACzC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;QACpC,IACI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;YACxB,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,mBAAmB,CAAC,EAC9D;YACE,6HAA6H;YAC7H,wHAAwH;YACxH,wHAAwH;YACxH,+HAA+H;YAC/H,2HAA2H;YAC3H,iIAAiI;YACjI,oDAAoD;YACpD,IACI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc;gBAC7B,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,EACnF;gBACE,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;gBAClE,IAAI,CAAC,GAAG,CAAC,WAAW,CAChB,IAAI,EACJ,WAAW,CAAC,IAAI,gBAAqB,EACrC,IAAI,CAAC,iBAAiB,CACzB,CAAC;aACL;SACJ;QAED,2CAA2C;QAC3C,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;SACvC;QAED,kGAAkG;QAClG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;SAC3B;KACJ;AACL,CAAC,CAAC","sourcesContent":["import { Browser, createRange, getFirstLeafNode } from 'roosterjs-editor-dom';\nimport { PositionType } from 'roosterjs-editor-types';\nimport type { EditorCore, Focus } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Focus to editor. If there is a cached selection range, use it as current selection\n * @param core The EditorCore object\n */\nexport const focus: Focus = (core: EditorCore) => {\n    if (!core.lifecycle.shadowEditFragment) {\n        if (\n            !core.api.hasFocus(core) ||\n            !core.api.getSelectionRange(core, false /*tryGetFromCache*/)\n        ) {\n            // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\n            // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\n            // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\n            // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\n            // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\n            // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\n            // It should be better than the case you cannot type\n            if (\n                !core.domEvent.selectionRange ||\n                !core.api.selectRange(core, core.domEvent.selectionRange, true /*skipSameRange*/)\n            ) {\n                const node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\n                core.api.selectRange(\n                    core,\n                    createRange(node, PositionType.Begin),\n                    true /*skipSameRange*/\n                );\n            }\n        }\n\n        // remember to clear cached selection range\n        if (!Browser.isSafari) {\n            core.domEvent.selectionRange = null;\n        }\n\n        // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\n        if (!core.api.hasFocus(core)) {\n            core.contentDiv.focus();\n        }\n    }\n};\n"]}