import { getEntityFromElement, getEntitySelector, queryElements } from 'roosterjs-editor-dom';
/**
 * @internal
 * Restore an undo snapshot into editor
 * @param core The editor core object
 * @param step Steps to move, can be 0, positive or negative
 */
export var restoreUndoSnapshot = function (core, step) {
    var _a, _b;
    if (core.undo.hasNewContent && step < 0) {
        core.api.addUndoSnapshot(core, null /*callback*/, null /*changeSource*/, false /*canUndoByBackspace*/);
    }
    var snapshot = core.undo.snapshotsService.move(step);
    if (snapshot && snapshot.html != null) {
        try {
            core.undo.isRestoring = true;
            core.api.setContent(core, snapshot.html, true /*triggerContentChangedEvent*/, (_a = snapshot.metadata) !== null && _a !== void 0 ? _a : undefined);
            var darkColorHandler_1 = core.darkColorHandler;
            var isDarkModel_1 = core.lifecycle.isDarkMode;
            snapshot.knownColors.forEach(function (color) {
                darkColorHandler_1.registerColor(color.lightModeColor, isDarkModel_1, color.darkModeColor);
            });
            (_b = snapshot.entityStates) === null || _b === void 0 ? void 0 : _b.forEach(function (entityState) {
                var type = entityState.type, id = entityState.id, state = entityState.state;
                var wrapper = queryElements(core.contentDiv, getEntitySelector(type, id))[0];
                var entity = wrapper && getEntityFromElement(wrapper);
                if (entity) {
                    core.api.triggerEvent(core, {
                        eventType: 15 /* EntityOperation */,
                        operation: 11 /* UpdateEntityState */,
                        entity: entity,
                        state: state,
                    }, false);
                }
            });
        }
        finally {
            core.undo.isRestoring = false;
        }
    }
};
//# sourceMappingURL=restoreUndoSnapshot.js.map