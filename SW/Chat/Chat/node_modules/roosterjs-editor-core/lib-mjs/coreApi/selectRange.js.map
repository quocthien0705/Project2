{"version":3,"file":"selectRange.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/selectRange.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,OAAO,EACH,QAAQ,EACR,sBAAsB,EACtB,QAAQ,EACR,wBAAwB,EACxB,mBAAmB,EACnB,aAAa,GAChB,MAAM,sBAAsB,CAAC;AAE9B;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAM,WAAW,GAAgB,UACpC,IAAgB,EAChB,KAAY,EACZ,aAAuB;IAEvB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;QAC7E,mBAAmB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QAE1C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,KAAK,CAAC;SACxC;QAED,IAAI,KAAK,CAAC,SAAS,EAAE;YACjB,mDAAmD;YACnD,kDAAkD;YAClD,yBAAyB,CAAC,IAAI,CAAC,CAAC;SACnC;QAED,OAAO,IAAI,CAAC;KACf;SAAM;QACH,OAAO,KAAK,CAAC;KAChB;AACL,CAAC,CAAC;AAEF;;GAEG;AACH,SAAS,yBAAyB,CAAC,IAAgB;IAE3C,IAAA,UAAU,GAGV,IAAI,WAHM,EACV,kBAAkB,GAElB,IAAI,mBAFc,EACX,iBAAiB,GACxB,IAAI,sBADoB,CACnB;IAET,IAAI,kBAAkB,CAAC,mBAAmB,EAAE;QACxC,IAAM,UAAQ,GAAG,UAAU,CAAC,aAAa,CAAC;QAC1C,IAAM,aAAW,GAAG,sBAAsB,CAAC,UAAQ,CAAC,CAAC;QACrD,aAAa,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;;YAC/C,IAAI,CAAC,CAAC,CAAA,MAAA,kBAAkB,CAAC,mBAAmB,0CAAG,GAAG,CAAC,CAAA,IAAI,aAAW,CAAC,GAAG,CAAC,EAAE;gBACrE,UAAQ,CAAC,WAAW,CAChB,wBAAwB,CAAC,GAAG,CAAC,EAC7B,KAAK,CAAC,YAAY,EAClB,SAAS,CAAC,WAAW,CACxB,CAAC;aACL;QACL,CAAC,CAAC,CAAC;QAEH,IAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAChE,IAAM,QAAQ,GAAoB,KAAK,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpE,IAAI,QAAQ,EAAE;YACV,kBAAkB,CAAC,sBAAsB,GAAG,QAAQ,CAAC;SACxD;KACJ;AACL,CAAC","sourcesContent":["import { hasFocus } from './hasFocus';\nimport type { EditorCore, SelectRange } from 'roosterjs-editor-types';\nimport {\n    contains,\n    getPendableFormatState,\n    Position,\n    PendableFormatCommandMap,\n    addRangeToSelection,\n    getObjectKeys,\n} from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * Change the editor selection to the given range\n * @param core The EditorCore object\n * @param range The range to select\n * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\n * in editor, otherwise it will always remove current selection range and set to the given one.\n * This parameter is always treat as true in Edge to avoid some weird runtime exception.\n */\nexport const selectRange: SelectRange = (\n    core: EditorCore,\n    range: Range,\n    skipSameRange?: boolean\n) => {\n    if (!core.lifecycle.shadowEditSelectionPath && contains(core.contentDiv, range)) {\n        addRangeToSelection(range, skipSameRange);\n\n        if (!hasFocus(core)) {\n            core.domEvent.selectionRange = range;\n        }\n\n        if (range.collapsed) {\n            // If selected, and current selection is collapsed,\n            // need to restore pending format state if exists.\n            restorePendingFormatState(core);\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/**\n * Restore cached pending format state (if exist) to current selection\n */\nfunction restorePendingFormatState(core: EditorCore) {\n    const {\n        contentDiv,\n        pendingFormatState,\n        api: { getSelectionRange },\n    } = core;\n\n    if (pendingFormatState.pendableFormatState) {\n        const document = contentDiv.ownerDocument;\n        const formatState = getPendableFormatState(document);\n        getObjectKeys(PendableFormatCommandMap).forEach(key => {\n            if (!!pendingFormatState.pendableFormatState?.[key] != formatState[key]) {\n                document.execCommand(\n                    PendableFormatCommandMap[key],\n                    false /* showUI */,\n                    undefined /* value */\n                );\n            }\n        });\n\n        const range = getSelectionRange(core, true /*tryGetFromCache*/);\n        const position: Position | null = range && Position.getStart(range);\n        if (position) {\n            pendingFormatState.pendableFormatPosition = position;\n        }\n    }\n}\n"]}