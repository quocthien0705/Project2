import { createRange, getSelectionPath, moveContentWithEntityPlaceholders, restoreContentWithEntityPlaceholder, } from 'roosterjs-editor-dom';
/**
 * @internal
 */
export var switchShadowEdit = function (core, isOn) {
    var lifecycle = core.lifecycle, contentDiv = core.contentDiv;
    var shadowEditEntities = lifecycle.shadowEditEntities, shadowEditFragment = lifecycle.shadowEditFragment, shadowEditSelectionPath = lifecycle.shadowEditSelectionPath, shadowEditTableSelectionPath = lifecycle.shadowEditTableSelectionPath, shadowEditImageSelectionPath = lifecycle.shadowEditImageSelectionPath;
    var wasInShadowEdit = !!shadowEditFragment;
    var getShadowEditSelectionPath = function (selectionType, shadowEditSelection) {
        return (((shadowEditSelection === null || shadowEditSelection === void 0 ? void 0 : shadowEditSelection.type) == selectionType &&
            shadowEditSelection.ranges
                .map(function (range) { return getSelectionPath(contentDiv, range); })
                .map(function (w) { return w; })) ||
            null);
    };
    if (isOn) {
        if (!wasInShadowEdit) {
            var selection = core.api.getSelectionRangeEx(core);
            var range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);
            shadowEditSelectionPath = range && getSelectionPath(contentDiv, range);
            shadowEditTableSelectionPath = getShadowEditSelectionPath(1 /* TableSelection */, selection);
            shadowEditImageSelectionPath = getShadowEditSelectionPath(2 /* ImageSelection */, selection);
            shadowEditEntities = {};
            shadowEditFragment = moveContentWithEntityPlaceholders(contentDiv, shadowEditEntities);
            core.api.triggerEvent(core, {
                eventType: 17 /* EnteredShadowEdit */,
                fragment: shadowEditFragment,
                selectionPath: shadowEditSelectionPath,
            }, false /*broadcast*/);
            lifecycle.shadowEditFragment = shadowEditFragment;
            lifecycle.shadowEditSelectionPath = shadowEditSelectionPath;
            lifecycle.shadowEditTableSelectionPath = shadowEditTableSelectionPath;
            lifecycle.shadowEditImageSelectionPath = shadowEditImageSelectionPath;
            lifecycle.shadowEditEntities = shadowEditEntities;
        }
        if (lifecycle.shadowEditFragment) {
            restoreContentWithEntityPlaceholder(lifecycle.shadowEditFragment, contentDiv, lifecycle.shadowEditEntities, true /*insertClonedNode*/);
        }
    }
    else {
        lifecycle.shadowEditFragment = null;
        lifecycle.shadowEditSelectionPath = null;
        lifecycle.shadowEditEntities = null;
        if (wasInShadowEdit) {
            core.api.triggerEvent(core, {
                eventType: 18 /* LeavingShadowEdit */,
            }, false /*broadcast*/);
            if (shadowEditFragment) {
                restoreContentWithEntityPlaceholder(shadowEditFragment, contentDiv, shadowEditEntities);
            }
            if (shadowEditSelectionPath) {
                core.domEvent.selectionRange = createRange(contentDiv, shadowEditSelectionPath.start, shadowEditSelectionPath.end);
            }
        }
    }
};
//# sourceMappingURL=switchShadowEdit.js.map