{"version":3,"file":"getSelectionRange.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/getSelectionRange.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAG7D;;;;;;GAMG;AACH,MAAM,CAAC,IAAM,iBAAiB,GAAsB,UAChD,IAAgB,EAChB,eAAwB;;IAExB,IAAI,MAAM,GAAiB,IAAI,CAAC;IAEhC,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;QACnC,MAAM;YACF,IAAI,CAAC,SAAS,CAAC,uBAAuB;gBACtC,WAAW,CACP,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,EAC5C,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,GAAG,CAC7C,CAAC;QAEN,OAAO,MAAM,CAAC;KACjB;SAAM;QACH,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC7C,IAAM,SAAS,GAAG,MAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,0CAAE,YAAY,EAAE,CAAC;YAC5E,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,GAAG,CAAC,EAAE;gBACvC,IAAM,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;oBAClC,MAAM,GAAG,KAAK,CAAC;iBAClB;aACJ;SACJ;QAED,IAAI,CAAC,MAAM,IAAI,eAAe,EAAE;YAC5B,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;SACzC;QAED,OAAO,MAAM,CAAC;KACjB;AACL,CAAC,CAAC","sourcesContent":["import { contains, createRange } from 'roosterjs-editor-dom';\nimport type { EditorCore, GetSelectionRange } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Get current or cached selection range\n * @param core The EditorCore object\n * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\n * @returns A Range object of the selection range\n */\nexport const getSelectionRange: GetSelectionRange = (\n    core: EditorCore,\n    tryGetFromCache: boolean\n) => {\n    let result: Range | null = null;\n\n    if (core.lifecycle.shadowEditFragment) {\n        result =\n            core.lifecycle.shadowEditSelectionPath &&\n            createRange(\n                core.contentDiv,\n                core.lifecycle.shadowEditSelectionPath.start,\n                core.lifecycle.shadowEditSelectionPath.end\n            );\n\n        return result;\n    } else {\n        if (!tryGetFromCache || core.api.hasFocus(core)) {\n            const selection = core.contentDiv.ownerDocument.defaultView?.getSelection();\n            if (selection && selection.rangeCount > 0) {\n                const range = selection.getRangeAt(0);\n                if (contains(core.contentDiv, range)) {\n                    result = range;\n                }\n            }\n        }\n\n        if (!result && tryGetFromCache) {\n            result = core.domEvent.selectionRange;\n        }\n\n        return result;\n    }\n};\n"]}