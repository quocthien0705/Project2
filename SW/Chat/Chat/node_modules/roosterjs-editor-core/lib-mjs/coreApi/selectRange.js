import { hasFocus } from './hasFocus';
import { contains, getPendableFormatState, Position, PendableFormatCommandMap, addRangeToSelection, getObjectKeys, } from 'roosterjs-editor-dom';
/**
 * @internal
 * Change the editor selection to the given range
 * @param core The EditorCore object
 * @param range The range to select
 * @param skipSameRange When set to true, do nothing if the given range is the same with current selection
 * in editor, otherwise it will always remove current selection range and set to the given one.
 * This parameter is always treat as true in Edge to avoid some weird runtime exception.
 */
export var selectRange = function (core, range, skipSameRange) {
    if (!core.lifecycle.shadowEditSelectionPath && contains(core.contentDiv, range)) {
        addRangeToSelection(range, skipSameRange);
        if (!hasFocus(core)) {
            core.domEvent.selectionRange = range;
        }
        if (range.collapsed) {
            // If selected, and current selection is collapsed,
            // need to restore pending format state if exists.
            restorePendingFormatState(core);
        }
        return true;
    }
    else {
        return false;
    }
};
/**
 * Restore cached pending format state (if exist) to current selection
 */
function restorePendingFormatState(core) {
    var contentDiv = core.contentDiv, pendingFormatState = core.pendingFormatState, getSelectionRange = core.api.getSelectionRange;
    if (pendingFormatState.pendableFormatState) {
        var document_1 = contentDiv.ownerDocument;
        var formatState_1 = getPendableFormatState(document_1);
        getObjectKeys(PendableFormatCommandMap).forEach(function (key) {
            var _a;
            if (!!((_a = pendingFormatState.pendableFormatState) === null || _a === void 0 ? void 0 : _a[key]) != formatState_1[key]) {
                document_1.execCommand(PendableFormatCommandMap[key], false /* showUI */, undefined /* value */);
            }
        });
        var range = getSelectionRange(core, true /*tryGetFromCache*/);
        var position = range && Position.getStart(range);
        if (position) {
            pendingFormatState.pendableFormatPosition = position;
        }
    }
}
//# sourceMappingURL=selectRange.js.map