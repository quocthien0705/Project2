define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @internal
     * MouseUpPlugin help trigger MouseUp event even when mouse up happens outside editor
     * as long as the mouse was pressed within Editor before
     */
    var MouseUpPlugin = /** @class */ (function () {
        function MouseUpPlugin() {
            var _this = this;
            this.editor = null;
            this.mouseUpEventListerAdded = false;
            this.mouseDownX = null;
            this.mouseDownY = null;
            this.onMouseUp = function (rawEvent) {
                if (_this.editor) {
                    _this.removeMouseUpEventListener();
                    _this.editor.triggerPluginEvent(6 /* MouseUp */, {
                        rawEvent: rawEvent,
                        isClicking: _this.mouseDownX == rawEvent.pageX && _this.mouseDownY == rawEvent.pageY,
                    });
                }
            };
        }
        /**
         * Get a friendly name of  this plugin
         */
        MouseUpPlugin.prototype.getName = function () {
            return 'MouseUp';
        };
        /**
         * Initialize this plugin. This should only be called from Editor
         * @param editor Editor instance
         */
        MouseUpPlugin.prototype.initialize = function (editor) {
            this.editor = editor;
        };
        /**
         * Dispose this plugin
         */
        MouseUpPlugin.prototype.dispose = function () {
            this.removeMouseUpEventListener();
            this.editor = null;
        };
        /**
         * Handle events triggered from editor
         * @param event PluginEvent object
         */
        MouseUpPlugin.prototype.onPluginEvent = function (event) {
            if (this.editor &&
                event.eventType == 5 /* MouseDown */ &&
                !this.mouseUpEventListerAdded) {
                this.editor
                    .getDocument()
                    .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);
                this.mouseUpEventListerAdded = true;
                this.mouseDownX = event.rawEvent.pageX;
                this.mouseDownY = event.rawEvent.pageY;
            }
        };
        MouseUpPlugin.prototype.removeMouseUpEventListener = function () {
            if (this.editor && this.mouseUpEventListerAdded) {
                this.mouseUpEventListerAdded = false;
                this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);
            }
        };
        return MouseUpPlugin;
    }());
    exports.default = MouseUpPlugin;
});
//# sourceMappingURL=MouseUpPlugin.js.map