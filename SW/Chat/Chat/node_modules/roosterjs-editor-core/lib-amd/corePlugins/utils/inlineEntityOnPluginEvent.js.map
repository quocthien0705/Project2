{"version":3,"file":"inlineEntityOnPluginEvent.js","sourceRoot":"","sources":["../../../../../packages/roosterjs-editor-core/lib/corePlugins/utils/inlineEntityOnPluginEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    addDelimiters,\n    arrayPush,\n    createRange,\n    getDelimiterFromElement,\n    getEntityFromElement,\n    getEntitySelector,\n    isBlockElement,\n    isCharacterValue,\n    matchesSelector,\n    Position,\n    safeInstanceOf,\n    splitTextNode,\n} from 'roosterjs-editor-dom';\nimport type { Entity, IEditor, PluginEvent, PluginKeyDownEvent } from 'roosterjs-editor-types';\nimport {\n    ChangeSource,\n    DelimiterClasses,\n    Keys,\n    NodeType,\n    PluginEventType,\n    PositionType,\n    SelectionRangeTypes,\n} from 'roosterjs-editor-types';\n\nconst DELIMITER_SELECTOR =\n    '.' + DelimiterClasses.DELIMITER_AFTER + ',.' + DelimiterClasses.DELIMITER_BEFORE;\nconst ZERO_WIDTH_SPACE = '\\u200B';\nconst INLINE_ENTITY_SELECTOR = 'span' + getEntitySelector();\n\n/**\n * @internal\n */\nexport function inlineEntityOnPluginEvent(event: PluginEvent, editor: IEditor) {\n    switch (event.eventType) {\n        case PluginEventType.ContentChanged:\n            if (event.source === ChangeSource.SetContent) {\n                normalizeDelimitersInEditor(editor);\n            }\n            break;\n        case PluginEventType.EditorReady:\n            normalizeDelimitersInEditor(editor);\n            break;\n\n        case PluginEventType.BeforePaste:\n            const { fragment, sanitizingOption } = event;\n            addDelimitersIfNeeded(fragment.querySelectorAll(INLINE_ENTITY_SELECTOR));\n\n            if (sanitizingOption.additionalAllowedCssClasses) {\n                arrayPush(sanitizingOption.additionalAllowedCssClasses, [\n                    DelimiterClasses.DELIMITER_AFTER,\n                    DelimiterClasses.DELIMITER_BEFORE,\n                ]);\n            }\n            break;\n\n        case PluginEventType.ExtractContentWithDom:\n        case PluginEventType.BeforeCutCopy:\n            event.clonedRoot.querySelectorAll(DELIMITER_SELECTOR).forEach(node => {\n                if (getDelimiterFromElement(node)) {\n                    removeNode(node);\n                } else {\n                    removeDelimiterAttr(node);\n                }\n            });\n            break;\n\n        case PluginEventType.KeyDown:\n            handleKeyDownEvent(editor, event);\n            break;\n    }\n}\n\nfunction preventTypeInDelimiter(delimiter: HTMLElement) {\n    delimiter.normalize();\n    const textNode = delimiter.firstChild as Node;\n    const index = textNode.nodeValue?.indexOf(ZERO_WIDTH_SPACE) ?? -1;\n    if (index >= 0) {\n        splitTextNode(<Text>textNode, index == 0 ? 1 : index, false /* returnFirstPart */);\n        let nodeToMove: Node | undefined;\n        delimiter.childNodes.forEach(node => {\n            if (node.nodeValue !== ZERO_WIDTH_SPACE) {\n                nodeToMove = node;\n            }\n        });\n        if (nodeToMove) {\n            delimiter.parentElement?.insertBefore(\n                nodeToMove,\n                delimiter.className == DelimiterClasses.DELIMITER_BEFORE\n                    ? delimiter\n                    : delimiter.nextSibling\n            );\n            const selection = nodeToMove.ownerDocument?.getSelection();\n\n            if (selection) {\n                selection.setPosition(\n                    nodeToMove,\n                    new Position(nodeToMove, PositionType.End).offset\n                );\n            }\n        }\n    }\n}\n\n/**\n * @internal\n */\nexport function normalizeDelimitersInEditor(editor: IEditor) {\n    removeInvalidDelimiters(editor.queryElements(DELIMITER_SELECTOR));\n    addDelimitersIfNeeded(editor.queryElements(INLINE_ENTITY_SELECTOR));\n}\n\nfunction addDelimitersIfNeeded(nodes: Element[] | NodeListOf<Element>) {\n    nodes.forEach(node => {\n        if (isEntityElement(node)) {\n            addDelimiters(node);\n        }\n    });\n}\n\nfunction isEntityElement(node: Node | null): node is HTMLElement {\n    return !!(\n        node &&\n        safeInstanceOf(node, 'HTMLElement') &&\n        isReadOnly(getEntityFromElement(node))\n    );\n}\n\nfunction removeNode(el: Node | undefined | null) {\n    el?.parentElement?.removeChild(el);\n}\n\nfunction isReadOnly(entity: Entity | null) {\n    return (\n        entity?.isReadonly &&\n        !isBlockElement(entity.wrapper) &&\n        safeInstanceOf(entity.wrapper, 'HTMLElement')\n    );\n}\n\nfunction removeInvalidDelimiters(nodes: Element[] | NodeListOf<Element>) {\n    nodes.forEach(node => {\n        if (getDelimiterFromElement(node)) {\n            const sibling = node.classList.contains(DelimiterClasses.DELIMITER_BEFORE)\n                ? node.nextElementSibling\n                : node.previousElementSibling;\n            if (!(safeInstanceOf(sibling, 'HTMLElement') && getEntityFromElement(sibling))) {\n                removeNode(node);\n            }\n        } else {\n            removeDelimiterAttr(node);\n        }\n    });\n}\n\nfunction removeDelimiterAttr(node: Element | undefined | null, checkEntity: boolean = true) {\n    if (!node) {\n        return;\n    }\n\n    const isAfter = node.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n    const entitySibling = isAfter ? node.previousElementSibling : node.nextElementSibling;\n    if (checkEntity && entitySibling && isEntityElement(entitySibling)) {\n        return;\n    }\n\n    node.classList.remove(DelimiterClasses.DELIMITER_AFTER, DelimiterClasses.DELIMITER_BEFORE);\n\n    node.normalize();\n    node.childNodes.forEach(cn => {\n        const index = cn.textContent?.indexOf(ZERO_WIDTH_SPACE) ?? -1;\n        if (index >= 0) {\n            createRange(cn, index, cn, index + 1)?.deleteContents();\n        }\n    });\n}\n\nfunction handleCollapsedEnter(editor: IEditor, delimiter: HTMLElement) {\n    const isAfter = delimiter.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n    const entity = !isAfter ? delimiter.nextSibling : delimiter.previousSibling;\n    const block = getBlock(editor, delimiter);\n\n    editor.runAsync(() => {\n        if (!block) {\n            return;\n        }\n        const blockToCheck = isAfter ? block.nextSibling : block.previousSibling;\n        if (blockToCheck && safeInstanceOf(blockToCheck, 'HTMLElement')) {\n            const delimiters = blockToCheck.querySelectorAll(DELIMITER_SELECTOR);\n            // Check if the last or first delimiter still contain the delimiter class and remove it.\n            const delimiterToCheck = delimiters.item(isAfter ? 0 : delimiters.length - 1);\n            removeDelimiterAttr(delimiterToCheck);\n        }\n\n        if (isEntityElement(entity)) {\n            const { nextElementSibling, previousElementSibling } = entity;\n            [nextElementSibling, previousElementSibling].forEach(el => {\n                // Check if after Enter the ZWS got removed but we still have a element with the class\n                // Remove the attributes of the element if it is invalid now.\n                if (el && matchesSelector(el, DELIMITER_SELECTOR) && !getDelimiterFromElement(el)) {\n                    removeDelimiterAttr(el, false /* checkEntity */);\n                }\n            });\n            // Add delimiters to the entity if needed because on Enter we can sometimes lose the ZWS of the element.\n            addDelimiters(entity);\n        }\n    });\n}\n\nconst getPosition = (container: HTMLElement | null) => {\n    if (container && getDelimiterFromElement(container)) {\n        const isAfter = container.classList.contains(DelimiterClasses.DELIMITER_AFTER);\n        return new Position(container, isAfter ? PositionType.After : PositionType.Before);\n    }\n    return undefined;\n};\n\nfunction getBlock(editor: IEditor, element: Node | undefined) {\n    if (!element) {\n        return undefined;\n    }\n\n    let block = editor.getBlockElementAtNode(element)?.getStartNode();\n\n    while (block && !isBlockElement(block)) {\n        block = editor.contains(block.parentElement) ? block.parentElement! : undefined;\n    }\n\n    return block;\n}\n\nfunction handleSelectionNotCollapsed(editor: IEditor, range: Range, event: KeyboardEvent) {\n    const { startContainer, endContainer, startOffset, endOffset } = range;\n\n    const startElement = editor.getElementAtCursor(DELIMITER_SELECTOR, startContainer);\n    const endElement = editor.getElementAtCursor(DELIMITER_SELECTOR, endContainer);\n\n    const startUpdate = getPosition(startElement);\n    const endUpdate = getPosition(endElement);\n\n    if (startUpdate || endUpdate) {\n        editor.select(\n            startUpdate ?? new Position(startContainer, startOffset),\n            endUpdate ?? new Position(endContainer, endOffset)\n        );\n    }\n    editor.runAsync(aEditor => {\n        const delimiter = aEditor.getElementAtCursor(DELIMITER_SELECTOR);\n        if (delimiter) {\n            preventTypeInDelimiter(delimiter);\n            if (event.which === Keys.ENTER) {\n                removeDelimiterAttr(delimiter);\n            }\n        }\n    });\n}\n\nfunction handleKeyDownEvent(editor: IEditor, event: PluginKeyDownEvent) {\n    const range = editor.getSelectionRangeEx();\n    const { rawEvent } = event;\n    if (range.type != SelectionRangeTypes.Normal) {\n        return;\n    }\n\n    if (range.areAllCollapsed && (isCharacterValue(rawEvent) || rawEvent.which === Keys.ENTER)) {\n        const position = editor.getFocusedPosition()?.normalize();\n        if (!position) {\n            return;\n        }\n\n        const { element, node } = position;\n        const refNode = element == node ? element.childNodes.item(position.offset) : element;\n\n        const delimiter = editor.getElementAtCursor(DELIMITER_SELECTOR, refNode);\n        if (!delimiter) {\n            return;\n        }\n\n        if (rawEvent.which === Keys.ENTER) {\n            handleCollapsedEnter(editor, delimiter);\n        } else if (delimiter.firstChild?.nodeType == NodeType.Text) {\n            editor.runAsync(() => preventTypeInDelimiter(delimiter));\n        }\n    } else if (!range.areAllCollapsed && !rawEvent.shiftKey && rawEvent.which != Keys.SHIFT) {\n        const currentRange = range.ranges[0];\n        if (!currentRange) {\n            return;\n        }\n        handleSelectionNotCollapsed(editor, currentRange, rawEvent);\n    }\n}\n"]}