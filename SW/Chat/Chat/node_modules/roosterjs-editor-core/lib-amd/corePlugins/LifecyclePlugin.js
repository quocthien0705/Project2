define(["require", "exports", "tslib", "roosterjs-editor-dom"], function (require, exports, tslib_1, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CONTENT_EDITABLE_ATTRIBUTE_NAME = 'contenteditable';
    var DARK_MODE_DEFAULT_FORMAT = {
        backgroundColors: {
            darkModeColor: 'rgb(51,51,51)',
            lightModeColor: 'rgb(255,255,255)',
        },
        textColors: {
            darkModeColor: 'rgb(255,255,255)',
            lightModeColor: 'rgb(0,0,0)',
        },
    };
    /**
     * @internal
     * Lifecycle plugin handles editor initialization and disposing
     */
    var LifecyclePlugin = /** @class */ (function () {
        /**
         * Construct a new instance of LifecyclePlugin
         * @param options The editor options
         * @param contentDiv The editor content DIV
         */
        function LifecyclePlugin(options, contentDiv) {
            var _this = this;
            var _a, _b;
            this.editor = null;
            this.initializer = null;
            this.disposer = null;
            this.initialContent = options.initialContent || contentDiv.innerHTML || '';
            // Make the container editable and set its selection styles
            if (contentDiv.getAttribute(CONTENT_EDITABLE_ATTRIBUTE_NAME) === null) {
                this.initializer = function () {
                    contentDiv.contentEditable = 'true';
                    contentDiv.style.userSelect = 'text';
                };
                this.disposer = function () {
                    contentDiv.style.userSelect = '';
                    contentDiv.removeAttribute(CONTENT_EDITABLE_ATTRIBUTE_NAME);
                };
            }
            this.adjustColor = options.doNotAdjustEditorColor
                ? function () { }
                : function () {
                    var _a;
                    var textColors = DARK_MODE_DEFAULT_FORMAT.textColors, backgroundColors = DARK_MODE_DEFAULT_FORMAT.backgroundColors;
                    var isDarkMode = _this.state.isDarkMode;
                    var darkColorHandler = (_a = _this.editor) === null || _a === void 0 ? void 0 : _a.getDarkColorHandler();
                    (0, roosterjs_editor_dom_1.setColor)(contentDiv, textColors, false /*isBackground*/, isDarkMode, false /*shouldAdaptFontColor*/, darkColorHandler);
                    (0, roosterjs_editor_dom_1.setColor)(contentDiv, backgroundColors, true /*isBackground*/, isDarkMode, false /*shouldAdaptFontColor*/, darkColorHandler);
                };
            var getDarkColor = (_a = options.getDarkColor) !== null && _a !== void 0 ? _a : (function (color) { return color; });
            var defaultFormat = options.defaultFormat ? (0, tslib_1.__assign)({}, options.defaultFormat) : null;
            if (defaultFormat) {
                if (defaultFormat.textColor && !defaultFormat.textColors) {
                    defaultFormat.textColors = {
                        lightModeColor: defaultFormat.textColor,
                        darkModeColor: getDarkColor(defaultFormat.textColor),
                    };
                    delete defaultFormat.textColor;
                }
                if (defaultFormat.backgroundColor && !defaultFormat.backgroundColors) {
                    defaultFormat.backgroundColors = {
                        lightModeColor: defaultFormat.backgroundColor,
                        darkModeColor: getDarkColor(defaultFormat.backgroundColor),
                    };
                    delete defaultFormat.backgroundColor;
                }
            }
            this.state = {
                customData: {},
                defaultFormat: defaultFormat,
                isDarkMode: !!options.inDarkMode,
                getDarkColor: getDarkColor,
                onExternalContentTransform: (_b = options.onExternalContentTransform) !== null && _b !== void 0 ? _b : null,
                experimentalFeatures: options.experimentalFeatures || [],
                shadowEditFragment: null,
                shadowEditEntities: null,
                shadowEditSelectionPath: null,
                shadowEditTableSelectionPath: null,
                shadowEditImageSelectionPath: null,
            };
        }
        /**
         * Get a friendly name of  this plugin
         */
        LifecyclePlugin.prototype.getName = function () {
            return 'Lifecycle';
        };
        /**
         * Initialize this plugin. This should only be called from Editor
         * @param editor Editor instance
         */
        LifecyclePlugin.prototype.initialize = function (editor) {
            var _a;
            this.editor = editor;
            // Ensure initial content and its format
            this.editor.setContent(this.initialContent, false /*triggerContentChangedEvent*/);
            // Set content DIV to be editable
            (_a = this.initializer) === null || _a === void 0 ? void 0 : _a.call(this);
            // Set editor background color for dark mode
            this.adjustColor();
            // Let other plugins know that we are ready
            this.editor.triggerPluginEvent(11 /* EditorReady */, {}, true /*broadcast*/);
        };
        /**
         * Dispose this plugin
         */
        LifecyclePlugin.prototype.dispose = function () {
            var _this = this;
            var _a;
            (_a = this.editor) === null || _a === void 0 ? void 0 : _a.triggerPluginEvent(12 /* BeforeDispose */, {}, true /*broadcast*/);
            (0, roosterjs_editor_dom_1.getObjectKeys)(this.state.customData).forEach(function (key) {
                var data = _this.state.customData[key];
                if (data && data.disposer) {
                    data.disposer(data.value);
                }
                delete _this.state.customData[key];
            });
            if (this.disposer) {
                this.disposer();
                this.disposer = null;
                this.initializer = null;
            }
            this.editor = null;
        };
        /**
         * Get plugin state object
         */
        LifecyclePlugin.prototype.getState = function () {
            return this.state;
        };
        /**
         * Handle events triggered from editor
         * @param event PluginEvent object
         */
        LifecyclePlugin.prototype.onPluginEvent = function (event) {
            if (event.eventType == 7 /* ContentChanged */ &&
                (event.source == "SwitchToDarkMode" /* SwitchToDarkMode */ ||
                    event.source == "SwitchToLightMode" /* SwitchToLightMode */)) {
                this.state.isDarkMode = event.source == "SwitchToDarkMode" /* SwitchToDarkMode */;
                this.adjustColor();
            }
        };
        return LifecyclePlugin;
    }());
    exports.default = LifecyclePlugin;
});
//# sourceMappingURL=LifecyclePlugin.js.map