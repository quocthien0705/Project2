define(["require", "exports", "./CopyPastePlugin", "./DOMEventPlugin", "./EditPlugin", "./EntityPlugin", "./ImageSelection", "./LifecyclePlugin", "./MouseUpPlugin", "./NormalizeTablePlugin", "./PendingFormatStatePlugin", "./TypeInContainerPlugin", "./UndoPlugin"], function (require, exports, CopyPastePlugin_1, DOMEventPlugin_1, EditPlugin_1, EntityPlugin_1, ImageSelection_1, LifecyclePlugin_1, MouseUpPlugin_1, NormalizeTablePlugin_1, PendingFormatStatePlugin_1, TypeInContainerPlugin_1, UndoPlugin_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPluginState = void 0;
    /**
     * @internal
     * Create Core Plugins
     * @param contentDiv Content DIV of editor
     * @param options Editor options
     */
    function createCorePlugins(contentDiv, options) {
        var map = options.corePluginOverride || {};
        // The order matters, some plugin needs to be put before/after others to make sure event
        // can be handled in right order
        return {
            typeInContainer: map.typeInContainer || new TypeInContainerPlugin_1.default(),
            edit: map.edit || new EditPlugin_1.default(),
            pendingFormatState: map.pendingFormatState || new PendingFormatStatePlugin_1.default(),
            _placeholder: null,
            typeAfterLink: null,
            undo: map.undo || new UndoPlugin_1.default(options),
            domEvent: map.domEvent || new DOMEventPlugin_1.default(options, contentDiv),
            mouseUp: map.mouseUp || new MouseUpPlugin_1.default(),
            copyPaste: map.copyPaste || new CopyPastePlugin_1.default(options),
            entity: map.entity || new EntityPlugin_1.default(),
            imageSelection: map.imageSelection || new ImageSelection_1.default(),
            normalizeTable: map.normalizeTable || new NormalizeTablePlugin_1.default(),
            lifecycle: map.lifecycle || new LifecyclePlugin_1.default(options, contentDiv),
        };
    }
    exports.default = createCorePlugins;
    /**
     * @internal
     * Get plugin state of core plugins
     * @param corePlugins CorePlugins object
     */
    function getPluginState(corePlugins) {
        return {
            domEvent: corePlugins.domEvent.getState(),
            pendingFormatState: corePlugins.pendingFormatState.getState(),
            edit: corePlugins.edit.getState(),
            lifecycle: corePlugins.lifecycle.getState(),
            undo: corePlugins.undo.getState(),
            entity: corePlugins.entity.getState(),
            copyPaste: corePlugins.copyPaste.getState(),
        };
    }
    exports.getPluginState = getPluginState;
});
//# sourceMappingURL=createCorePlugins.js.map