{"version":3,"file":"CopyPastePlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/CopyPastePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { forEachSelectedCell } from './utils/forEachSelectedCell';\nimport { removeCellsOutsideSelection } from './utils/removeCellsOutsideSelection';\nimport {\n    addRangeToSelection,\n    createElement,\n    extractClipboardEvent,\n    moveChildNodes,\n    Browser,\n    setHtmlWithMetadata,\n    createRange,\n    VTable,\n    isWholeTableSelected,\n} from 'roosterjs-editor-dom';\nimport type {\n    CopyPastePluginState,\n    EditorOptions,\n    IEditor,\n    PluginWithState,\n    SelectionRangeEx,\n    TableSelection,\n} from 'roosterjs-editor-types';\nimport {\n    ChangeSource,\n    GetContentMode,\n    PluginEventType,\n    KnownCreateElementDataIndex,\n    SelectionRangeTypes,\n    TableOperation,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n * Copy and paste plugin for handling onCopy and onPaste event\n */\nexport default class CopyPastePlugin implements PluginWithState<CopyPastePluginState> {\n    private editor: IEditor | null = null;\n    private disposer: (() => void) | null = null;\n    private state: CopyPastePluginState;\n\n    /**\n     * Construct a new instance of CopyPastePlugin\n     * @param options The editor options\n     */\n    constructor(options: EditorOptions) {\n        this.state = {\n            allowedCustomPasteType: options.allowedCustomPasteType || [],\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'CopyPaste';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n        this.disposer = this.editor.addDomEventHandler({\n            paste: e => this.onPaste(e),\n            copy: e => this.onCutCopy(e, false /*isCut*/),\n            cut: e => this.onCutCopy(e, true /*isCut*/),\n        });\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        if (this.disposer) {\n            this.disposer();\n        }\n        this.disposer = null;\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    private onCutCopy(event: Event, isCut: boolean) {\n        if (this.editor) {\n            const selection = this.editor.getSelectionRangeEx();\n            if (selection && !selection.areAllCollapsed) {\n                const html = this.editor.getContent(GetContentMode.RawHTMLWithSelection);\n                const tempDiv = this.getTempDiv(this.editor, true /*forceInLightMode*/);\n                const metadata = setHtmlWithMetadata(\n                    tempDiv,\n                    html,\n                    this.editor.getTrustedHTMLHandler()\n                );\n                let newRange: Range | null = null;\n\n                if (\n                    selection.type === SelectionRangeTypes.TableSelection &&\n                    selection.coordinates\n                ) {\n                    const table = tempDiv.querySelector(\n                        `#${selection.table.id}`\n                    ) as HTMLTableElement;\n                    newRange = this.createTableRange(table, selection.coordinates);\n                    if (isCut) {\n                        this.deleteTableContent(\n                            this.editor,\n                            selection.table,\n                            selection.coordinates\n                        );\n                    }\n                } else if (selection.type === SelectionRangeTypes.ImageSelection) {\n                    const image = tempDiv.querySelector('#' + selection.image.id);\n\n                    if (image) {\n                        newRange = createRange(image);\n                        if (isCut) {\n                            this.deleteImage(this.editor, selection.image.id);\n                        }\n                    }\n                } else {\n                    newRange =\n                        metadata?.type === SelectionRangeTypes.Normal\n                            ? createRange(tempDiv, metadata.start, metadata.end)\n                            : null;\n                }\n                if (newRange) {\n                    const cutCopyEvent = this.editor.triggerPluginEvent(\n                        PluginEventType.BeforeCutCopy,\n                        {\n                            clonedRoot: tempDiv,\n                            range: newRange,\n                            rawEvent: event as ClipboardEvent,\n                            isCut,\n                        }\n                    );\n\n                    if (cutCopyEvent.range) {\n                        addRangeToSelection(newRange);\n                    }\n\n                    this.editor.runAsync(editor => {\n                        this.cleanUpAndRestoreSelection(tempDiv, selection, !isCut /* isCopy */);\n\n                        if (isCut) {\n                            editor.addUndoSnapshot(() => {\n                                const position = editor.deleteSelectedContent();\n                                editor.focus();\n                                editor.select(position);\n                            }, ChangeSource.Cut);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    private onPaste = (event: Event) => {\n        let range: Range | null = null;\n        if (this.editor) {\n            const editor = this.editor;\n            extractClipboardEvent(\n                event as ClipboardEvent,\n                clipboardData => {\n                    if (editor && !editor.isDisposed()) {\n                        editor.paste(clipboardData);\n                    }\n                },\n                {\n                    allowedCustomPasteType: this.state.allowedCustomPasteType,\n                    getTempDiv: () => {\n                        range = editor.getSelectionRange() ?? null;\n                        return this.getTempDiv(editor);\n                    },\n                    removeTempDiv: div => {\n                        if (range) {\n                            this.cleanUpAndRestoreSelection(div, range, false /* isCopy */);\n                        }\n                    },\n                },\n                this.editor.getSelectionRange() ?? undefined\n            );\n        }\n    };\n\n    private getTempDiv(editor: IEditor, forceInLightMode?: boolean) {\n        const div = editor.getCustomData(\n            'CopyPasteTempDiv',\n            () => {\n                const tempDiv = createElement(\n                    KnownCreateElementDataIndex.CopyPasteTempDiv,\n                    editor.getDocument()\n                ) as HTMLDivElement;\n\n                editor.getDocument().body.appendChild(tempDiv);\n\n                return tempDiv;\n            },\n            tempDiv => tempDiv.parentNode?.removeChild(tempDiv)\n        );\n\n        if (forceInLightMode) {\n            div.style.backgroundColor = 'white';\n            div.style.color = 'black';\n        }\n\n        div.style.display = '';\n        div.focus();\n\n        return div;\n    }\n\n    private cleanUpAndRestoreSelection(\n        tempDiv: HTMLDivElement,\n        range: Range | SelectionRangeEx,\n        isCopy: boolean\n    ) {\n        if (!!(<SelectionRangeEx>range)?.type || (<SelectionRangeEx>range).type == 0) {\n            const selection = <SelectionRangeEx>range;\n            switch (selection.type) {\n                case SelectionRangeTypes.TableSelection:\n                case SelectionRangeTypes.ImageSelection:\n                    this.editor?.select(selection);\n                    break;\n                case SelectionRangeTypes.Normal:\n                    const range = selection.ranges?.[0];\n                    this.restoreRange(range, isCopy);\n                    break;\n            }\n        } else {\n            this.restoreRange(<Range>range, isCopy);\n        }\n\n        tempDiv.style.backgroundColor = '';\n        tempDiv.style.color = '';\n        tempDiv.style.display = 'none';\n        moveChildNodes(tempDiv);\n    }\n\n    private restoreRange(range: Range, isCopy: boolean) {\n        if (range && this.editor) {\n            if (isCopy && Browser.isAndroid) {\n                range.collapse();\n            }\n            this.editor.select(range);\n        }\n    }\n\n    private createTableRange(table: HTMLTableElement, selection: TableSelection) {\n        const clonedVTable = new VTable(table as HTMLTableElement);\n        clonedVTable.selection = selection;\n        removeCellsOutsideSelection(clonedVTable);\n        clonedVTable.writeBack();\n        return createRange(clonedVTable.table);\n    }\n\n    private deleteTableContent(\n        editor: IEditor,\n        table: HTMLTableElement,\n        selection: TableSelection\n    ) {\n        const selectedVTable = new VTable(table);\n        selectedVTable.selection = selection;\n\n        forEachSelectedCell(selectedVTable, cell => {\n            if (cell?.td) {\n                cell.td.innerHTML = editor.getTrustedHTMLHandler()('<br>');\n            }\n        });\n\n        const wholeTableSelected = isWholeTableSelected(selectedVTable, selection);\n        const isWholeColumnSelected =\n            table.rows.length - 1 === selection.lastCell.y && selection.firstCell.y === 0;\n        if (wholeTableSelected) {\n            selectedVTable.edit(TableOperation.DeleteTable);\n            selectedVTable.writeBack();\n        } else if (isWholeColumnSelected) {\n            selectedVTable.edit(TableOperation.DeleteColumn);\n            selectedVTable.writeBack();\n        }\n        if (wholeTableSelected || isWholeColumnSelected) {\n            table.style.removeProperty('width');\n            table.style.removeProperty('height');\n        }\n    }\n\n    private deleteImage(editor: IEditor, imageId: string) {\n        editor.queryElements('#' + imageId, node => {\n            editor.deleteNode(node);\n        });\n    }\n}\n"]}