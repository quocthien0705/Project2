{"version":3,"file":"MouseUpPlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts"],"names":[],"mappings":";;;IAGA;;;;OAIG;IACH;QAAA;YAAA,iBA+DC;YA9DW,WAAM,GAAmB,IAAI,CAAC;YAC9B,4BAAuB,GAAY,KAAK,CAAC;YACzC,eAAU,GAAkB,IAAI,CAAC;YACjC,eAAU,GAAkB,IAAI,CAAC;YAkDjC,cAAS,GAAG,UAAC,QAAoB;gBACrC,IAAI,KAAI,CAAC,MAAM,EAAE;oBACb,KAAI,CAAC,0BAA0B,EAAE,CAAC;oBAClC,KAAI,CAAC,MAAM,CAAC,kBAAkB,kBAA0B;wBACpD,QAAQ,UAAA;wBACR,UAAU,EAAE,KAAI,CAAC,UAAU,IAAI,QAAQ,CAAC,KAAK,IAAI,KAAI,CAAC,UAAU,IAAI,QAAQ,CAAC,KAAK;qBACrF,CAAC,CAAC;iBACN;YACL,CAAC,CAAC;QACN,CAAC;QAzDG;;WAEG;QACH,+BAAO,GAAP;YACI,OAAO,SAAS,CAAC;QACrB,CAAC;QAED;;;WAGG;QACH,kCAAU,GAAV,UAAW,MAAe;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QAED;;WAEG;QACH,+BAAO,GAAP;YACI,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED;;;WAGG;QACH,qCAAa,GAAb,UAAc,KAAkB;YAC5B,IACI,IAAI,CAAC,MAAM;gBACX,KAAK,CAAC,SAAS,qBAA6B;gBAC5C,CAAC,IAAI,CAAC,uBAAuB,EAC/B;gBACE,IAAI,CAAC,MAAM;qBACN,WAAW,EAAE;qBACb,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBACtE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;gBACpC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACvC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;aAC1C;QACL,CAAC;QACO,kDAA0B,GAAlC;YACI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,uBAAuB,EAAE;gBAC7C,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;aAClF;QACL,CAAC;QAWL,oBAAC;IAAD,CAAC,AA/DD,IA+DC","sourcesContent":["import { PluginEventType } from 'roosterjs-editor-types';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\n\n/**\n * @internal\n * MouseUpPlugin help trigger MouseUp event even when mouse up happens outside editor\n * as long as the mouse was pressed within Editor before\n */\nexport default class MouseUpPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n    private mouseUpEventListerAdded: boolean = false;\n    private mouseDownX: number | null = null;\n    private mouseDownY: number | null = null;\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'MouseUp';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.removeMouseUpEventListener();\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (\n            this.editor &&\n            event.eventType == PluginEventType.MouseDown &&\n            !this.mouseUpEventListerAdded\n        ) {\n            this.editor\n                .getDocument()\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n            this.mouseUpEventListerAdded = true;\n            this.mouseDownX = event.rawEvent.pageX;\n            this.mouseDownY = event.rawEvent.pageY;\n        }\n    }\n    private removeMouseUpEventListener() {\n        if (this.editor && this.mouseUpEventListerAdded) {\n            this.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n\n    private onMouseUp = (rawEvent: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerPluginEvent(PluginEventType.MouseUp, {\n                rawEvent,\n                isClicking: this.mouseDownX == rawEvent.pageX && this.mouseDownY == rawEvent.pageY,\n            });\n        }\n    };\n}\n"]}