{"version":3,"file":"TypeInContainerPlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts"],"names":[],"mappings":";;;IAUA;;;OAGG;IACH;QAAA;YACY,WAAM,GAAmB,IAAI,CAAC;QAmF1C,CAAC;QAjFG;;WAEG;QACH,uCAAO,GAAP;YACI,OAAO,iBAAiB,CAAC;QAC7B,CAAC;QAED;;;WAGG;QACH,0CAAU,GAAV,UAAW,MAAe;YACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QAED;;WAEG;QACH,uCAAO,GAAP;YACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAEO,4CAAY,GAApB,UAAqB,KAAY;YAC7B,IACI,KAAK,CAAC,SAAS;gBACf,KAAK,CAAC,cAAc,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY;gBACnD,IAAA,mCAAY,EAAC,KAAK,CAAC,cAAc,CAAC,IAAI,KAAK;gBAC3C,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,EAClC;gBACE,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;QAED;;;WAGG;QACH,6CAAa,GAAb,UAAc,KAAkB;YAAhC,iBA0CC;;YAzCG,+DAA+D;YAC/D,+EAA+E;YAC/E,IACI,KAAK,CAAC,SAAS,oBAA4B;gBAC3C,IAAI,CAAC,MAAM;gBACX,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAA,0CAAmB,EAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAC1D;gBACE,yDAAyD;gBACzD,sFAAsF;gBACtF,EAAE;gBACF,yFAAyF;gBACzF,kFAAkF;gBAClF,EAAE;gBACF,yEAAyE;gBACzE,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;gBAE9C,IAAM,cAAc,GAChB,KAAK;oBACL,IAAA,iDAA0B,EAAC,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBAEtF,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE;oBAC/E,OAAO;iBACV;gBAED,IAAI,KAAK,CAAC,SAAS,EAAE;oBACjB,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,+BAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;iBAC/E;qBAAM;oBACH,IAAM,QAAQ,GAAG;;wBACb,IAAM,eAAe,GAAG,MAAA,KAAI,CAAC,MAAM,0CAAE,kBAAkB,EAAE,CAAC;wBAC1D,IAAI,eAAe,EAAE;4BACjB,MAAA,KAAI,CAAC,MAAM,0CAAE,qBAAqB,CAAC,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;yBACvE;oBACL,CAAC,CAAC;oBAEF,IAAI,8BAAO,CAAC,gBAAgB,EAAE;wBAC1B,MAAA,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,0CAAE,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;qBACpE;yBAAM;wBACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;qBAClC;iBACJ;aACJ;QACL,CAAC;QACL,4BAAC;IAAD,CAAC,AApFD,IAoFC","sourcesContent":["import { PluginEventType } from 'roosterjs-editor-types';\nimport type { EditorPlugin, IEditor, PluginEvent } from 'roosterjs-editor-types';\nimport {\n    Browser,\n    findClosestElementAncestor,\n    getTagOfNode,\n    isCtrlOrMetaPressed,\n    Position,\n} from 'roosterjs-editor-dom';\n\n/**\n * @internal\n * Typing Component helps to ensure typing is always happening under a DOM container\n */\nexport default class TypeInContainerPlugin implements EditorPlugin {\n    private editor: IEditor | null = null;\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'TypeInContainer';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor = null;\n    }\n\n    private isRangeEmpty(range: Range) {\n        if (\n            range.collapsed &&\n            range.startContainer.nodeType === Node.ELEMENT_NODE &&\n            getTagOfNode(range.startContainer) == 'DIV' &&\n            !range.startContainer.firstChild\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        // We need to check if the ctrl key or the meta key is pressed,\n        // browsers like Safari fire the \"keypress\" event when the meta key is pressed.\n        if (\n            event.eventType == PluginEventType.KeyPress &&\n            this.editor &&\n            !(event.rawEvent && isCtrlOrMetaPressed(event.rawEvent))\n        ) {\n            // If normalization was not possible before the keypress,\n            // check again after the keyboard event has been processed by browser native behavior.\n            //\n            // This handles the case where the keyboard event that first inserts content happens when\n            // there is already content under the selection (e.g. Ctrl+a -> type new content).\n            //\n            // Only schedule when the range is not collapsed to catch this edge case.\n            const range = this.editor.getSelectionRange();\n\n            const styledAncestor =\n                range &&\n                findClosestElementAncestor(range.startContainer, undefined /* root */, '[style]');\n\n            if (!range || (!this.isRangeEmpty(range) && this.editor.contains(styledAncestor))) {\n                return;\n            }\n\n            if (range.collapsed) {\n                this.editor.ensureTypeInContainer(Position.getStart(range), event.rawEvent);\n            } else {\n                const callback = () => {\n                    const focusedPosition = this.editor?.getFocusedPosition();\n                    if (focusedPosition) {\n                        this.editor?.ensureTypeInContainer(focusedPosition, event.rawEvent);\n                    }\n                };\n\n                if (Browser.isMobileOrTablet) {\n                    this.editor.getDocument().defaultView?.setTimeout(callback, 100);\n                } else {\n                    this.editor.runAsync(callback);\n                }\n            }\n        }\n    }\n}\n"]}