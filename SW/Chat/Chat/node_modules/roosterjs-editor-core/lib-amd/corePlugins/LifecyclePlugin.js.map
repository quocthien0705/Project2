{"version":3,"file":"LifecyclePlugin.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/corePlugins/LifecyclePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeSource, PluginEventType } from 'roosterjs-editor-types';\nimport { getObjectKeys, setColor } from 'roosterjs-editor-dom';\nimport type {\n    EditorOptions,\n    IEditor,\n    LifecyclePluginState,\n    PluginWithState,\n    PluginEvent,\n} from 'roosterjs-editor-types';\n\nconst CONTENT_EDITABLE_ATTRIBUTE_NAME = 'contenteditable';\n\nconst DARK_MODE_DEFAULT_FORMAT = {\n    backgroundColors: {\n        darkModeColor: 'rgb(51,51,51)',\n        lightModeColor: 'rgb(255,255,255)',\n    },\n    textColors: {\n        darkModeColor: 'rgb(255,255,255)',\n        lightModeColor: 'rgb(0,0,0)',\n    },\n};\n\n/**\n * @internal\n * Lifecycle plugin handles editor initialization and disposing\n */\nexport default class LifecyclePlugin implements PluginWithState<LifecyclePluginState> {\n    private editor: IEditor | null = null;\n    private state: LifecyclePluginState;\n    private initialContent: string;\n    private initializer: (() => void) | null = null;\n    private disposer: (() => void) | null = null;\n    private adjustColor: () => void;\n\n    /**\n     * Construct a new instance of LifecyclePlugin\n     * @param options The editor options\n     * @param contentDiv The editor content DIV\n     */\n    constructor(options: EditorOptions, contentDiv: HTMLDivElement) {\n        this.initialContent = options.initialContent || contentDiv.innerHTML || '';\n\n        // Make the container editable and set its selection styles\n        if (contentDiv.getAttribute(CONTENT_EDITABLE_ATTRIBUTE_NAME) === null) {\n            this.initializer = () => {\n                contentDiv.contentEditable = 'true';\n                contentDiv.style.userSelect = 'text';\n            };\n            this.disposer = () => {\n                contentDiv.style.userSelect = '';\n                contentDiv.removeAttribute(CONTENT_EDITABLE_ATTRIBUTE_NAME);\n            };\n        }\n        this.adjustColor = options.doNotAdjustEditorColor\n            ? () => {}\n            : () => {\n                  const { textColors, backgroundColors } = DARK_MODE_DEFAULT_FORMAT;\n                  const { isDarkMode } = this.state;\n                  const darkColorHandler = this.editor?.getDarkColorHandler();\n                  setColor(\n                      contentDiv,\n                      textColors,\n                      false /*isBackground*/,\n                      isDarkMode,\n                      false /*shouldAdaptFontColor*/,\n                      darkColorHandler\n                  );\n                  setColor(\n                      contentDiv,\n                      backgroundColors,\n                      true /*isBackground*/,\n                      isDarkMode,\n                      false /*shouldAdaptFontColor*/,\n                      darkColorHandler\n                  );\n              };\n\n        const getDarkColor = options.getDarkColor ?? ((color: string) => color);\n        const defaultFormat = options.defaultFormat ? { ...options.defaultFormat } : null;\n\n        if (defaultFormat) {\n            if (defaultFormat.textColor && !defaultFormat.textColors) {\n                defaultFormat.textColors = {\n                    lightModeColor: defaultFormat.textColor,\n                    darkModeColor: getDarkColor(defaultFormat.textColor),\n                };\n                delete defaultFormat.textColor;\n            }\n\n            if (defaultFormat.backgroundColor && !defaultFormat.backgroundColors) {\n                defaultFormat.backgroundColors = {\n                    lightModeColor: defaultFormat.backgroundColor,\n                    darkModeColor: getDarkColor(defaultFormat.backgroundColor),\n                };\n                delete defaultFormat.backgroundColor;\n            }\n        }\n\n        this.state = {\n            customData: {},\n            defaultFormat,\n            isDarkMode: !!options.inDarkMode,\n            getDarkColor,\n            onExternalContentTransform: options.onExternalContentTransform ?? null,\n            experimentalFeatures: options.experimentalFeatures || [],\n            shadowEditFragment: null,\n            shadowEditEntities: null,\n            shadowEditSelectionPath: null,\n            shadowEditTableSelectionPath: null,\n            shadowEditImageSelectionPath: null,\n        };\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Lifecycle';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    initialize(editor: IEditor) {\n        this.editor = editor;\n\n        // Ensure initial content and its format\n        this.editor.setContent(this.initialContent, false /*triggerContentChangedEvent*/);\n\n        // Set content DIV to be editable\n        this.initializer?.();\n\n        // Set editor background color for dark mode\n        this.adjustColor();\n\n        // Let other plugins know that we are ready\n        this.editor.triggerPluginEvent(PluginEventType.EditorReady, {}, true /*broadcast*/);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    dispose() {\n        this.editor?.triggerPluginEvent(PluginEventType.BeforeDispose, {}, true /*broadcast*/);\n\n        getObjectKeys(this.state.customData).forEach(key => {\n            const data = this.state.customData[key];\n\n            if (data && data.disposer) {\n                data.disposer(data.value);\n            }\n\n            delete this.state.customData[key];\n        });\n\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = null;\n            this.initializer = null;\n        }\n\n        this.editor = null;\n    }\n\n    /**\n     * Get plugin state object\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (\n            event.eventType == PluginEventType.ContentChanged &&\n            (event.source == ChangeSource.SwitchToDarkMode ||\n                event.source == ChangeSource.SwitchToLightMode)\n        ) {\n            this.state.isDarkMode = event.source == ChangeSource.SwitchToDarkMode;\n            this.adjustColor();\n        }\n    }\n}\n"]}