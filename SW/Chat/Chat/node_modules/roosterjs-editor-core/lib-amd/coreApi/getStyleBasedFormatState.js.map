{"version":3,"file":"getStyleBasedFormatState.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/getStyleBasedFormatState.ts"],"names":[],"mappings":"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","sourcesContent":["import { contains, getComputedStyles } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\nimport type { EditorCore, GetStyleBasedFormatState } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * @internal\r\n * Get style based format state from current selection, including font name/size and colors\r\n * @param core The EditorCore objects\r\n * @param node The node to get style from\r\n */\r\nexport const getStyleBasedFormatState: GetStyleBasedFormatState = (\r\n    core: EditorCore,\r\n    node: Node | null\r\n) => {\r\n    if (!node) {\r\n        return {};\r\n    }\r\n\r\n    let override: string[] = [];\r\n    const pendableFormatSpan = core.pendingFormatState.pendableFormatSpan;\r\n\r\n    if (pendableFormatSpan) {\r\n        override = [\r\n            pendableFormatSpan.style.fontFamily,\r\n            pendableFormatSpan.style.fontSize,\r\n            pendableFormatSpan.style.color,\r\n            pendableFormatSpan.style.backgroundColor,\r\n        ];\r\n    }\r\n\r\n    const styles = node\r\n        ? getComputedStyles(node, [\r\n              'font-family',\r\n              'font-size',\r\n              'color',\r\n              'background-color',\r\n              'line-height',\r\n              'margin-top',\r\n              'margin-bottom',\r\n              'text-align',\r\n              'direction',\r\n              'font-weight',\r\n          ])\r\n        : [];\r\n    const { contentDiv, darkColorHandler } = core;\r\n\r\n    let styleTextColor: string | undefined;\r\n    let styleBackColor: string | undefined;\r\n\r\n    while (\r\n        node &&\r\n        contains(contentDiv, node, true /*treatSameNodeAsContain*/) &&\r\n        !(styleTextColor && styleBackColor)\r\n    ) {\r\n        if (node.nodeType == NodeType.Element) {\r\n            const element = node as HTMLElement;\r\n\r\n            styleTextColor = styleTextColor || element.style.getPropertyValue('color');\r\n            styleBackColor = styleBackColor || element.style.getPropertyValue('background-color');\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n\r\n    if (!core.lifecycle.isDarkMode && node == core.contentDiv) {\r\n        styleTextColor = styleTextColor || styles[2];\r\n        styleBackColor = styleBackColor || styles[3];\r\n    }\r\n\r\n    const textColor = darkColorHandler.parseColorValue(override[2] || styleTextColor);\r\n    const backColor = darkColorHandler.parseColorValue(override[3] || styleBackColor);\r\n\r\n    return {\r\n        fontName: override[0] || styles[0],\r\n        fontSize: override[1] || styles[1],\r\n        textColor: textColor.lightModeColor,\r\n        backgroundColor: backColor.lightModeColor,\r\n        textColors: textColor.darkModeColor\r\n            ? {\r\n                  lightModeColor: textColor.lightModeColor,\r\n                  darkModeColor: textColor.darkModeColor,\r\n              }\r\n            : undefined,\r\n        backgroundColors: backColor.darkModeColor\r\n            ? {\r\n                  lightModeColor: backColor.lightModeColor,\r\n                  darkModeColor: backColor.darkModeColor,\r\n              }\r\n            : undefined,\r\n        lineHeight: styles[4],\r\n        marginTop: styles[5],\r\n        marginBottom: styles[6],\r\n        textAlign: styles[7],\r\n        direction: styles[8],\r\n        fontWeight: styles[9],\r\n    };\r\n};\r\n"]}