{"version":3,"file":"getPendableFormatState.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/getPendableFormatState.ts"],"names":[],"mappings":"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","sourcesContent":["import { contains, getObjectKeys, getTagOfNode, Position } from 'roosterjs-editor-dom';\nimport { NodeType } from 'roosterjs-editor-types';\nimport type { PendableFormatNames } from 'roosterjs-editor-dom';\nimport type {\n    EditorCore,\n    GetPendableFormatState,\n    NodePosition,\n    PendableFormatState,\n} from 'roosterjs-editor-types';\n\n/**\n * @internal\n * @param core The EditorCore object\n * @param forceGetStateFromDOM If set to true, will force get the format state from DOM tree.\n * @returns The cached format state if it exists. If the cached position do not exist, search for pendable elements in the DOM tree and return the pendable format state.\n */\nexport const getPendableFormatState: GetPendableFormatState = (\n    core: EditorCore,\n    forceGetStateFromDOM: boolean\n): PendableFormatState => {\n    const range = core.api.getSelectionRange(core, true /* tryGetFromCache*/);\n    const cachedPendableFormatState = core.pendingFormatState.pendableFormatState;\n    const cachedPosition = core.pendingFormatState.pendableFormatPosition?.normalize();\n    const currentPosition = range && Position.getStart(range).normalize();\n    const isSamePosition =\n        currentPosition &&\n        cachedPosition &&\n        range.collapsed &&\n        currentPosition.equalTo(cachedPosition);\n\n    if (range && cachedPendableFormatState && isSamePosition && !forceGetStateFromDOM) {\n        return cachedPendableFormatState;\n    } else {\n        return currentPosition ? queryCommandStateFromDOM(core, currentPosition) : {};\n    }\n};\n\nconst PendableStyleCheckers: Record<\n    PendableFormatNames,\n    (tagName: string, style: CSSStyleDeclaration) => boolean\n> = {\n    isBold: (tag, style) =>\n        tag == 'B' ||\n        tag == 'STRONG' ||\n        tag == 'H1' ||\n        tag == 'H2' ||\n        tag == 'H3' ||\n        tag == 'H4' ||\n        tag == 'H5' ||\n        tag == 'H6' ||\n        parseInt(style.fontWeight) >= 700 ||\n        ['bold', 'bolder'].indexOf(style.fontWeight) >= 0,\n    isUnderline: (tag, style) => tag == 'U' || style.textDecoration.indexOf('underline') >= 0,\n    isItalic: (tag, style) => tag == 'I' || tag == 'EM' || style.fontStyle === 'italic',\n    isSubscript: (tag, style) => tag == 'SUB' || style.verticalAlign === 'sub',\n    isSuperscript: (tag, style) => tag == 'SUP' || style.verticalAlign === 'super',\n    isStrikeThrough: (tag, style) =>\n        tag == 'S' || tag == 'STRIKE' || style.textDecoration.indexOf('line-through') >= 0,\n};\n\n/**\n * CssFalsyCheckers checks for non pendable format that might overlay a pendable format, then it can prevent getPendableFormatState return falsy pendable format states.\n */\n\nconst CssFalsyCheckers: Record<PendableFormatNames, (style: CSSStyleDeclaration) => boolean> = {\n    isBold: style =>\n        (style.fontWeight !== '' && parseInt(style.fontWeight) < 700) ||\n        style.fontWeight === 'normal',\n    isUnderline: style =>\n        style.textDecoration !== '' && style.textDecoration.indexOf('underline') < 0,\n    isItalic: style => style.fontStyle !== '' && style.fontStyle !== 'italic',\n    isSubscript: style => style.verticalAlign !== '' && style.verticalAlign !== 'sub',\n    isSuperscript: style => style.verticalAlign !== '' && style.verticalAlign !== 'super',\n    isStrikeThrough: style =>\n        style.textDecoration !== '' && style.textDecoration.indexOf('line-through') < 0,\n};\n\nfunction queryCommandStateFromDOM(\n    core: EditorCore,\n    currentPosition: NodePosition\n): PendableFormatState {\n    let node: Node | null = currentPosition.node;\n    const formatState: PendableFormatState = {};\n    const pendableKeys: PendableFormatNames[] = [];\n    while (node && contains(core.contentDiv, node)) {\n        const tag = getTagOfNode(node);\n        const style = node.nodeType == NodeType.Element && (node as HTMLElement).style;\n        if (tag && style) {\n            getObjectKeys(PendableStyleCheckers).forEach(key => {\n                if (!(pendableKeys.indexOf(key) >= 0)) {\n                    formatState[key] = formatState[key] || PendableStyleCheckers[key](tag, style);\n                    if (CssFalsyCheckers[key](style)) {\n                        pendableKeys.push(key);\n                    }\n                }\n            });\n        }\n        node = node.parentNode;\n    }\n    return formatState;\n}\n"]}