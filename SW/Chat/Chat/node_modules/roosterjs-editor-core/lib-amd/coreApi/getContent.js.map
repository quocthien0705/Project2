{"version":3,"file":"getContent.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/getContent.ts"],"names":[],"mappings":";;;;IAWA;;;;;;OAMG;IACI,IAAM,UAAU,GAAe,UAClC,IAAgB,EAChB,IAA+C;QAE/C,IAAI,OAAO,GAAkB,EAAE,CAAC;QAChC,IAAM,0BAA0B,GAAG,IAAI,qBAA4B,CAAC;QACpE,IAAM,sBAAsB,GAAG,IAAI,gCAAuC,CAAC;QAE3E,+GAA+G;QAC/G,uEAAuE;QACvE,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC;QAElE,IAAI,IAAI,yBAAgC,EAAE;YACtC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;SAC9B;aAAM,IAAI,IAAI,qBAA4B,EAAE;YACzC,OAAO,GAAG,IAAA,qCAAc,EAAC,IAAI,CAAC,CAAC;SAClC;aAAM;YACH,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;YACnC,UAAU,CAAC,SAAS,EAAE,CAAC;YAEvB,IAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACjF,IAAM,IAAI,GAAG,CAAC,sBAAsB;gBAChC,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB;oBACnC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB;oBACxC,CAAC,CAAC,aAAa;wBACf,CAAC,CAAC,IAAA,uCAAgB,EAAC,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC;wBAClD,CAAC,CAAC,IAAI,CAAC;YACX,IAAM,KAAK,GAAG,IAAI,IAAI,IAAA,kCAAW,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAEpE,IAAI,CAAC,GAAG,CAAC,cAAc,CACnB,IAAI,EACJ,UAAU,EACV,KAAK,CAAC,eAAe,EACrB,IAAI,CAAC,YAAY,uBAEjB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,SAAS,CAAC,UAAU,CAC5B,CAAC;YAEF,IAAI,0BAA0B,EAAE;gBAC5B,IAAI,CAAC,GAAG,CAAC,YAAY,CACjB,IAAI,EACJ;oBACI,SAAS,+BAAuC;oBAChD,UAAU,YAAA;iBACb,EACD,IAAI,CAAC,aAAa,CACrB,CAAC;gBAEF,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC;aAClC;iBAAM,IAAI,KAAK,EAAE;gBACd,oFAAoF;gBACpF,OAAO,GAAG,IAAA,+CAAwB,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACzD;iBAAM;gBACH,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC;aAClC;SACJ;QAED,OAAO,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;IACzB,CAAC,CAAC;IA5DW,QAAA,UAAU,cA4DrB;IAEF,SAAS,SAAS,CAAC,IAAoC;QACnD,IAAI,UAAuB,CAAC;QAC5B,IAAI,IAAA,qCAAc,EAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE;YAC1C,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACzD;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAgB,CAAC;SAC7D;QAED,OAAO,UAAU,CAAC;IACtB,CAAC","sourcesContent":["import { ColorTransformDirection, GetContentMode, PluginEventType } from 'roosterjs-editor-types';\nimport type { EditorCore, GetContent } from 'roosterjs-editor-types';\nimport {\n    createRange,\n    getHtmlWithSelectionPath,\n    getSelectionPath,\n    getTextContent,\n    safeInstanceOf,\n} from 'roosterjs-editor-dom';\nimport type { CompatibleGetContentMode } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n * Get current editor content as HTML string\n * @param core The EditorCore object\n * @param mode specify what kind of HTML content to retrieve\n * @returns HTML string representing current editor content\n */\nexport const getContent: GetContent = (\n    core: EditorCore,\n    mode: GetContentMode | CompatibleGetContentMode\n): string => {\n    let content: string | null = '';\n    const triggerExtractContentEvent = mode == GetContentMode.CleanHTML;\n    const includeSelectionMarker = mode == GetContentMode.RawHTMLWithSelection;\n\n    // When there is fragment for shadow edit, always use the cached fragment as document since HTML node in editor\n    // has been changed by uncommitted shadow edit which should be ignored.\n    const root = core.lifecycle.shadowEditFragment || core.contentDiv;\n\n    if (mode == GetContentMode.PlainTextFast) {\n        content = root.textContent;\n    } else if (mode == GetContentMode.PlainText) {\n        content = getTextContent(root);\n    } else {\n        const clonedRoot = cloneNode(root);\n        clonedRoot.normalize();\n\n        const originalRange = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\n        const path = !includeSelectionMarker\n            ? null\n            : core.lifecycle.shadowEditFragment\n            ? core.lifecycle.shadowEditSelectionPath\n            : originalRange\n            ? getSelectionPath(core.contentDiv, originalRange)\n            : null;\n        const range = path && createRange(clonedRoot, path.start, path.end);\n\n        core.api.transformColor(\n            core,\n            clonedRoot,\n            false /*includeSelf*/,\n            null /*callback*/,\n            ColorTransformDirection.DarkToLight,\n            true /*forceTransform*/,\n            core.lifecycle.isDarkMode\n        );\n\n        if (triggerExtractContentEvent) {\n            core.api.triggerEvent(\n                core,\n                {\n                    eventType: PluginEventType.ExtractContentWithDom,\n                    clonedRoot,\n                },\n                true /*broadcast*/\n            );\n\n            content = clonedRoot.innerHTML;\n        } else if (range) {\n            // range is not null, which means we want to include a selection path in the content\n            content = getHtmlWithSelectionPath(clonedRoot, range);\n        } else {\n            content = clonedRoot.innerHTML;\n        }\n    }\n\n    return content ?? '';\n};\n\nfunction cloneNode(node: HTMLElement | DocumentFragment): HTMLElement {\n    let clonedNode: HTMLElement;\n    if (safeInstanceOf(node, 'DocumentFragment')) {\n        clonedNode = node.ownerDocument.createElement('div');\n        clonedNode.appendChild(node.cloneNode(true /*deep*/));\n    } else {\n        clonedNode = node.cloneNode(true /*deep*/) as HTMLElement;\n    }\n\n    return clonedNode;\n}\n"]}