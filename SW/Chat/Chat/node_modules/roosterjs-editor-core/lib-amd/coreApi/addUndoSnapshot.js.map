{"version":3,"file":"addUndoSnapshot.js","sourceRoot":"","sources":["../../../../packages/roosterjs-editor-core/lib/coreApi/addUndoSnapshot.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSelectionPath, Position } from 'roosterjs-editor-dom';\nimport { PluginEventType, SelectionRangeTypes } from 'roosterjs-editor-types';\nimport type {\n    EntityState,\n    AddUndoSnapshot,\n    ChangeSource,\n    ContentChangedData,\n    ContentChangedEvent,\n    ContentMetadata,\n    EditorCore,\n    NodePosition,\n    SelectionRangeEx,\n} from 'roosterjs-editor-types';\nimport type { CompatibleChangeSource } from 'roosterjs-editor-types/lib/compatibleTypes';\n\n/**\n * @internal\n * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\n * Undo snapshot will not be added if this call is nested inside another addUndoSnapshot() call.\n * @param core The EditorCore object\n * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\n * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\n * @param canUndoByBackspace True if this action can be undone when user press Backspace key (aka Auto Complete).\n * @param additionalData @optional parameter to provide additional data related to the ContentChanged Event.\n */\nexport const addUndoSnapshot: AddUndoSnapshot = (\n    core: EditorCore,\n    callback: ((start: NodePosition | null, end: NodePosition | null) => any) | null,\n    changeSource: ChangeSource | CompatibleChangeSource | string | null,\n    canUndoByBackspace: boolean,\n    additionalData?: ContentChangedData\n) => {\n    const undoState = core.undo;\n    const isNested = undoState.isNested;\n    let data: any;\n\n    if (!isNested) {\n        undoState.isNested = true;\n\n        // When there is getEntityState, it means this is triggered by an entity change.\n        // So if HTML content is not changed (hasNewContent is false), no need to add another snapshot before change\n        if (core.undo.hasNewContent || !additionalData?.getEntityState || !callback) {\n            addUndoSnapshotInternal(core, canUndoByBackspace, additionalData?.getEntityState?.());\n        }\n    }\n\n    try {\n        if (callback) {\n            const range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\n            data = callback(\n                range && Position.getStart(range).normalize(),\n                range && Position.getEnd(range).normalize()\n            );\n\n            if (!isNested) {\n                const entityStates = additionalData?.getEntityState?.();\n                addUndoSnapshotInternal(core, false /*isAutoCompleteSnapshot*/, entityStates);\n            }\n        }\n    } finally {\n        if (!isNested) {\n            undoState.isNested = false;\n        }\n    }\n\n    if (callback && changeSource) {\n        const event: ContentChangedEvent = {\n            eventType: PluginEventType.ContentChanged,\n            source: changeSource,\n            data: data,\n            additionalData,\n        };\n        core.api.triggerEvent(core, event, true /*broadcast*/);\n    }\n\n    if (canUndoByBackspace) {\n        const range = core.api.getSelectionRange(core, false /*tryGetFromCache*/);\n\n        if (range) {\n            core.undo.hasNewContent = false;\n            core.undo.autoCompletePosition = Position.getStart(range);\n        }\n    }\n};\n\nfunction addUndoSnapshotInternal(\n    core: EditorCore,\n    canUndoByBackspace: boolean,\n    entityStates?: EntityState[]\n) {\n    if (!core.lifecycle.shadowEditFragment) {\n        const rangeEx = core.api.getSelectionRangeEx(core);\n        const isDarkMode = core.lifecycle.isDarkMode;\n        const metadata = createContentMetadata(core.contentDiv, rangeEx, isDarkMode) || null;\n\n        core.undo.snapshotsService.addSnapshot(\n            {\n                html: core.contentDiv.innerHTML,\n                metadata,\n                knownColors: core.darkColorHandler?.getKnownColorsCopy() || [],\n                entityStates,\n            },\n            canUndoByBackspace\n        );\n        core.undo.hasNewContent = false;\n    }\n}\n\nfunction createContentMetadata(\n    root: HTMLElement,\n    rangeEx: SelectionRangeEx,\n    isDarkMode: boolean\n): ContentMetadata | undefined {\n    switch (rangeEx?.type) {\n        case SelectionRangeTypes.TableSelection:\n            return {\n                type: SelectionRangeTypes.TableSelection,\n                tableId: rangeEx.table.id,\n                isDarkMode: !!isDarkMode,\n                ...rangeEx.coordinates!,\n            };\n        case SelectionRangeTypes.ImageSelection:\n            return {\n                type: SelectionRangeTypes.ImageSelection,\n                imageId: rangeEx.image.id,\n                isDarkMode: !!isDarkMode,\n            };\n        case SelectionRangeTypes.Normal:\n            return {\n                type: SelectionRangeTypes.Normal,\n                isDarkMode: !!isDarkMode,\n                start: [],\n                end: [],\n                ...(getSelectionPath(root, rangeEx.ranges[0]) || {}),\n            };\n    }\n}\n"]}