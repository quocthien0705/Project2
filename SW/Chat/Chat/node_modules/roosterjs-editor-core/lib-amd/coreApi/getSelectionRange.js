define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSelectionRange = void 0;
    /**
     * @internal
     * Get current or cached selection range
     * @param core The EditorCore object
     * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now
     * @returns A Range object of the selection range
     */
    var getSelectionRange = function (core, tryGetFromCache) {
        var _a;
        var result = null;
        if (core.lifecycle.shadowEditFragment) {
            result =
                core.lifecycle.shadowEditSelectionPath &&
                    (0, roosterjs_editor_dom_1.createRange)(core.contentDiv, core.lifecycle.shadowEditSelectionPath.start, core.lifecycle.shadowEditSelectionPath.end);
            return result;
        }
        else {
            if (!tryGetFromCache || core.api.hasFocus(core)) {
                var selection = (_a = core.contentDiv.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.getSelection();
                if (selection && selection.rangeCount > 0) {
                    var range = selection.getRangeAt(0);
                    if ((0, roosterjs_editor_dom_1.contains)(core.contentDiv, range)) {
                        result = range;
                    }
                }
            }
            if (!result && tryGetFromCache) {
                result = core.domEvent.selectionRange;
            }
            return result;
        }
    };
    exports.getSelectionRange = getSelectionRange;
});
//# sourceMappingURL=getSelectionRange.js.map