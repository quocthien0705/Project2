define(["require", "exports", "roosterjs-editor-dom"], function (require, exports, roosterjs_editor_dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.attachDomEvent = void 0;
    /**
     * @internal
     * Attach a DOM event to the editor content DIV
     * @param core The EditorCore object
     * @param eventName The DOM event name
     * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered
     * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event
     */
    var attachDomEvent = function (core, eventMap) {
        var disposers = (0, roosterjs_editor_dom_1.getObjectKeys)(eventMap || {}).map(function (key) {
            var _a = extractHandler(eventMap[key]), pluginEventType = _a.pluginEventType, beforeDispatch = _a.beforeDispatch;
            var eventName = key;
            var onEvent = function (event) {
                if (beforeDispatch) {
                    beforeDispatch(event);
                }
                if (pluginEventType != null) {
                    core.api.triggerEvent(core, {
                        eventType: pluginEventType,
                        rawEvent: event,
                    }, false /*broadcast*/);
                }
            };
            core.contentDiv.addEventListener(eventName, onEvent);
            return function () {
                core.contentDiv.removeEventListener(eventName, onEvent);
            };
        });
        return function () { return disposers.forEach(function (disposers) { return disposers(); }); };
    };
    exports.attachDomEvent = attachDomEvent;
    function extractHandler(handlerObj) {
        var result = {
            pluginEventType: null,
            beforeDispatch: null,
        };
        if (typeof handlerObj === 'number') {
            result.pluginEventType = handlerObj;
        }
        else if (typeof handlerObj === 'function') {
            result.beforeDispatch = handlerObj;
        }
        else if (typeof handlerObj === 'object') {
            result = handlerObj;
        }
        return result;
    }
});
//# sourceMappingURL=attachDomEvent.js.map