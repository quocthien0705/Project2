/// <reference types="node" />

import { EventEmitter } from 'events';

/**
 * Background blur config.
 */
export declare interface BackgroundBlurConfig extends VideoEffectConfig {
}

/**
 * Background blur effect
 */
export declare class BackgroundBlurEffect {


    /**
     * Name of the effect
     */
    readonly name: VideoEffectName;
    constructor(bgBlurConfig?: BackgroundBlurConfig);

    /**
     * Method to update effect config
     * @param newBgBlurConfig
     * @returns
     */
    configure(newBgBlurConfig: BackgroundBlurConfig): Promise<void>;
    /**
     * Method to check if effect is supported.
     * @returns true if effect is supported in the current environment
     */
    isSupported(): Promise<boolean>;
}

/**
 * Background replacement config.
 */
export declare interface BackgroundReplacementConfig extends VideoEffectConfig {
    backgroundImageUrl: string;
}

/**
 * Background replacement effect.
 */
export declare class BackgroundReplacementEffect {


    /**
     * Name of the effect
     */
    readonly name: VideoEffectName;
    constructor(bgReplacementConfig: BackgroundReplacementConfig);

    /**
     * Method to update effect config
     * @param newBgReplacementConfig
     * @returns
     */
    configure(newBgReplacementConfig: BackgroundReplacementConfig): Promise<void>;
    /**
     * Method to check if effect is supported.
     * @returns true if effect is supported in the current environment
     */
    isSupported(): Promise<boolean>;
}

/**
 * Base video effect.
 */
export declare interface VideoEffect {
    /**
     * Name of the video effect.
     */
    readonly name: VideoEffectName;
    /**
     * Method to check if this effect is supported in the current environment.
     * @returns true if effects are supported in the current environment.
     * For dev provided effects, this defaults to true.
     */
    isSupported(): Promise<boolean>;
}

/**
 * Base video effect config.
 */
export declare interface VideoEffectConfig {
    effectInitTimeThresholdInMs?: number;
    fpsWarningThreshold?: number;
}

/**
 * Video effect error type.
 */
export declare type VideoEffectError = 'FailedToProcess' | 'FailedToFetchImage';

declare type VideoEffectErrorListener = (error: VideoEffectErrorPayload) => void;

/**
 * Video effect error payload.
 */
export declare type VideoEffectErrorPayload = {
    code: VideoEffectError;
    message: string;
};

declare type VideoEffectListener = (effectName: VideoEffectName) => void;

/**
 * Name of the video effect.
 */
export declare type VideoEffectName = 'BackgroundBlur' | 'BackgroundReplacement';

export { }
