{"version":3,"file":"TrackCapabilityChangedNotifications.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/utils/TrackCapabilityChangedNotifications.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* @conditional-compile-remove(capabilities) */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n/* @conditional-compile-remove(capabilities) */\nimport { CapabilitiesChangeInfo, ParticipantCapabilityName, ParticipantRole } from '@azure/communication-calling';\n/* @conditional-compile-remove(capabilities) */\nimport { CapabalityChangedNotification, CapabilitiesChangeNotificationBarProps } from '../components/CapabilitiesChangedNotificationBar';\n/* @conditional-compile-remove(capabilities) */\nimport { TrackedCapabilityChangedNotifications } from '../types/CapabilityChangedNotificationTracking';\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Create a record for when the notification was most recently dismissed for tracking dismissed notifications.\n *\n * @private\n */\nexport const useTrackedCapabilityChangedNotifications = (capabilitiesChangedAndRoleInfo: CapabilitiesChangedInfoAndRole): CapabilitiesChangeNotificationBarProps => {\n  const [trackedCapabilityChangedNotifications, setTrackedCapabilityChangedNotifications] = useState<TrackedCapabilityChangedNotifications>({});\n\n  // Initialize a share screen capability changed notification with 'RoleChanged' reason so that the initial\n  // share screen capability changed info from the Calling SDK when joining Teams interop will be ignored because\n  // being able to share screen is assumed by default. This is inline with what Teams is doing.\n  const activeNotifications = useRef<LatestCapabilityChangedNotificationRecord>({\n    shareScreen: {\n      capabilityName: 'shareScreen',\n      isPresent: true,\n      changedReason: 'RoleChanged'\n    }\n  });\n  useEffect(() => {\n    activeNotifications.current = updateLatestCapabilityChangedNotificationMap(capabilitiesChangedAndRoleInfo, activeNotifications.current);\n    setTrackedCapabilityChangedNotifications(prev => updateTrackedCapabilityChangedNotificationsWithActiveNotifications(prev, Object.values(activeNotifications.current)));\n  }, [capabilitiesChangedAndRoleInfo]);\n  const onDismissCapabilityChangedNotification = useCallback((notification: CapabalityChangedNotification) => {\n    setTrackedCapabilityChangedNotifications(prev => trackCapabilityChangedNotificationAsDismissed(notification.capabilityName, prev));\n  }, []);\n  const latestCapabilityChangedNotifications = useMemo(() => filterLatestCapabilityChangedNotifications(Object.values(activeNotifications.current), trackedCapabilityChangedNotifications), [trackedCapabilityChangedNotifications]);\n  return {\n    capabilitiesChangedNotifications: latestCapabilityChangedNotifications,\n    onDismissNotification: onDismissCapabilityChangedNotification\n  };\n};\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Take the set of active notifications, and filter to only those that are newer than previously dismissed notifications or have never been dismissed.\n *\n * @private\n */\nexport const filterLatestCapabilityChangedNotifications = (activeNotifications: CapabalityChangedNotification[], trackedNotifications: TrackedCapabilityChangedNotifications): CapabalityChangedNotification[] => {\n  const filteredNotifications = activeNotifications.filter(activeNotification => {\n    const trackedNotification = trackedNotifications[activeNotification.capabilityName];\n    return !trackedNotification || !trackedNotification.lastDismissedAt || trackedNotification.lastDismissedAt < trackedNotification.mostRecentlyActive;\n  });\n  return filteredNotifications;\n};\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Maintain a record of the most recently active notification for each capability name.\n *\n * @private\n */\nexport const updateTrackedCapabilityChangedNotificationsWithActiveNotifications = (existingTrackedNotifications: TrackedCapabilityChangedNotifications, activeNotifications: CapabalityChangedNotification[]): TrackedCapabilityChangedNotifications => {\n  const trackedNotifications: TrackedCapabilityChangedNotifications = {};\n\n  // Only care about active notifications. If notifications are no longer active we do not track that they have been previously dismissed.\n  for (const activeNotification of activeNotifications) {\n    const existingTrackedNotification = existingTrackedNotifications[activeNotification.capabilityName];\n    trackedNotifications[activeNotification.capabilityName] = {\n      mostRecentlyActive: activeNotification.timestamp ?? existingTrackedNotification?.mostRecentlyActive ?? new Date(Date.now()),\n      lastDismissedAt: existingTrackedNotification?.lastDismissedAt\n    };\n  }\n  return trackedNotifications;\n};\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Create a record for when the notification was most recently dismissed for tracking dismissed notifications.\n *\n * @private\n */\nexport const trackCapabilityChangedNotificationAsDismissed = (capabilityName: ParticipantCapabilityName, trackedNotifications: TrackedCapabilityChangedNotifications): TrackedCapabilityChangedNotifications => {\n  const now = new Date(Date.now());\n  const existingNotification = trackedNotifications[capabilityName];\n  return {\n    ...trackedNotifications,\n    [capabilityName]: {\n      ...(existingNotification || {}),\n      lastDismissedAt: now\n    }\n  };\n};\n\n/* @conditional-compile-remove(capabilities) */\ninterface CapabilitiesChangedInfoAndRole {\n  capabilitiesChangeInfo?: CapabilitiesChangeInfo;\n  participantRole?: ParticipantRole;\n}\n\n/* @conditional-compile-remove(capabilities) */\ntype LatestCapabilityChangedNotificationRecord = Partial<Record<ParticipantCapabilityName, CapabalityChangedNotification>>;\n\n/* @conditional-compile-remove(capabilities) */\nconst updateLatestCapabilityChangedNotificationMap = (capabilitiesChangedInfoAndRole: CapabilitiesChangedInfoAndRole, activeNotifications: LatestCapabilityChangedNotificationRecord): LatestCapabilityChangedNotificationRecord => {\n  if (!capabilitiesChangedInfoAndRole.capabilitiesChangeInfo) {\n    return activeNotifications;\n  }\n  for (const [capabilityKey, newCapabilityValue] of Object.entries(capabilitiesChangedInfoAndRole.capabilitiesChangeInfo.newValue)) {\n    // Cast is safe because we are iterating over the enum keys on the object.entries where\n    // newCapabilityValue typing is correctly returned. Object.entries limitations\n    // always returns string for the key\n    const capabilityName = (capabilityKey as ParticipantCapabilityName);\n    // If the active notification for a capability has the same `isPresent` value and the same reason as the new\n    // capability value from the SDK then we will not create a new notification to avoid redundancy\n    if (activeNotifications[capabilityName] && newCapabilityValue.isPresent === activeNotifications[capabilityName]?.isPresent && capabilitiesChangedInfoAndRole.capabilitiesChangeInfo.reason === activeNotifications[capabilityName]?.changedReason) {\n      continue;\n    }\n    const newCapabilityChangeNotification: CapabalityChangedNotification = {\n      capabilityName: capabilityName,\n      isPresent: newCapabilityValue.isPresent,\n      changedReason: capabilitiesChangedInfoAndRole.capabilitiesChangeInfo.reason,\n      role: capabilitiesChangedInfoAndRole.participantRole,\n      timestamp: new Date(Date.now())\n    };\n    activeNotifications[capabilityName] = newCapabilityChangeNotification;\n  }\n  return activeNotifications;\n};"]}