{"version":3,"file":"callControlSelectors.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/callControlSelectors.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AudioDeviceInfo, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CallClientState } from '@internal/calling-stateful-client';\nimport * as reselect from 'reselect';\nimport { CallingBaseSelectorProps, getCallExists, getDeviceManager, getIsMuted, getIsScreenSharingOn, getLocalVideoStreams } from './baseSelectors';\n/* @conditional-compile-remove(capabilities) */\nimport { getCapabilities, getRole } from './baseSelectors';\n/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(raise-hand) */\nimport { getCallState } from './baseSelectors';\nimport { _isPreviewOn } from './utils/callUtils';\n/* @conditional-compile-remove(raise-hand) */\nimport { getLocalParticipantRaisedHand } from './baseSelectors';\n/**\n * Selector type for {@link MicrophoneButton} component.\n *\n * @public\n */\nexport type MicrophoneButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  disabled: boolean;\n  checked: boolean;\n  microphones: AudioDeviceInfo[];\n  speakers: AudioDeviceInfo[];\n  selectedMicrophone?: AudioDeviceInfo;\n  selectedSpeaker?: AudioDeviceInfo;\n};\n\n/**\n * Selector for {@link MicrophoneButton} component.\n *\n * @public\n */\nexport const microphoneButtonSelector: MicrophoneButtonSelector = reselect.createSelector([getCallExists, getIsMuted, getDeviceManager, /* @conditional-compile-remove(capabilities) */getCapabilities, /* @conditional-compile-remove(capabilities) */getRole], (callExists, isMuted, deviceManager, /* @conditional-compile-remove(capabilities) */capabilities, /* @conditional-compile-remove(capabilities) */role) => {\n  const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.audio : true;\n  /* @conditional-compile-remove(capabilities) */\n  const incapable = capabilities?.unmuteMic.isPresent === false && capabilities?.unmuteMic.reason !== 'NotInitialized' || role === 'Consumer';\n  return {\n    disabled: !callExists || !permission || /* @conditional-compile-remove(capabilities) */incapable,\n    checked: callExists ? !isMuted : false,\n    microphones: deviceManager.microphones,\n    speakers: deviceManager.speakers,\n    selectedMicrophone: deviceManager.selectedMicrophone,\n    selectedSpeaker: deviceManager.selectedSpeaker\n  };\n});\n\n/**\n * Selector type for {@link CameraButton} component.\n *\n * @public\n */\nexport type CameraButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  disabled: boolean;\n  checked: boolean;\n  cameras: VideoDeviceInfo[];\n  selectedCamera?: VideoDeviceInfo;\n};\n\n/**\n * Selector for {@link CameraButton} component.\n *\n * @public\n */\nexport const cameraButtonSelector: CameraButtonSelector = reselect.createSelector([getLocalVideoStreams, getDeviceManager, /* @conditional-compile-remove(capabilities) */getCapabilities, /* @conditional-compile-remove(capabilities) */getRole], (localVideoStreams, deviceManager, /* @conditional-compile-remove(capabilities) */capabilities, /* @conditional-compile-remove(capabilities) */role) => {\n  const previewOn = _isPreviewOn(deviceManager);\n  const localVideoFromCall = localVideoStreams?.find(stream => stream.mediaStreamType === 'Video');\n  const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.video : true;\n  /* @conditional-compile-remove(capabilities) */\n  const incapable = capabilities?.turnVideoOn.isPresent === false && capabilities?.turnVideoOn.reason !== 'NotInitialized' || role === 'Consumer';\n  return {\n    disabled: !deviceManager.selectedCamera || !permission || !deviceManager.cameras.length || /* @conditional-compile-remove(capabilities) */incapable,\n    checked: localVideoStreams !== undefined && localVideoStreams.length > 0 ? !!localVideoFromCall : previewOn,\n    cameras: deviceManager.cameras,\n    selectedCamera: deviceManager.selectedCamera\n  };\n});\n\n/**\n * Selector type for {@link ScreenShareButton} component.\n *\n * @public\n */\nexport type ScreenShareButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  checked?: boolean;\n  /* @conditional-compile-remove(capabilities) */ /* @conditional-compile-remove(PSTN-calls) */\n  disabled?: boolean;\n};\n\n/* @conditional-compile-remove(raise-hand) */\n/**\n * Selector type for {@link RaiseHandButton} component.\n *\n * @public\n */\nexport type RaiseHandButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  checked?: boolean;\n  disabled?: boolean;\n};\n\n/* @conditional-compile-remove(raise-hand) */\n/**\n * Selector for {@link RaiseHandButton} component.\n *\n * @public\n */\nexport const raiseHandButtonSelector: RaiseHandButtonSelector = reselect.createSelector([getLocalParticipantRaisedHand, getCallState], (raisedHand, callState) => {\n  return {\n    checked: raisedHand ? true : false,\n    disabled: callState === 'InLobby' ? true : callState === 'Connecting' ?? false\n  };\n});\n/**\n * Selector for {@link ScreenShareButton} component.\n *\n * @public\n */\nexport const screenShareButtonSelector: ScreenShareButtonSelector = reselect.createSelector([getIsScreenSharingOn, /* @conditional-compile-remove(capabilities) */getCapabilities, /* @conditional-compile-remove(capabilities) */getRole], (isScreenSharingOn, /* @conditional-compile-remove(capabilities) */capabilities, /* @conditional-compile-remove(capabilities) */role) => {\n  let disabled: boolean | undefined = undefined;\n  /* @conditional-compile-remove(capabilities) */\n  disabled = disabled || capabilities?.shareScreen.isPresent === false && capabilities?.shareScreen.reason !== 'NotInitialized' || role === 'Consumer' || role === 'Attendee';\n  return {\n    checked: isScreenSharingOn,\n    disabled\n  };\n});\n\n/**\n * Selector type for {@link DevicesButton} component.\n *\n * @public\n */\nexport type DevicesButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  microphones: AudioDeviceInfo[];\n  speakers: AudioDeviceInfo[];\n  cameras: VideoDeviceInfo[];\n  selectedMicrophone?: AudioDeviceInfo;\n  selectedSpeaker?: AudioDeviceInfo;\n  selectedCamera?: VideoDeviceInfo;\n};\n\n/**\n * Selector for {@link DevicesButton} component.\n *\n * @public\n */\nexport const devicesButtonSelector: DevicesButtonSelector = reselect.createSelector([getDeviceManager], deviceManager => {\n  return {\n    microphones: removeBlankNameDevices(deviceManager.microphones),\n    speakers: removeBlankNameDevices(deviceManager.speakers),\n    cameras: removeBlankNameDevices(deviceManager.cameras),\n    selectedMicrophone: deviceManager.selectedMicrophone,\n    selectedSpeaker: deviceManager.selectedSpeaker,\n    selectedCamera: deviceManager.selectedCamera\n  };\n});\nfunction removeBlankNameDevices<T extends {\n  name: string;\n}>(devices: T[]): T[] {\n  return devices.filter(device => device.name !== '');\n}"]}