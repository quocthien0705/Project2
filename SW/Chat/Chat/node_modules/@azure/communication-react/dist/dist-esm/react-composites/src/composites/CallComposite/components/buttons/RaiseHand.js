// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { RaiseHandButton } from "../../../../../../react-components/src";
/* @conditional-compile-remove(raise-hand) */
import React, { useMemo } from 'react';
/* @conditional-compile-remove(raise-hand) */
import { usePropsFor } from '../../hooks/usePropsFor';
/* @conditional-compile-remove(raise-hand) */
import { concatButtonBaseStyles } from '../../styles/Buttons.styles';
/* @conditional-compile-remove(raise-hand) */
import { useSelector } from '../../hooks/useSelector';
/* @conditional-compile-remove(raise-hand) */
import { getCallStatus } from '../../selectors/baseSelectors';
/* @conditional-compile-remove(raise-hand) */
import { _isInLobbyOrConnecting } from "../../../../../../calling-component-bindings/src";
/* @conditional-compile-remove(raise-hand) */
/** @private */
export const RaiseHand = (props) => {
    const raiseHandButtonProps = usePropsFor(RaiseHandButton);
    const callStatus = useSelector(getCallStatus);
    const styles = useMemo(() => { var _a; return concatButtonBaseStyles((_a = props.styles) !== null && _a !== void 0 ? _a : {}); }, [props.styles]);
    let raiseHandButtonDisabled = isDisabled(props.option);
    if (_isInLobbyOrConnecting(callStatus)) {
        raiseHandButtonDisabled = true;
    }
    return React.createElement(RaiseHandButton, Object.assign({ "data-ui-id": "call-composite-raisehand-button" }, raiseHandButtonProps, { showLabel: props.displayType !== 'compact', disabled: raiseHandButtonDisabled || props.disabled, styles: styles }));
};
/* @conditional-compile-remove(raise-hand) */
const isDisabled = (option) => {
    if (option === undefined || option === true || option === false) {
        return false;
    }
    return option.disabled;
};
//# sourceMappingURL=RaiseHand.js.map