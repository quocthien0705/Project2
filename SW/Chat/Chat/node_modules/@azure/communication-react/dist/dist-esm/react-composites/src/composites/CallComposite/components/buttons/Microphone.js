// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { MicrophoneButton } from "../../../../../../react-components/src";
/* @conditional-compile-remove(capabilities) */
import { _HighContrastAwareIcon } from "../../../../../../react-components/src";
import React, { useMemo } from 'react';
import { usePropsFor } from '../../hooks/usePropsFor';
import { useSelector } from '../../hooks/useSelector';
import { getCallStatus, getLocalMicrophoneEnabled } from '../../selectors/baseSelectors';
import { concatButtonBaseStyles } from '../../styles/Buttons.styles';
/* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */
import { useAdapter } from '../../adapter/CallAdapterProvider';
/**
 * @private
 */
export const Microphone = (props) => {
    var _a, _b, _c;
    const microphoneButtonProps = usePropsFor(MicrophoneButton);
    const callStatus = useSelector(getCallStatus);
    const isLocalMicrophoneEnabled = useSelector(getLocalMicrophoneEnabled);
    /* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(rooms) */
    const isRoomsCall = adapter.getState().isRoomsCall;
    /* @conditional-compile-remove(capabilities) */
    const unmuteMicCapability = (_b = (_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.capabilitiesFeature) === null || _b === void 0 ? void 0 : _b.capabilities.unmuteMic;
    /**
     * When call is in connecting state, microphone button should be disabled.
     * This is due to to headless limitation where a call can not be muted/unmuted in lobby.
     */
    if (callStatus === 'Connecting') {
        // Lobby page should show the microphone status that was set on the local preview/configuration
        // page until the user successfully joins the call.
        microphoneButtonProps.checked = isLocalMicrophoneEnabled;
    }
    const styles = useMemo(() => { var _a; return concatButtonBaseStyles((_a = props.styles) !== null && _a !== void 0 ? _a : {}); }, [props.styles]);
    // tab focus on MicrophoneButton on page load
    return React.createElement(MicrophoneButton, Object.assign({ "data-ui-id": "call-composite-microphone-button" }, microphoneButtonProps, { showLabel: props.displayType !== 'compact', disableTooltip: props.disableTooltip, styles: styles, enableDeviceSelectionMenu: props.splitButtonsForDeviceSelection, disabled: microphoneButtonProps.disabled || props.disabled || ( /* @conditional-compile-remove(rooms) */isRoomsCall && ((_c = adapter.getState().call) === null || _c === void 0 ? void 0 : _c.role) === 'Unknown'), 
        /* @conditional-compile-remove(capabilities) */ onRenderOffIcon: unmuteMicCapability && !unmuteMicCapability.isPresent ? () => React.createElement(_HighContrastAwareIcon, { disabled: true, iconName: 'ControlButtonMicProhibited' }) : undefined }));
};
//# sourceMappingURL=Microphone.js.map