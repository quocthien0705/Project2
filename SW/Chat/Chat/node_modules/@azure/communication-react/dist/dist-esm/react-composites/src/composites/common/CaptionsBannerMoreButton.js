// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React from 'react';
/* @conditional-compile-remove(close-captions) */
import { useCallback } from 'react';
/* @conditional-compile-remove(close-captions) */
import { _StartCaptionsButton } from "../../../../react-components/src";
/* @conditional-compile-remove(close-captions) */
import { useMemo } from 'react';
/* @conditional-compile-remove(close-captions) */
import { useAdaptedSelector } from '../CallComposite/hooks/useAdaptedSelector';
/* @conditional-compile-remove(close-captions) */
import { useHandlers } from '../CallComposite/hooks/useHandlers';
/* @conditional-compile-remove(close-captions) */
import { buttonFlyoutIncreasedSizeStyles } from '../CallComposite/styles/Buttons.styles';
/* @conditional-compile-remove(close-captions) */
import { useLocale } from '../localization';
/* @conditional-compile-remove(close-captions) */
import { MoreButton } from './MoreButton';
/* @conditional-compile-remove(close-captions) */
import { _startCaptionsButtonSelector } from "../../../../calling-component-bindings/src";
/* @conditional-compile-remove(close-captions) */
import { _preventDismissOnEvent } from "../../../../acs-ui-common/src";
/**
 *
 * @private
 */
export const CaptionsBannerMoreButton = (props) => {
    /* @conditional-compile-remove(close-captions) */
    const localeStrings = useLocale();
    /* @conditional-compile-remove(close-captions) */
    const startCaptionsButtonProps = useAdaptedSelector(_startCaptionsButtonSelector);
    /* @conditional-compile-remove(close-captions) */
    const startCaptionsButtonHandlers = useHandlers(_StartCaptionsButton);
    /* @conditional-compile-remove(close-captions) */
    const moreButtonStrings = useMemo(() => ({
        label: localeStrings.strings.call.captionsBannerMoreButtonCallingLabel,
        tooltipOffContent: localeStrings.strings.call.captionsBannerMoreButtonTooltip
    }), [localeStrings]);
    /* @conditional-compile-remove(close-captions) */
    const moreButtonContextualMenuItems = [];
    /* @conditional-compile-remove(close-captions) */
    const startCaptions = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        yield startCaptionsButtonHandlers.onStartCaptions({
            spokenLanguage: startCaptionsButtonProps.currentSpokenLanguage
        });
    }), [startCaptionsButtonHandlers, startCaptionsButtonProps.currentSpokenLanguage]);
    /* @conditional-compile-remove(close-captions) */
    moreButtonContextualMenuItems.push({
        key: 'ToggleCaptionsKey',
        text: startCaptionsButtonProps.checked ? localeStrings.strings.call.startCaptionsButtonTooltipOnContent : localeStrings.strings.call.startCaptionsButtonTooltipOffContent,
        onClick: () => {
            startCaptionsButtonProps.checked ? startCaptionsButtonHandlers.onStopCaptions() : startCaptionsButtonProps.currentSpokenLanguage !== '' ? startCaptions() : props.onCaptionsSettingsClick && props.onCaptionsSettingsClick();
        },
        iconProps: {
            iconName: startCaptionsButtonProps.checked ? 'CaptionsOffIcon' : 'CaptionsIcon',
            styles: {
                root: {
                    lineHeight: 0
                }
            }
        },
        itemProps: {
            styles: buttonFlyoutIncreasedSizeStyles
        }
    });
    /* @conditional-compile-remove(close-captions) */
    if (props.onCaptionsSettingsClick) {
        moreButtonContextualMenuItems.push({
            key: 'openCaptionsSettingsKey',
            id: 'common-call-composite-captions-settings-button',
            text: localeStrings.strings.call.captionsSettingsLabel,
            onClick: props.onCaptionsSettingsClick,
            iconProps: {
                iconName: 'CaptionsSettingsIcon',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            },
            disabled: !startCaptionsButtonProps.checked
        });
    }
    /* @conditional-compile-remove(close-captions) */
    return React.createElement(MoreButton, Object.assign({}, props, { "data-ui-id": "captions-banner-more-button", strings: moreButtonStrings, menuIconProps: {
            hidden: true
        }, menuProps: {
            items: moreButtonContextualMenuItems,
            calloutProps: {
                preventDismissOnEvent: _preventDismissOnEvent
            }
        } }));
    return React.createElement(React.Fragment, null);
};
//# sourceMappingURL=CaptionsBannerMoreButton.js.map