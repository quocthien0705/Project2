// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { memoizeFunction, Stack, useTheme } from '@fluentui/react';
import { ControlBar, DevicesButton } from "../../../../../react-components/src";
import React, { useMemo } from 'react';
import { Camera } from './buttons/Camera';
import { Devices } from './buttons/Devices';
import { EndCall } from './buttons/EndCall';
import { Microphone } from './buttons/Microphone';
import { Participants } from './buttons/Participants';
import { ScreenShare } from './buttons/ScreenShare';
/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
import { useLocale } from '../../localization';
/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
import { MoreButton } from '../../common/MoreButton';
/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(raise-hand) */
import { usePropsFor } from '../hooks/usePropsFor';
/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
import { buttonFlyoutIncreasedSizeStyles } from '../styles/Buttons.styles';
/* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(rooms) */
import { useAdapter } from '../adapter/CallAdapterProvider';
import { isDisabled } from '../utils';
import { callControlsContainerStyles } from '../styles/CallPage.styles';
/* @conditional-compile-remove(raise-hand) */
import { RaiseHand } from './buttons/RaiseHand';
/* @conditional-compile-remove(raise-hand) */
import { RaiseHandButton } from "../../../../../react-components/src";
import { _generateDefaultDeviceMenuProps } from "../../../../../react-components/src";
import { CUSTOM_BUTTON_OPTIONS, generateCustomCallControlBarButton, generateCustomCallDesktopOverflowButtons, onFetchCustomButtonPropsTrampoline } from '../../common/ControlBar/CustomButton';
// Enforce a background color on control bar to ensure it matches the composite background color.
const controlBarStyles = memoizeFunction((background) => ({
    root: {
        background: background
    }
}));
const inferCallControlOptions = (mobileView, callControlOptions) => {
    if (callControlOptions === false) {
        return {};
    }
    const options = callControlOptions === true || callControlOptions === undefined ? {} : callControlOptions;
    if (mobileView) {
        // Set options to always not show screen share button for mobile
        options.screenShareButton = false;
    }
    return options;
};
/**
 * @private
 */
export const CallControls = (props) => {
    var _a, _b;
    const options = useMemo(() => inferCallControlOptions(!!props.isMobile, props.options), [props.isMobile, props.options]);
    /* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(rooms) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
    const localeStrings = useLocale();
    /* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
    const moreButtonStrings = useMemo(() => ({
        label: localeStrings.strings.call.moreButtonCallingLabel,
        tooltipOffContent: localeStrings.strings.callWithChat.moreDrawerButtonTooltip
    }), [localeStrings]);
    /* @conditional-compile-remove(raise-hand) */
    const raiseHandButtonProps = usePropsFor(RaiseHandButton);
    const devicesButtonProps = usePropsFor(DevicesButton);
    let numberOfButtons = 0;
    const screenShareButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.screenShareButton);
    if (screenShareButtonIsEnabled) {
        numberOfButtons++;
    }
    const microphoneButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.microphoneButton);
    if (microphoneButtonIsEnabled) {
        numberOfButtons++;
    }
    const cameraButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.cameraButton);
    if (cameraButtonIsEnabled) {
        numberOfButtons++;
    }
    if (isEnabled(options === null || options === void 0 ? void 0 : options.endCallButton)) {
        numberOfButtons++;
    }
    const showParticipantsButtonInControlBar = isEnabled(options === null || options === void 0 ? void 0 : options.participantsButton);
    if (showParticipantsButtonInControlBar) {
        numberOfButtons++;
    }
    const moreButtonContextualMenuItems = () => {
        const items = [];
        if (props.isMobile && props.onPeopleButtonClicked && isEnabled(options === null || options === void 0 ? void 0 : options.participantsButton)) {
            items.push({
                key: 'peopleButtonKey',
                text: localeStrings.component.strings.participantsButton.label,
                onClick: () => {
                    if (props.onPeopleButtonClicked) {
                        props.onPeopleButtonClicked();
                    }
                },
                iconProps: {
                    iconName: 'ControlButtonParticipantsContextualMenuItem',
                    styles: {
                        root: {
                            lineHeight: 0
                        }
                    }
                },
                itemProps: {
                    styles: buttonFlyoutIncreasedSizeStyles
                },
                disabled: isDisabled(options === null || options === void 0 ? void 0 : options.participantsButton),
                ['data-ui-id']: 'call-composite-more-menu-people-button'
            });
        }
        return items;
    };
    const customDrawerButtons = useMemo(() => generateCustomCallDesktopOverflowButtons(onFetchCustomButtonPropsTrampoline(typeof options === 'object' ? options : undefined), typeof options === 'object' ? options.displayType : undefined), [options]);
    const moreButtonMenuItems = moreButtonContextualMenuItems();
    let showMoreButton = isEnabled(options === null || options === void 0 ? void 0 : options.moreButton) && moreButtonMenuItems.length > 0;
    if (showMoreButton) {
        numberOfButtons++;
    }
    const customButtons = useMemo(() => generateCustomCallControlBarButton(onFetchCustomButtonPropsTrampoline(options), options === null || options === void 0 ? void 0 : options.displayType), [options]);
    numberOfButtons += React.Children.count(customButtons['primary']) + React.Children.count(customButtons['secondary']);
    let showDevicesButtonInControlBar = isEnabled(options === null || options === void 0 ? void 0 : options.devicesButton);
    if (showDevicesButtonInControlBar && (props.isMobile ? numberOfButtons < 5 : true)) {
        numberOfButtons++;
    }
    else {
        showDevicesButtonInControlBar = false;
        showMoreButton = isEnabled(options === null || options === void 0 ? void 0 : options.moreButton);
    }
    /* @conditional-compile-remove(raise-hand) */
    const raiseHandButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.raiseHandButton);
    /* @conditional-compile-remove(raise-hand) */
    let showRaiseHandButtonInControlBar = raiseHandButtonIsEnabled;
    /* @conditional-compile-remove(rooms) */
    const role = (_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.role;
    /* @conditional-compile-remove(rooms) */
    const hideRaiseHandButtonInRoomsCall = adapter.getState().isRoomsCall && role && ['Consumer', 'Unknown'].includes(role);
    /* @conditional-compile-remove(raise-hand) */
    if (showRaiseHandButtonInControlBar && (props.isMobile ? numberOfButtons < 5 : true)) {
        numberOfButtons++;
    }
    else {
        // If more button is not present but enabled then replace previous button (devices button) with more button
        if (!showMoreButton && isEnabled(options === null || options === void 0 ? void 0 : options.moreButton)) {
            showMoreButton = true;
            showDevicesButtonInControlBar = false;
        }
        showRaiseHandButtonInControlBar = false;
    }
    if (!showDevicesButtonInControlBar) {
        const devicesButtonMenu = _generateDefaultDeviceMenuProps(devicesButtonProps, localeStrings.component.strings.devicesButton);
        moreButtonMenuItems.push({
            key: 'devicesButtonKey',
            text: localeStrings.component.strings.devicesButton.label,
            iconProps: {
                iconName: 'ControlButtonOptions',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            subMenuProps: devicesButtonMenu,
            ['data-ui-id']: 'call-composite-more-menu-devices-button'
        });
    }
    /* @conditional-compile-remove(raise-hand) */
    if (!showRaiseHandButtonInControlBar && /* @conditional-compile-remove(rooms) */ !hideRaiseHandButtonInRoomsCall) {
        moreButtonMenuItems.push({
            key: 'raiseHandButtonKey',
            text: raiseHandButtonProps.checked ? localeStrings.component.strings.raiseHandButton.onLabel : localeStrings.component.strings.raiseHandButton.offLabel,
            onClick: () => {
                if (raiseHandButtonProps.onToggleRaiseHand) {
                    raiseHandButtonProps.onToggleRaiseHand();
                }
            },
            iconProps: {
                iconName: 'RaiseHandContextualMenuItem',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            },
            disabled: isDisabled(options === null || options === void 0 ? void 0 : options.raiseHandButton),
            ['data-ui-id']: 'call-composite-more-menu-raise-hand-button'
        });
    }
    // Custom Buttons in More Button Menu should always be the last items pushed into the moreButtonMenuItems array
    if (customDrawerButtons['primary']) {
        customDrawerButtons['primary'].slice(props.isMobile ? CUSTOM_BUTTON_OPTIONS.MAX_PRIMARY_MOBILE_CUSTOM_BUTTONS : CUSTOM_BUTTON_OPTIONS.MAX_PRIMARY_DESKTOP_CUSTOM_BUTTONS).forEach(element => {
            moreButtonMenuItems.push(Object.assign({ itemProps: {
                    styles: buttonFlyoutIncreasedSizeStyles
                } }, element));
        });
    }
    if (customDrawerButtons['secondary']) {
        customDrawerButtons['secondary'].forEach(element => {
            moreButtonMenuItems.push(Object.assign({ itemProps: {
                    styles: buttonFlyoutIncreasedSizeStyles
                } }, element));
        });
    }
    if (customDrawerButtons['overflow']) {
        customDrawerButtons['overflow'].forEach(element => {
            moreButtonMenuItems.push(Object.assign({ itemProps: {
                    styles: buttonFlyoutIncreasedSizeStyles
                } }, element));
        });
    }
    const theme = useTheme();
    // when props.options is false then we want to hide the whole control bar.
    if (props.options === false) {
        return React.createElement(React.Fragment, null);
    }
    return React.createElement(Stack, { horizontalAlign: "center", className: callControlsContainerStyles },
        React.createElement(Stack.Item, null,
            React.createElement(ControlBar, { layout: props.displayVertical ? 'vertical' : 'horizontal', styles: controlBarStyles(theme.semanticColors.bodyBackground) },
                microphoneButtonIsEnabled && React.createElement(Microphone, { displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.microphoneButton) }),
                cameraButtonIsEnabled && React.createElement(Camera, { displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.cameraButton) }), /* @conditional-compile-remove(raise-hand) */
                showRaiseHandButtonInControlBar && /* @conditional-compile-remove(rooms) */ !hideRaiseHandButtonInRoomsCall && React.createElement(RaiseHand, { displayType: options === null || options === void 0 ? void 0 : options.displayType }),
                screenShareButtonIsEnabled && React.createElement(ScreenShare, { option: options === null || options === void 0 ? void 0 : options.screenShareButton, displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.screenShareButton) }),
                showParticipantsButtonInControlBar && React.createElement(Participants, { option: options === null || options === void 0 ? void 0 : options.participantsButton, callInvitationURL: props.callInvitationURL, onFetchParticipantMenuItems: props.onFetchParticipantMenuItems, displayType: options === null || options === void 0 ? void 0 : options.displayType, increaseFlyoutItemSize: props.increaseFlyoutItemSize, isMobile: props.isMobile, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.participantsButton) }),
                showDevicesButtonInControlBar && React.createElement(Devices, { displayType: options === null || options === void 0 ? void 0 : options.displayType, increaseFlyoutItemSize: props.increaseFlyoutItemSize, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.devicesButton) }), (_b = customButtons['primary']) === null || _b === void 0 ? void 0 :
                _b.slice(0, props.isMobile ? CUSTOM_BUTTON_OPTIONS.MAX_PRIMARY_MOBILE_CUSTOM_BUTTONS : CUSTOM_BUTTON_OPTIONS.MAX_PRIMARY_DESKTOP_CUSTOM_BUTTONS).map((CustomButton, i) => {
                    return React.createElement(CustomButton, { key: `primary-custom-button-${i}`, 
                        // styles={commonButtonStyles}
                        showLabel: (options === null || options === void 0 ? void 0 : options.displayType) !== 'compact', disableTooltip: props.isMobile });
                }), /* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ /* @conditional-compile-remove(raise-hand) */
                showMoreButton && React.createElement(MoreButton, { disableTooltip: props.isMobile, "data-ui-id": "common-call-composite-more-button", strings: moreButtonStrings, menuIconProps: {
                        hidden: true
                    }, menuProps: {
                        items: moreButtonMenuItems
                    }, showLabel: (options === null || options === void 0 ? void 0 : options.displayType) !== 'compact' }),
                isEnabled(options === null || options === void 0 ? void 0 : options.endCallButton) && React.createElement(EndCall, { displayType: options === null || options === void 0 ? void 0 : options.displayType }))));
};
const isEnabled = (option) => option !== false;
/** @private */
export const isRoomsCallTrampoline = (adapter) => {
    /* @conditional-compile-remove(rooms) */
    return adapter.getState().isRoomsCall;
    return false;
};
//# sourceMappingURL=CallControls.js.map