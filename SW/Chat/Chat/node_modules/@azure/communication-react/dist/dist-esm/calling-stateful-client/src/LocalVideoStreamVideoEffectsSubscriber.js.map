{"version":3,"file":"LocalVideoStreamVideoEffectsSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/LocalVideoStreamVideoEffectsSubscriber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAUlC,2DAA2D;AAC3D,OAAO,EAAE,kDAAkD,EAAE,MAAM,aAAa,CAAC;AAEjF,2DAA2D;AAC3D;;;GAGG;AACH,MAAM,OAAO,sCAAsC;IAKjD,YAAY,IAMX;QAOO,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC3E,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC3E,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACzE,CAAC,CAAC;QACK,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC5E,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC5E,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1E,CAAC,CAAC;QACM,mBAAc,GAAG,GAAS,EAAE;YAClC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpC,CAAC,CAAC;QACM,mBAAc,GAAG,GAAS,EAAE;YAClC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpC,CAAC,CAAC;QACM,iBAAY,GAAG,CAAC,KAA8B,EAAQ,EAAE;YAC9D,oHAAoH;YACpH,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,kCAAkC,CAAC,CAAC;QAC9F,CAAC,CAAC;QACM,+BAA0B,GAAG,GAAS,EAAE;YAC9C,MAAM,oBAAoB,GAAG,kDAAkD,CAAC,IAAI,CAAC,2BAA2B,CAAC,aAAa,CAAC,CAAC;YAChI,IAAI,IAAI,CAAC,OAAO,KAAK,YAAY,EAAE,CAAC;gBAClC,IAAI,CAAC,QAAQ,CAAC,0CAA0C,CAAC,IAAI,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;YACzG,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,QAAQ,CAAC,mCAAmC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;YAC/F,CAAC;QACH,CAAC,CAAC;QAlCA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,0BAA0B,CAAC;QACnE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CA8BF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* @conditional-compile-remove(video-background-effects) */\nimport { VideoEffectErrorPayload, VideoEffectsFeature } from '@azure/communication-calling';\n/* @conditional-compile-remove(video-background-effects) */\nimport { LocalVideoStreamState } from './CallClientState';\n/* @conditional-compile-remove(video-background-effects) */\nimport { CallContext } from './CallContext';\n/* @conditional-compile-remove(video-background-effects) */\nimport { CallIdRef } from './CallIdRef';\n/* @conditional-compile-remove(video-background-effects) */\nimport { convertFromSDKToDeclarativeVideoStreamVideoEffects } from './Converter';\n\n/* @conditional-compile-remove(video-background-effects) */\n/**\n * Subscribes to a LocalVideoStream's video effects events and updates the call context appropriately.\n * @private\n */\nexport class LocalVideoStreamVideoEffectsSubscriber {\n  private _parent: CallIdRef | 'unparented';\n  private _context: CallContext;\n  private _localVideoStream: LocalVideoStreamState;\n  private _localVideoStreamEffectsAPI: VideoEffectsFeature;\n  constructor(args: {\n    /** Owner of the local video stream. This is either the Call (referenced by CallIdRef) or is the device manager's unparented view (referenced by 'unparented') */\n    parent: CallIdRef | 'unparented';\n    context: CallContext;\n    localVideoStream: LocalVideoStreamState;\n    localVideoStreamEffectsAPI: VideoEffectsFeature;\n  }) {\n    this._parent = args.parent;\n    this._context = args.context;\n    this._localVideoStream = args.localVideoStream;\n    this._localVideoStreamEffectsAPI = args.localVideoStreamEffectsAPI;\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._localVideoStreamEffectsAPI.on('effectsStarted', this.effectsStarted);\n    this._localVideoStreamEffectsAPI.on('effectsStopped', this.effectsStopped);\n    this._localVideoStreamEffectsAPI.on('effectsError', this.effectsError);\n  };\n  public unsubscribe = (): void => {\n    this._localVideoStreamEffectsAPI.off('effectsStarted', this.effectsStarted);\n    this._localVideoStreamEffectsAPI.off('effectsStopped', this.effectsStopped);\n    this._localVideoStreamEffectsAPI.off('effectsError', this.effectsError);\n  };\n  private effectsStarted = (): void => {\n    this.updateStatefulVideoEffects();\n  };\n  private effectsStopped = (): void => {\n    this.updateStatefulVideoEffects();\n  };\n  private effectsError = (error: VideoEffectErrorPayload): void => {\n    // When there is an error the effects have stopped. Ensure state is updated to reflect if effects are active or not.\n    this.updateStatefulVideoEffects();\n    this._context.teeErrorToState(new Error(error.message), 'VideoEffectsFeature.startEffects');\n  };\n  private updateStatefulVideoEffects = (): void => {\n    const statefulVideoEffects = convertFromSDKToDeclarativeVideoStreamVideoEffects(this._localVideoStreamEffectsAPI.activeEffects);\n    if (this._parent === 'unparented') {\n      this._context.setDeviceManagerUnparentedViewVideoEffects(this._localVideoStream, statefulVideoEffects);\n    } else {\n      this._context.setCallLocalVideoStreamVideoEffects(this._parent.callId, statefulVideoEffects);\n    }\n  };\n}"]}