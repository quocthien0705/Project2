// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ScreenShareButton } from "../../../../../../react-components/src";
import React, { useMemo } from 'react';
import { usePropsFor } from '../../hooks/usePropsFor';
import { concatButtonBaseStyles } from '../../styles/Buttons.styles';
/* @conditional-compile-remove(rooms) */
import { useAdapter } from '../../adapter/CallAdapterProvider';
/** @private */
export const ScreenShare = (props) => {
    var _a;
    const screenShareButtonProps = usePropsFor(ScreenShareButton);
    const styles = useMemo(() => { var _a; return concatButtonBaseStyles((_a = props.styles) !== null && _a !== void 0 ? _a : {}); }, [props.styles]);
    /* @conditional-compile-remove(rooms) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(rooms) */
    const isRoomsCall = adapter.getState().isRoomsCall;
    const screenShareButtonDisabled = () => {
        var _a;
        /* @conditional-compile-remove(capabilities) */ /* @conditional-compile-remove(PSTN-calls) */
        return (_a = screenShareButtonProps === null || screenShareButtonProps === void 0 ? void 0 : screenShareButtonProps.disabled) !== null && _a !== void 0 ? _a : isDisabled(props.option);
        return isDisabled(props.option);
    };
    return React.createElement(ScreenShareButton, Object.assign({ "data-ui-id": "call-composite-screenshare-button" }, screenShareButtonProps, { showLabel: props.displayType !== 'compact', disabled: screenShareButtonDisabled() || props.disabled || ( /* @conditional-compile-remove(rooms) */isRoomsCall && ((_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.role) === 'Unknown'), styles: styles }));
};
const isDisabled = (option) => {
    if (option === undefined || option === true || option === false) {
        return false;
    }
    return option.disabled;
};
//# sourceMappingURL=ScreenShare.js.map