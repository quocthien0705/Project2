// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import React from 'react';
import { _formatString } from "../../../../acs-ui-common/src";
import parse, { Element as DOMElement } from 'html-react-parser';
/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */
import { attributesToProps } from 'html-react-parser';
import Linkify from 'react-linkify';
import { Link } from '@fluentui/react';
import LiveMessage from '../Announcer/LiveMessage';
import DOMPurify from 'dompurify';
/** @private */
export const ChatMessageContent = (props) => {
    switch (props.message.contentType) {
        case 'text':
            return MessageContentAsText(props);
        case 'html':
            return MessageContentAsRichTextHTML(props);
        case 'richtext/html':
            return MessageContentAsRichTextHTML(props);
        default:
            console.warn('unknown message content type');
            return React.createElement(React.Fragment, null);
    }
};
const MessageContentWithLiveAria = (props) => {
    return React.createElement("div", { "data-ui-status": props.message.status, role: "text", "aria-label": props.ariaLabel },
        React.createElement(LiveMessage, { message: props.liveMessage, ariaLive: "polite" }),
        props.content);
};
const MessageContentAsRichTextHTML = (props) => {
    return React.createElement(MessageContentWithLiveAria, { message: props.message, liveMessage: generateLiveMessage(props), ariaLabel: messageContentAriaText(props), content: processHtmlToReact(props) });
};
const MessageContentAsText = (props) => {
    return React.createElement(MessageContentWithLiveAria, { message: props.message, liveMessage: generateLiveMessage(props), ariaLabel: messageContentAriaText(props), content: React.createElement(Linkify, { componentDecorator: (decoratedHref, decoratedText, key) => {
                return React.createElement(Link, { target: "_blank", href: decoratedHref, key: key }, decoratedText);
            } }, props.message.content) });
};
const extractContentForAllyMessage = (props) => {
    if (props.message.content) {
        // Replace all <img> tags with 'image' for aria.
        const parsedContent = DOMPurify.sanitize(props.message.content, {
            ALLOWED_TAGS: ['img'],
            RETURN_DOM_FRAGMENT: true
        });
        parsedContent.childNodes.forEach(child => {
            if (child.nodeName.toLowerCase() !== 'img') {
                return;
            }
            const imageTextNode = document.createElement('div');
            imageTextNode.innerHTML = 'image ';
            parsedContent.replaceChild(imageTextNode, child);
        });
        // Strip all html tags from the content for aria.
        const message = DOMPurify.sanitize(parsedContent, {
            ALLOWED_TAGS: []
        });
        return message;
    }
    return '';
};
const generateLiveMessage = (props) => {
    const liveAuthor = _formatString(props.strings.liveAuthorIntro, {
        author: `${props.message.senderDisplayName}`
    });
    return `${props.message.editedOn ? props.strings.editedTag : ''} ${props.message.mine ? '' : liveAuthor} ${extractContentForAllyMessage(props)} `;
};
const messageContentAriaText = (props) => {
    const message = extractContentForAllyMessage(props);
    return props.message.mine ? _formatString(props.strings.messageContentMineAriaText, {
        message: message
    }) : _formatString(props.strings.messageContentAriaText, {
        author: `${props.message.senderDisplayName}`,
        message: message
    });
};
/* @conditional-compile-remove(image-overlay) */
const defaultOnRenderInlineImage = (inlineImage) => {
    return React.createElement("img", Object.assign({ key: inlineImage.imageAttributes.id, tabIndex: 0, "data-ui-id": inlineImage.imageAttributes.id }, inlineImage.imageAttributes));
};
const processHtmlToReact = (props) => {
    var _a;
    const options = {
        transform(reactNode, domNode) {
            var _a;
            if (domNode instanceof DOMElement && domNode.attribs) {
                // Transform custom rendering of mentions
                // Transform inline images
                /* @conditional-compile-remove(teams-inline-images-and-file-sharing) */
                if (domNode.name && domNode.name === 'img' && domNode.attribs && domNode.attribs.id) {
                    domNode.attribs['aria-label'] = domNode.attribs.name;
                    const imgProps = attributesToProps(domNode.attribs);
                    /* @conditional-compile-remove(image-overlay) */
                    const inlineImageProps = {
                        messageId: props.message.messageId,
                        imageAttributes: imgProps
                    };
                    /* @conditional-compile-remove(image-overlay) */
                    return ((_a = props.inlineImageOptions) === null || _a === void 0 ? void 0 : _a.onRenderInlineImage) ? props.inlineImageOptions.onRenderInlineImage(inlineImageProps, defaultOnRenderInlineImage) : defaultOnRenderInlineImage(inlineImageProps);
                    return React.createElement("img", Object.assign({ key: imgProps.id }, imgProps));
                }
            }
            // Pass through the original node
            return reactNode;
        }
    };
    return React.createElement(React.Fragment, null, parse((_a = props.message.content) !== null && _a !== void 0 ? _a : '', options));
};
//# sourceMappingURL=ChatMessageContent.js.map