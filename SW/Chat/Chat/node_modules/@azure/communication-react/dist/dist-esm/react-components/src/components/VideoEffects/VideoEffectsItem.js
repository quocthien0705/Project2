// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DefaultButton, Icon, mergeStyles, Stack, Text, TooltipHost, useTheme } from '@fluentui/react';
import React, { useCallback, useEffect } from 'react';
import { videoEffectsItemContainerStyles } from './VideoEffectsItem.styles';
/**
 * A component for displaying a Video Background Effect Option.
 *
 * @internal
 */
export const _VideoEffectsItem = (props) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const theme = useTheme();
    const isSelected = (_a = props.isSelected) !== null && _a !== void 0 ? _a : false;
    const disabled = (_b = props.disabled) !== null && _b !== void 0 ? _b : false;
    const backgroundImage = (_c = props.backgroundProps) === null || _c === void 0 ? void 0 : _c.url;
    const containerStyles = useCallback(() => videoEffectsItemContainerStyles({
        theme,
        isSelected,
        disabled,
        backgroundImage
    }), [backgroundImage, disabled, isSelected, theme]);
    const componentRef = React.createRef();
    useEffect(() => {
        if (props.focusOnMount && componentRef.current) {
            componentRef.current.focus();
        }
    }, [componentRef, props.focusOnMount]);
    return React.createElement(TooltipHost, Object.assign({}, props.tooltipProps),
        React.createElement(Stack, { key: props.itemKey, className: mergeStyles((_d = props.styles) === null || _d === void 0 ? void 0 : _d.root), verticalAlign: "center", horizontalAlign: "center", "data-ui-id": `video-effects-item`, "aria-label": (_e = props.ariaLabel) !== null && _e !== void 0 ? _e : props.itemKey, "aria-disabled": props.disabled },
            React.createElement(DefaultButton, { styles: containerStyles(), onClick: disabled ? undefined : () => { var _a; return (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, props.itemKey); }, componentRef: componentRef, autoFocus: props.focusOnMount },
                React.createElement(Stack, { horizontalAlign: 'center', tokens: {
                        childrenGap: '0.15rem'
                    } },
                    props.iconProps && React.createElement(Stack.Item, { styles: {
                            root: (_f = props.styles) === null || _f === void 0 ? void 0 : _f.iconContainer
                        } },
                        React.createElement(Icon, Object.assign({}, props.iconProps))),
                    props.title && React.createElement(Stack.Item, { styles: {
                            root: (_g = props.styles) === null || _g === void 0 ? void 0 : _g.textContainer
                        } },
                        React.createElement(Text, { variant: "small" }, props.title))))));
};
//# sourceMappingURL=VideoEffectsItem.js.map