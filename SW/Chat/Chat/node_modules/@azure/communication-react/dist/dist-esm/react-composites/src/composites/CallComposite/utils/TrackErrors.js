// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Take the set of active errors, and filter to only those that are newer than previously dismissed errors or have never been dismissed.
 *
 * @private
 */
export const filterLatestErrors = (activeErrors, trackedErrors) => {
    const filteredErrors = activeErrors.filter(activeError => {
        const trackedError = trackedErrors[activeError.type];
        return !trackedError || !trackedError.lastDismissedAt || trackedError.lastDismissedAt < trackedError.mostRecentlyActive;
    });
    return filteredErrors;
};
/**
 * Maintain a record of the most recently active error for each error type.
 *
 * @private
 */
export const updateTrackedErrorsWithActiveErrors = (existingTrackedErrors, activeErrors) => {
    var _a, _b;
    const trackedErrors = {};
    // Only care about active errors. If errors are no longer active we do not track that they have been previously dismissed.
    for (const activeError of activeErrors) {
        const existingTrackedError = existingTrackedErrors[activeError.type];
        trackedErrors[activeError.type] = {
            mostRecentlyActive: (_b = (_a = activeError.timestamp) !== null && _a !== void 0 ? _a : existingTrackedError === null || existingTrackedError === void 0 ? void 0 : existingTrackedError.mostRecentlyActive) !== null && _b !== void 0 ? _b : new Date(Date.now()),
            lastDismissedAt: existingTrackedError === null || existingTrackedError === void 0 ? void 0 : existingTrackedError.lastDismissedAt
        };
    }
    return trackedErrors;
};
/**
 * Create a record for when the error was most recently dismissed for tracking dismissed errors.
 *
 * @private
 */
export const trackErrorAsDismissed = (errorType, trackedErrors) => {
    const now = new Date(Date.now());
    const existingError = trackedErrors[errorType];
    return Object.assign(Object.assign({}, trackedErrors), { [errorType]: Object.assign(Object.assign({}, (existingError || {})), { lastDismissedAt: now }) });
};
//# sourceMappingURL=TrackErrors.js.map