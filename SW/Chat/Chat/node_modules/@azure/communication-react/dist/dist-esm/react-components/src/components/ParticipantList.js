// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Icon, merge, mergeStyles, PersonaPresence, Stack } from '@fluentui/react';
/* @conditional-compile-remove(total-participant-count) */ /* @conditional-compile-remove(raise-hand) */
import { Text } from '@fluentui/react';
/* @conditional-compile-remove(raise-hand) */
import { useTheme } from '../theming';
/* @conditional-compile-remove(raise-hand) */
import { RaisedHandIcon } from './assets/RaisedHandIcon';
import React, { useCallback, useMemo } from 'react';
import { useIdentifiers } from '../identifiers';
import { useLocale } from '../localization';
import { ParticipantItem } from './ParticipantItem';
import { iconStyles, participantListItemStyle, participantListStyle } from './styles/ParticipantList.styles';
const onRenderParticipantDefault = (participant, strings, myUserId, onRenderAvatar, createParticipantMenuItems, styles, onParticipantClick, showParticipantOverflowTooltip, participantAriaLabelledBy, theme) => {
    const callingParticipant = participant;
    let presence = undefined;
    if (callingParticipant) {
        presence = PersonaPresence.none;
    }
    const menuItems = createParticipantMenuItems && createParticipantMenuItems(participant);
    let displayName = participant.displayName;
    /* @conditional-compile-remove(raise-hand) */
    const callingPalette = theme.callingPalette;
    const onRenderIcon = (callingParticipant === null || callingParticipant === void 0 ? void 0 : callingParticipant.isScreenSharing) || (callingParticipant === null || callingParticipant === void 0 ? void 0 : callingParticipant.isMuted) || /* @conditional-compile-remove(raise-hand) */ (callingParticipant === null || callingParticipant === void 0 ? void 0 : callingParticipant.raisedHand) ? () => {
        var _a;
        return React.createElement(Stack, { horizontal: true, tokens: {
                childrenGap: '0.5rem'
            } }, /* @conditional-compile-remove(raise-hand) */
            callingParticipant.raisedHand && React.createElement(Stack, { horizontal: true, tokens: {
                    childrenGap: '0.2rem'
                }, style: {
                    alignItems: 'center',
                    padding: '0.1rem 0.2rem',
                    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.palette.neutralLighter,
                    borderRadius: '0.3rem'
                } },
                callingParticipant.raisedHand.raisedHandOrderPosition && React.createElement(Stack.Item, null,
                    React.createElement(Text, null, (_a = callingParticipant.raisedHand) === null || _a === void 0 ? void 0 : _a.raisedHandOrderPosition)),
                React.createElement(Stack.Item, null,
                    React.createElement(RaisedHandIcon, null))),
            callingParticipant.isScreenSharing && React.createElement(Icon, { iconName: "ParticipantItemScreenShareStart", className: iconStyles, ariaLabel: strings.sharingIconLabel }),
            callingParticipant.isMuted && React.createElement(Icon, { iconName: "ParticipantItemMicOff", className: iconStyles, ariaLabel: strings.mutedIconLabel }));
    } : () => null;
    /* @conditional-compile-remove(raise-hand) */
    const onRenderAvatarWithRaiseHand = (callingParticipant === null || callingParticipant === void 0 ? void 0 : callingParticipant.raisedHand) && onRenderAvatar ? (userId, options, defaultOnRender) => onRenderAvatar(userId, Object.assign(Object.assign({}, options), { styles: {
            root: {
                border: callingPalette.raiseHandGold
            }
        } }), defaultOnRender) : onRenderAvatar;
    return React.createElement(ParticipantItem, { styles: styles, key: participant.userId, userId: participant.userId, displayName: displayName, me: myUserId ? participant.userId === myUserId : false, menuItems: menuItems, presence: presence, onRenderIcon: onRenderIcon, onRenderAvatar: onRenderAvatarWithRaiseHand, onClick: () => onParticipantClick === null || onParticipantClick === void 0 ? void 0 : onParticipantClick(participant), showParticipantOverflowTooltip: showParticipantOverflowTooltip, ariaLabelledBy: participantAriaLabelledBy });
};
/**
 * Sort participants by raised hand order position
 */
const sortParticipants = (participants) => {
    /* @conditional-compile-remove(raise-hand) */
    const isParticipantListCallParticipant = function (participant) {
        return 'raisedHand' in participant;
    };
    /* @conditional-compile-remove(raise-hand) */
    participants.sort((a, b) => {
        if (!isParticipantListCallParticipant(a) || !isParticipantListCallParticipant(b)) {
            return 0;
        }
        const callA = a;
        const callB = b;
        if (callA.raisedHand && callB.raisedHand) {
            return callA.raisedHand.raisedHandOrderPosition - callB.raisedHand.raisedHandOrderPosition;
        }
        else if (callA.raisedHand) {
            return -1;
        }
        else if (callB.raisedHand) {
            return 1;
        }
        return 0;
    });
    return participants;
};
const getParticipantsForDefaultRender = (participants, excludeMe, myUserId) => {
    if (!excludeMe || !myUserId) {
        return [...participants];
    }
    const userIndex = participants.map(p => p.userId).indexOf(myUserId);
    if (userIndex === -1) {
        return [...participants];
    }
    const remoteParticipants = [...participants];
    remoteParticipants.splice(userIndex, 1);
    return remoteParticipants;
};
/**
 * Component to render all calling or chat participants.
 *
 * By default, each participant is rendered with {@link ParticipantItem}. See {@link ParticipantListProps.onRenderParticipant} to override.
 *
 * @public
 */
export const ParticipantList = (props) => {
    var _a, _b, _c, _d;
    const { excludeMe = false, myUserId, participants, onRemoveParticipant, onRenderAvatar, onRenderParticipant, onFetchParticipantMenuItems, showParticipantOverflowTooltip, participantAriaLabelledBy } = props;
    /* @conditional-compile-remove(raise-hand) */
    const theme = useTheme();
    const ids = useIdentifiers();
    const participantItemStrings = useLocale().strings.participantItem;
    const displayedParticipants = useMemo(() => {
        return onRenderParticipant ? participants : getParticipantsForDefaultRender(participants, excludeMe, myUserId);
    }, [participants, excludeMe, myUserId, onRenderParticipant]);
    sortParticipants(displayedParticipants);
    const createParticipantMenuItems = useCallback((participant) => {
        var _a, _b;
        let menuItems = [];
        const participantIsRemovable = participant.isRemovable;
        if (participant.userId !== myUserId && onRemoveParticipant && participantIsRemovable) {
            menuItems.push({
                key: 'remove',
                text: participantItemStrings.removeButtonLabel,
                onClick: () => onRemoveParticipant(participant.userId),
                itemProps: {
                    styles: (_b = (_a = props.styles) === null || _a === void 0 ? void 0 : _a.participantItemStyles) === null || _b === void 0 ? void 0 : _b.participantSubMenuItemsStyles
                },
                'data-ui-id': ids.participantListRemoveParticipantButton
            });
        }
        if (onFetchParticipantMenuItems) {
            menuItems = onFetchParticipantMenuItems(participant.userId, myUserId, menuItems);
        }
        return menuItems;
    }, [ids.participantListRemoveParticipantButton, myUserId, onFetchParticipantMenuItems, onRemoveParticipant, (_b = (_a = props.styles) === null || _a === void 0 ? void 0 : _a.participantItemStyles) === null || _b === void 0 ? void 0 : _b.participantSubMenuItemsStyles, /* @conditional-compile-remove(raise-hand) */ participantItemStrings.removeButtonLabel]);
    const participantItemStyles = useMemo(() => { var _a; return merge(participantListItemStyle, (_a = props.styles) === null || _a === void 0 ? void 0 : _a.participantItemStyles); }, [(_c = props.styles) === null || _c === void 0 ? void 0 : _c.participantItemStyles]);
    return React.createElement(Stack, { "data-ui-id": ids.participantList, className: mergeStyles(participantListStyle, (_d = props.styles) === null || _d === void 0 ? void 0 : _d.root), role: 'menu' }, displayedParticipants.map((participant) => onRenderParticipant ? onRenderParticipant(participant) : onRenderParticipantDefault(participant, participantItemStrings, myUserId, onRenderAvatar, createParticipantMenuItems, participantItemStyles, props.onParticipantClick, showParticipantOverflowTooltip, participantAriaLabelledBy, /* @conditional-compile-remove(raise-hand) */ theme)));
};
//# sourceMappingURL=ParticipantList.js.map