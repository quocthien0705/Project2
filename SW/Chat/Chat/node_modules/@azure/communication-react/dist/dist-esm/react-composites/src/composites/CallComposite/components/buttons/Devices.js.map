{"version":3,"file":"Devices.js","sourceRoot":"","sources":["../../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/buttons/Devices.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ControlBarButtonStyles, DevicesButton } from '@internal/react-components';\n/* @conditional-compile-remove(rooms) */\nimport { DevicesButtonStrings } from '@internal/react-components';\nimport React, { useMemo } from 'react';\nimport { usePropsFor } from '../../hooks/usePropsFor';\nimport { concatButtonBaseStyles, devicesButtonWithIncreasedTouchTargets } from '../../styles/Buttons.styles';\n/* @conditional-compile-remove(rooms) */\nimport { CompositeLocale, useLocale } from '../../../localization';\nimport { _HighContrastAwareIcon } from '@internal/react-components';\nimport { CallControlDisplayType } from '../../../common/types/CommonCallControlOptions';\n/* @conditional-compile-remove(rooms) */\nimport { useAdapter } from '../../adapter/CallAdapterProvider';\n/* @conditional-compile-remove(rooms) */\nimport { ParticipantRole } from '@azure/communication-calling';\n\n/** @private */\nexport const Devices = (props: {\n  displayType?: CallControlDisplayType;\n  increaseFlyoutItemSize?: boolean;\n  styles?: ControlBarButtonStyles;\n  disabled?: boolean;\n}): JSX.Element => {\n  const devicesButtonProps = usePropsFor(DevicesButton);\n  /* @conditional-compile-remove(rooms) */\n  const adapter = useAdapter();\n  /* @conditional-compile-remove(rooms) */\n  const role: ParticipantRole = adapter.getState().call?.role ?? 'Unknown';\n  const augmentedDeviceButtonProps = useMemo(() => ({\n    ...devicesButtonProps,\n    /* @conditional-compile-remove(rooms) */\n    microphones: role === 'Consumer' ? [] : devicesButtonProps.microphones,\n    /* @conditional-compile-remove(rooms) */\n    cameras: role === 'Consumer' ? [] : devicesButtonProps.cameras\n  }), [devicesButtonProps, /* @conditional-compile-remove(rooms) */\n  role]);\n  const styles = useMemo(() => concatButtonBaseStyles(props.increaseFlyoutItemSize ? devicesButtonWithIncreasedTouchTargets : {}, props.styles ?? {}), [props.increaseFlyoutItemSize, props.styles]);\n  /* @conditional-compile-remove(rooms) */\n  const locale = useLocale();\n  /* @conditional-compile-remove(rooms) */\n  const onlyManageSpeakers = role === 'Consumer';\n\n  /* @conditional-compile-remove(rooms) */\n  const onRenderDevicesIcon = (): JSX.Element => {\n    return <_HighContrastAwareIcon disabled={props.disabled} iconName=\"OptionsSpeaker\" />;\n  };\n  return <DevicesButton\n  /* By setting `persistMenu?` to true, we prevent options menu from getting hidden every time a participant joins or leaves. */ persistMenu={true} {...augmentedDeviceButtonProps} showLabel={props.displayType !== 'compact'} styles={styles} data-ui-id=\"calling-composite-devices-button\" disabled={props.disabled}\n  /* @conditional-compile-remove(rooms) */ strings={getLabelFromRole((role as ParticipantRole), locale)}\n  /* @conditional-compile-remove(rooms) */ onRenderIcon={onlyManageSpeakers ? onRenderDevicesIcon : undefined} />;\n};\n\n/* @conditional-compile-remove(rooms) */\nconst getLabelFromRole = (role: ParticipantRole, locale: CompositeLocale): Partial<DevicesButtonStrings> | undefined => {\n  if (role === 'Consumer') {\n    return {\n      label: locale.component.strings.microphoneButton.speakerMenuTitle\n    };\n  }\n  return undefined;\n};"]}