{"version":3,"file":"OnFetchProfileCallback.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/OnFetchProfileCallback.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAKlC,OAAO,EAAE,yBAAyB,EAAE,MAAM,UAAU,CAAC;AAqBrD;;GAEG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,cAAsC,EAAE,YAAwB,EAAwB,EAAE;IACnI,MAAM,iBAAiB,GAEnB,EAAE,CAAC;IACP,OAAO,CAAC,KAAuB,EAAE,EAAE;;QACjC,MAAM,oBAAoB,GAAG,MAAA,KAAK,CAAC,IAAI,0CAAE,kBAAkB,CAAC;QAC5D,CAAC,GAAS,EAAE;YACV,IAAI,mBAAmB,GAAG,KAAK,CAAC;YAChC,KAAK,MAAM,GAAG,IAAI,oBAAoB,EAAE,CAAC;gBACvC,IAAI,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC3B,SAAS;gBACX,CAAC;gBACD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,GAAG,EAAE;oBACxC,WAAW,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC,WAAW;iBACnD,CAAC,CAAC;gBACH,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,KAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC,WAAW,MAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAA,EAAE,CAAC;oBAC3F,iBAAiB,CAAC,GAAG,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC;oBAC9C,mBAAmB,GAAG,IAAI,CAAC;gBAC7B,CAAC;YACH,CAAC;YACD,wGAAwG;YACxG,mBAAmB,IAAI,YAAY,EAAE,CAAC;QACxC,CAAC,CAAA,CAAC,EAAE,CAAC;QACL,MAAM,oBAAoB,GAAG,yBAAyB,CAAC,CAAC,EAAU,EAAE,WAAmC,EAAsC,EAAE;YAC7I,IAAI,iBAAiB,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC1B,uCACK,WAAW,KACd,WAAW,EAAE,iBAAiB,CAAC,EAAE,CAAC,IAClC;YACJ,CAAC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,OAAO,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CallAdapterState } from './CallAdapter';\nimport { RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { AdapterStateModifier } from './AzureCommunicationCallAdapter';\nimport { createParticipantModifier } from '../utils';\n\n/**\n * Callback function used to provide custom data to build profile for a user.\n *\n * @beta\n */\nexport type OnFetchProfileCallback = (userId: string, defaultProfile?: Profile) => Promise<Profile | undefined>;\n\n/**\n * The profile of a user.\n *\n * @beta\n */\nexport type Profile = {\n  /**\n   * Primary text to display, usually the name of the person.\n   */\n  displayName?: string;\n};\n\n/**\n * @private\n */\nexport const createProfileStateModifier = (onFetchProfile: OnFetchProfileCallback, notifyUpdate: () => void): AdapterStateModifier => {\n  const cachedDisplayName: {\n    [id: string]: string;\n  } = {};\n  return (state: CallAdapterState) => {\n    const originalParticipants = state.call?.remoteParticipants;\n    (async () => {\n      let shouldNotifyUpdates = false;\n      for (const key in originalParticipants) {\n        if (cachedDisplayName[key]) {\n          continue;\n        }\n        const profile = await onFetchProfile(key, {\n          displayName: originalParticipants[key].displayName\n        });\n        if (profile?.displayName && originalParticipants[key].displayName !== profile?.displayName) {\n          cachedDisplayName[key] = profile?.displayName;\n          shouldNotifyUpdates = true;\n        }\n      }\n      // notify update only when there is a change, which most likely will trigger modifier and setState again\n      shouldNotifyUpdates && notifyUpdate();\n    })();\n    const participantsModifier = createParticipantModifier((id: string, participant: RemoteParticipantState): RemoteParticipantState | undefined => {\n      if (cachedDisplayName[id]) {\n        return {\n          ...participant,\n          displayName: cachedDisplayName[id]\n        };\n      }\n      return undefined;\n    });\n    return participantsModifier(state);\n  };\n};"]}