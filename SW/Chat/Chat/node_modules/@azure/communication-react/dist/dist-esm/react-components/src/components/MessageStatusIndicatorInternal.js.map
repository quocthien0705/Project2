{"version":3,"file":"MessageStatusIndicatorInternal.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/components/MessageStatusIndicatorInternal.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ICalloutContentStyles, ITooltipHostStyles, mergeStyles, TooltipHost } from '@fluentui/react';\nimport { MessageStatus, _formatString } from '@internal/acs-ui-common';\nimport React, { useState } from 'react';\nimport { useLocale } from '../localization';\nimport { useTheme } from '../theming';\nimport { isDarkThemed } from '../theming/themeUtils';\nimport { BaseCustomStyles } from '../types';\nimport { MessageStatusIndicatorErrorIconStyle, MessageStatusIndicatorIconStyle } from './styles/MessageStatusIndicator.styles';\nimport { MessageStatusIndicatorStrings } from './MessageStatusIndicator';\nimport { MessageStatusIcon, MessageStatusIconProps } from './MessageStatusIcon';\n\n/**\n * Props for {@link MessageStatusIndicatorInternal}.\n *\n * @internal\n */\nexport interface MessageStatusIndicatorInternalProps {\n  /** Message status that determines the icon to display. */\n  status?: MessageStatus;\n  readCount?: number;\n  onToggleToolTip?: (isToggled: boolean) => void;\n  /** number of participants not including myself */\n  remoteParticipantsCount?: number;\n  /**\n   * Allows users to pass an object containing custom CSS styles.\n   * @Example\n   * ```\n   * <MessageStatus styles={{ root: { background: 'blue' } }} />\n   * ```\n   */\n  styles?: BaseCustomStyles;\n  /**\n   * Optional strings to override in component\n   */\n  strings?: MessageStatusIndicatorStrings;\n  /**\n   * Optional call back to provide LiveMessage component for accessibility\n   */\n  shouldAnnounce: boolean;\n}\n\n/**\n * Component to display the status of a sent message.\n *\n * Adds an icon and tooltip corresponding to the message status.\n *\n * @internal\n */\nexport const MessageStatusIndicatorInternal = (props: MessageStatusIndicatorInternalProps): JSX.Element => {\n  const {\n    status,\n    styles,\n    remoteParticipantsCount,\n    onToggleToolTip,\n    readCount,\n    shouldAnnounce\n  } = props;\n  const localeStrings = useLocale().strings.messageStatusIndicator;\n  const [isTooltipToggled, setIsTooltipToggled] = useState<boolean>(false);\n  const strings = {\n    ...localeStrings,\n    ...props.strings\n  };\n  const theme = useTheme();\n  const calloutStyle: Partial<ICalloutContentStyles> = {\n    root: {\n      padding: 0\n    },\n    calloutMain: {\n      padding: '0.5rem'\n    }\n  };\n\n  // Place callout with no gap between it and the button.\n  const calloutProps = {\n    gapSpace: 0,\n    styles: calloutStyle,\n    backgroundColor: isDarkThemed(theme) ? theme.palette.neutralLighter : ''\n  };\n  switch (status) {\n    case 'failed':\n      return <TooltipHost content={strings.failedToSendTooltipText} data-ui-id=\"chat-composite-message-tooltip\" calloutProps={{\n        ...calloutProps\n      }} styles={hostStyles}>\n          <MemoMessageStatusIcon shouldAnnounce={shouldAnnounce} iconName=\"MessageFailed\" iconClassName={mergeStyles(MessageStatusIndicatorErrorIconStyle, {\n          color: theme.palette.redDark\n        }, styles?.root)} ariaLabel={strings.failedToSendAriaLabel} />\n        </TooltipHost>;\n    case 'sending':\n      return <TooltipHost content={strings.sendingTooltipText} data-ui-id=\"chat-composite-message-tooltip\" calloutProps={{\n        ...calloutProps\n      }} styles={hostStyles}>\n          <MemoMessageStatusIcon shouldAnnounce={shouldAnnounce} iconName=\"MessageSending\" iconClassName={mergeStyles(MessageStatusIndicatorIconStyle, {\n          color: theme.palette.themePrimary\n        }, styles?.root)} ariaLabel={strings.sendingAriaLabel} />\n        </TooltipHost>;\n    case 'seen':\n      return <TooltipHost calloutProps={{\n        ...calloutProps\n      }} data-ui-id=\"chat-composite-message-tooltip\" styles={hostStyles} content={\n      // when it's just 1 to 1 texting, we don't need to know who has read the message, just show message as 'seen'\n      // when readCount is 0, we have a bug, show 'seen' to cover up as a fall back\n      // when participant count is 0, we have a bug, show 'seen' to cover up as a fall back\n      readCount === 0 || remoteParticipantsCount && remoteParticipantsCount <= 1 || !readCount || !remoteParticipantsCount || strings.readByTooltipText === undefined ? strings.seenTooltipText : _formatString(strings.readByTooltipText, {\n        messageThreadReadCount: `${readCount}`,\n        remoteParticipantsCount: `${remoteParticipantsCount}`\n      })} onTooltipToggle={() => {\n        if (onToggleToolTip) {\n          onToggleToolTip(!isTooltipToggled);\n          setIsTooltipToggled(!isTooltipToggled);\n        }\n      }}>\n          <MemoMessageStatusIcon shouldAnnounce={shouldAnnounce} iconName=\"MessageSeen\" iconClassName={mergeStyles({\n          color: theme.palette.themePrimary\n        }, styles?.root)} ariaLabel={strings.seenAriaLabel} />\n        </TooltipHost>;\n    case 'delivered':\n      return <TooltipHost calloutProps={{\n        ...calloutProps\n      }} content={strings.deliveredTooltipText} data-ui-id=\"chat-composite-message-tooltip\" styles={hostStyles}>\n          <MemoMessageStatusIcon shouldAnnounce={shouldAnnounce} iconName=\"MessageDelivered\" iconClassName={mergeStyles(MessageStatusIndicatorIconStyle, {\n          color: theme.palette.themePrimary\n        }, styles?.root)} ariaLabel={strings.deliveredAriaLabel} />\n        </TooltipHost>;\n    default:\n      return <></>;\n  }\n};\n\n// The TooltipHost root uses display: inline by default.\n// To prevent sizing issues or tooltip positioning issues, we override to inline-block.\n// For more details see \"Icon Button with Tooltip\" on https://developer.microsoft.com/en-us/fluentui#/controls/web/button\nconst hostStyles: Partial<ITooltipHostStyles> = {\n  root: {\n    display: 'inline-block'\n  }\n};\nconst MemoMessageStatusIcon = React.memo((obj: MessageStatusIconProps): JSX.Element => {\n  return <MessageStatusIcon {...obj} />;\n});"]}