{"version":3,"file":"participantListSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/participantListSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CallClientState, RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { createSelector } from 'reselect';\nimport { getIdentifier, getDisplayName, getIsScreenSharingOn, getIsMuted, CallingBaseSelectorProps } from './baseSelectors';\nimport { getRole } from './baseSelectors';\nimport { CallParticipantListParticipant } from '@internal/react-components';\nimport { _isRingingPSTNParticipant, _updateUserDisplayNames } from './utils/callUtils';\nimport { memoizedConvertAllremoteParticipants } from './utils/participantListSelectorUtils';\n/* @conditional-compile-remove(rooms) */\nimport { memoizedConvertAllremoteParticipantsBetaRelease } from './utils/participantListSelectorUtils';\n/* @conditional-compile-remove(raise-hand) */\nimport { getLocalParticipantRaisedHand } from './baseSelectors';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { getParticipantCount } from './baseSelectors';\nimport { isMicrosoftTeamsAppIdentifier, isPhoneNumberIdentifier } from '@azure/communication-common';\nimport { ParticipantRole, SpotlightedParticipant } from '@azure/communication-calling';\nimport { getRemoteParticipantsExcludingConsumers } from './getRemoteParticipantsExcludingConsumers';\nconst convertRemoteParticipantsToParticipantListParticipants = (remoteParticipants: RemoteParticipantState[], localUserCanRemoveOthers: boolean, isHideAttendeeNamesEnabled?: boolean, localUserRole?: ParticipantRole, spotlightedParticipants?: SpotlightedParticipant[]): CallParticipantListParticipant[] => {\n  const conversionCallback = (memoizeFn: (...args: any[]) => CallParticipantListParticipant): CallParticipantListParticipant[] => {\n    return remoteParticipants\n    // Filter out MicrosoftBot participants\n    .filter((participant: RemoteParticipantState) => {\n      return !isMicrosoftTeamsAppIdentifier(participant.identifier);\n      return true;\n    })\n    /**\n     * hiding participants who are inLobby, idle, or connecting in ACS clients till we can admit users through ACS clients.\n     * phone users will be in the connecting state until they are connected to the call.\n     */.filter(participant => {\n      return !['InLobby', 'Idle', 'Connecting', 'Disconnected'].includes(participant.state) || isPhoneNumberIdentifier(participant.identifier);\n    }).map((participant: RemoteParticipantState) => {\n      const isScreenSharing = Object.values(participant.videoStreams).some(videoStream => videoStream.mediaStreamType === 'ScreenSharing' && videoStream.isAvailable);\n      /**\n       * We want to check the participant to see if they are a PSTN participant joining the call\n       * and mapping their state to be 'Ringing'\n       */\n      const state = _isRingingPSTNParticipant(participant);\n      let displayName = participant.displayName;\n      return memoizeFn(toFlatCommunicationIdentifier(participant.identifier), displayName, state, participant.isMuted, isScreenSharing, participant.isSpeaking, /* @conditional-compile-remove(raise-hand) */\n      participant.raisedHand, localUserCanRemoveOthers);\n    }).sort((a, b) => {\n      const nameA = a.displayName?.toLowerCase() || '';\n      const nameB = b.displayName?.toLowerCase() || '';\n      if (nameA < nameB) {\n        return -1;\n      } else if (nameA > nameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  };\n  /* @conditional-compile-remove(rooms) */\n  return memoizedConvertAllremoteParticipantsBetaRelease(conversionCallback);\n  return memoizedConvertAllremoteParticipants(conversionCallback);\n};\n\n/**\n * Selector type for {@link ParticipantList} component.\n *\n * @public\n */\nexport type ParticipantListSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  participants: CallParticipantListParticipant[];\n  myUserId: string;\n};\n\n/**\n * Selects data that drives {@link ParticipantList} component.\n *\n * @public\n */\nexport const participantListSelector: ParticipantListSelector = createSelector([getIdentifier, getDisplayName, getRemoteParticipantsExcludingConsumers, getIsScreenSharingOn, getIsMuted, /* @conditional-compile-remove(raise-hand) */getLocalParticipantRaisedHand, getRole, getParticipantCount], (userId, displayName, remoteParticipants, isScreenSharingOn, isMuted, /* @conditional-compile-remove(raise-hand) */\nraisedHand, role, partitipantCount): {\n  participants: CallParticipantListParticipant[];\n  myUserId: string;\n  totalParticipantCount?: number;\n} => {\n  const localUserCanRemoveOthers = localUserCanRemoveOthersTrampoline(role);\n  const participants = remoteParticipants ? convertRemoteParticipantsToParticipantListParticipants(updateUserDisplayNamesTrampoline(Object.values(remoteParticipants)), localUserCanRemoveOthers) : [];\n  participants.push({\n    userId: userId,\n    displayName: displayName,\n    isScreenSharing: isScreenSharingOn,\n    isMuted: isMuted,\n    /* @conditional-compile-remove(raise-hand) */\n    raisedHand: raisedHand,\n    state: 'Connected',\n    // Local participant can never remove themselves.\n    isRemovable: false\n  });\n  return {\n    participants: participants,\n    myUserId: userId\n  };\n});\nconst updateUserDisplayNamesTrampoline = (remoteParticipants: RemoteParticipantState[]): RemoteParticipantState[] => {\n  return remoteParticipants;\n};\nconst localUserCanRemoveOthersTrampoline = (role?: string): boolean => {\n  /* @conditional-compile-remove(rooms) */\n  return role === 'Presenter' || role === 'Unknown' || role === undefined;\n  return true;\n};"]}