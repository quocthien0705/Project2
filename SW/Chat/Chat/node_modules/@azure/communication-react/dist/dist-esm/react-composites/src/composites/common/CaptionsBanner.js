// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import React from 'react';
/* @conditional-compile-remove(close-captions) */
import { useState, useEffect, useCallback } from 'react';
/* @conditional-compile-remove(close-captions) */
import { _CaptionsBanner } from "../../../../react-components/src";
/* @conditional-compile-remove(close-captions) */
import { mergeStyles, Stack } from '@fluentui/react';
/* @conditional-compile-remove(close-captions) */
import { CaptionsSettingsModal } from './CaptionsSettingsModal';
/* @conditional-compile-remove(close-captions) */
import { CaptionsBannerMoreButton } from './CaptionsBannerMoreButton';
/* @conditional-compile-remove(close-captions) */
import { useAdaptedSelector } from '../CallComposite/hooks/useAdaptedSelector';
/* @conditional-compile-remove(close-captions) */
import { useHandlers } from '../CallComposite/hooks/useHandlers';
/* @conditional-compile-remove(close-captions) */
import { _captionsBannerSelector } from "../../../../calling-component-bindings/src";
/* @conditional-compile-remove(close-captions) */
import { useLocale } from '../localization';
/* @conditional-compile-remove(close-captions) */
import { AvatarPersona } from './AvatarPersona';
/* @conditional-compile-remove(close-captions) */
const mobileViewBannerWidth = '90%';
/** @private */
export const CaptionsBanner = (props) => {
    /* @conditional-compile-remove(close-captions) */
    const captionsBannerProps = useAdaptedSelector(_captionsBannerSelector);
    /* @conditional-compile-remove(close-captions) */
    const handlers = useHandlers(_CaptionsBanner);
    /* @conditional-compile-remove(close-captions) */
    const [isCaptionsSettingsOpen, setIsCaptionsSettingsOpen] = useState(false);
    /* @conditional-compile-remove(close-captions) */
    const onClickCaptionsSettings = () => {
        setIsCaptionsSettingsOpen(true);
    };
    /* @conditional-compile-remove(close-captions) */
    const onDismissCaptionsSettings = () => {
        setIsCaptionsSettingsOpen(false);
    };
    /* @conditional-compile-remove(close-captions) */
    const containerClassName = mergeStyles({
        position: 'relative'
    });
    /* @conditional-compile-remove(close-captions) */
    const floatingChildClassName = mergeStyles({
        position: 'absolute',
        right: 0,
        top: 0
    });
    /* @conditional-compile-remove(close-captions) */
    const strings = useLocale().strings.call;
    /* @conditional-compile-remove(close-captions) */
    const captionsBannerStrings = {
        captionsBannerSpinnerText: strings.captionsBannerSpinnerText
    };
    /* @conditional-compile-remove(close-captions) */
    const onRenderAvatar = useCallback((userId, options) => {
        return React.createElement(AvatarPersona, Object.assign({ userId: userId }, options, { dataProvider: props.onFetchAvatarPersonaData }));
    }, [props.onFetchAvatarPersonaData]);
    /* @conditional-compile-remove(close-captions) */
    const { innerWidth: width } = window;
    /* @conditional-compile-remove(close-captions) */
    const [windowWidth, setWindowWidth] = useState(width);
    /* @conditional-compile-remove(close-captions) */
    useEffect(() => {
        function handleResize() {
            setWindowWidth(window.innerWidth);
        }
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);
    /* @conditional-compile-remove(close-captions) */
    const desktopViewBannerWidth = windowWidth > 620 ? '35rem' : '80%';
    return React.createElement(React.Fragment, null, /* @conditional-compile-remove(close-captions) */
        isCaptionsSettingsOpen && React.createElement(CaptionsSettingsModal, { showCaptionsSettingsModal: isCaptionsSettingsOpen, onDismissCaptionsSettings: onDismissCaptionsSettings, changeCaptionLanguage: true }), /* @conditional-compile-remove(close-captions) */
        React.createElement("div", { className: containerClassName },
            React.createElement(Stack, { horizontalAlign: "center" },
                React.createElement(Stack.Item, { style: {
                        width: props.isMobile ? mobileViewBannerWidth : desktopViewBannerWidth
                    } },
                    React.createElement(_CaptionsBanner, Object.assign({}, captionsBannerProps, handlers, { onRenderAvatar: onRenderAvatar, formFactor: props.isMobile ? 'compact' : 'default', strings: captionsBannerStrings })))),
            !props.isMobile && captionsBannerProps.isCaptionsOn && React.createElement("div", { className: floatingChildClassName },
                React.createElement(CaptionsBannerMoreButton, { onCaptionsSettingsClick: onClickCaptionsSettings }))));
};
//# sourceMappingURL=CaptionsBanner.js.map