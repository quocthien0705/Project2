{"version":3,"file":"ScreenShare.js","sourceRoot":"","sources":["../../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/buttons/ScreenShare.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAA0B,iBAAiB,EAAE,+CAAmC;AACvF,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,wCAAwC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAE/D,eAAe;AACf,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAQ3B,EAAe,EAAE;;IAChB,MAAM,sBAAsB,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,WAAC,OAAA,sBAAsB,CAAC,MAAA,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAA,EAAA,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACzF,wCAAwC;IACxC,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;IAC7B,wCAAwC;IACxC,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC;IACnD,MAAM,yBAAyB,GAAG,GAAY,EAAE;;QAC9C,+CAA+C,CAAC,6CAA6C;QAC7F,OAAO,MAAA,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,QAAQ,mCAAI,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACpE,OAAO,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC;IACF,OAAO,oBAAC,iBAAiB,gCAAY,mCAAmC,IAAK,sBAAsB,IAAE,SAAS,EAAE,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE,QAAQ,EAAE,yBAAyB,EAAE,IAAI,KAAK,CAAC,QAAQ,IAAI,EAAE,wCAAwC,WAAW,IAAI,CAAA,MAAA,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,0CAAE,IAAI,MAAK,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;AACxU,CAAC,CAAC;AACF,MAAM,UAAU,GAAG,CAAC,MAEnB,EAAW,EAAE;IACZ,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;QAChE,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,MAAM,CAAC,QAAQ,CAAC;AACzB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ControlBarButtonStyles, ScreenShareButton } from '@internal/react-components';\nimport React, { useMemo } from 'react';\nimport { CallControlDisplayType } from '../../../common/types/CommonCallControlOptions';\nimport { usePropsFor } from '../../hooks/usePropsFor';\nimport { concatButtonBaseStyles } from '../../styles/Buttons.styles';\n/* @conditional-compile-remove(rooms) */\nimport { useAdapter } from '../../adapter/CallAdapterProvider';\n\n/** @private */\nexport const ScreenShare = (props: {\n  // The value of `CallControlOptions.screenShareButton`.\n  option?: boolean | {\n    disabled: boolean;\n  };\n  displayType?: CallControlDisplayType;\n  styles?: ControlBarButtonStyles;\n  disabled?: boolean;\n}): JSX.Element => {\n  const screenShareButtonProps = usePropsFor(ScreenShareButton);\n  const styles = useMemo(() => concatButtonBaseStyles(props.styles ?? {}), [props.styles]);\n  /* @conditional-compile-remove(rooms) */\n  const adapter = useAdapter();\n  /* @conditional-compile-remove(rooms) */\n  const isRoomsCall = adapter.getState().isRoomsCall;\n  const screenShareButtonDisabled = (): boolean => {\n    /* @conditional-compile-remove(capabilities) */ /* @conditional-compile-remove(PSTN-calls) */\n    return screenShareButtonProps?.disabled ?? isDisabled(props.option);\n    return isDisabled(props.option);\n  };\n  return <ScreenShareButton data-ui-id=\"call-composite-screenshare-button\" {...screenShareButtonProps} showLabel={props.displayType !== 'compact'} disabled={screenShareButtonDisabled() || props.disabled || ( /* @conditional-compile-remove(rooms) */isRoomsCall && adapter.getState().call?.role === 'Unknown')} styles={styles} />;\n};\nconst isDisabled = (option?: boolean | {\n  disabled: boolean;\n}): boolean => {\n  if (option === undefined || option === true || option === false) {\n    return false;\n  }\n  return option.disabled;\n};"]}