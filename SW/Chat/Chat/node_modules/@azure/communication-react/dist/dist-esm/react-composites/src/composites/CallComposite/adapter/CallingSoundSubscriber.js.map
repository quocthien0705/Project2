{"version":3,"file":"CallingSoundSubscriber.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/CallingSoundSubscriber.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CallCommon } from '@azure/communication-calling';\nimport { CallingSounds } from './CallAdapter';\n/* @conditional-compile-remove(calling-sounds) */\nimport { isPhoneNumberIdentifier } from '@azure/communication-common';\nimport { CommunicationIdentifier } from '@azure/communication-common';\ntype CallingSoundsLoaded = {\n  callEndedSound?: HTMLAudioElement;\n  callRingingSound?: HTMLAudioElement;\n  callBusySound?: HTMLAudioElement;\n};\nconst CALL_REJECTED_CODE = 603;\nconst CALL_ENDED_CODE = 0;\nconst CALL_TRANSFER_SUBCODE = 7015;\n\n/**\n * @private\n */\nexport class CallingSoundSubscriber {\n  private call: CallCommon;\n  private soundsLoaded?: CallingSoundsLoaded;\n  private callee: CommunicationIdentifier[] | undefined;\n  constructor(call: CallCommon, callee?: CommunicationIdentifier[], sounds?: CallingSounds) {\n    this.call = call;\n    this.callee = callee;\n    if (sounds) {\n      this.soundsLoaded = this.loadSounds(sounds);\n      this.subscribeCallSoundEvents();\n    }\n  }\n  private onCallStateChanged = (): void => {\n    this.call.on('stateChanged', () => {\n      if (shouldPlayRinging(this.call, this.callee) && this.soundsLoaded?.callRingingSound) {\n        this.soundsLoaded.callRingingSound.loop = true;\n        this.playSound(this.soundsLoaded.callRingingSound);\n      }\n      if (!shouldPlayRinging(this.call, this.callee) && this.soundsLoaded?.callRingingSound) {\n        this.soundsLoaded.callRingingSound.loop = false;\n        this.soundsLoaded.callRingingSound.pause();\n      }\n      if (this.call.state === 'Disconnected') {\n        if (this.soundsLoaded?.callBusySound && this.call.callEndReason?.code === CALL_REJECTED_CODE) {\n          this.playSound(this.soundsLoaded.callBusySound);\n        } else if (this.soundsLoaded?.callEndedSound && this.call.callEndReason?.code === CALL_ENDED_CODE && this.call.callEndReason?.subCode !== CALL_TRANSFER_SUBCODE) {\n          this.playSound(this.soundsLoaded.callEndedSound);\n        }\n      }\n    });\n  };\n  private subscribeCallSoundEvents(): void {\n    this.onCallStateChanged();\n  }\n  public unsubscribeAll(): void {\n    this.call?.off('stateChanged', this.onCallStateChanged);\n    if (this.soundsLoaded?.callRingingSound) {\n      this.soundsLoaded.callRingingSound.pause();\n    }\n  }\n  private loadSounds(sounds?: CallingSounds): CallingSoundsLoaded | undefined {\n    let callEndedSound;\n    if (sounds?.callEnded) {\n      callEndedSound = new Audio(sounds?.callEnded?.url);\n      callEndedSound.preload = 'auto';\n    }\n    let callRingingSound;\n    if (sounds?.callRinging) {\n      callRingingSound = new Audio(sounds?.callRinging?.url);\n      callRingingSound.preload = 'auto';\n    }\n    let callBusySound;\n    if (sounds?.callBusy) {\n      callBusySound = new Audio(sounds?.callBusy?.url);\n      callBusySound.preload = 'auto';\n    }\n    return {\n      callEndedSound,\n      callRingingSound,\n      callBusySound\n    };\n  }\n  private playSound(sound: HTMLAudioElement): void {\n    sound.play().catch(e => {\n      console.error(e, 'Failed to play sound, check loader config to make sure it is correct');\n    });\n  }\n}\n\n/**\n * Helper function to allow the calling sound subscriber to determine when to play the ringing\n * sound when making an outbound call.\n */\nconst shouldPlayRinging = (call: CallCommon, callee?: CommunicationIdentifier[]): boolean => {\n  /* @conditional-compile-remove(calling-sounds) */\n  if (callee && callee.length >= 1 && !isPhoneNumberIdentifier(callee[0]) && (call.state === 'Ringing' || call.state === 'Connecting')) {\n    return true;\n  } else {\n    return false;\n  }\n  return false;\n};"]}