{"version":3,"file":"CapabilitiesChangedNotificationBar.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/CapabilitiesChangedNotificationBar.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* @conditional-compile-remove(capabilities) */\nimport React from 'react';\n/* @conditional-compile-remove(capabilities) */\nimport { IIconProps, IMessageBarProps, MessageBar, MessageBarType, Stack } from '@fluentui/react';\n/* @conditional-compile-remove(capabilities) */\nimport { CapabilitiesChangedReason, ParticipantCapabilityName, ParticipantRole } from '@azure/communication-calling';\n/* @conditional-compile-remove(capabilities) */\nimport { useLocale } from '../../localization';\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * @private\n */\nexport interface CapabilitiesChangeNotificationBarProps extends IMessageBarProps {\n  capabilitiesChangedNotifications: CapabalityChangedNotification[];\n  onDismissNotification: (notification: CapabalityChangedNotification) => void;\n}\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * @private\n */\nexport interface CapabalityChangedNotification {\n  /**\n   * Name of capability\n   */\n  capabilityName: ParticipantCapabilityName;\n  /**\n   * Is capability now available\n   */\n  isPresent: boolean;\n  /* @conditional-compile-remove(capabilities) */\n  /**\n   * Reason capability was changed\n   */\n  changedReason?: CapabilitiesChangedReason;\n  /* @conditional-compile-remove(capabilities) */\n  /**\n   * Role of participant when capability changed\n   */\n  role?: ParticipantRole;\n  /**\n   * The latest timestamp when this notification was observed.\n   *\n   * When available, this is used to track notifications that have already been seen and dismissed\n   * by the user.\n   */\n  timestamp?: Date;\n}\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Notification bar for capabilities changed\n * @private\n */\nexport const CapabilitiesChangedNotificationBar = (props: CapabilitiesChangeNotificationBarProps): JSX.Element => {\n  const locale = useLocale();\n  return <Stack data-ui-id=\"capabilities-changed-notification-bar-stack\">\n      {props.capabilitiesChangedNotifications.map(notification => {\n      const message = getCapabilityChangedNotificationString(notification, locale.strings.call.capabilityChangedNotification);\n      if (!message) {\n        return null;\n      }\n      const iconProps = getCustomMessageBarIconProps(notification);\n      return <MessageBar key={notification.capabilityName} styles={messageBarStyles} messageBarType={MessageBarType.warning} dismissIconProps={{\n        iconName: 'ErrorBarClear'\n      }} onDismiss={() => props.onDismissNotification(notification)} messageBarIconProps={iconProps}>\n            {message}\n          </MessageBar>;\n    })}\n    </Stack>;\n};\n\n/* @conditional-compile-remove(capabilities) */\nconst getCapabilityChangedNotificationString = (notification: CapabalityChangedNotification, strings?: CapabilityChangedNotificationStrings): string | undefined => {\n  switch (notification.capabilityName) {\n    case 'turnVideoOn':\n      if (notification.changedReason === 'MeetingOptionOrOrganizerPolicyChanged') {\n        return notification.isPresent ? strings?.turnVideoOn?.grantedDueToMeetingOption : strings?.turnVideoOn?.lostDueToMeetingOption;\n      }\n      break;\n    case 'unmuteMic':\n      if (notification.changedReason === 'MeetingOptionOrOrganizerPolicyChanged') {\n        return notification.isPresent ? strings?.unmuteMic?.grantedDueToMeetingOption : strings?.unmuteMic?.lostDueToMeetingOption;\n      }\n      break;\n    case 'shareScreen':\n      if (notification.isPresent && notification.changedReason === 'RoleChanged' && notification.role === 'Presenter') {\n        return strings?.shareScreen?.grantedDueToRoleChangeToPresenter;\n      }\n      if (!notification.isPresent && notification.changedReason === 'RoleChanged' && notification.role === 'Attendee') {\n        return strings?.shareScreen?.lostDueToRoleChangeToAttendee;\n      }\n      break;\n  }\n  return undefined;\n};\n\n/* @conditional-compile-remove(capabilities) */\nconst getCustomMessageBarIconProps = (notification: CapabalityChangedNotification): IIconProps | undefined => {\n  let iconName: string | undefined = undefined;\n  switch (notification.capabilityName) {\n    case 'turnVideoOn':\n      if (notification.isPresent) {\n        iconName = 'ControlButtonCameraOn';\n      } else {\n        iconName = 'ControlButtonCameraProhibited';\n      }\n      break;\n    case 'unmuteMic':\n      if (notification.isPresent) {\n        iconName = 'ControlButtonMicOn';\n      } else {\n        iconName = 'ControlButtonMicProhibited';\n      }\n      break;\n    default:\n      return undefined;\n  }\n  return {\n    iconName,\n    styles: {\n      root: {\n        '> *': {\n          height: '1rem',\n          width: '1rem'\n        }\n      }\n    }\n  };\n};\n\n/* @conditional-compile-remove(capabilities) */\nconst messageBarStyles = {\n  innerText: {\n    alignSelf: 'center'\n  },\n  icon: {\n    height: 0\n  },\n  content: {\n    lineHeight: 'inherit'\n  },\n  dismissal: {\n    height: 0,\n    paddingTop: '0.8rem'\n  }\n};\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Strings for capability changed notification\n * @public\n */\nexport interface CapabilityChangedNotificationStrings {\n  /**\n   * Strings for 'turnVideoOn' capability\n   */\n  turnVideoOn?: {\n    /**\n     * Notification message shown to the user when capability to turn video on is lost due to a meeting option change\n     */\n    lostDueToMeetingOption?: string;\n    /**\n     * Notification message shown to the user when capability to turn video on is granted due to a meeting option change\n     */\n    grantedDueToMeetingOption?: string;\n  };\n  /**\n   * Strings for 'unmuteMic' capability\n   */\n  unmuteMic?: {\n    /**\n     * Notification message shown to the user when capability to unmute mic is lost due to a meeting option change\n     */\n    lostDueToMeetingOption?: string;\n    /**\n     * Notification message shown to the user when capability to unmute mic is granted due to a meeting option change\n     */\n    grantedDueToMeetingOption?: string;\n  };\n  /**\n   * Strings for 'shareScreen' capability\n   */\n  shareScreen?: {\n    /**\n     * Notification message shown to the user when capability to share screen is lost due to a role change to Attendeee\n     */\n    lostDueToRoleChangeToAttendee?: string;\n    /**\n     * Notification message shown to the user when capability to share screen is granted due to a role change to Presenter\n     */\n    grantedDueToRoleChangeToPresenter?: string;\n  };\n}"]}