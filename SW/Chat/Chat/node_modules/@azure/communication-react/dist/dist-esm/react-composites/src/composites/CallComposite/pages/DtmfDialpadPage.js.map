{"version":3,"file":"DtmfDialpadPage.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/pages/DtmfDialpadPage.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ActiveErrorMessage, Dialpad, DtmfTone } from '@internal/react-components';\nimport { MobileChatSidePaneTabHeaderProps } from '../../common/TabHeader';\nimport { CallCompositeOptions } from '../CallComposite';\nimport { SidePaneRenderer } from '../components/SidePane/SidePaneProvider';\nimport { CapabilitiesChangeNotificationBarProps } from '../components/CapabilitiesChangedNotificationBar';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useAdapter } from '../adapter/CallAdapterProvider';\nimport { CommonCallAdapter } from '../adapter';\nimport { Stack, Text, useTheme } from '@fluentui/react';\nimport { getReadableTime } from '../utils/timerUtils';\nimport { DtmfDialpadContentTimerStyles } from '../styles/DtmfDialpadPage.styles';\nimport { RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { isPhoneNumberIdentifier } from '@azure/communication-common';\nimport { useSelector } from '../hooks/useSelector';\nimport { getStartTime } from '../selectors/baseSelectors';\n\n/**\n * @internal\n */\nexport interface DialpadPageProps {\n  mobileView: boolean;\n  options?: CallCompositeOptions;\n  modalLayerHostId: string;\n  updateSidePaneRenderer: (renderer: SidePaneRenderer | undefined) => void;\n  mobileChatTabHeader?: MobileChatSidePaneTabHeaderProps;\n  latestErrors: ActiveErrorMessage[];\n  onDismissError: (error: ActiveErrorMessage) => void;\n  /* @conditional-compile-remove(capabilities) */\n  capabilitiesChangedNotificationBarProps?: CapabilitiesChangeNotificationBarProps;\n  onSetDialpadPage: () => void;\n  dtmfDialerPresent: boolean;\n}\ninterface DialpadPageContentProps {\n  mobileView: boolean;\n  adapter: CommonCallAdapter;\n}\nconst DtmfDialpadPageContent = (props: DialpadPageContentProps): JSX.Element => {\n  const {\n    adapter\n  } = props;\n  const adapterState = adapter.getState();\n  const theme = useTheme();\n  const calleeId = adapterState.targetCallees?.[0];\n  const remoteParticipants = adapterState.call?.remoteParticipants;\n  let calleeName;\n  if (remoteParticipants) {\n    const remoteParticipantValues: RemoteParticipantState[] = Object.values(remoteParticipants);\n    if (calleeId && isPhoneNumberIdentifier(calleeId)) {\n      calleeName = calleeId.phoneNumber;\n    } else {\n      calleeName = remoteParticipantValues.find(p => p.identifier === calleeId);\n    }\n  }\n  return <Stack style={{\n    height: '100%',\n    width: '100%',\n    background: theme.palette.white\n  }}>\n      <Stack verticalAlign={'center'} style={{\n      margin: 'auto'\n    }}>\n        <DtmfDialerContentTimer />\n        <Text style={{\n        margin: 'auto'\n      }}>\n          {calleeName && calleeName !== 'Unnamed participant' ? calleeName?.toString() : ''}\n        </Text>\n        <Dialpad onSendDtmfTone={async (tone: DtmfTone) => {\n        await adapter.sendDtmfTone(tone);\n      }} longPressTrigger={props.mobileView ? 'touch' : 'mouseAndTouch'} dialpadMode={'dtmf'}></Dialpad>\n      </Stack>\n    </Stack>;\n};\nconst DtmfDialerContentTimer = (): JSX.Element => {\n  const [time, setTime] = useState<number>(0);\n  const elapsedTime = getReadableTime(time);\n  const statefulStartTime = useSelector(getStartTime);\n  const startTime = useMemo(() => {\n    return statefulStartTime ?? new Date(Date.now());\n  }, [statefulStartTime]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(new Date(Date.now()).getTime() - startTime?.getTime() ?? 0);\n    }, 10);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [startTime]);\n  return <Text styles={DtmfDialpadContentTimerStyles}>{elapsedTime}</Text>;\n};\n\n/**\n * @internal\n */\nexport const DtmfDialpadPage = (props: DialpadPageProps): JSX.Element => {\n  const adapter = useAdapter();\n  return <DtmfDialpadPageContent adapter={adapter} mobileView={props.mobileView} />;\n};"]}