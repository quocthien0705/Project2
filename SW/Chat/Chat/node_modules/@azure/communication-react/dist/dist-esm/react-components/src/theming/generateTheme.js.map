{"version":3,"file":"generateTheme.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/theming/generateTheme.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAoB,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,MAAM,iBAAiB,CAAC;AAC1I,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEjD;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,WAAmB,EAAE,OAAyB,EAAU,EAAE;IACvF,MAAM,MAAM,GAAG,OAAO,KAAK,MAAM,CAAC;IAClC,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACrD,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,kCAAkC,WAAW,EAAE,CAAC,CAAC;IACnE,CAAC;IACD,MAAM,eAAe,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3E,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,qCAAqC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,kGAAkG;IAClG,qKAAqK;IACrK,MAAM,UAAU,GAAG,yBAAyB,EAAE,CAAC;IAC/C,cAAc,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC/C,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACxG,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE,eAAe,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAE9G,8JAA8J;IAC9J,6HAA6H;IAC7H,yKAAyK;IACzK,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACrD,MAAM,WAAW,GAEb,cAAc,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,cAAc,GAAG,WAAW,eAC7B;QACD,OAAO,kCACF,WAAW,GACX,gBAAgB,CACpB;KACF,IACD,UAAU,EAAE,MAAM,IAClB,CAAC;IACH,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AACF,MAAM,mBAAmB,GAAG,CAAC,MAAe,EAA0B,EAAE;IACtE,MAAM,mBAAmB,GAAG,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,cAAc,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACpR,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;IAClD,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC,GAA2B,EAAE,GAAG,EAAE,EAAE;;QACrE,MAAM,CAAC,GAAI,GAAsB,CAAC;QAClC,MAAM,GAAG,GAAG,MAAA,SAAS,CAAC,OAAO,0CAAG,CAAC,CAAC,CAAC;QACnC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;YACtB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACf,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BaseSlots, IPalette, ITheme, ThemeGenerator, createTheme, getColorFromString, themeRulesStandardCreator } from '@fluentui/react';\nimport { darkTheme, lightTheme } from './themes';\n\n/**\n * Generate a v8 theme from a given accent color and dark/light variant.\n *\n * @internal\n */\nexport const _generateTheme = (accentColor: string, variant: 'light' | 'dark'): ITheme => {\n  const isDark = variant === 'dark';\n  const primaryColor = getColorFromString(accentColor);\n  if (!primaryColor) {\n    throw new Error(`Could not parse primary color: ${accentColor}`);\n  }\n  const backgroundColor = getColorFromString(isDark ? '#252423' : '#ffffff');\n  if (!backgroundColor) {\n    throw new Error(`Could not parse background color: ${isDark ? '#252423' : '#ffffff'}`);\n  }\n\n  // Generate theme from base colors. This API is mostly undocumented and used internally by Fluent.\n  // For usage, see: https://github.com/microsoft/fluentui/blob/88efc19c9513db18cb5b7c63fa0f47ba496755a2/packages/react/src/components/ThemeGenerator/ThemeGenerator.ts\n  const themeRules = themeRulesStandardCreator();\n  ThemeGenerator.insureSlots(themeRules, isDark);\n  ThemeGenerator.setSlot(themeRules[BaseSlots[BaseSlots.primaryColor]], primaryColor, isDark, true, true);\n  ThemeGenerator.setSlot(themeRules[BaseSlots[BaseSlots.backgroundColor]], backgroundColor, isDark, true, true);\n\n  // There is a bug in fluentv8 theme generator that causes the foregroundColor to be generated incorrectly: https://github.com/microsoft/fluentui/issues/29853.\n  // Ideally we could do: ThemeGenerator.setSlot(themeRules[BaseSlots[foregroundColor]], colors.textColor, isDark, true, true);\n  // Until this fluent bug is fixed, use manually calculated foreground colors (this result is the same as the result of the color calcuation the above line would return).\n  const foregroundColors = getForegroundColors(isDark);\n  const themeAsJson: {\n    [key: string]: string;\n  } = ThemeGenerator.getThemeAsJson(themeRules);\n  const generatedTheme = createTheme({\n    ...{\n      palette: {\n        ...themeAsJson,\n        ...foregroundColors\n      }\n    },\n    isInverted: isDark\n  });\n  return generatedTheme;\n};\nconst getForegroundColors = (isDark: boolean): Record<string, string> => {\n  const foregroundColorKeys = ['neutralLighterAlt', 'neutralLighter', 'neutralLight', 'neutralQuaternaryAlt', 'neutralQuaternary', 'neutralTertiaryAlt', 'neutralTertiary', 'neutralSecondaryAlt', 'neutralSecondary', 'neutralPrimaryAlt', 'neutralPrimary', 'neutralDark', 'black'];\n  const baseTheme = isDark ? darkTheme : lightTheme;\n  return foregroundColorKeys.reduce((acc: Record<string, string>, key) => {\n    const k = (key as keyof IPalette);\n    const val = baseTheme.palette?.[k];\n    if (val !== undefined) {\n      acc[k] = val;\n    }\n    return acc;\n  }, {});\n};"]}