// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import React, { useCallback, useMemo } from 'react';
/* @conditional-compile-remove(vertical-gallery) */ /* @conditional-compile-remove(rooms) */
import { useRef } from 'react';
import { VideoGallery, Announcer } from "../../../../../react-components/src";
/* @conditional-compile-remove(vertical-gallery) */ /* @conditional-compile-remove(rooms) */
import { _useContainerWidth, _useContainerHeight } from "../../../../../react-components/src";
import { usePropsFor } from '../hooks/usePropsFor';
import { AvatarPersona } from '../../common/AvatarPersona';
import { mergeStyles, Stack } from '@fluentui/react';
import { useHandlers } from '../hooks/useHandlers';
import { useSelector } from '../hooks/useSelector';
import { localVideoCameraCycleButtonSelector } from '../selectors/LocalVideoTileSelector';
import { LocalVideoCameraCycleButton } from "../../../../../react-components/src";
import { useParticipantChangedAnnouncement } from '../utils/MediaGalleryUtils';
/* @conditional-compile-remove(rooms) */
import { useAdapter } from '../adapter/CallAdapterProvider';
const VideoGalleryStyles = {
    root: {
        height: '100%',
        minHeight: '10rem',
        // space affordance to ensure media gallery is never collapsed
        minWidth: '6rem'
    }
};
const localVideoViewOptions = {
    scalingMode: 'Crop',
    isMirrored: true
};
const remoteVideoViewOptions = {
    scalingMode: 'Crop'
};
/**
 * @private
 */
export const MediaGallery = (props) => {
    var _a, _b, _c;
    const videoGalleryProps = usePropsFor(VideoGallery);
    const cameraSwitcherCameras = useSelector(localVideoCameraCycleButtonSelector);
    const cameraSwitcherCallback = useHandlers(LocalVideoCameraCycleButton);
    const announcerString = useParticipantChangedAnnouncement();
    /* @conditional-compile-remove(rooms) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(rooms) */
    const userRole = (_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.role;
    /* @conditional-compile-remove(rooms) */
    const isRoomsCall = adapter.getState().isRoomsCall;
    /* @conditional-compile-remove(vertical-gallery) */ /* @conditional-compile-remove(rooms) */
    const containerRef = useRef(null);
    /* @conditional-compile-remove(vertical-gallery) */ /* @conditional-compile-remove(rooms) */
    const containerWidth = _useContainerWidth(containerRef);
    /* @conditional-compile-remove(vertical-gallery) */ /* @conditional-compile-remove(rooms) */
    const containerHeight = _useContainerHeight(containerRef);
    /* @conditional-compile-remove(click-to-call) */ /* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(vertical-gallery) */
    const containerAspectRatio = containerWidth && containerHeight ? containerWidth / containerHeight : 0;
    const layoutBasedOnTilePosition = localVideoTileLayoutTrampoline(/* @conditional-compile-remove(click-to-call) */ (_b = props.localVideoTileOptions) === null || _b === void 0 ? void 0 : _b.position);
    const cameraSwitcherProps = useMemo(() => {
        return Object.assign(Object.assign({}, cameraSwitcherCallback), cameraSwitcherCameras);
    }, [cameraSwitcherCallback, cameraSwitcherCameras]);
    const onRenderAvatar = useCallback((userId, options) => {
        return React.createElement(Stack, { className: mergeStyles({
                position: 'absolute',
                height: '100%',
                width: '100%'
            }) },
            React.createElement(Stack, { styles: {
                    root: {
                        margin: 'auto',
                        maxHeight: '100%'
                    }
                } }, (options === null || options === void 0 ? void 0 : options.coinSize) && React.createElement(AvatarPersona, Object.assign({ userId: userId }, options, { dataProvider: props.onFetchAvatarPersonaData }))));
    }, [props.onFetchAvatarPersonaData]);
    const remoteVideoTileMenuOptions = useMemo(() => {
        var _a;
        return ((_a = props.remoteVideoTileMenuOptions) === null || _a === void 0 ? void 0 : _a.isHidden) ? false : props.isMobile ? {
            kind: 'drawer',
            hostId: props.drawerMenuHostId
        } : {
            kind: 'contextual'
        };
    }, [(_c = props.remoteVideoTileMenuOptions) === null || _c === void 0 ? void 0 : _c.isHidden, props.isMobile, props.drawerMenuHostId]);
    /* @conditional-compile-remove(vertical-gallery) */
    const overflowGalleryPosition = useMemo(() => {
        return containerWidth && containerHeight && containerWidth / containerHeight >= 16 / 9 ? 'verticalRight' : 'horizontalBottom';
    }, [containerWidth, containerHeight]);
    const VideoGalleryMemoized = useMemo(() => {
        const layoutBasedOnUserSelection = () => {
            return props.localVideoTileOptions ? layoutBasedOnTilePosition : props.userSetGalleryLayout;
            return layoutBasedOnTilePosition;
        };
        return React.createElement(VideoGallery, Object.assign({}, videoGalleryProps, { localVideoViewOptions: localVideoViewOptions, remoteVideoViewOptions: remoteVideoViewOptions, styles: VideoGalleryStyles, layout: layoutBasedOnUserSelection(), showCameraSwitcherInLocalPreview: props.isMobile, localVideoCameraCycleButtonProps: cameraSwitcherProps, onRenderAvatar: onRenderAvatar, remoteVideoTileMenu: remoteVideoTileMenuOptions, 
            /* @conditional-compile-remove(vertical-gallery) */ overflowGalleryPosition: overflowGalleryPosition, 
            /* @conditional-compile-remove(rooms) */ localVideoTileSize: props.localVideoTileOptions === false || userRole === 'Consumer' || isRoomsCall && userRole === 'Unknown' ? 'hidden' : props.isMobile && containerAspectRatio < 1 ? '9:16' : '16:9' }));
    }, [videoGalleryProps, props.isMobile, /* @conditional-compile-remove(rooms) */
        props.localVideoTileOptions, cameraSwitcherProps, onRenderAvatar, remoteVideoTileMenuOptions, /* @conditional-compile-remove(vertical-gallery) */
        overflowGalleryPosition, /* @conditional-compile-remove(rooms) */
        userRole, /* @conditional-compile-remove(rooms) */
        isRoomsCall, /* @conditional-compile-remove(vertical-gallery) */
        containerAspectRatio, props.userSetGalleryLayout, layoutBasedOnTilePosition]);
    return React.createElement("div", { ref: containerRef, style: mediaGalleryContainerStyles },
        React.createElement(Announcer, { announcementString: announcerString, ariaLive: 'polite' }),
        VideoGalleryMemoized);
};
const mediaGalleryContainerStyles = {
    width: '100%',
    height: '100%'
};
const localVideoTileLayoutTrampoline = (localTileOptions) => {
    /* @conditional-compile-remove(click-to-call) */
    return localTileOptions === 'grid' ? 'default' : 'floatingLocalVideo';
    return 'floatingLocalVideo';
};
//# sourceMappingURL=MediaGallery.js.map