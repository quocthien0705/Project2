// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CameraButton } from "../../../../../../react-components/src";
/* @conditional-compile-remove(capabilities) */
import { _HighContrastAwareIcon } from "../../../../../../react-components/src";
import React, { useMemo } from 'react';
import { usePropsFor } from '../../hooks/usePropsFor';
import { concatButtonBaseStyles } from '../../styles/Buttons.styles';
/* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */
import { useAdapter } from '../../adapter/CallAdapterProvider';
/**
 * @private
 */
export const Camera = (props) => {
    var _a, _b, _c;
    const cameraButtonProps = usePropsFor(CameraButton);
    const styles = useMemo(() => { var _a; return concatButtonBaseStyles((_a = props.styles) !== null && _a !== void 0 ? _a : {}); }, [props.styles]);
    /* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(rooms) */
    const isRoomsCall = adapter.getState().isRoomsCall;
    /* @conditional-compile-remove(capabilities) */
    const turnVideoOnCapability = (_b = (_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.capabilitiesFeature) === null || _b === void 0 ? void 0 : _b.capabilities.turnVideoOn;
    return React.createElement(CameraButton, Object.assign({ "data-ui-id": "call-composite-camera-button" }, cameraButtonProps, { showLabel: props.displayType !== 'compact', styles: styles, enableDeviceSelectionMenu: props.splitButtonsForDeviceSelection, disableTooltip: props.disableTooltip, disabled: cameraButtonProps.disabled || props.disabled || ( /* @conditional-compile-remove(rooms) */isRoomsCall && ((_c = adapter.getState().call) === null || _c === void 0 ? void 0 : _c.role) === 'Unknown'), 
        /* @conditional-compile-remove(capabilities) */ onRenderOffIcon: turnVideoOnCapability && !turnVideoOnCapability.isPresent ? () => React.createElement(_HighContrastAwareIcon, { disabled: true, iconName: 'ControlButtonCameraProhibited' }) : undefined, 
        /* @conditional-compile-remove(video-background-effects) */ onClickVideoEffects: props.onClickVideoEffects, componentRef: props.componentRef }));
};
//# sourceMappingURL=Camera.js.map