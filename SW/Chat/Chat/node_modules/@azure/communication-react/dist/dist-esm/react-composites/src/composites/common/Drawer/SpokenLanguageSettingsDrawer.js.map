{"version":3,"file":"SpokenLanguageSettingsDrawer.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/common/Drawer/SpokenLanguageSettingsDrawer.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,iDAAiD;AACjD,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAC7C,iDAAiD;AACjD,OAAO,EAAiD,QAAQ,EAAE,4CAAmC;AACrG,iDAAiD;AACjD,OAAO,EAAE,WAAW,IAAI,UAAU,EAAkE,4CAAmC;AACvI,iDAAiD;AACjD,OAAO,EAAE,2BAA2B,EAAE,MAAM,gCAAgC,CAAC;AAC7E,OAAO,EAAE,QAAQ,EAAE,yCAAgC;AAYnD,eAAe;AACf,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,KAY5C,EAAe,EAAE;;IAChB,iDAAiD;IACjD,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IAEzB,iDAAiD;IACjD,MAAM,iBAAiB,GAAG,WAAW,CAAC,CAAC,YAAyC,EAAE,EAAE;QAClF,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,iDAAiD;IACjD,MAAM,WAAW,GAA0B,OAAO,CAAC,GAAG,EAAE;;QACtD,OAAO,QAAQ,CAAC,MAAA,KAAK,CAAC,wBAAwB,mCAAI,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACzE,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY;YAClG,WAAW,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAAC;YAClD,kBAAkB,EAAE,KAAK,CAAC,eAAe,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC3D,QAAQ,EAAE,QAAQ;aACnB,CAAC,CAAC,CAAC,SAAS;SACd,CAAC,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,wBAAwB,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC/E,MAAM,iBAAiB,GAA0B,OAAO,CAAC,GAAG,EAAE;QAC5D,MAAM,IAAI,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAElB,iDAAiD;IACjD,OAAO,oBAAC,UAAU,IAAC,OAAO,EAAE,MAAA,KAAK,CAAC,OAAO,0CAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,aAAjB,iBAAiB,cAAjB,iBAAiB,GAAI,EAAE,EAAE,cAAc,EAAE,GAAG,EAAE;YACzG,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAChD,KAAK,CAAC,cAAc,EAAE,CAAC;QACzB,CAAC,EAAE,MAAM,EAAE,2BAA2B,CAAC,KAAK,CAAC,GAAI,CAAC;IAClD,OAAO,yCAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React from 'react';\n/* @conditional-compile-remove(close-captions) */\nimport { useMemo, useCallback } from 'react';\n/* @conditional-compile-remove(close-captions) */\nimport { _CaptionsSettingsModal, SpokenLanguageStrings, useTheme } from '@internal/react-components';\n/* @conditional-compile-remove(close-captions) */\nimport { _DrawerMenu as DrawerMenu, _DrawerMenuItemProps as DrawerMenuItemProps, _DrawerMenuStyles } from '@internal/react-components';\n/* @conditional-compile-remove(close-captions) */\nimport { captionSettingsDrawerStyles } from './captionSettingsDrawer.styles';\nimport { _getKeys } from '@internal/acs-ui-common';\n\n/** @private */\nexport interface CaptionSettingsDrawerStrings {\n  /**\n   * Label for spoken language/caption language drawerMenuItem\n   *\n   * @remarks Only displayed when in Teams call, disabled until captions is on\n   */\n  menuTitle: string;\n}\n\n/** @private */\nexport const SpokenLanguageSettingsDrawer = (props: {\n  /* @conditional-compile-remove(close-captions) */selectLanguage: (language: keyof SpokenLanguageStrings) => void;\n  /* @conditional-compile-remove(close-captions) */\n  setCurrentLanguage: (language: keyof SpokenLanguageStrings) => void;\n  /* @conditional-compile-remove(close-captions) */\n  currentLanguage: keyof SpokenLanguageStrings;\n  /* @conditional-compile-remove(close-captions) */\n  onLightDismiss: () => void;\n  /* @conditional-compile-remove(close-captions) */\n  strings?: CaptionSettingsDrawerStrings;\n  /* @conditional-compile-remove(close-captions) */\n  supportedLanguageStrings?: SpokenLanguageStrings;\n}): JSX.Element => {\n  /* @conditional-compile-remove(close-captions) */\n  const theme = useTheme();\n\n  /* @conditional-compile-remove(close-captions) */\n  const onDrawerItemClick = useCallback((languageCode: keyof SpokenLanguageStrings) => {\n    props.selectLanguage(languageCode);\n  }, [props]);\n\n  /* @conditional-compile-remove(close-captions) */\n  const drawerItems: DrawerMenuItemProps[] = useMemo(() => {\n    return _getKeys(props.supportedLanguageStrings ?? []).map(languageCode => ({\n      itemKey: languageCode,\n      text: props.supportedLanguageStrings ? props.supportedLanguageStrings[languageCode] : languageCode,\n      onItemClick: () => onDrawerItemClick(languageCode),\n      secondaryIconProps: props.currentLanguage === languageCode ? {\n        iconName: 'Accept'\n      } : undefined\n    }));\n  }, [props.currentLanguage, props.supportedLanguageStrings, onDrawerItemClick]);\n  const sortedDrawerItems: DrawerMenuItemProps[] = useMemo(() => {\n    const copy = [...drawerItems];\n    return copy.sort((a, b) => a.text && b.text && a.text > b.text ? 1 : -1);\n  }, [drawerItems]);\n\n  /* @conditional-compile-remove(close-captions) */\n  return <DrawerMenu heading={props.strings?.menuTitle} items={sortedDrawerItems ?? []} onLightDismiss={() => {\n    props.setCurrentLanguage(props.currentLanguage);\n    props.onLightDismiss();\n  }} styles={captionSettingsDrawerStyles(theme)} />;\n  return <></>;\n};"]}