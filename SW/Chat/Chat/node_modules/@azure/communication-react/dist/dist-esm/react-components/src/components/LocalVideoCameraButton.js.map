{"version":3,"file":"LocalVideoCameraButton.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/components/LocalVideoCameraButton.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAElC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAErD,OAAO,EAAE,iCAAiC,EAAE,MAAM,8BAA8B,CAAC;AACjF,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAoB5C;;;GAGG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,KAAuC,EAAe,EAAE;IAClG,MAAM,EACJ,OAAO,EACP,cAAc,EACd,cAAc,EACd,KAAK,EACL,eAAe,EACf,IAAI,EACL,GAAG,KAAK,CAAC;IACV,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1D,MAAM,mBAAmB,GAAG,WAAW,CAAC,CAAO,MAAqB,EAAE,EAAE;QACtE,yDAAyD;QACzD,IAAI,cAAc,EAAE,CAAC;YACnB,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC;gBACH,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;oBAAS,CAAC;gBACT,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;IACH,CAAC,CAAA,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;IACrB,MAAM,QAAQ,GAAG,CAAC,CAAC,aAAa,CAAC;IACjC,MAAM,mBAAmB,GAAG,SAAS,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,0BAA0B,CAAC;IACxF,OAAO,oBAAC,UAAU,kBAAa,8BAA8B,EAAE,MAAM,EAAE,iCAAiC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE;YACpJ,QAAQ,EAAE,mBAAmB;SAC9B,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,eAAe,eAAa,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE;YACzH,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;gBAClE,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3E,MAAM,SAAS,GAAG,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;gBACxD,mBAAmB,CAAC,SAAS,CAAC,CAAC;YACjC,CAAC;QACH,CAAC,GAAI,CAAC;AACR,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { IconButton, useTheme } from '@fluentui/react';\nimport React, { useCallback, useState } from 'react';\nimport { OptionsDevice } from './DevicesButton';\nimport { localVideoCameraCycleButtonStyles } from './styles/VideoGallery.styles';\nimport { useLocale } from '../localization';\n\n/**\n * @public\n */\nexport interface LocalVideoCameraCycleButtonProps {\n  /** Array of cameras available to the user. */\n  cameras?: OptionsDevice[];\n  /** Currently selected camera in the local video stream. */\n  selectedCamera?: OptionsDevice;\n  /** callback function to change video feed. */\n  onSelectCamera?: (device: OptionsDevice) => Promise<void>;\n  /** label for local video camera switcher */\n  label?: string;\n  /** description for local video camera switcher */\n  ariaDescription?: string;\n  /** control to enable large button mode */\n  size?: 'small' | 'large';\n}\n\n/**\n * local video tile camera cycle button - for use on mobile screens only.\n * @internal\n */\nexport const LocalVideoCameraCycleButton = (props: LocalVideoCameraCycleButtonProps): JSX.Element => {\n  const {\n    cameras,\n    selectedCamera,\n    onSelectCamera,\n    label,\n    ariaDescription,\n    size\n  } = props;\n  const theme = useTheme();\n  const [waitForCamera, setWaitForCamera] = useState(false);\n  const onChangeCameraClick = useCallback(async (device: OptionsDevice) => {\n    // Throttle changing camera to prevent too many callbacks\n    if (onSelectCamera) {\n      setWaitForCamera(true);\n      try {\n        await onSelectCamera(device);\n      } finally {\n        setWaitForCamera(false);\n      }\n    }\n  }, [onSelectCamera]);\n  const disabled = !!waitForCamera;\n  const cameraLoadingString = useLocale().strings.cameraButton.tooltipVideoLoadingContent;\n  return <IconButton data-ui-id={'local-camera-switcher-button'} styles={localVideoCameraCycleButtonStyles(theme, size)} disabled={disabled} iconProps={{\n    iconName: 'LocalCameraSwitch'\n  }} ariaLabel={label} ariaDescription={disabled ? cameraLoadingString : ariaDescription} aria-live={'polite'} onClick={() => {\n    if (cameras && cameras.length > 1 && selectedCamera !== undefined) {\n      const index = cameras.findIndex(camera => selectedCamera.id === camera.id);\n      const newCamera = cameras[(index + 1) % cameras.length];\n      onChangeCameraClick(newCamera);\n    }\n  }} />;\n};"]}