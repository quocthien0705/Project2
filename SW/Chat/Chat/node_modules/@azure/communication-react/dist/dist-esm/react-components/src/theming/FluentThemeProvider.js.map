{"version":3,"file":"FluentThemeProvider.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/theming/FluentThemeProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,EAAE,aAAa,EAAuB,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AACzG,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAqBtC,MAAM,OAAO,GAAG,WAAW,CAAC;IAC1B,MAAM,EAAE,MAAM;IACd,KAAK,EAAE,MAAM;IACb,QAAQ,EAAE,MAAM;IAChB,uDAAuD;IACvD,GAAG,EAAE;QACH,SAAS,EAAE,YAAY;KACxB;IACD,UAAU,EAAE;QACV,SAAS,EAAE,YAAY;KACxB;IACD,SAAS,EAAE;QACT,SAAS,EAAE,YAAY;KACxB;IACD,yEAAyE;IACzE,UAAU,EAAE;QACV,OAAO,EAAE,gBAAgB;KAC1B;CACF,CAAC,CAAC;AACH,MAAM,YAAY,qBACb,WAAW,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,CACvC,CAAC;AAEF,mDAAmD;AACnD,MAAM,YAAY,GAAG,aAAa,CAAQ,YAAY,CAAC,CAAC;AAExD;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAA+B,EAAe,EAAE;IAClF,MAAM,EACJ,WAAW,EACX,GAAG,EACH,QAAQ;IACR,gDAAgD,CAAA,SAAS,EAC1D,GAAG,KAAK,CAAC;IACV,IAAI,aAAa,GAAU,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAClE,aAAa,GAAG,WAAW,CAAC,aAAa,EAAE;QACzC,GAAG;KACJ,CAAC,CAAC;IACH,OAAO,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,aAAa;QAC9C,oBAAC,aAAa,IAAC,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO;YACzD,gDAAgD,CAAC,KAAK,EAAE,SAAS,IAC5D,QAAQ,CACK,CACM,CAAC;AAC7B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAU,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { createContext, useContext } from 'react';\nimport { ThemeProvider, PartialTheme, Theme, getTheme, mergeThemes, mergeStyles } from '@fluentui/react';\nimport { lightTheme } from './themes';\n\n/**\n * Props for {@link FluentThemeProvider}.\n *\n * @public\n */\nexport interface FluentThemeProviderProps {\n  /** Children to be themed. */\n  children: React.ReactNode;\n  /** Theme for components. Defaults to a light theme if not provided. */\n  fluentTheme?: PartialTheme | Theme;\n  /**\n   * Whether components are displayed right-to-left\n   * @defaultValue `false`\n   */\n  rtl?: boolean;\n  /* @conditional-compile-remove(image-overlay) */\n  /** Optional style to change the root style of the ThemeProvider */\n  rootStyle?: React.CSSProperties | undefined;\n}\nconst wrapper = mergeStyles({\n  height: '100%',\n  width: '100%',\n  overflow: 'auto',\n  // Add NorthStar styling used previously in the library\n  '*': {\n    boxSizing: 'border-box'\n  },\n  '*:before': {\n    boxSizing: 'border-box'\n  },\n  '*:after': {\n    boxSizing: 'border-box'\n  },\n  /* Adding priority for HTML `hidden` attribute to be applied correctly */\n  '[hidden]': {\n    display: 'none!important'\n  }\n});\nconst defaultTheme: Theme = {\n  ...mergeThemes(getTheme(), lightTheme)\n};\n\n/** Theme context for library's react components */\nconst ThemeContext = createContext<Theme>(defaultTheme);\n\n/**\n * Provider to apply a Fluent theme across this library's react components.\n *\n * @remarks Components in this library are composed primarily from [Fluent UI](https://developer.microsoft.com/fluentui#/controls/web),\n * controls, mixing v8 and v9 controls.\n * This provider handles applying any theme provided to the underlying Fluent UI controls. *\n * @public\n */\nexport const FluentThemeProvider = (props: FluentThemeProviderProps): JSX.Element => {\n  const {\n    fluentTheme,\n    rtl,\n    children,\n    /* @conditional-compile-remove(image-overlay) */rootStyle\n  } = props;\n  let fluentV8Theme: Theme = mergeThemes(defaultTheme, fluentTheme);\n  fluentV8Theme = mergeThemes(fluentV8Theme, {\n    rtl\n  });\n  return <ThemeContext.Provider value={fluentV8Theme}>\n      <ThemeProvider theme={fluentV8Theme} className={wrapper}\n    /* @conditional-compile-remove(image-overlay) */ style={rootStyle}>\n        {children}\n      </ThemeProvider>\n    </ThemeContext.Provider>;\n};\n\n/**\n * React hook to access theme\n *\n * @public\n */\nexport const useTheme = (): Theme => useContext(ThemeContext);"]}