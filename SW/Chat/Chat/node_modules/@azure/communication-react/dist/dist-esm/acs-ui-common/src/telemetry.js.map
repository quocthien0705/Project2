{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../../../../preprocess-dist/acs-ui-common/src/telemetry.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD;;GAEG;AACH,qFAAqF;AACrF,gEAAgE;AAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAAe,EAAU,EAAE;IAClD,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,IAAI,UAAU,IAAI,CAAC,EAAE,CAAC;QACpB,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AASF;;;;GAIG;AACH,MAAM,8BAA8B,GAAG,CAAC,2BAAyD,EAAU,EAAE;IAC3G,QAAQ,2BAA2B,EAAE,CAAC;QACpC,KAAK,MAAM;YACT,OAAO,CAAC,CAAC;QACX,KAAK,MAAM;YACT,OAAO,CAAC,CAAC;QACX,KAAK,cAAc;YACjB,OAAO,CAAC,CAAC;QACX,KAAK,oBAAoB;YACvB,OAAO,CAAC,CAAC;QACX;YACE,OAAO,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC;AAEF;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,2BAAyD,EAAU,EAAE;IACrG,sGAAsG;IACtG,mFAAmF;IACnF,MAAM,iBAAiB,GAAG,CAAC,CAAC;IAC5B,MAAM,sBAAsB,GAAG,8BAA8B,CAAC,2BAA2B,CAAC,CAAC;IAC3F,MAAM,qBAAqB,GAAG,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,gBAAgB,CAAC;IACjC,OAAO,QAAQ,CAAC,MAAM,iBAAiB,GAAG,sBAAsB,GAAG,qBAAqB,IAAI,OAAO,EAAE,CAAC,CAAC;AACzG,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport telemetryVersion from './telemetryVersion';\n\n/**\n * @private\n */\n// Removes long suffixes that don't fit the constraints for telemetry application ID.\n// e.g., the build suffix is dropped for alpha package versions.\nexport const sanitize = (version: string): string => {\n  const alphaIndex = version.search(/alpha/);\n  if (alphaIndex >= 0) {\n    return version.substring(0, alphaIndex + 5);\n  }\n  return version;\n};\n\n/**\n * Indicates the type of implementation for the UILibrary.\n *\n * @internal\n */\nexport type _TelemetryImplementationHint = 'Call' | 'Chat' | 'CallWithChat' | 'StatefulComponents';\n\n/**\n * Takes a telemetry implementation hint and returns the numerical value.\n *\n * @private\n */\nconst getTelemetryImplementationHint = (telemetryImplementationHint: _TelemetryImplementationHint): number => {\n  switch (telemetryImplementationHint) {\n    case 'Call':\n      return 1;\n    case 'Chat':\n      return 2;\n    case 'CallWithChat':\n      return 3;\n    case 'StatefulComponents':\n      return 4;\n    default:\n      return 0;\n  }\n};\n\n/**\n * Application ID to be included in telemetry data from the UI library.\n * Template: acXYYY/<version>\n * Where:\n * - X describes a platform, [r: web, i: iOS, a: Android]\n * - YYY describes what's running on this platform (optional, currently unused by this library):\n *    Y[0] is high-level artifact,\n *      [0: undefined, 1: AzureCommunicationLibrary, 2: ACS SampleApp]\n *    Y[1] is specific implementation,\n *      [0: undefined, 1: Call Composite, 2: Chat Composite, 3: CallWithChatComposite, 4: UI Components]\n *    Y[2] is reserved for implementation details,\n *      [0: undefined]\n *\n * @internal\n */\nexport const _getApplicationId = (telemetryImplementationHint: _TelemetryImplementationHint): string => {\n  // We assume AzureCommunicationLibrary, as we don't currently have any public API to inject otherwise.\n  // This is consistent with the native iOS and Android implementations of telemetry.\n  const highLevelArtifact = 1;\n  const specificImplementation = getTelemetryImplementationHint(telemetryImplementationHint);\n  const implementationDetails = 0;\n  const version = telemetryVersion;\n  return sanitize(`acr${highLevelArtifact}${specificImplementation}${implementationDetails}/${version}`);\n};"]}