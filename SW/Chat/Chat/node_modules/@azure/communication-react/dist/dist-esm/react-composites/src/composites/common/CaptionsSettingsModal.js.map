{"version":3,"file":"CaptionsSettingsModal.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/common/CaptionsSettingsModal.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,iDAAiD;AACjD,OAAO,EAAE,sBAAsB,EAAgF,yCAAmC;AAClJ,iDAAiD;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,2CAA2C,CAAC;AAC/E,iDAAiD;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AACjE,iDAAiD;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,iDAAiD;AACjD,OAAO,EAAE,wBAAwB,EAAE,mDAA6C;AAEhF,eAAe;AACf,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAMrC,EAAe,EAAE;IAChB,iDAAiD;IACjD,MAAM,0BAA0B,GAAG,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;IAChF,iDAAiD;IACjD,MAAM,QAAQ,GAAG,WAAW,CAAC,sBAAsB,CAAC,CAAC;IACrD,iDAAiD;IACjD,MAAM,OAAO,GAAG,SAAS,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;IACzC,iDAAiD;IACjD,MAAM,YAAY,GAAkC;QAClD,0BAA0B,EAAE,OAAO,CAAC,0BAA0B;QAC9D,2CAA2C,EAAE,OAAO,CAAC,2CAA2C;QAChG,4CAA4C,EAAE,OAAO,CAAC,4CAA4C;QAClG,8CAA8C,EAAE,OAAO,CAAC,8CAA8C;QACtG,+CAA+C,EAAE,OAAO,CAAC,+CAA+C;QACxG,kCAAkC,EAAE,OAAO,CAAC,kCAAkC;QAC9E,iCAAiC,EAAE,OAAO,CAAC,iCAAiC;QAC5E,8BAA8B,EAAE,OAAO,CAAC,8BAA8B;QACtE,yCAAyC,EAAE,OAAO,CAAC,yCAAyC;KAC7F,CAAC;IACF,iDAAiD;IACjD,MAAM,qBAAqB,GAAsC,OAAO,CAAC,qBAAqB,CAAC;IAE/F,iDAAiD;IACjD,MAAM,sBAAsB,GAAuC,OAAO,CAAC,sBAAsB,CAAC;IAElG,iDAAiD;IACjD,OAAO,oBAAC,sBAAsB,oBAAK,0BAA0B,EAAM,QAAQ,IAAE,OAAO,EAAE,YAAY,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,SAAS,EAAE,KAAK,CAAC,yBAAyB,EAAE,yBAAyB,EAAE,KAAK,CAAC,yBAAyB,EAAE,qBAAqB,EAAE,KAAK,CAAC,qBAAqB,IAAI,CAAC;IACjW,OAAO,yCAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React from 'react';\n/* @conditional-compile-remove(close-captions) */\nimport { _CaptionsSettingsModal, _CaptionsSettingsModalStrings, SpokenLanguageStrings, CaptionLanguageStrings } from '@internal/react-components';\n/* @conditional-compile-remove(close-captions) */\nimport { useAdaptedSelector } from '../CallComposite/hooks/useAdaptedSelector';\n/* @conditional-compile-remove(close-captions) */\nimport { useHandlers } from '../CallComposite/hooks/useHandlers';\n/* @conditional-compile-remove(close-captions) */\nimport { useLocale } from '../localization';\n/* @conditional-compile-remove(close-captions) */\nimport { _captionSettingsSelector } from '@internal/calling-component-bindings';\n\n/** @private */\nexport const CaptionsSettingsModal = (props: {\n  /* @conditional-compile-remove(close-captions) */showCaptionsSettingsModal: boolean;\n  /* @conditional-compile-remove(close-captions) */\n  onDismissCaptionsSettings: () => void;\n  /* @conditional-compile-remove(close-captions) */\n  changeCaptionLanguage?: boolean;\n}): JSX.Element => {\n  /* @conditional-compile-remove(close-captions) */\n  const CaptionsSettingsModalProps = useAdaptedSelector(_captionSettingsSelector);\n  /* @conditional-compile-remove(close-captions) */\n  const handlers = useHandlers(_CaptionsSettingsModal);\n  /* @conditional-compile-remove(close-captions) */\n  const strings = useLocale().strings.call;\n  /* @conditional-compile-remove(close-captions) */\n  const modalStrings: _CaptionsSettingsModalStrings = {\n    captionsSettingsModalTitle: strings.captionsSettingsModalTitle,\n    captionsSettingsSpokenLanguageDropdownLabel: strings.captionsSettingsSpokenLanguageDropdownLabel,\n    captionsSettingsCaptionLanguageDropdownLabel: strings.captionsSettingsCaptionLanguageDropdownLabel,\n    captionsSettingsSpokenLanguageDropdownInfoText: strings.captionsSettingsSpokenLanguageDropdownInfoText,\n    captionsSettingsCaptionLanguageDropdownInfoText: strings.captionsSettingsCaptionLanguageDropdownInfoText,\n    captionsSettingsConfirmButtonLabel: strings.captionsSettingsConfirmButtonLabel,\n    captionsSettingsCancelButtonLabel: strings.captionsSettingsCancelButtonLabel,\n    captionsSettingsModalAriaLabel: strings.captionsSettingsModalAriaLabel,\n    captionsSettingsCloseModalButtonAriaLabel: strings.captionsSettingsCloseModalButtonAriaLabel\n  };\n  /* @conditional-compile-remove(close-captions) */\n  const spokenLanguageStrings: SpokenLanguageStrings | undefined = strings.spokenLanguageStrings;\n\n  /* @conditional-compile-remove(close-captions) */\n  const captionLanguageStrings: CaptionLanguageStrings | undefined = strings.captionLanguageStrings;\n\n  /* @conditional-compile-remove(close-captions) */\n  return <_CaptionsSettingsModal {...CaptionsSettingsModalProps} {...handlers} strings={modalStrings} spokenLanguageStrings={spokenLanguageStrings} captionLanguageStrings={captionLanguageStrings} showModal={props.showCaptionsSettingsModal} onDismissCaptionsSettings={props.onDismissCaptionsSettings} changeCaptionLanguage={props.changeCaptionLanguage} />;\n  return <></>;\n};"]}