{"version":3,"file":"Microphone.js","sourceRoot":"","sources":["../../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/buttons/Microphone.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAA0B,gBAAgB,EAAE,+CAAmC;AACtF,+CAA+C;AAC/C,OAAO,EAAE,sBAAsB,EAAE,+CAAmC;AACpE,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AACzF,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,wCAAwC,CAAC,+CAA+C;AACxF,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAE/D;;GAEG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAM1B,EAAe,EAAE;;IAChB,MAAM,qBAAqB,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,wBAAwB,GAAG,WAAW,CAAC,yBAAyB,CAAC,CAAC;IACxE,wCAAwC,CAAC,+CAA+C;IACxF,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;IAC7B,wCAAwC;IACxC,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC;IAEnD,+CAA+C;IAC/C,MAAM,mBAAmB,GAAG,MAAA,MAAA,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,0CAAE,mBAAmB,0CAAE,YAAY,CAAC,SAAS,CAAC;IAEjG;;;OAGG;IACH,IAAI,UAAU,KAAK,YAAY,EAAE,CAAC;QAChC,+FAA+F;QAC/F,mDAAmD;QACnD,qBAAqB,CAAC,OAAO,GAAG,wBAAwB,CAAC;IAC3D,CAAC;IACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,WAAC,OAAA,sBAAsB,CAAC,MAAA,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAA,EAAA,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACzF,6CAA6C;IAC7C,OAAO,oBAAC,gBAAgB,gCAAY,kCAAkC,IAAK,qBAAqB,IAAE,SAAS,EAAE,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,yBAAyB,EAAE,KAAK,CAAC,8BAA8B,EAAE,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,IAAI,EAAE,wCAAwC,WAAW,IAAI,CAAA,MAAA,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,0CAAE,IAAI,MAAK,SAAS,CAAC;QACxa,+CAA+C,CAAC,eAAe,EAAE,mBAAmB,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,oBAAC,sBAAsB,IAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,4BAA4B,GAAI,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC;AACpO,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { _isInLobbyOrConnecting } from '@internal/calling-component-bindings';\nimport { ControlBarButtonStyles, MicrophoneButton } from '@internal/react-components';\n/* @conditional-compile-remove(capabilities) */\nimport { _HighContrastAwareIcon } from '@internal/react-components';\nimport React, { useMemo } from 'react';\nimport { CallControlDisplayType } from '../../../common/types/CommonCallControlOptions';\nimport { usePropsFor } from '../../hooks/usePropsFor';\nimport { useSelector } from '../../hooks/useSelector';\nimport { getCallStatus, getLocalMicrophoneEnabled } from '../../selectors/baseSelectors';\nimport { concatButtonBaseStyles } from '../../styles/Buttons.styles';\n/* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */\nimport { useAdapter } from '../../adapter/CallAdapterProvider';\n\n/**\n * @private\n */\nexport const Microphone = (props: {\n  displayType?: CallControlDisplayType;\n  styles?: ControlBarButtonStyles;\n  splitButtonsForDeviceSelection?: boolean;\n  disabled?: boolean;\n  disableTooltip?: boolean;\n}): JSX.Element => {\n  const microphoneButtonProps = usePropsFor(MicrophoneButton);\n  const callStatus = useSelector(getCallStatus);\n  const isLocalMicrophoneEnabled = useSelector(getLocalMicrophoneEnabled);\n  /* @conditional-compile-remove(rooms) */ /* @conditional-compile-remove(capabilities) */\n  const adapter = useAdapter();\n  /* @conditional-compile-remove(rooms) */\n  const isRoomsCall = adapter.getState().isRoomsCall;\n\n  /* @conditional-compile-remove(capabilities) */\n  const unmuteMicCapability = adapter.getState().call?.capabilitiesFeature?.capabilities.unmuteMic;\n\n  /**\n   * When call is in connecting state, microphone button should be disabled.\n   * This is due to to headless limitation where a call can not be muted/unmuted in lobby.\n   */\n  if (callStatus === 'Connecting') {\n    // Lobby page should show the microphone status that was set on the local preview/configuration\n    // page until the user successfully joins the call.\n    microphoneButtonProps.checked = isLocalMicrophoneEnabled;\n  }\n  const styles = useMemo(() => concatButtonBaseStyles(props.styles ?? {}), [props.styles]);\n  // tab focus on MicrophoneButton on page load\n  return <MicrophoneButton data-ui-id=\"call-composite-microphone-button\" {...microphoneButtonProps} showLabel={props.displayType !== 'compact'} disableTooltip={props.disableTooltip} styles={styles} enableDeviceSelectionMenu={props.splitButtonsForDeviceSelection} disabled={microphoneButtonProps.disabled || props.disabled || ( /* @conditional-compile-remove(rooms) */isRoomsCall && adapter.getState().call?.role === 'Unknown')}\n  /* @conditional-compile-remove(capabilities) */ onRenderOffIcon={unmuteMicCapability && !unmuteMicCapability.isPresent ? () => <_HighContrastAwareIcon disabled={true} iconName={'ControlButtonMicProhibited'} /> : undefined} />;\n};"]}