// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import React, { useMemo } from 'react';
import { participantListContainerStyle, participantListMobileStyle, participantListStack, participantListStyle, participantListWrapper, displayNameStyles } from './styles/ParticipantContainer.styles';
import { ParticipantList } from "../../../../react-components/src";
import { FocusZone, Stack, Text, useTheme } from '@fluentui/react';
import { AvatarPersona } from './AvatarPersona';
import { useId } from '@fluentui/react-hooks';
import { _formatString } from "../../../../acs-ui-common/src";
/**
 * @private
 */
export const ParticipantContainer = (props) => {
    const theme = useTheme();
    const participantListWrapperClassName = useMemo(() => participantListWrapper(theme), [theme]);
    return React.createElement(Stack, { className: participantListWrapperClassName },
        React.createElement(ParticipantListWithHeading, Object.assign({}, props)));
};
/**
 * @private
 */
export const ParticipantListWithHeading = (props) => {
    const { onFetchAvatarPersonaData, onFetchParticipantMenuItems, title, participantListProps } = props;
    const subheadingUniqueId = useId();
    const theme = useTheme();
    const subheadingStyleThemed = useMemo(() => ({
        root: {
            color: theme.palette.neutralSecondary,
            margin: props.isMobile ? '0.5rem 1rem' : '0.5rem',
            fontSize: theme.fonts.smallPlus.fontSize
        }
    }), [theme.palette.neutralSecondary, theme.fonts.smallPlus.fontSize, props.isMobile]);
    return React.createElement(Stack, { className: participantListStack },
        React.createElement(Stack.Item, { styles: subheadingStyleThemed, "aria-label": title, id: subheadingUniqueId }, paneTitleTrampoline(title !== null && title !== void 0 ? title : '')),
        React.createElement(FocusZone, { className: participantListContainerStyle, shouldFocusOnMount: true },
            React.createElement(ParticipantList, Object.assign({}, participantListProps, { styles: props.isMobile ? participantListMobileStyle : participantListStyle, onRenderAvatar: (userId, options) => React.createElement(React.Fragment, null,
                    React.createElement(AvatarPersona, Object.assign({ "data-ui-id": "chat-composite-participant-custom-avatar", userId: userId }, options, { hidePersonaDetails: !!(options === null || options === void 0 ? void 0 : options.text), dataProvider: onFetchAvatarPersonaData, 
                        /* @conditional-compile-remove(raise-hand) */ allowActiveBorder: true })),
                    (options === null || options === void 0 ? void 0 : options.text) && React.createElement(Text, { nowrap: true, styles: displayNameStyles }, options === null || options === void 0 ? void 0 : options.text)), onFetchParticipantMenuItems: onFetchParticipantMenuItems, showParticipantOverflowTooltip: !props.isMobile, participantAriaLabelledBy: subheadingUniqueId }))));
};
const paneTitleTrampoline = (paneTitle, totalParticipantCount) => {
    const participantCountString = totalParticipantCount ? {
        numberOfPeople: `(${totalParticipantCount})`
    } : {
        numberOfPeople: ' '
    };
    return _formatString(paneTitle, participantCountString);
};
//# sourceMappingURL=ParticipantContainer.js.map