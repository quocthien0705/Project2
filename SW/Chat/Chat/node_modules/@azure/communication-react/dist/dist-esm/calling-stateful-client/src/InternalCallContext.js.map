{"version":3,"file":"InternalCallContext.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/InternalCallContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { LocalVideoStream, MediaStreamType, RemoteVideoStream, VideoStreamRenderer } from '@azure/communication-calling';\nimport { LocalVideoStreamState } from './CallClientState';\nimport type { CallContext } from './CallContext';\nimport { CallIdHistory } from './CallIdHistory';\n\n/* @conditional-compile-remove(video-background-effects) */\nimport { LocalVideoStreamVideoEffectsSubscriber } from './LocalVideoStreamVideoEffectsSubscriber';\n/* @conditional-compile-remove(video-background-effects) */\nimport { Features } from '@azure/communication-calling';\n\n/**\n * Internally tracked render status. Stores the status of a video render of a stream as rendering could take a long\n * time.\n *\n * 'NotRendered' - the stream has not yet been rendered\n * 'Rendering' - the stream is currently rendering\n * 'Rendered' - the stream has been rendered\n * 'Stopping' - the stream is currently rendering but has been signaled to stop\n */\nexport type RenderStatus = 'NotRendered' | 'Rendering' | 'Rendered' | 'Stopping';\n\n/**\n * Internal container to hold common state needed to keep track of renders.\n */\nexport interface RenderInfo<T> {\n  status: RenderStatus;\n  renderer: VideoStreamRenderer | undefined;\n  stream: T;\n}\n\n/**\n * Internally used to keep track of the status, renderer, and awaiting promise, associated with a LocalVideoStream.\n */\nexport type LocalRenderInfo = RenderInfo<LocalVideoStream>;\n\n/**\n * Internally used to keep track of the status, renderer, and awaiting promise, associated with a RemoteVideoStream.\n */\nexport type RemoteRenderInfo = RenderInfo<RemoteVideoStream>;\n\n/**\n * Contains internal data used between different Declarative components to share data.\n */\nexport class InternalCallContext {\n  // <CallId, <ParticipantKey, <StreamId, RemoteRenderInfo>>\n  private _remoteRenderInfos = new Map<string, Map<string, Map<number, RemoteRenderInfo>>>();\n\n  // <CallId, <MediaStreamType, LocalRenderInfo>>.\n  private _localRenderInfos = new Map<string, Map<MediaStreamType, LocalRenderInfo>>();\n\n  // Used for keeping track of rendered LocalVideoStreams that are not part of a Call.\n  private _unparentedRenderInfos = new Map<MediaStreamType, LocalRenderInfo>();\n  private _callIdHistory = new CallIdHistory();\n\n  // Used for keeping track of video effects subscribers that are not part of a Call.\n  // The key is the stream ID. We assume each stream ID\n  /* @conditional-compile-remove(video-background-effects) */\n  private _unparentedViewVideoEffectsSubscriber = new Map<string, LocalVideoStreamVideoEffectsSubscriber | undefined>();\n  public setCallId(newCallId: string, oldCallId: string): void {\n    this._callIdHistory.updateCallIdHistory(newCallId, oldCallId);\n    const remoteRenderInfos = this._remoteRenderInfos.get(oldCallId);\n    if (remoteRenderInfos) {\n      this._remoteRenderInfos.delete(oldCallId);\n      this._remoteRenderInfos.set(newCallId, remoteRenderInfos);\n    }\n    const localRenderInfos = this._localRenderInfos.get(oldCallId);\n    if (localRenderInfos) {\n      this._localRenderInfos.delete(oldCallId);\n      this._localRenderInfos.set(newCallId, localRenderInfos);\n    }\n  }\n  public getCallIds(): IterableIterator<string> {\n    return this._remoteRenderInfos.keys();\n  }\n  public getRemoteRenderInfoForCall(callId: string): Map<string, Map<number, RemoteRenderInfo>> | undefined {\n    return this._remoteRenderInfos.get(this._callIdHistory.latestCallId(callId));\n  }\n  public getRemoteRenderInfoForParticipant(callId: string, participantKey: string, streamId: number): RemoteRenderInfo | undefined {\n    const callRenderInfos = this._remoteRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!callRenderInfos) {\n      return undefined;\n    }\n    const participantRenderInfos = callRenderInfos.get(participantKey);\n    if (!participantRenderInfos) {\n      return undefined;\n    }\n    return participantRenderInfos.get(streamId);\n  }\n  public setRemoteRenderInfo(callId: string, participantKey: string, streamId: number, stream: RemoteVideoStream, status: RenderStatus, renderer: VideoStreamRenderer | undefined): void {\n    let callRenderInfos = this._remoteRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!callRenderInfos) {\n      callRenderInfos = new Map<string, Map<number, RemoteRenderInfo>>();\n      this._remoteRenderInfos.set(this._callIdHistory.latestCallId(callId), callRenderInfos);\n    }\n    let participantRenderInfos = callRenderInfos.get(participantKey);\n    if (!participantRenderInfos) {\n      participantRenderInfos = new Map<number, RemoteRenderInfo>();\n      callRenderInfos.set(participantKey, participantRenderInfos);\n    }\n    participantRenderInfos.set(streamId, {\n      stream,\n      status,\n      renderer\n    });\n  }\n  public deleteRemoteRenderInfo(callId: string, participantKey: string, streamId: number): void {\n    const callRenderInfos = this._remoteRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!callRenderInfos) {\n      return;\n    }\n    const participantRenderInfos = callRenderInfos.get(participantKey);\n    if (!participantRenderInfos) {\n      return;\n    }\n    participantRenderInfos.delete(streamId);\n  }\n  public setLocalRenderInfo(callId: string, streamKey: MediaStreamType, stream: LocalVideoStream, status: RenderStatus, renderer: VideoStreamRenderer | undefined): void {\n    let localRenderInfosForCall = this._localRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!localRenderInfosForCall) {\n      localRenderInfosForCall = new Map<MediaStreamType, LocalRenderInfo>();\n      this._localRenderInfos.set(this._callIdHistory.latestCallId(callId), localRenderInfosForCall);\n    }\n    localRenderInfosForCall.set(streamKey, {\n      stream,\n      status,\n      renderer\n    });\n  }\n  public getLocalRenderInfosForCall(callId: string): Map<MediaStreamType, LocalRenderInfo> | undefined {\n    return this._localRenderInfos.get(this._callIdHistory.latestCallId(callId));\n  }\n  public getLocalRenderInfo(callId: string, streamKey: MediaStreamType): LocalRenderInfo | undefined {\n    const localRenderInfosForCall = this._localRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!localRenderInfosForCall) {\n      return undefined;\n    }\n    return localRenderInfosForCall.get(streamKey);\n  }\n  public deleteLocalRenderInfo(callId: string, streamKey: MediaStreamType): void {\n    const localRenderInfoForCall = this._localRenderInfos.get(this._callIdHistory.latestCallId(callId));\n    if (!localRenderInfoForCall) {\n      return;\n    }\n    localRenderInfoForCall.delete(streamKey);\n  }\n  public getUnparentedRenderInfo(localVideoStream: LocalVideoStreamState): LocalRenderInfo | undefined {\n    return this._unparentedRenderInfos.get(localVideoStream.mediaStreamType);\n  }\n  public getUnparentedRenderInfos(): LocalVideoStream[] {\n    return [...this._unparentedRenderInfos].map(([, renderInfo]) => renderInfo.stream);\n  }\n  public setUnparentedRenderInfo(statefulStream: LocalVideoStreamState, stream: LocalVideoStream, status: RenderStatus, renderer: VideoStreamRenderer | undefined): void {\n    this._unparentedRenderInfos.set(statefulStream.mediaStreamType, {\n      stream,\n      status,\n      renderer\n    });\n  }\n  public deleteUnparentedRenderInfo(localVideoStream: LocalVideoStreamState): void {\n    /* @conditional-compile-remove(video-background-effects) */\n    this._unparentedViewVideoEffectsSubscriber.get(localVideoStream.mediaStreamType)?.unsubscribe();\n    this._unparentedRenderInfos.delete(localVideoStream.mediaStreamType);\n  }\n  public subscribeToUnparentedViewVideoEffects(localVideoStream: LocalVideoStream, callContext: CallContext): void {\n    /* @conditional-compile-remove(video-background-effects) */\n    {\n      // Ensure we aren't setting multiple subscriptions\n      this._unparentedViewVideoEffectsSubscriber.get(localVideoStream.mediaStreamType)?.unsubscribe();\n      this._unparentedViewVideoEffectsSubscriber.set(localVideoStream.mediaStreamType, new LocalVideoStreamVideoEffectsSubscriber({\n        parent: 'unparented',\n        context: callContext,\n        localVideoStream: localVideoStream,\n        localVideoStreamEffectsAPI: localVideoStream.feature(Features.VideoEffects)\n      }));\n    }\n  }\n\n  // UnparentedRenderInfos are not cleared as they are not part of the Call state.\n  public clearCallRelatedState(): void {\n    this._remoteRenderInfos.clear();\n    this._localRenderInfos.clear();\n  }\n}"]}