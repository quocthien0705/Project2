{"version":3,"file":"DtmfDialerButton.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/common/ControlBar/DtmfDialerButton.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,EAAE,gBAAgB,EAA2B,4CAAmC;AAEvF,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE5D,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,MAAM,IAAI,GAAG,GAAgB,EAAE,CAAC,oBAAC,iBAAiB,IAAC,QAAQ,EAAE,mBAAmB,GAAI,CAAC;AASrF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAA4B,EAAe,EAAE;IAC7E,MAAM,EACJ,OAAO,EACP,cAAc,EACd,eAAe,EACf,OAAO,EACP,WAAW,EACZ,GAAG,KAAK,CAAC;IACV,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,oBAAoB,GAA4B;QACpD,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB;QAChD,gBAAgB,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB;QAC/D,iBAAiB,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,0BAA0B;KAClE,CAAC;IACF,MAAM,MAAM,GAA2B,OAAO,CAAC,GAAG,EAAE;;QAAC,OAAA,eAAe,CAAC;YACnE,WAAW,EAAE;gBACX,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY;aACvC;SACF,EAAE,MAAA,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAA;KAAA,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;IACpE,OAAO,oBAAC,gBAAgB,oBAAK,KAAK,IAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,EAAE,SAAS,EAAE,WAAW,KAAK,SAAS,EAAE,QAAQ,EAAE,2BAA2B,EAAE,cAAc,EAAE,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,IAAI,EAAE,eAAe,EAAE,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;AAC7R,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React, { useMemo } from 'react';\nimport { CallCompositeIcon } from '../icons';\nimport { ControlBarButton, ControlBarButtonStrings } from '@internal/react-components';\nimport { ControlBarButtonProps, ControlBarButtonStyles } from '@internal/react-components';\nimport { concatStyleSets, useTheme } from '@fluentui/react';\nimport { CallControlDisplayType } from '../types/CommonCallControlOptions';\nimport { useLocale } from '../../localization';\nconst icon = (): JSX.Element => <CallCompositeIcon iconName={'DtmfDialpadButton'} />;\n\n/**\n * @private\n */\nexport interface DtmfDialerButtonProps extends ControlBarButtonProps {\n  displayType?: CallControlDisplayType;\n  styles?: ControlBarButtonStyles;\n}\n/**\n * Button for showing and hiding the dtmf dialer in the Call composite.\n * To be used only if the more button control is disabled. This button will replace\n * it in the control bar unless it is also disabled.\n * @private\n */\nexport const DtmfDialpadButton = (props: DtmfDialerButtonProps): JSX.Element => {\n  const {\n    strings,\n    onRenderOnIcon,\n    onRenderOffIcon,\n    onClick,\n    displayType\n  } = props;\n  const theme = useTheme();\n  const locale = useLocale();\n  const dialpadButtonStrings: ControlBarButtonStrings = {\n    label: locale.strings.call.dtmfDialerButtonLabel,\n    tooltipOnContent: locale.strings.call.dtmfDialerButtonTooltipOn,\n    tooltipOffContent: locale.strings.call.dtmfDialerButtonTooltipOff\n  };\n  const styles: ControlBarButtonStyles = useMemo(() => concatStyleSets({\n    rootChecked: {\n      background: theme.palette.neutralLight\n    }\n  }, props.styles ?? {}), [props.styles, theme.palette.neutralLight]);\n  return <ControlBarButton {...props} strings={strings ? strings : dialpadButtonStrings} showLabel={displayType !== 'compact'} labelKey={'dtmfDialpadButtonLabelKey'} onRenderOnIcon={onRenderOnIcon ?? icon} onRenderOffIcon={onRenderOffIcon ?? icon} onClick={onClick} styles={styles} />;\n};"]}