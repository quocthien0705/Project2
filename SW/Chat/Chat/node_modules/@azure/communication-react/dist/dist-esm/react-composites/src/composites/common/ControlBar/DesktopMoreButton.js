// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* @conditional-compile-remove(close-captions) */
import { _StartCaptionsButton } from "../../../../../react-components/src";
import React from 'react';
import { useState } from 'react';
/*@conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */
import { useMemo, useCallback } from 'react';
/*@conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */
import { buttonFlyoutIncreasedSizeStyles } from '../../CallComposite/styles/Buttons.styles';
import { MoreButton } from '../MoreButton';
/*@conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */
import { useLocale } from '../../localization';
/* @conditional-compile-remove(control-bar-button-injection) */
import { CUSTOM_BUTTON_OPTIONS, generateCustomCallDesktopOverflowButtons, onFetchCustomButtonPropsTrampoline } from './CustomButton';
/* @conditional-compile-remove(close-captions) */
import { useHandlers } from '../../CallComposite/hooks/useHandlers';
/* @conditional-compile-remove(close-captions) */
import { _startCaptionsButtonSelector } from "../../../../../calling-component-bindings/src";
/* @conditional-compile-remove(close-captions) */
import { useAdaptedSelector } from '../../CallComposite/hooks/useAdaptedSelector';
import { _preventDismissOnEvent } from "../../../../../acs-ui-common/src";
import { showDtmfDialer } from '../../CallComposite/utils/MediaGalleryUtils';
import { useSelector } from '../../CallComposite/hooks/useSelector';
import { getTargetCallees } from '../../CallComposite/selectors/baseSelectors';
/**
 *
 * @private
 */
export const DesktopMoreButton = (props) => {
    var _a, _b;
    /*@conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */
    const localeStrings = useLocale();
    /* @conditional-compile-remove(close-captions) */
    const startCaptionsButtonProps = useAdaptedSelector(_startCaptionsButtonSelector);
    /* @conditional-compile-remove(close-captions) */
    const startCaptionsButtonHandlers = useHandlers(_StartCaptionsButton);
    /* @conditional-compile-remove(close-captions) */
    const startCaptions = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        yield startCaptionsButtonHandlers.onStartCaptions({
            spokenLanguage: startCaptionsButtonProps.currentSpokenLanguage
        });
    }), [startCaptionsButtonHandlers, startCaptionsButtonProps.currentSpokenLanguage]);
    const [focusedContentOn, setFocusedContentOn] = useState(false);
    const [previousLayout, setPreviousLayout] = useState((_a = props.userSetGalleryLayout) !== null && _a !== void 0 ? _a : 'floatingLocalVideo');
    const callees = useSelector(getTargetCallees);
    const allowDtmfDialer = showDtmfDialer(callees);
    const [dtmfDialerChecked, setDtmfDialerChecked] = useState((_b = props.dtmfDialerPresent) !== null && _b !== void 0 ? _b : false);
    /* @conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */
    const moreButtonStrings = useMemo(() => ({
        label: localeStrings.strings.call.moreButtonCallingLabel,
        tooltipOffContent: localeStrings.strings.callWithChat.moreDrawerButtonTooltip
    }), [localeStrings]);
    const moreButtonContextualMenuItems = [];
    /* @conditional-compile-remove(close-captions) */
    const menuSubIconStyleSet = {
        root: {
            height: 'unset',
            lineHeight: '100%',
            width: '1.25rem'
        }
    };
    // is captions feature is active
    /* @conditional-compile-remove(close-captions) */
    if (props.isCaptionsSupported) {
        const captionsContextualMenuItems = [];
        moreButtonContextualMenuItems.push({
            key: 'liveCaptionsKey',
            id: 'common-call-composite-captions-button',
            text: localeStrings.strings.call.liveCaptionsLabel,
            iconProps: {
                iconName: 'CaptionsIcon',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            },
            disabled: props.disableButtonsForHoldScreen,
            subMenuProps: {
                id: 'captions-contextual-menu',
                items: captionsContextualMenuItems,
                calloutProps: {
                    preventDismissOnEvent: _preventDismissOnEvent
                }
            },
            submenuIconProps: {
                iconName: 'HorizontalGalleryRightButton',
                styles: menuSubIconStyleSet
            }
        });
        captionsContextualMenuItems.push({
            key: 'ToggleCaptionsKey',
            id: 'common-call-composite-captions-toggle-button',
            text: startCaptionsButtonProps.checked ? localeStrings.strings.call.startCaptionsButtonTooltipOnContent : localeStrings.strings.call.startCaptionsButtonTooltipOffContent,
            onClick: () => {
                startCaptionsButtonProps.checked ? startCaptionsButtonHandlers.onStopCaptions() : startCaptionsButtonProps.currentSpokenLanguage !== '' ? startCaptions() : props.onCaptionsSettingsClick && props.onCaptionsSettingsClick();
            },
            iconProps: {
                iconName: startCaptionsButtonProps.checked ? 'CaptionsOffIcon' : 'CaptionsIcon',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            },
            disabled: props.disableButtonsForHoldScreen
        });
        if (props.onCaptionsSettingsClick) {
            captionsContextualMenuItems.push({
                key: 'openCaptionsSettingsKey',
                id: 'common-call-composite-captions-settings-button',
                text: localeStrings.strings.call.captionsSettingsLabel,
                onClick: props.onCaptionsSettingsClick,
                iconProps: {
                    iconName: 'CaptionsSettingsIcon',
                    styles: {
                        root: {
                            lineHeight: 0
                        }
                    }
                },
                itemProps: {
                    styles: buttonFlyoutIncreasedSizeStyles
                },
                disabled: props.disableButtonsForHoldScreen || !startCaptionsButtonProps.checked
            });
        }
    }
    const dtmfDialerScreenOption = {
        key: 'dtmfDialerScreenKey',
        itemProps: {
            styles: buttonFlyoutIncreasedSizeStyles
        },
        text: !dtmfDialerChecked ? localeStrings.strings.call.dtmfDialerMoreButtonLabelOn : localeStrings.strings.call.dtmfDialerMoreButtonLabelOff,
        onClick: () => {
            props.onSetDialpadPage && props.onSetDialpadPage();
            setDtmfDialerChecked(!dtmfDialerChecked);
        },
        iconProps: {
            iconName: 'DtmfDialpadButton',
            styles: {
                root: {
                    lineHeight: 0
                }
            }
        }
    };
    /**
     * Only render the dtmf dialer if the dialpad for PSTN calls is not present
     */
    if (props.onSetDialpadPage && allowDtmfDialer) {
        moreButtonContextualMenuItems.push(dtmfDialerScreenOption);
    }
    if (props.onUserSetOverflowGalleryPositionChange) {
        const galleryOptions = {
            key: 'overflowGalleryPositionKey',
            iconProps: {
                iconName: 'GalleryOptions',
                styles: {
                    root: {
                        lineHeight: 0
                    }
                }
            },
            itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            },
            submenuIconProps: {
                styles: menuSubIconStyleSet
            },
            text: localeStrings.strings.call.moreButtonGalleryControlLabel,
            disabled: props.disableButtonsForHoldScreen,
            subMenuProps: {
                items: [{
                        key: 'dynamicSelectionKey',
                        text: localeStrings.strings.call.moreButtonGalleryFloatingLocalLayoutLabel,
                        canCheck: true,
                        itemProps: {
                            styles: buttonFlyoutIncreasedSizeStyles
                        },
                        isChecked: props.userSetGalleryLayout === 'floatingLocalVideo',
                        onClick: () => {
                            props.onUserSetGalleryLayout && props.onUserSetGalleryLayout('floatingLocalVideo');
                            setFocusedContentOn(false);
                        },
                        iconProps: {
                            iconName: 'FloatingLocalVideoGalleryLayout',
                            styles: {
                                root: {
                                    lineHeight: 0
                                }
                            }
                        }
                    }, {
                        key: 'speakerSelectionKey',
                        text: localeStrings.strings.call.moreButtonGallerySpeakerLayoutLabel,
                        canCheck: true,
                        itemProps: {
                            styles: buttonFlyoutIncreasedSizeStyles
                        },
                        isChecked: props.userSetGalleryLayout === 'speaker',
                        onClick: () => {
                            props.onUserSetGalleryLayout && props.onUserSetGalleryLayout('speaker');
                            setFocusedContentOn(false);
                        },
                        iconProps: {
                            iconName: 'SpeakerGalleryLayout',
                            styles: {
                                root: {
                                    lineHeight: 0
                                }
                            }
                        }
                    }, {
                        key: 'focusedContentSelectionKey',
                        text: localeStrings.strings.call.moreButtonGalleryFocusedContentLayoutLabel,
                        canCheck: true,
                        itemProps: {
                            styles: buttonFlyoutIncreasedSizeStyles
                        },
                        isChecked: focusedContentOn,
                        onClick: () => {
                            var _a;
                            if (focusedContentOn === false) {
                                setPreviousLayout((_a = props.userSetGalleryLayout) !== null && _a !== void 0 ? _a : 'floatingLocalVideo');
                                props.onUserSetGalleryLayout && props.onUserSetGalleryLayout('focusedContent');
                                setFocusedContentOn(true);
                            }
                            else {
                                props.onUserSetGalleryLayout && props.onUserSetGalleryLayout(previousLayout);
                                setFocusedContentOn(false);
                            }
                        },
                        iconProps: {
                            iconName: 'FocusedContentGalleryLayout',
                            styles: {
                                root: {
                                    lineHeight: 0
                                }
                            }
                        }
                    }],
                calloutProps: {
                    preventDismissOnEvent: _preventDismissOnEvent
                }
            }
        };
        moreButtonContextualMenuItems.push(galleryOptions);
    }
    /* @conditional-compile-remove(control-bar-button-injection) */
    const customDrawerButtons = useMemo(() => generateCustomCallDesktopOverflowButtons(onFetchCustomButtonPropsTrampoline(typeof props.callControls === 'object' ? props.callControls : undefined), typeof props.callControls === 'object' ? props.callControls.displayType : undefined), [props.callControls]);
    /* @conditional-compile-remove(control-bar-button-injection) */
    customDrawerButtons['primary'].slice(CUSTOM_BUTTON_OPTIONS.MAX_PRIMARY_DESKTOP_CUSTOM_BUTTONS).forEach(element => {
        moreButtonContextualMenuItems.push(Object.assign({ itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            } }, element));
    });
    /* @conditional-compile-remove(control-bar-button-injection) */
    customDrawerButtons['secondary'].slice(CUSTOM_BUTTON_OPTIONS.MAX_SECONDARY_DESKTOP_CUSTOM_BUTTONS).forEach(element => {
        moreButtonContextualMenuItems.push(Object.assign({ itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            } }, element));
    });
    /* @conditional-compile-remove(control-bar-button-injection) */
    customDrawerButtons['overflow'].forEach(element => {
        moreButtonContextualMenuItems.push(Object.assign({ itemProps: {
                styles: buttonFlyoutIncreasedSizeStyles
            } }, element));
    });
    return React.createElement(MoreButton, Object.assign({}, props, { "data-ui-id": "common-call-composite-more-button", 
        /*@conditional-compile-remove(PSTN-calls) */ /* @conditional-compile-remove(one-to-n-calling) */ /* @conditional-compile-remove(close-captions) */ strings: moreButtonStrings, menuIconProps: {
            hidden: true
        }, menuProps: {
            items: moreButtonContextualMenuItems,
            calloutProps: {
                preventDismissOnEvent: _preventDismissOnEvent
            }
        } }));
};
//# sourceMappingURL=DesktopMoreButton.js.map