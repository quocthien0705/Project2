{"version":3,"file":"SvgWithWordWrapping.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/SvgWithWordWrapping.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { _pxToRem } from '@internal/acs-ui-common';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\n\n/**\n * An SVG element component that wraps inner text to fit the width of the SVG.\n * @private\n */\nexport const SvgWithWordWrapping = (props: {\n  width: number;\n  text: string;\n  lineHeightPx: number;\n  bufferHeightPx: number;\n}): JSX.Element => {\n  const {\n    width,\n    text,\n    lineHeightPx,\n    bufferHeightPx\n  } = props;\n  const svgRef = useRef<SVGSVGElement>(null);\n  const calculationTextElement = useRef<SVGTextElement>(null);\n  const visibleTextElement = useRef<SVGTextElement>(null);\n  const [height, setHeight] = useState<number>(0);\n\n  // useLayoutEffect ensures that the calculationTextElement is rendered before being used for calculations.\n  // Using useLayoutEffect over useEffect ensures we do not get a layout shift when the visibleTextElement is rendered\n  // and the height is updated. This is because useLayoutEffect runs synchronously after DOM mutations but\n  // before the browser has a chance to paint. See https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n  // for more details.\n  useLayoutEffect(() => {\n    if (text && calculationTextElement.current && visibleTextElement.current) {\n      const numLines = convertTextToWrappedText(calculationTextElement.current, visibleTextElement.current, width, lineHeightPx);\n      setHeight(numLines * lineHeightPx);\n    }\n  }, [width, lineHeightPx, text]);\n  return <svg width={width} height={height + bufferHeightPx} ref={svgRef} xmlns=\"http://www.w3.org/2000/svg\">\n      <text height={0} ref={calculationTextElement} style={{\n      visibility: 'hidden'\n    }}>\n        {text}\n      </text>\n      <text ref={visibleTextElement} x=\"0\" y={bufferHeightPx / 4} role=\"heading\" aria-level={1} />\n    </svg>;\n};\n\n/**\n * Wrap text in tspan elements to fit the width of the SVG\n * @param baseTextElement The text element to create the wrapped text from.\n * @param outputTextElement The text element to insert the wrapped text into.\n * @param maxWidth The maximum width of the text element.\n * @param lineHeightPx The height of each line in pixels.\n * @returns The number of lines of text.\n */\nconst convertTextToWrappedText = (inputTextElement: SVGTextElement, outputTextElement: SVGTextElement, maxWidth: number, lineHeightPx: number): number => {\n  const words = inputTextElement.textContent?.split(' ') ?? [];\n  if (words.length === 0 || words[0] === '') {\n    throw new Error('Text element must contain text');\n  }\n\n  // The current line being built.\n  let line = '';\n\n  // Running total of the number of lines.\n  let numLines = 0;\n\n  // First, clear the output text element.\n  outputTextElement.textContent = '';\n\n  // Iterate through each word and create a tspan element for each line.\n  for (let i = 0; i < words.length; i++) {\n    const testLine = line + words[i] + ' ';\n    const testWidth = inputTextElement.getSubStringLength(0, testLine.length);\n    if (testWidth > maxWidth && i > 0) {\n      const newLine = constructTSpanLine(line, lineHeightPx);\n      outputTextElement.appendChild(newLine);\n      line = words[i] + ' ';\n      numLines++;\n    } else {\n      line = testLine;\n    }\n  }\n\n  // Add the last line.\n  const newLine = constructTSpanLine(line, lineHeightPx);\n  outputTextElement.appendChild(newLine);\n  numLines++;\n\n  // Return the number of lines to calculate the height of the SVG.\n  return numLines;\n};\n\n/**\n * Create a tspan element for a line of text, with text set to be centered.\n * @param line The line of text.\n * @param lineHeightPx The height of each line in pixels.\n * @returns The tspan element.\n */\nconst constructTSpanLine = (line: string, lineHeightPx: number): SVGTSpanElement => {\n  const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n  tspan.textContent = line;\n  tspan.setAttribute('x', '50%');\n  tspan.setAttribute('dy', `${lineHeightPx}px`);\n  tspan.setAttribute('text-anchor', 'middle');\n  return tspan;\n};"]}