// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* @conditional-compile-remove(capabilities) */
import React from 'react';
/* @conditional-compile-remove(capabilities) */
import { MessageBar, MessageBarType, Stack } from '@fluentui/react';
/* @conditional-compile-remove(capabilities) */
import { useLocale } from '../../localization';
/* @conditional-compile-remove(capabilities) */
/**
 * Notification bar for capabilities changed
 * @private
 */
export const CapabilitiesChangedNotificationBar = (props) => {
    const locale = useLocale();
    return React.createElement(Stack, { "data-ui-id": "capabilities-changed-notification-bar-stack" }, props.capabilitiesChangedNotifications.map(notification => {
        const message = getCapabilityChangedNotificationString(notification, locale.strings.call.capabilityChangedNotification);
        if (!message) {
            return null;
        }
        const iconProps = getCustomMessageBarIconProps(notification);
        return React.createElement(MessageBar, { key: notification.capabilityName, styles: messageBarStyles, messageBarType: MessageBarType.warning, dismissIconProps: {
                iconName: 'ErrorBarClear'
            }, onDismiss: () => props.onDismissNotification(notification), messageBarIconProps: iconProps }, message);
    }));
};
/* @conditional-compile-remove(capabilities) */
const getCapabilityChangedNotificationString = (notification, strings) => {
    var _a, _b, _c, _d, _e, _f;
    switch (notification.capabilityName) {
        case 'turnVideoOn':
            if (notification.changedReason === 'MeetingOptionOrOrganizerPolicyChanged') {
                return notification.isPresent ? (_a = strings === null || strings === void 0 ? void 0 : strings.turnVideoOn) === null || _a === void 0 ? void 0 : _a.grantedDueToMeetingOption : (_b = strings === null || strings === void 0 ? void 0 : strings.turnVideoOn) === null || _b === void 0 ? void 0 : _b.lostDueToMeetingOption;
            }
            break;
        case 'unmuteMic':
            if (notification.changedReason === 'MeetingOptionOrOrganizerPolicyChanged') {
                return notification.isPresent ? (_c = strings === null || strings === void 0 ? void 0 : strings.unmuteMic) === null || _c === void 0 ? void 0 : _c.grantedDueToMeetingOption : (_d = strings === null || strings === void 0 ? void 0 : strings.unmuteMic) === null || _d === void 0 ? void 0 : _d.lostDueToMeetingOption;
            }
            break;
        case 'shareScreen':
            if (notification.isPresent && notification.changedReason === 'RoleChanged' && notification.role === 'Presenter') {
                return (_e = strings === null || strings === void 0 ? void 0 : strings.shareScreen) === null || _e === void 0 ? void 0 : _e.grantedDueToRoleChangeToPresenter;
            }
            if (!notification.isPresent && notification.changedReason === 'RoleChanged' && notification.role === 'Attendee') {
                return (_f = strings === null || strings === void 0 ? void 0 : strings.shareScreen) === null || _f === void 0 ? void 0 : _f.lostDueToRoleChangeToAttendee;
            }
            break;
    }
    return undefined;
};
/* @conditional-compile-remove(capabilities) */
const getCustomMessageBarIconProps = (notification) => {
    let iconName = undefined;
    switch (notification.capabilityName) {
        case 'turnVideoOn':
            if (notification.isPresent) {
                iconName = 'ControlButtonCameraOn';
            }
            else {
                iconName = 'ControlButtonCameraProhibited';
            }
            break;
        case 'unmuteMic':
            if (notification.isPresent) {
                iconName = 'ControlButtonMicOn';
            }
            else {
                iconName = 'ControlButtonMicProhibited';
            }
            break;
        default:
            return undefined;
    }
    return {
        iconName,
        styles: {
            root: {
                '> *': {
                    height: '1rem',
                    width: '1rem'
                }
            }
        }
    };
};
/* @conditional-compile-remove(capabilities) */
const messageBarStyles = {
    innerText: {
        alignSelf: 'center'
    },
    icon: {
        height: 0
    },
    content: {
        lineHeight: 'inherit'
    },
    dismissal: {
        height: 0,
        paddingTop: '0.8rem'
    }
};
//# sourceMappingURL=CapabilitiesChangedNotificationBar.js.map