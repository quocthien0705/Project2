import { StatefulCallClient, StatefulDeviceManager, TeamsCall, TeamsCallAgent as BetaTeamsCallAgent } from "../../../../../calling-stateful-client/src";
import { _TelemetryImplementationHint } from "../../../../../acs-ui-common/src";
import { CallAgent, GroupCallLocator, TeamsMeetingLinkLocator, AudioDeviceInfo, VideoDeviceInfo, PermissionConstraints, PropertyChangedEvent, StartCallOptions, Call } from '@azure/communication-calling';
import { StartCaptionsOptions } from '@azure/communication-calling';
import { RoomCallLocator } from '@azure/communication-calling';
import { DtmfTone } from '@azure/communication-calling';
import { CommonCallAdapter, CallEndedListener, CallIdChangedListener, CallAdapterState, DisplayNameChangedListener, IsMutedChangedListener, IsLocalScreenSharingActiveChangedListener, IsSpeakingChangedListener, ParticipantsJoinedListener, ParticipantsLeftListener, DiagnosticChangedEventListner, CallAdapter, JoinCallOptions, StartCallIdentifier } from './CallAdapter';
import { TransferAcceptedListener } from './CallAdapter';
import { CapabilitiesChangedListener } from './CallAdapter';
import { CaptionsReceivedListener, IsCaptionsActiveChangedListener, IsCaptionLanguageChangedListener, IsSpokenLanguageChangedListener } from './CallAdapter';
import { VideoBackgroundImage, VideoBackgroundEffect } from './CallAdapter';
import { CreateVideoStreamViewResult, VideoStreamOptions } from "../../../../../react-components/src";
import { CommunicationTokenCredential, CommunicationUserIdentifier, MicrosoftTeamsUserIdentifier, MicrosoftTeamsAppIdentifier, UnknownIdentifier } from '@azure/communication-common';
import { AdapterError } from '../../common/adapters';
import { VideoBackgroundEffectsDependency } from "../../../../../calling-component-bindings/src";
import { CallingSounds } from './CallAdapter';
type CallTypeOf<AgentType extends CallAgent | BetaTeamsCallAgent> = AgentType extends CallAgent ? Call : TeamsCall;
/**
 * @private
 */
export type AdapterStateModifier = (state: CallAdapterState) => CallAdapterState;
/**
 * @private
 */
export declare class AzureCommunicationCallAdapter<AgentType extends CallAgent | BetaTeamsCallAgent = CallAgent> implements CommonCallAdapter {
    private callClient;
    private callAgent;
    private deviceManager;
    private locator?;
    targetCallees?: StartCallIdentifier[];
    private _call?;
    private context;
    private diagnosticsForwarder?;
    private handlers;
    private participantSubscribers;
    private emitter;
    private callingSoundSubscriber;
    private onClientStateChange;
    private onResolveVideoBackgroundEffectsDependency?;
    private get call();
    private set call(value);
    constructor(callClient: StatefulCallClient, locator: CallAdapterLocator, callAgent: AgentType, deviceManager: StatefulDeviceManager, options?: AzureCommunicationCallAdapterOptions | TeamsAdapterOptions);
    constructor(callClient: StatefulCallClient, targetCallees: StartCallIdentifier[], callAgent: AgentType, deviceManager: StatefulDeviceManager, options?: AzureCommunicationCallAdapterOptions | TeamsAdapterOptions);
    private subscribeDeviceManagerEvents;
    private bindPublicMethods;
    dispose(): void;
    queryCameras(): Promise<VideoDeviceInfo[]>;
    queryMicrophones(): Promise<AudioDeviceInfo[]>;
    querySpeakers(): Promise<AudioDeviceInfo[]>;
    askDevicePermission(constrain: PermissionConstraints): Promise<void>;
    joinCall(options?: boolean | JoinCallOptions): CallTypeOf<AgentType> | undefined;
    private _joinCall;
    createStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>;
    disposeStreamView(remoteUserId?: string): Promise<void>;
    disposeScreenShareStreamView(remoteUserId: string): Promise<void>;
    disposeRemoteVideoStreamView(remoteUserId: string): Promise<void>;
    disposeLocalVideoStreamView(): Promise<void>;
    leaveCall(forEveryone?: boolean): Promise<void>;
    setCamera(device: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void>;
    setMicrophone(device: AudioDeviceInfo): Promise<void>;
    setSpeaker(device: AudioDeviceInfo): Promise<void>;
    startCamera(options?: VideoStreamOptions): Promise<void>;
    stopCamera(): Promise<void>;
    mute(): Promise<void>;
    unmute(): Promise<void>;
    startScreenShare(): Promise<void>;
    stopScreenShare(): Promise<void>;
    raiseHand(): Promise<void>;
    lowerHand(): Promise<void>;
    startVideoBackgroundEffect(videoBackgroundEffect: VideoBackgroundEffect): Promise<void>;
    stopVideoBackgroundEffects(): Promise<void>;
    updateBackgroundPickerImages(backgroundImages: VideoBackgroundImage[]): void;
    updateSelectedVideoBackgroundEffect(selectedVideoBackground: VideoBackgroundEffect): void;
    startCall(participants: string[] | (MicrosoftTeamsAppIdentifier | UnknownIdentifier)[], options?: StartCallOptions): CallTypeOf<AgentType> | undefined;
    private processNewCall;
    private isBlurEffect;
    private isReplacementEffect;
    removeParticipant(userId: string): Promise<void>;
    sendDtmfTone(dtmfTone: DtmfTone): Promise<void>;
    startCaptions(options?: StartCaptionsOptions): Promise<void>;
    stopCaptions(): Promise<void>;
    setCaptionLanguage(language: string): Promise<void>;
    setSpokenLanguage(language: string): Promise<void>;
    getState(): CallAdapterState;
    onStateChange(handler: (state: CallAdapterState) => void): void;
    offStateChange(handler: (state: CallAdapterState) => void): void;
    on(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;
    on(event: 'participantsLeft', listener: ParticipantsLeftListener): void;
    on(event: 'isMutedChanged', listener: IsMutedChangedListener): void;
    on(event: 'callIdChanged', listener: CallIdChangedListener): void;
    on(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;
    on(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;
    on(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;
    on(event: 'callEnded', listener: CallEndedListener): void;
    on(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;
    on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;
    on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;
    on(event: 'error', errorHandler: (e: AdapterError) => void): void;
    on(event: 'captionsReceived', listener: CaptionsReceivedListener): void;
    on(event: 'isCaptionsActiveChanged', listener: IsCaptionsActiveChangedListener): void;
    on(event: 'isCaptionLanguageChanged', listener: IsCaptionLanguageChangedListener): void;
    on(event: 'isSpokenLanguageChanged', listener: IsSpokenLanguageChangedListener): void;
    on(event: 'transferAccepted', listener: TransferAcceptedListener): void;
    on(event: 'capabilitiesChanged', listener: CapabilitiesChangedListener): void;
    on(event: 'roleChanged', listener: PropertyChangedEvent): void;
    private subscribeToCaptionEvents;
    private unsubscribeFromCaptionEvents;
    private subscribeCallEvents;
    private unsubscribeCallEvents;
    private isMyMutedChanged;
    private onRemoteParticipantsUpdated;
    private isScreenSharingOnChanged;
    private captionsReceived;
    private isCaptionsActiveChanged;
    private isSpokenLanguageChanged;
    private isCaptionLanguageChanged;
    private transferAccepted;
    private capabilitiesChanged;
    private roleChanged;
    private callIdChanged;
    private resetDiagnosticsForwarder;
    off(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;
    off(event: 'participantsLeft', listener: ParticipantsLeftListener): void;
    off(event: 'isMutedChanged', listener: IsMutedChangedListener): void;
    off(event: 'callIdChanged', listener: CallIdChangedListener): void;
    off(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;
    off(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;
    off(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;
    off(event: 'callEnded', listener: CallEndedListener): void;
    off(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;
    off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;
    off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;
    off(event: 'error', errorHandler: (e: AdapterError) => void): void;
    off(event: 'captionsReceived', listener: CaptionsReceivedListener): void;
    off(event: 'isCaptionsActiveChanged', listener: IsCaptionsActiveChangedListener): void;
    off(event: 'isCaptionLanguageChanged', listener: IsCaptionLanguageChangedListener): void;
    off(event: 'isSpokenLanguageChanged', listener: IsSpokenLanguageChangedListener): void;
    off(event: 'transferAccepted', listener: TransferAcceptedListener): void;
    off(event: 'capabilitiesChanged', listener: CapabilitiesChangedListener): void;
    off(event: 'roleChanged', listener: PropertyChangedEvent): void;
    private asyncTeeErrorToEventEmitter;
    private teeErrorToEventEmitter;
}
/**
 * Locator used by {@link createAzureCommunicationCallAdapter} to locate the call to join
 *
 * @public
 */
export type CallAdapterLocator = TeamsMeetingLinkLocator | GroupCallLocator | /* @conditional-compile-remove(rooms) */ RoomCallLocator;
/**
 * Common optional parameters to create {@link AzureCommunicationCallAdapter} or {@link TeamsCallAdapter}
 *
 * @public
 */
export type CommonCallAdapterOptions = {
    /**
     * Default set of background images for background image picker.
     */
    videoBackgroundOptions?: {
        videoBackgroundImages?: VideoBackgroundImage[];
        onResolveDependency?: () => Promise<VideoBackgroundEffectsDependency>;
    };
    /**
     * Sounds to use for calling events
     */
    callingSounds?: CallingSounds;
};
/**
 * Optional parameters to create {@link AzureCommunicationCallAdapter}
 *
 * @public
 */
export type AzureCommunicationCallAdapterOptions = CommonCallAdapterOptions;
/**
 * Arguments for creating the Azure Communication Services implementation of {@link CallAdapter}.
 *
 * Note: `displayName` can be a maximum of 256 characters.
 *
 * @public
 */
export type AzureCommunicationCallAdapterArgs = {
    userId: CommunicationUserIdentifier;
    displayName: string;
    credential: CommunicationTokenCredential;
    locator: CallAdapterLocator;
    /**
     * Optional parameters for the {@link AzureCommunicationCallAdapter} created
     */
    options?: AzureCommunicationCallAdapterOptions;
};
/**
 * Arguments for creating the Azure Communication Services implementation of {@link CallAdapter}.
 *
 * These arguments are used to create an outbound call scenarios.
 *
 * Note: `displayName` can be a maximum of 256 characters.
 *
 * @public
 */
export type AzureCommunicationOutboundCallAdapterArgs = {
    userId: CommunicationUserIdentifier;
    displayName: string;
    credential: CommunicationTokenCredential;
    targetCallees: StartCallIdentifier[];
    /**
     * Optional parameters for the {@link AzureCommunicationCallAdapter} created
     */
    options?: AzureCommunicationCallAdapterOptions;
};
/**
 * Optional parameters to create {@link TeamsCallAdapter}
 *
 * @public
 */
export type TeamsAdapterOptions = CommonCallAdapterOptions;
/**
 * Arguments for creating the Azure Communication Services implementation of {@link TeamsCallAdapter}.
 *
 * @beta
 */
export type TeamsCallAdapterArgs = {
    userId: MicrosoftTeamsUserIdentifier;
    credential: CommunicationTokenCredential;
    locator: TeamsMeetingLinkLocator;
    /**
     * Optional parameters for the {@link TeamsCallAdapter} created
     */
    options?: TeamsAdapterOptions;
};
/**
 * Create a {@link CallAdapter} backed by Azure Communication Services.
 *
 * This is the default implementation of {@link CallAdapter} provided by this library.
 *
 * Note: `displayName` can be a maximum of 256 characters.
 *
 * @public
 */
export declare function createAzureCommunicationCallAdapter(args: AzureCommunicationCallAdapterArgs): Promise<CallAdapter>;
/**
 * Create a {@link CallAdapter} backed by Azure Communication Services.
 *
 * This is the default implementation of {@link CallAdapter} provided by this library.
 *
 * Note: `displayName` can be a maximum of 256 characters.
 *
 * @public
 */
export declare function createAzureCommunicationCallAdapter(args: AzureCommunicationOutboundCallAdapterArgs): Promise<CallAdapter>;
/**
 * This inner function is used to allow injection of TelemetryImplementationHint without changing the public API.
 *
 * @internal
 */
export declare const _createAzureCommunicationCallAdapterInner: ({ userId, displayName, credential, locator, targetCallees, options, telemetryImplementationHint }: {
    userId: CommunicationUserIdentifier;
    displayName: string;
    credential: CommunicationTokenCredential;
    locator: CallAdapterLocator;
    targetCallees?: StartCallIdentifier[] | undefined;
    options?: CommonCallAdapterOptions | undefined;
    telemetryImplementationHint?: _TelemetryImplementationHint | undefined;
}) => Promise<CallAdapter>;
/**
 * A custom React hook to simplify the creation of {@link CallAdapter}.
 *
 * Similar to {@link createAzureCommunicationCallAdapter}, but takes care of asynchronous
 * creation of the adapter internally.
 *
 * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments
 * as they are created. The adapter is only created when all arguments are defined.
 *
 * Note that you must memoize the arguments to avoid recreating adapter on each render.
 * See storybook for typical usage examples.
 *
 * @public
 */
export declare const useAzureCommunicationCallAdapter: (args: Partial<AzureCommunicationCallAdapterArgs | AzureCommunicationOutboundCallAdapterArgs>, afterCreate?: ((adapter: CallAdapter) => Promise<CallAdapter>) | undefined, beforeDispose?: ((adapter: CallAdapter) => Promise<void>) | undefined) => CallAdapter | undefined;
/**
 * Create a {@link CallAdapter} using the provided {@link StatefulCallClient}.
 *
 * Useful if you want to keep a reference to {@link StatefulCallClient}.
 * Consider using {@link createAzureCommunicationCallAdapter} for a simpler API.
 *
 * @public
 */
export declare function createAzureCommunicationCallAdapterFromClient(callClient: StatefulCallClient, callAgent: CallAgent, targetCallees: StartCallIdentifier[], /* @conditional-compile-remove(video-background-effects) */ options?: AzureCommunicationCallAdapterOptions): Promise<CallAdapter>;
/**
 * Create a {@link CallAdapter} using the provided {@link StatefulCallClient}.
 *
 * Useful if you want to keep a reference to {@link StatefulCallClient}.
 * Consider using {@link createAzureCommunicationCallAdapter} for a simpler API.
 *
 * @public
 */
export declare function createAzureCommunicationCallAdapterFromClient(callClient: StatefulCallClient, callAgent: CallAgent, locator: CallAdapterLocator, /* @conditional-compile-remove(video-background-effects) */ options?: AzureCommunicationCallAdapterOptions): Promise<CallAdapter>;
export {};
//# sourceMappingURL=AzureCommunicationCallAdapter.d.ts.map