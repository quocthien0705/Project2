// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { toFlatCommunicationIdentifier } from "../../acs-ui-common/src";
/* @conditional-compile-remove(video-background-effects) */ /* @conditional-compile-remove(optimal-video-count) */
import { Features } from '@azure/communication-calling';
/**
 * @private
 */
export function convertSdkLocalStreamToDeclarativeLocalStream(stream) {
    /* @conditional-compile-remove(video-background-effects) */
    const localVideoStreamEffectsAPI = stream.feature(Features.VideoEffects);
    return {
        source: stream.source,
        mediaStreamType: stream.mediaStreamType,
        view: undefined,
        /* @conditional-compile-remove(video-background-effects) */
        videoEffects: convertFromSDKToDeclarativeVideoStreamVideoEffects(localVideoStreamEffectsAPI.activeEffects)
    };
}
/**
 * @private
 */
export function convertSdkRemoteStreamToDeclarativeRemoteStream(stream) {
    return {
        id: stream.id,
        mediaStreamType: stream.mediaStreamType,
        isAvailable: stream.isAvailable,
        view: undefined,
        streamSize: stream.size
    };
}
/**
 * @private
 */
export function convertSdkParticipantToDeclarativeParticipant(participant) {
    const declarativeVideoStreams = {};
    for (const videoStream of participant.videoStreams) {
        declarativeVideoStreams[videoStream.id] = convertSdkRemoteStreamToDeclarativeRemoteStream(videoStream);
    }
    return {
        identifier: participant.identifier,
        displayName: participant.displayName,
        state: participant.state,
        callEndReason: participant.callEndReason,
        videoStreams: declarativeVideoStreams,
        isMuted: participant.isMuted,
        isSpeaking: participant.isSpeaking,
        /* @conditional-compile-remove(raise-hand) */
        raisedHand: undefined
    };
}
/**
 * @private
 *
 * Note at the time of writing only one LocalVideoStream is supported by the SDK.
 */
export function convertSdkCallToDeclarativeCall(call) {
    const declarativeRemoteParticipants = {};
    call.remoteParticipants.forEach((participant) => {
        declarativeRemoteParticipants[toFlatCommunicationIdentifier(participant.identifier)] = convertSdkParticipantToDeclarativeParticipant(participant);
    });
    return {
        id: call.id,
        callerInfo: call.callerInfo,
        state: call.state,
        callEndReason: call.callEndReason,
        diagnostics: {
            network: {
                latest: {}
            },
            media: {
                latest: {}
            }
        },
        direction: call.direction,
        isMuted: call.isMuted,
        isScreenSharingOn: call.isScreenSharingOn,
        localVideoStreams: call.localVideoStreams.map(convertSdkLocalStreamToDeclarativeLocalStream),
        remoteParticipants: declarativeRemoteParticipants,
        remoteParticipantsEnded: {},
        recording: {
            isRecordingActive: false
        },
        /* @conditional-compile-remove(raise-hand) */
        raiseHand: {
            raisedHands: []
        },
        transcription: {
            isTranscriptionActive: false
        },
        screenShareRemoteParticipant: undefined,
        startTime: new Date(),
        endTime: undefined,
        /* @conditional-compile-remove(rooms) */
        role: call.role,
        /* @conditional-compile-remove(close-captions) */
        captionsFeature: {
            captions: [],
            supportedSpokenLanguages: [],
            supportedCaptionLanguages: [],
            currentCaptionLanguage: '',
            currentSpokenLanguage: '',
            isCaptionsFeatureActive: false,
            startCaptionsInProgress: false
        },
        /* @conditional-compile-remove(call-transfer) */
        transfer: {
            acceptedTransfers: {}
        },
        /* @conditional-compile-remove(optimal-video-count) */
        optimalVideoCount: {
            maxRemoteVideoStreams: call.feature(Features.OptimalVideoCount).optimalVideoCount
        }
    };
}
/**
 * @private
 */
export function convertSdkIncomingCallToDeclarativeIncomingCall(call) {
    return {
        id: call.id,
        callerInfo: call.callerInfo,
        startTime: new Date(),
        endTime: undefined
    };
}
/**
 * @private
 */
export function convertFromSDKToDeclarativeVideoStreamRendererView(view) {
    return {
        scalingMode: view.scalingMode,
        isMirrored: view.isMirrored,
        target: view.target
    };
}
/* @conditional-compile-remove(close-captions) */
/**
 * @private
 */
export function convertFromSDKToCaptionInfoState(caption) {
    return Object.assign({}, caption);
}
/* @conditional-compile-remove(video-background-effects) */
/** @private */
export function convertFromSDKToDeclarativeVideoStreamVideoEffects(videoEffects) {
    return {
        activeEffects: videoEffects
    };
}
/* @conditional-compile-remove(raise-hand) */
/**
 * @private
 */
export function convertFromSDKToRaisedHandState(raisedHand) {
    return {
        raisedHandOrderPosition: raisedHand.order
    };
}
//# sourceMappingURL=Converter.js.map