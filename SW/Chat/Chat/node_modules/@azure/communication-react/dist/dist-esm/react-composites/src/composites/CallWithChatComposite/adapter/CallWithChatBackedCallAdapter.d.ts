import { CallWithChatAdapter } from './CallWithChatAdapter';
import { CallAdapter, CallAdapterState } from '../../CallComposite';
import { VideoBackgroundImage, VideoBackgroundEffect } from '../../CallComposite';
import { CreateVideoStreamViewResult, VideoStreamOptions } from "../../../../../react-components/src";
import { AudioDeviceInfo, VideoDeviceInfo, Call, PermissionConstraints, StartCallOptions } from '@azure/communication-calling';
import { StartCaptionsOptions } from '@azure/communication-calling';
import { DtmfTone } from '@azure/communication-calling';
import { JoinCallOptions, StartCallIdentifier } from '../../CallComposite/adapter/CallAdapter';
/**
 * Facade around the CallWithChatAdapter to satisfy the call adapter interface.
 *
 * @private
 */
export declare class CallWithChatBackedCallAdapter implements CallAdapter {
    private callWithChatAdapter;
    private eventStore;
    constructor(callWithChatAdapter: CallWithChatAdapter);
    on: (event: any, listener: any) => void;
    off: (event: any, listener: any) => void;
    onStateChange: (handler: (state: CallAdapterState) => void) => void;
    offStateChange: (handler: (state: CallAdapterState) => void) => void;
    getState: () => CallAdapterState;
    dispose: () => void;
    joinCall: (options?: boolean | JoinCallOptions) => Call | undefined;
    leaveCall: (forEveryone?: boolean) => Promise<void>;
    startCall: (participants: (string | StartCallIdentifier)[], options: StartCallOptions) => Call | undefined;
    setCamera: (sourceId: VideoDeviceInfo, options?: VideoStreamOptions) => Promise<void>;
    setMicrophone: (sourceId: AudioDeviceInfo) => Promise<void>;
    setSpeaker: (sourceId: AudioDeviceInfo) => Promise<void>;
    askDevicePermission: (constraints: PermissionConstraints) => Promise<void>;
    queryCameras: () => Promise<VideoDeviceInfo[]>;
    queryMicrophones: () => Promise<AudioDeviceInfo[]>;
    querySpeakers: () => Promise<AudioDeviceInfo[]>;
    startCamera: (options?: VideoStreamOptions) => Promise<void>;
    stopCamera: () => Promise<void>;
    mute: () => Promise<void>;
    unmute: () => Promise<void>;
    startScreenShare: () => Promise<void>;
    stopScreenShare: () => Promise<void>;
    raiseHand: () => Promise<void>;
    lowerHand: () => Promise<void>;
    removeParticipant: (userId: string) => Promise<void>;
    createStreamView: (remoteUserId?: string, options?: VideoStreamOptions) => Promise<void | CreateVideoStreamViewResult>;
    disposeStreamView: (remoteUserId?: string, options?: VideoStreamOptions) => Promise<void>;
    disposeScreenShareStreamView(remoteUserId: string): Promise<void>;
    disposeRemoteVideoStreamView(remoteUserId: string): Promise<void>;
    disposeLocalVideoStreamView(): Promise<void>;
    sendDtmfTone: (dtmfTone: DtmfTone) => Promise<void>;
    startCaptions(options?: StartCaptionsOptions): Promise<void>;
    stopCaptions(): Promise<void>;
    setCaptionLanguage(language: string): Promise<void>;
    setSpokenLanguage(language: string): Promise<void>;
    startVideoBackgroundEffect(videoBackgroundEffect: VideoBackgroundEffect): Promise<void>;
    stopVideoBackgroundEffects(): Promise<void>;
    updateBackgroundPickerImages(backgroundImages: VideoBackgroundImage[]): void;
    updateSelectedVideoBackgroundEffect(selectedVideoBackground: VideoBackgroundEffect): void;
}
//# sourceMappingURL=CallWithChatBackedCallAdapter.d.ts.map