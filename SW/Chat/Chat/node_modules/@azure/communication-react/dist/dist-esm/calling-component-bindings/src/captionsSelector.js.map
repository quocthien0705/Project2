{"version":3,"file":"captionsSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/captionsSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* @conditional-compile-remove(close-captions) */\nimport { CallClientState, CaptionsInfo } from '@internal/calling-stateful-client';\n/* @conditional-compile-remove(close-captions) */\nimport { CallingBaseSelectorProps, getStartCaptionsInProgress, getSupportedCaptionLanguages } from './baseSelectors';\n/* @conditional-compile-remove(close-captions) */\nimport { getCaptions, getCaptionsStatus, getCurrentCaptionLanguage, getCurrentSpokenLanguage, getSupportedSpokenLanguages } from './baseSelectors';\n/* @conditional-compile-remove(close-captions) */\nimport * as reselect from 'reselect';\n/* @conditional-compile-remove(close-captions) */\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\n/* @conditional-compile-remove(close-captions) */\nimport { _CaptionsInfo, _SupportedCaptionLanguage, _SupportedSpokenLanguage } from '@internal/react-components';\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector type for the {@link StartCaptionsButton} component.\n * @internal\n */\nexport type _StartCaptionsButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  checked: boolean;\n  currentCaptionLanguage: string;\n  currentSpokenLanguage: string;\n};\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector for {@link StartCaptionsButton} component.\n *\n * @internal\n */\nexport const _startCaptionsButtonSelector: _StartCaptionsButtonSelector = reselect.createSelector([getCaptionsStatus, getCurrentCaptionLanguage, getCurrentSpokenLanguage], (isCaptionsFeatureActive, currentCaptionLanguage, currentSpokenLanguage) => {\n  return {\n    checked: isCaptionsFeatureActive ?? false,\n    currentCaptionLanguage: currentCaptionLanguage ?? '',\n    currentSpokenLanguage: currentSpokenLanguage ?? 'en-us'\n  };\n});\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector type for components for Changing caption language and spoken language\n * @internal\n */\nexport type _CaptionSettingsSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  supportedCaptionLanguages: _SupportedCaptionLanguage[];\n  currentCaptionLanguage: _SupportedCaptionLanguage;\n  supportedSpokenLanguages: _SupportedSpokenLanguage[];\n  currentSpokenLanguage: _SupportedSpokenLanguage;\n  isCaptionsFeatureActive: boolean;\n};\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector for Changing caption language and spoken language\n *\n * @internal\n */\nexport const _captionSettingsSelector: _CaptionSettingsSelector = reselect.createSelector([getSupportedCaptionLanguages, getCurrentCaptionLanguage, getSupportedSpokenLanguages, getCurrentSpokenLanguage, getCaptionsStatus], (supportedCaptionLanguages, currentCaptionLanguage, supportedSpokenLanguages, currentSpokenLanguage, isCaptionsFeatureActive) => {\n  return {\n    supportedCaptionLanguages: supportedCaptionLanguages ?? [],\n    currentCaptionLanguage: currentCaptionLanguage ?? 'en',\n    supportedSpokenLanguages: supportedSpokenLanguages ?? ['en-us'],\n    currentSpokenLanguage: currentSpokenLanguage ?? 'en-us',\n    isCaptionsFeatureActive: isCaptionsFeatureActive ?? false\n  };\n});\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector type for the {@link CaptionsBanner} component.\n * @internal\n */\nexport type _CaptionsBannerSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  captions: _CaptionsInfo[];\n  isCaptionsOn: boolean;\n};\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Selector for {@link CaptionsBanner} component.\n *\n * @internal\n */\nexport const _captionsBannerSelector: _CaptionsBannerSelector = reselect.createSelector([getCaptions, getCaptionsStatus, getStartCaptionsInProgress], (captions, isCaptionsFeatureActive, startCaptionsInProgress) => {\n  // Following Teams app logic, no matter how many 'Partial' captions come,\n  // we only pick first one according to start time, and all the other partial captions will be filtered out\n  // This will give customers a stable captions experience when others talking over the dominant speaker\n  const captionsToRender = captions?.filter(captions => captions.resultType === 'Final');\n  const firstPartialCaptions = captions?.filter(captions => captions.resultType === 'Partial').sort(captionsComparator)[0];\n  firstPartialCaptions && captionsToRender?.push(firstPartialCaptions);\n  const captionsInfo = captionsToRender?.map(c => {\n    const userId = getCaptionsSpeakerIdentifier(c);\n    return {\n      id: c.timestamp.getTime() + userId + c.speaker.displayName,\n      displayName: c.speaker.displayName ?? 'Unnamed Participant',\n      captionText: c.captionText ?? '',\n      userId\n    };\n  });\n  return {\n    captions: captionsInfo ?? [],\n    isCaptionsOn: isCaptionsFeatureActive ?? false,\n    startCaptionsInProgress: startCaptionsInProgress ?? false\n  };\n});\n\n/* @conditional-compile-remove(close-captions) */\nconst captionsComparator = (captionsA: CaptionsInfo, captionsB: CaptionsInfo): number => {\n  return captionsA.timestamp.getTime() - captionsB.timestamp.getTime() || getCaptionsSpeakerIdentifier(captionsA).localeCompare(getCaptionsSpeakerIdentifier(captionsB));\n};\n\n/* @conditional-compile-remove(close-captions) */\nconst getCaptionsSpeakerIdentifier = (captions: CaptionsInfo): string => {\n  return captions.speaker.identifier ? toFlatCommunicationIdentifier(captions.speaker.identifier) : '';\n};"]}