{"version":3,"file":"ChatMessageActionMenu.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/ChatMessage/ChatMessageActionMenu.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,IAAI,EAAS,MAAM,iBAAiB,CAAC;AAE9C,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AAOzE;;;;;GAKG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,SAU1C,EAA0C,EAAE;IAC3C,MAAM,EACJ,SAAS,EACT,OAAO,EACP,KAAK,EACL,YAAY,EACb,GAAG,SAAS,CAAC;IACd,4HAA4H;IAC5H,MAAM,cAAc,GAAG,OAAO,IAAI,YAAY,CAAC;IAC/C,MAAM,eAAe,GAA+B;QAClD,QAAQ,EAAE,6BAAK,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EACvD,GAAG,EAAC,YAAY,gBAAY,oCAAoC,EAAC,GAAG,EAAE,SAAS,CAAC,aAAa,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE;gBACjL,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM;aAC/C,EAAE,IAAI,EAAC,QAAQ,gBAAa,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,mBAAiB,cAAc,mBAEnF,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE;gBAC1C,iCAAiC;gBACjC,IAAI,cAAc,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC;oBAC3D,SAAS,CAAC,mBAAmB,EAAE,CAAC;gBAClC,CAAC;YACH,CAAC,IACI,cAAc,CAAC,CAAC,CAAC,oBAAC,IAAI,IAAC,QAAQ,EAAC,oBAAoB,gBAAa,SAAS,EAAE,MAAM,EAAE,gBAAgB,CAAC,KAAK,EAAE,YAAY,CAAC,GAAI,CAAC,CAAC,CAAC,SAAS,CACtI;KACT,CAAC;IACF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Icon, Theme } from '@fluentui/react';\nimport { MenuProps } from '@fluentui/react-components';\nimport React from 'react';\nimport { iconWrapperStyle } from '../styles/ChatMessageComponent.styles';\n\n/** @private */\nexport type ChatMessageActionMenuProps = MenuProps & {\n  showActionMenu?: boolean | undefined;\n};\n\n/**\n * Props for the Chat.Message action menu.\n * This is the 3 dots that appear when hovering over one of your own chat messages.\n *\n * @private\n */\nexport const chatMessageActionMenuProps = (menuProps: {\n  /** String for aria label that is read by Screen readers */\n  ariaLabel?: string;\n  /** Whether the action menu button is enabled, if not this will always return undefined */\n  enabled: boolean;\n  /** Whether the menu is shown */\n  menuExpanded: boolean;\n  menuButtonRef: React.MutableRefObject<HTMLDivElement | null>;\n  onActionButtonClick: () => void;\n  theme: Theme;\n}): ChatMessageActionMenuProps | undefined => {\n  const {\n    ariaLabel,\n    enabled,\n    theme,\n    menuExpanded\n  } = menuProps;\n  // Show the action button while the flyout is open (otherwise this will dismiss when the pointer is hovered over the flyout)\n  const showActionMenu = enabled || menuExpanded;\n  const actionMenuProps: ChatMessageActionMenuProps = {\n    children: <div tabIndex={showActionMenu ? 0 : undefined} //make div focusable, as Icon below is migrated to v9, this can be deleted\n    key=\"menuButton\" data-ui-id=\"chat-composite-message-action-icon\" ref={menuProps.menuButtonRef} onClick={showActionMenu ? () => menuProps.onActionButtonClick() : undefined} style={{\n      margin: showActionMenu ? '1px' : 0,\n      minHeight: showActionMenu ? undefined : '30px'\n    }} role=\"button\" aria-label={showActionMenu ? ariaLabel : undefined} aria-haspopup={showActionMenu}\n    // set expanded to true, only when the action menu is open\n    aria-expanded={menuExpanded} onKeyDown={e => {\n      // simulate <button> tag behavior\n      if (showActionMenu && (e.key === 'Enter' || e.key === ' ')) {\n        menuProps.onActionButtonClick();\n      }\n    }}>\n        {showActionMenu ? <Icon iconName=\"ChatMessageOptions\" aria-label={ariaLabel} styles={iconWrapperStyle(theme, menuExpanded)} /> : undefined}\n      </div>\n  };\n  return actionMenuProps;\n};"]}