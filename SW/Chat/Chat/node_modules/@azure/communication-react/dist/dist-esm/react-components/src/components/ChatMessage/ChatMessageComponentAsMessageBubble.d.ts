import { IStyle } from '@fluentui/react';
import React from 'react';
import { InlineImageOptions } from './ChatMessageContent';
import { ChatMessage } from '../../types/ChatMessage';
import { MessageThreadStrings } from '../MessageThread';
import { ComponentSlotStyle, OnRenderAvatarCallback } from '../../types';
import { MessageStatus } from "../../../../acs-ui-common/src";
type ChatMessageComponentAsMessageBubbleProps = {
    message: ChatMessage;
    messageContainerStyle?: ComponentSlotStyle;
    /** Styles for message status indicator container. */
    messageStatusContainer?: (mine: boolean) => IStyle;
    showDate?: boolean;
    disableEditing?: boolean;
    onEditClick: () => void;
    onRemoveClick?: () => void;
    onResendClick?: () => void;
    strings: MessageThreadStrings;
    userId: string;
    messageStatus?: string;
    /**
     * Whether the status indicator for each message is displayed or not.
     */
    showMessageStatus?: boolean;
    messageStatusRenderer?: (status: MessageStatus) => JSX.Element | null;
    /**
     * Whether to overlap avatar and message when the view is width constrained.
     */
    shouldOverlapAvatarAndMessage: boolean;
    remoteParticipantsCount?: number;
    onActionButtonClick: (message: ChatMessage, setMessageReadBy: (readBy: {
        id: string;
        displayName: string;
    }[]) => void) => void;
    /**
     * Optional callback to override render of the avatar.
     *
     * @param userId - user Id
     */
    onRenderAvatar?: OnRenderAvatarCallback;
    /**
     * Optional function to provide customized date format.
     * @beta
     */
    onDisplayDateTimeString?: (messageDate: Date) => string;
    /**
     * Optional callback called when an inline image is clicked.
     * @beta
     */
    inlineImageOptions?: InlineImageOptions;
};
/** @private */
export declare const ChatMessageComponentAsMessageBubble: React.MemoExoticComponent<(props: ChatMessageComponentAsMessageBubbleProps) => JSX.Element>;
export {};
//# sourceMappingURL=ChatMessageComponentAsMessageBubble.d.ts.map