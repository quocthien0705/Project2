{"version":3,"file":"LiveAnnouncer.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/Announcer/LiveAnnouncer.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,yGAAyG;AAEzG,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACpD,OAAO,SAAS,EAAE,EAAuB,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5E,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD,eAAe;AACf,MAAM,aAAa,GAAG,CAAC,KAEtB,EAAe,EAAE;IAChB,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAsB,aAAa,CAAC,CAAC;IAC7F,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAsB,aAAa,CAAC,CAAC;IACnG,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,OAAe,EAAE,EAAU,EAAE,EAAE;QACjE,gBAAgB,CAAC;YACf,OAAO;YACP,EAAE;SACH,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,iBAAiB,GAAG,WAAW,CAAC,CAAC,OAAe,EAAE,EAAU,EAAE,EAAE;QACpE,mBAAmB,CAAC;YAClB,OAAO;YACP,EAAE;SACH,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACrC,cAAc;QACd,iBAAiB;KAClB,CAAC,EAAE,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC,CAAC;IACzC,OAAO,oBAAC,gBAAgB,CAAC,QAAQ,IAAC,KAAK,EAAE,eAAe;QACnD,KAAK,CAAC,QAAQ;QACf,oBAAC,SAAS,IAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,EAAE,aAAa,GAAI,CACvC,CAAC;AACjC,CAAC,CAAC;AACF,eAAe,aAAa,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/// Adapted from: https://github.com/AlmeroSteyn/react-aria-live/blob/master/src/modules/LiveAnnouncer.js\n\nimport React, { useCallback, useMemo } from 'react';\nimport Announcer, { AnnouncerMessageBag, EMPTY_MESSAGE } from './Announcer';\nimport AnnouncerContext from './AnnouncerContext';\n\n/** @private */\nconst LiveAnnouncer = (props: {\n  children: React.ReactChild;\n}): JSX.Element => {\n  const [politeMessage, setPoliteMessage] = React.useState<AnnouncerMessageBag>(EMPTY_MESSAGE);\n  const [assertiveMessage, setAssertiveMessage] = React.useState<AnnouncerMessageBag>(EMPTY_MESSAGE);\n  const announcePolite = useCallback((message: string, id: string) => {\n    setPoliteMessage({\n      message,\n      id\n    });\n  }, []);\n  const announceAssertive = useCallback((message: string, id: string) => {\n    setAssertiveMessage({\n      message,\n      id\n    });\n  }, []);\n  const updateFunctions = useMemo(() => ({\n    announcePolite,\n    announceAssertive\n  }), [announceAssertive, announcePolite]);\n  return <AnnouncerContext.Provider value={updateFunctions}>\n      {props.children}\n      <Announcer assertive={assertiveMessage} polite={politeMessage} />\n    </AnnouncerContext.Provider>;\n};\nexport default LiveAnnouncer;"]}