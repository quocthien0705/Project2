// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { mergeStyles } from '@fluentui/react';
import { ArrowClockwise16Regular, CallEnd20Filled, Checkmark20Regular, CheckmarkCircle16Regular, Circle16Regular, Delete20Regular, Dismiss20Regular, Dismiss16Regular, Edit20Regular, ErrorCircle16Regular, Eye16Regular, MicOff16Filled, MicOff16Regular, MicOff20Filled, Mic16Filled, Mic20Filled, Mic20Regular, MoreHorizontal20Filled, MoreHorizontal20Regular, People20Filled, Settings20Filled, Send20Filled, Send20Regular, ShareScreenStart20Filled, ShareScreenStop20Filled, Speaker220Regular, Video16Filled, Video20Filled, Video20Regular, VideoOff20Filled, ChevronLeft20Regular, ChevronRight20Regular, WifiWarning20Filled, SpeakerMute16Filled, MicProhibited16Filled, VideoProhibited16Filled, Pin16Filled, Pin16Regular, PinOff16Regular, ScaleFit20Regular, ScaleFill20Regular } from '@fluentui/react-icons';
/* @conditional-compile-remove(raise-hand) */
import { HandRight20Filled, HandRightOff20Filled, HandRight20Regular, HandRightOff20Regular } from '@fluentui/react-icons';
/* @conditional-compile-remove(close-captions) */
import { ClosedCaption20Regular, ClosedCaptionOff20Regular, Settings20Regular, PersonVoice20Regular, Translate20Regular } from '@fluentui/react-icons';
/* @conditional-compile-remove(video-background-effects) */
import { VideoBackgroundEffect20Filled, VideoBackgroundEffect20Regular } from '@fluentui/react-icons';
/* @conditional-compile-remove(dialpad) */ /* @conditional-compile-remove(PSTN-calls) */
import { Backspace20Regular } from '@fluentui/react-icons';
/* @conditional-compile-remove(dialpad) */
import { People20Regular } from '@fluentui/react-icons';
import React from 'react';
import { useTheme } from './FluentThemeProvider';
const WifiWarning16Filled = () => 
// All ErrorBar icons are 16px x 16px (when 1rem = 16 px).
// There is no 16px version of this icon in the fluent icon package, so scale the larger
// one down to required size.
React.createElement("div", { className: mergeStyles({
        transform: 'scale(0.8)'
    }) },
    React.createElement(WifiWarning20Filled, null));
const MoreHorizontal18Regular = () => 
// MoreHorizontal icons are 16px x 16px or 20px x 20px so scaling to get desired size
React.createElement("div", { className: mergeStyles({
        transform: 'scale(0.9)'
    }) },
    React.createElement(MoreHorizontal20Regular, null));
const GalleryLeftButton = () => {
    const rtl = useTheme().rtl;
    return rtl ? React.createElement(ChevronRight20Regular, null) : React.createElement(ChevronLeft20Regular, null);
};
const GalleryRightButton = () => {
    const rtl = useTheme().rtl;
    return rtl ? React.createElement(ChevronLeft20Regular, null) : React.createElement(ChevronRight20Regular, null);
};
const ControlButtonRaiseHandIcon = () => {
    return React.createElement(HandRight20Filled, null);
};
const ControlButtonLowerHandIcon = () => {
    return React.createElement(HandRightOff20Filled, null);
};
/**
 * The default set of icons that are available to use in the UI components.
 *
 * @remark Icons used only in the composites are available in {@link DEFAULT_COMPOSITE_ICONS}.
 *
 * @public
 */
export const DEFAULT_COMPONENT_ICONS = {
    ChatMessageOptions: React.createElement(MoreHorizontal18Regular, null),
    ControlButtonCameraOff: React.createElement(VideoOff20Filled, null),
    ControlButtonCameraOn: React.createElement(Video20Filled, null),
    ControlButtonEndCall: React.createElement(CallEnd20Filled, null),
    ControlButtonMicOff: React.createElement(MicOff20Filled, null),
    ControlButtonMicOn: React.createElement(Mic20Filled, null),
    ControlButtonOptions: React.createElement(Settings20Filled, null),
    ControlButtonParticipants: React.createElement(People20Filled, null),
    /* @conditional-compile-remove(dialpad) */ /* @conditional-compile-remove(PSTN-calls) */
    ControlButtonParticipantsContextualMenuItem: React.createElement(People20Regular, null),
    ControlButtonScreenShareStart: React.createElement(ShareScreenStart20Filled, null),
    ControlButtonScreenShareStop: React.createElement(ShareScreenStop20Filled, null),
    /* @conditional-compile-remove(raise-hand) */
    ControlButtonRaiseHand: React.createElement(ControlButtonRaiseHandIcon, null),
    /* @conditional-compile-remove(raise-hand) */
    ControlButtonLowerHand: React.createElement(ControlButtonLowerHandIcon, null),
    /* @conditional-compile-remove(raise-hand) */
    RaiseHandContextualMenuItem: React.createElement(HandRight20Regular, null),
    /* @conditional-compile-remove(raise-hand) */
    LowerHandContextualMenuItem: React.createElement(HandRightOff20Regular, null),
    EditBoxCancel: React.createElement(Dismiss20Regular, null),
    EditBoxSubmit: React.createElement(Checkmark20Regular, null),
    ErrorBarCallCameraAccessDenied: React.createElement(VideoProhibited16Filled, null),
    ErrorBarCallCameraAlreadyInUse: React.createElement(VideoProhibited16Filled, null),
    ErrorBarCallLocalVideoFreeze: React.createElement(WifiWarning16Filled, null),
    ErrorBarCallMacOsCameraAccessDenied: React.createElement(VideoProhibited16Filled, null),
    ErrorBarCallMacOsMicrophoneAccessDenied: React.createElement(MicProhibited16Filled, null),
    ErrorBarCallMicrophoneAccessDenied: React.createElement(MicProhibited16Filled, null),
    ErrorBarCallMicrophoneMutedBySystem: React.createElement(MicOff16Filled, null),
    ErrorBarCallMicrophoneUnmutedBySystem: React.createElement(Mic16Filled, null),
    ErrorBarCallNetworkQualityLow: React.createElement(WifiWarning16Filled, null),
    ErrorBarCallNoMicrophoneFound: React.createElement(MicProhibited16Filled, null),
    ErrorBarCallNoSpeakerFound: React.createElement(SpeakerMute16Filled, null),
    ErrorBarClear: React.createElement(Dismiss16Regular, null),
    ErrorBarCallVideoRecoveredBySystem: React.createElement(Video16Filled, null),
    ErrorBarCallVideoStoppedBySystem: React.createElement(VideoProhibited16Filled, null),
    HorizontalGalleryLeftButton: React.createElement(GalleryLeftButton, null),
    HorizontalGalleryRightButton: React.createElement(GalleryRightButton, null),
    MessageDelivered: React.createElement(CheckmarkCircle16Regular, null),
    MessageEdit: React.createElement(Edit20Regular, null),
    MessageFailed: React.createElement(ErrorCircle16Regular, null),
    MessageRemove: React.createElement(Delete20Regular, null),
    MessageResend: React.createElement(ArrowClockwise16Regular, null),
    MessageSeen: React.createElement(Eye16Regular, null),
    MessageSending: React.createElement(Circle16Regular, null),
    OptionsCamera: React.createElement(Video20Regular, null),
    OptionsMic: React.createElement(Mic20Regular, null),
    OptionsSpeaker: React.createElement(Speaker220Regular, null),
    ParticipantItemMicOff: React.createElement(MicOff16Regular, null),
    ParticipantItemOptions: React.createElement(React.Fragment, null),
    ParticipantItemOptionsHovered: React.createElement(MoreHorizontal20Filled, null),
    ParticipantItemScreenShareStart: React.createElement(ShareScreenStart20Filled, null),
    SendBoxSend: React.createElement(Send20Regular, null),
    SendBoxSendHovered: React.createElement(Send20Filled, null),
    VideoTileMicOff: React.createElement(MicOff16Filled, null),
    /* @conditional-compile-remove(dialpad) */ /* @conditional-compile-remove(PSTN-calls) */
    DialpadBackspace: React.createElement(Backspace20Regular, null),
    VideoTilePinned: React.createElement(Pin16Filled, null),
    VideoTileMoreOptions: React.createElement(MoreHorizontal20Filled, null),
    VideoTileScaleFit: React.createElement(ScaleFit20Regular, null),
    VideoTileScaleFill: React.createElement(ScaleFill20Regular, null),
    PinParticipant: React.createElement(Pin16Regular, null),
    UnpinParticipant: React.createElement(PinOff16Regular, null),
    SplitButtonPrimaryActionCameraOn: React.createElement(Video20Filled, null),
    SplitButtonPrimaryActionCameraOff: React.createElement(VideoOff20Filled, null),
    SplitButtonPrimaryActionMicUnmuted: React.createElement(Mic20Filled, null),
    SplitButtonPrimaryActionMicMuted: React.createElement(MicOff20Filled, null),
    /* @conditional-compile-remove(vertical-gallery) */
    VerticalGalleryLeftButton: React.createElement(GalleryLeftButton, null),
    /* @conditional-compile-remove(vertical-gallery) */
    VerticalGalleryRightButton: React.createElement(GalleryRightButton, null),
    /* @conditional-compile-remove(video-background-effects) */
    ControlButtonVideoEffectsOption: React.createElement(VideoBackgroundEffect20Regular, null),
    /* @conditional-compile-remove(video-background-effects) */
    ConfigurationScreenVideoEffectsButton: React.createElement(VideoBackgroundEffect20Filled, null),
    /* @conditional-compile-remove(close-captions) */
    CaptionsIcon: React.createElement(ClosedCaption20Regular, null),
    /* @conditional-compile-remove(close-captions) */
    CaptionsOffIcon: React.createElement(ClosedCaptionOff20Regular, null),
    /* @conditional-compile-remove(close-captions) */
    CaptionsSettingsIcon: React.createElement(Settings20Regular, null),
    /* @conditional-compile-remove(close-captions) */
    ChangeSpokenLanguageIcon: React.createElement(PersonVoice20Regular, null),
    /* @conditional-compile-remove(close-captions) */
    ChangeCaptionLanguageIcon: React.createElement(Translate20Regular, null),
    ContextMenuCameraIcon: React.createElement(Video20Regular, null),
    ContextMenuMicIcon: React.createElement(Mic20Regular, null),
    ContextMenuSpeakerIcon: React.createElement(Speaker220Regular, null)
};
//# sourceMappingURL=icons.js.map