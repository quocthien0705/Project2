{"version":3,"file":"CaptionsSettingsModal.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/components/CaptionsSettingsModal.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useCallback } from 'react';\nimport { useMemo, useState, useEffect } from 'react';\nimport { IModalStyles, Modal, Stack, useTheme, Text, IconButton, Dropdown, IDropdownOption, DefaultButton, PrimaryButton } from '@fluentui/react';\nimport { buttonsContainerClassName, buttonStyles, dropdownContainerClassName, dropdownInfoTextStyle, dropdownStyles, themedCaptionsSettingsModalStyle, titleClassName, titleContainerClassName } from './styles/CaptionsSettingsModal.styles';\nimport { _captionsOptions } from './StartCaptionsButton';\nimport { defaultSpokenLanguage } from './utils';\nimport { SpokenLanguageStrings, CaptionLanguageStrings, _spokenLanguageToCaptionLanguage, _SupportedSpokenLanguage, _SupportedCaptionLanguage, SpokenLanguageDropdownOptions, CaptionLanguageDropdownOptions } from '../types';\nimport { _preventDismissOnEvent } from '@internal/acs-ui-common';\n\n/**\n * @internal\n * strings for captions setting modal\n */\nexport interface _CaptionsSettingsModalStrings {\n  captionsSettingsModalTitle?: string;\n  captionsSettingsSpokenLanguageDropdownLabel?: string;\n  captionsSettingsCaptionLanguageDropdownLabel?: string;\n  captionsSettingsSpokenLanguageDropdownInfoText?: string;\n  captionsSettingsCaptionLanguageDropdownInfoText?: string;\n  captionsSettingsConfirmButtonLabel?: string;\n  captionsSettingsCancelButtonLabel?: string;\n  captionsSettingsModalAriaLabel?: string;\n  captionsSettingsCloseModalButtonAriaLabel?: string;\n}\n\n/**\n * @internal\n * _CaptionsSettingsModal Component Props.\n */\nexport interface _CaptionsSettingsModalProps {\n  supportedSpokenLanguages: _SupportedSpokenLanguage[];\n  supportedCaptionLanguages: _SupportedCaptionLanguage[];\n  onSetSpokenLanguage: (language: _SupportedSpokenLanguage) => Promise<void>;\n  onSetCaptionLanguage: (language: _SupportedCaptionLanguage) => Promise<void>;\n  onStartCaptions: (options?: _captionsOptions) => Promise<void>;\n  currentSpokenLanguage: _SupportedSpokenLanguage;\n  currentCaptionLanguage: _SupportedCaptionLanguage;\n  spokenLanguageStrings?: SpokenLanguageStrings;\n  captionLanguageStrings?: CaptionLanguageStrings;\n  isCaptionsFeatureActive?: boolean;\n  strings?: _CaptionsSettingsModalStrings;\n  showModal?: boolean;\n  onDismissCaptionsSettings?: () => void;\n  changeCaptionLanguage?: boolean;\n}\n\n/**\n * @internal\n * a component for setting spoken languages\n */\nexport const _CaptionsSettingsModal = (props: _CaptionsSettingsModalProps): JSX.Element => {\n  const {\n    supportedSpokenLanguages,\n    supportedCaptionLanguages,\n    currentSpokenLanguage,\n    currentCaptionLanguage,\n    isCaptionsFeatureActive,\n    showModal,\n    onSetSpokenLanguage,\n    onSetCaptionLanguage,\n    onDismissCaptionsSettings,\n    onStartCaptions,\n    strings,\n    spokenLanguageStrings,\n    captionLanguageStrings,\n    changeCaptionLanguage = false\n  } = props;\n  const theme = useTheme();\n  const [hasSetSpokenLanguage, setHasSetSpokenLanguage] = useState(false);\n  const [selectedSpokenLanguage, setSelectedSpokenLanguage] = useState<SpokenLanguageDropdownOptions>({\n    key: currentSpokenLanguage || defaultSpokenLanguage,\n    text: currentSpokenLanguage || defaultSpokenLanguage\n  });\n  const [selectedCaptionLanguage, setSelectedCaptionLanguage] = useState<CaptionLanguageDropdownOptions>({\n    key: currentCaptionLanguage || _spokenLanguageToCaptionLanguage[selectedSpokenLanguage.key],\n    text: currentCaptionLanguage || _spokenLanguageToCaptionLanguage[selectedSpokenLanguage.key]\n  });\n  useEffect(() => {\n    // set spoken language when start captions with a spoken language specified.\n    // this is to fix the bug when a second user starts captions with a new spoken language, captions bot ignore that spoken language\n    if (isCaptionsFeatureActive && !hasSetSpokenLanguage) {\n      onSetSpokenLanguage(selectedSpokenLanguage.key);\n      // we only need to call set spoken language once when first starting captions\n      setHasSetSpokenLanguage(true);\n    }\n  }, [isCaptionsFeatureActive, onSetSpokenLanguage, selectedSpokenLanguage.key, hasSetSpokenLanguage]);\n  const onDismiss = useCallback((): void => {\n    if (onDismissCaptionsSettings) {\n      onDismissCaptionsSettings();\n    }\n  }, [onDismissCaptionsSettings]);\n  const onConfirm = useCallback(async (): Promise<void> => {\n    const spokenLanguageCode = selectedSpokenLanguage.key;\n    const captionLanguageCode = selectedCaptionLanguage.key;\n    if (isCaptionsFeatureActive) {\n      onSetSpokenLanguage(spokenLanguageCode);\n      onSetCaptionLanguage(captionLanguageCode);\n    } else {\n      await onStartCaptions({\n        spokenLanguage: spokenLanguageCode\n      });\n    }\n    onDismiss();\n  }, [onDismiss, isCaptionsFeatureActive, onSetSpokenLanguage, onSetCaptionLanguage, onStartCaptions, selectedSpokenLanguage.key, selectedCaptionLanguage.key]);\n  const spokenLanguageDropdownOptions: IDropdownOption[] = useMemo(() => {\n    return supportedSpokenLanguages.map(languageCode => {\n      return {\n        key: languageCode,\n        text: spokenLanguageStrings ? spokenLanguageStrings[languageCode] : languageCode\n      };\n    });\n  }, [supportedSpokenLanguages, spokenLanguageStrings]);\n  const captionLanguageDropdownOptions: IDropdownOption[] = useMemo(() => {\n    return supportedCaptionLanguages.map(languageCode => {\n      return {\n        key: languageCode,\n        text: captionLanguageStrings ? captionLanguageStrings[languageCode] : languageCode\n      };\n    });\n  }, [supportedCaptionLanguages, captionLanguageStrings]);\n  const sortedSpokenLanguageDropdownOptions: IDropdownOption[] = useMemo(() => {\n    const copy = [...spokenLanguageDropdownOptions];\n    return copy.sort((a, b) => a.text > b.text ? 1 : -1);\n  }, [spokenLanguageDropdownOptions]);\n  const sortedCaptionLanguageDropdownOptions: IDropdownOption[] = useMemo(() => {\n    const copy = [...captionLanguageDropdownOptions];\n    return copy.sort((a, b) => a.text > b.text ? 1 : -1);\n  }, [captionLanguageDropdownOptions]);\n  const onSpokenLanguageChange = (event: React.FormEvent<HTMLDivElement>, option: SpokenLanguageDropdownOptions | undefined): void => {\n    if (option) {\n      setSelectedSpokenLanguage(option);\n    }\n  };\n  const onCaptionLanguageChange = (event: React.FormEvent<HTMLDivElement>, option: CaptionLanguageDropdownOptions | undefined): void => {\n    if (option) {\n      setSelectedCaptionLanguage(option);\n    }\n  };\n  const calloutProps = useMemo(() => ({\n    preventDismissOnEvent: _preventDismissOnEvent\n  }), []);\n  const CaptionsSettingsComponent = useCallback((): JSX.Element => {\n    const placeholderSpokenLanguage = currentSpokenLanguage ?? defaultSpokenLanguage;\n    const placeholderCaptionLanguage = currentCaptionLanguage ?? _spokenLanguageToCaptionLanguage[placeholderSpokenLanguage];\n    return <Stack>\n        <Dropdown label={strings?.captionsSettingsSpokenLanguageDropdownLabel} selectedKey={selectedSpokenLanguage ? selectedSpokenLanguage.key : undefined} onChange={(ev, option) => onSpokenLanguageChange(ev, (option as SpokenLanguageDropdownOptions))} calloutProps={calloutProps} placeholder={placeholderSpokenLanguage} options={sortedSpokenLanguageDropdownOptions} styles={dropdownStyles} />\n        <Text className={dropdownInfoTextStyle(theme)}>{strings?.captionsSettingsSpokenLanguageDropdownInfoText}</Text>\n        {changeCaptionLanguage && <>\n            <Dropdown label={strings?.captionsSettingsCaptionLanguageDropdownLabel} selectedKey={selectedCaptionLanguage ? selectedCaptionLanguage.key : undefined} onChange={(ev, option) => onCaptionLanguageChange(ev, (option as CaptionLanguageDropdownOptions))} calloutProps={calloutProps} placeholder={placeholderCaptionLanguage} options={sortedCaptionLanguageDropdownOptions} styles={dropdownStyles} />\n            <Text className={dropdownInfoTextStyle(theme)}>\n              {strings?.captionsSettingsCaptionLanguageDropdownInfoText}\n            </Text>\n          </>}\n      </Stack>;\n  }, [calloutProps, currentSpokenLanguage, currentCaptionLanguage, sortedSpokenLanguageDropdownOptions, sortedCaptionLanguageDropdownOptions, selectedCaptionLanguage, selectedSpokenLanguage, strings?.captionsSettingsSpokenLanguageDropdownInfoText, strings?.captionsSettingsCaptionLanguageDropdownLabel, strings?.captionsSettingsSpokenLanguageDropdownLabel, strings?.captionsSettingsCaptionLanguageDropdownInfoText, theme, changeCaptionLanguage]);\n  const CaptionsSettingsModalStyle: Partial<IModalStyles> = useMemo(() => themedCaptionsSettingsModalStyle(theme), [theme]);\n  return <>\n      {<Modal titleAriaId={strings?.captionsSettingsModalAriaLabel} isOpen={showModal} onDismiss={onDismiss} isBlocking={true} styles={CaptionsSettingsModalStyle}>\n          <Stack horizontal horizontalAlign=\"space-between\" verticalAlign=\"center\" className={titleContainerClassName}>\n            <Text className={titleClassName}>{strings?.captionsSettingsModalTitle}</Text>\n            <IconButton iconProps={{\n          iconName: 'Cancel'\n        }} ariaLabel={strings?.captionsSettingsCloseModalButtonAriaLabel} onClick={onDismiss} style={{\n          color: theme.palette.black\n        }} />\n          </Stack>\n\n          <Stack className={dropdownContainerClassName}>{CaptionsSettingsComponent()}</Stack>\n          <Stack horizontal horizontalAlign=\"end\" className={buttonsContainerClassName}>\n            <PrimaryButton styles={buttonStyles(theme)} onClick={onConfirm}>\n              <span>{strings?.captionsSettingsConfirmButtonLabel}</span>\n            </PrimaryButton>\n            <DefaultButton onClick={onDismiss} styles={buttonStyles(theme)}>\n              <span>{strings?.captionsSettingsCancelButtonLabel}</span>\n            </DefaultButton>\n          </Stack>\n        </Modal>}\n    </>;\n};"]}