// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DevicesButton } from "../../../../../../react-components/src";
import React, { useMemo } from 'react';
import { usePropsFor } from '../../hooks/usePropsFor';
import { concatButtonBaseStyles, devicesButtonWithIncreasedTouchTargets } from '../../styles/Buttons.styles';
/* @conditional-compile-remove(rooms) */
import { useLocale } from '../../../localization';
import { _HighContrastAwareIcon } from "../../../../../../react-components/src";
/* @conditional-compile-remove(rooms) */
import { useAdapter } from '../../adapter/CallAdapterProvider';
/** @private */
export const Devices = (props) => {
    var _a, _b;
    const devicesButtonProps = usePropsFor(DevicesButton);
    /* @conditional-compile-remove(rooms) */
    const adapter = useAdapter();
    /* @conditional-compile-remove(rooms) */
    const role = (_b = (_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.role) !== null && _b !== void 0 ? _b : 'Unknown';
    const augmentedDeviceButtonProps = useMemo(() => (Object.assign(Object.assign({}, devicesButtonProps), { 
        /* @conditional-compile-remove(rooms) */
        microphones: role === 'Consumer' ? [] : devicesButtonProps.microphones, 
        /* @conditional-compile-remove(rooms) */
        cameras: role === 'Consumer' ? [] : devicesButtonProps.cameras })), [devicesButtonProps, /* @conditional-compile-remove(rooms) */
        role]);
    const styles = useMemo(() => { var _a; return concatButtonBaseStyles(props.increaseFlyoutItemSize ? devicesButtonWithIncreasedTouchTargets : {}, (_a = props.styles) !== null && _a !== void 0 ? _a : {}); }, [props.increaseFlyoutItemSize, props.styles]);
    /* @conditional-compile-remove(rooms) */
    const locale = useLocale();
    /* @conditional-compile-remove(rooms) */
    const onlyManageSpeakers = role === 'Consumer';
    /* @conditional-compile-remove(rooms) */
    const onRenderDevicesIcon = () => {
        return React.createElement(_HighContrastAwareIcon, { disabled: props.disabled, iconName: "OptionsSpeaker" });
    };
    return React.createElement(DevicesButton
    /* By setting `persistMenu?` to true, we prevent options menu from getting hidden every time a participant joins or leaves. */ , Object.assign({ 
        /* By setting `persistMenu?` to true, we prevent options menu from getting hidden every time a participant joins or leaves. */ persistMenu: true }, augmentedDeviceButtonProps, { showLabel: props.displayType !== 'compact', styles: styles, "data-ui-id": "calling-composite-devices-button", disabled: props.disabled, 
        /* @conditional-compile-remove(rooms) */ strings: getLabelFromRole(role, locale), 
        /* @conditional-compile-remove(rooms) */ onRenderIcon: onlyManageSpeakers ? onRenderDevicesIcon : undefined }));
};
/* @conditional-compile-remove(rooms) */
const getLabelFromRole = (role, locale) => {
    if (role === 'Consumer') {
        return {
            label: locale.component.strings.microphoneButton.speakerMenuTitle
        };
    }
    return undefined;
};
//# sourceMappingURL=Devices.js.map