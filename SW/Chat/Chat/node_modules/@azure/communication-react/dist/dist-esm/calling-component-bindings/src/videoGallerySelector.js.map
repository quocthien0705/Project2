{"version":3,"file":"videoGallerySelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/videoGallerySelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { CallClientState, RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { VideoGalleryRemoteParticipant, VideoGalleryLocalParticipant } from '@internal/react-components';\nimport { createSelector } from 'reselect';\nimport { CallingBaseSelectorProps, getDisplayName, getDominantSpeakers, getIdentifier, getIsMuted, getIsScreenSharingOn, getLocalVideoStreams, getScreenShareRemoteParticipant } from './baseSelectors';\n/* @conditional-compile-remove(rooms) */\nimport { getRole } from './baseSelectors';\n/* @conditional-compile-remove(optimal-video-count) */\nimport { getOptimalVideoCount } from './baseSelectors';\nimport { _updateUserDisplayNames } from './utils/callUtils';\nimport { checkIsSpeaking } from './utils/SelectorUtils';\nimport { _videoGalleryRemoteParticipantsMemo, _dominantSpeakersWithFlatId, convertRemoteParticipantToVideoGalleryRemoteParticipant, memoizeLocalParticipant } from './utils/videoGalleryUtils';\n/* @conditional-compile-remove(raise-hand) */\nimport { getLocalParticipantRaisedHand } from './baseSelectors';\nimport { getRemoteParticipantsExcludingConsumers } from './getRemoteParticipantsExcludingConsumers';\n/**\n * Selector type for {@link VideoGallery} component.\n *\n * @public\n */\nexport type VideoGallerySelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  screenShareParticipant?: VideoGalleryRemoteParticipant;\n  localParticipant: VideoGalleryLocalParticipant;\n  remoteParticipants: VideoGalleryRemoteParticipant[];\n  dominantSpeakers?: string[];\n  /* @conditional-compile-remove(optimal-video-count) */\n  optimalVideoCount?: number;\n};\n\n/**\n * Provides data attributes to {@link VideoGallery} component.\n * @public\n */\nexport const videoGallerySelector: VideoGallerySelector = createSelector([getScreenShareRemoteParticipant, getRemoteParticipantsExcludingConsumers, getLocalVideoStreams, getIsMuted, getIsScreenSharingOn, getDisplayName, getIdentifier, getDominantSpeakers, /* @conditional-compile-remove(optimal-video-count) */\ngetOptimalVideoCount, /* @conditional-compile-remove(rooms) */\ngetRole, /* @conditional-compile-remove(raise-hand) */\ngetLocalParticipantRaisedHand], (screenShareRemoteParticipantId, remoteParticipants, localVideoStreams, isMuted, isScreenSharingOn, displayName: string | undefined, identifier: string, dominantSpeakers, /* @conditional-compile-remove(optimal-video-count) */\noptimalVideoCount, /* @conditional-compile-remove(rooms) */\nrole, /* @conditional-compile-remove(raise-hand) */\nraisedHand) => {\n  const screenShareRemoteParticipant = screenShareRemoteParticipantId && remoteParticipants ? remoteParticipants[screenShareRemoteParticipantId] : undefined;\n  const localVideoStream = localVideoStreams?.find(i => i.mediaStreamType === 'Video');\n  const dominantSpeakerIds = _dominantSpeakersWithFlatId(dominantSpeakers);\n  const dominantSpeakersMap: Record<string, number> = {};\n  dominantSpeakerIds?.forEach((speaker, idx) => dominantSpeakersMap[speaker] = idx);\n  const noRemoteParticipants: RemoteParticipantState[] = [];\n  return {\n    screenShareParticipant: screenShareRemoteParticipant ? convertRemoteParticipantToVideoGalleryRemoteParticipant(toFlatCommunicationIdentifier(screenShareRemoteParticipant.identifier), screenShareRemoteParticipant.isMuted, checkIsSpeaking(screenShareRemoteParticipant), screenShareRemoteParticipant.videoStreams, screenShareRemoteParticipant.state, screenShareRemoteParticipant.displayName, /* @conditional-compile-remove(raise-hand) */\n    screenShareRemoteParticipant.raisedHand) : undefined,\n    localParticipant: memoizeLocalParticipant(identifier, displayName, isMuted, isScreenSharingOn, localVideoStream, /* @conditional-compile-remove(rooms) */\n    role, /* @conditional-compile-remove(raise-hand) */\n    raisedHand),\n    remoteParticipants: _videoGalleryRemoteParticipantsMemo(updateUserDisplayNamesTrampoline(remoteParticipants ? Object.values(remoteParticipants) : noRemoteParticipants)),\n    dominantSpeakers: dominantSpeakerIds,\n    /* @conditional-compile-remove(optimal-video-count) */\n    maxRemoteVideoStreams: optimalVideoCount\n  };\n});\nconst updateUserDisplayNamesTrampoline = (remoteParticipants: RemoteParticipantState[]): RemoteParticipantState[] => {\n  return remoteParticipants;\n};"]}