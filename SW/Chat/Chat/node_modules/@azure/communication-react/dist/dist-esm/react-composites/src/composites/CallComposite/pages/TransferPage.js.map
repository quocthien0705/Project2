{"version":3,"file":"TransferPage.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/pages/TransferPage.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Spinner, SpinnerSize, Stack, Text, mergeStyles } from '@fluentui/react';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { ErrorBar } from '@internal/react-components';\n/* @conditional-compile-remove(call-transfer) */\nimport { Announcer } from '@internal/react-components';\nimport React, { useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\n/* @conditional-compile-remove(call-transfer) */\nimport { useEffect } from 'react';\nimport { AvatarPersona, AvatarPersonaDataCallback } from '../../common/AvatarPersona';\nimport { useLocale } from '../../localization';\nimport { CallArrangement } from '../components/CallArrangement';\nimport { usePropsFor } from '../hooks/usePropsFor';\nimport { useSelector } from '../hooks/useSelector';\nimport { getRemoteParticipants } from '../selectors/baseSelectors';\n/* @conditional-compile-remove(call-transfer) */\nimport { getTransferCall } from '../selectors/baseSelectors';\nimport { avatarStyles, defaultPersonaStyles, displayNameStyles, pageContainer, spinnerStyles, statusTextStyles, tileContainerStyles, tileContentStyles } from '../styles/TransferPage.styles';\nimport { reduceCallControlsForMobile } from '../utils';\nimport { LobbyPageProps } from './LobbyPage';\n\n/* @conditional-compile-remove(call-transfer) */\n// Which should be participant shown in the transfer page\ntype TransferPageSubject = 'transferor' | 'transferTarget';\n\n/**\n * @private\n */\nexport const TransferPage = (props: LobbyPageProps & {\n  /** Callback function that can be used to provide custom data to Persona Icon rendered */\n  onFetchAvatarPersonaData?: AvatarPersonaDataCallback;\n}): JSX.Element => {\n  const errorBarProps = usePropsFor(ErrorBar);\n  const strings = useLocale().strings.call;\n  const remoteParticipants = useSelector(getRemoteParticipants);\n  /* @conditional-compile-remove(call-transfer) */\n  const transferCall = useSelector(getTransferCall);\n\n  /* @conditional-compile-remove(call-transfer) */\n  const [announcerString, setAnnouncerString] = useState<string | undefined>(undefined);\n\n  // Reduce the controls shown when mobile view is enabled.\n  const callControlOptions = props.mobileView ? reduceCallControlsForMobile(props.options?.callControls) : props.options?.callControls;\n  const transferor = useMemo(() => remoteParticipants ? Object.values(remoteParticipants)?.[0] : undefined, [remoteParticipants]);\n  /* @conditional-compile-remove(call-transfer) */\n  const transferTarget = useMemo(() => transferCall?.remoteParticipants ? Object.values(transferCall.remoteParticipants)?.[0] : undefined, [transferCall]);\n\n  /* @conditional-compile-remove(call-transfer) */\n  const pageSubject: TransferPageSubject = useMemo(() => {\n    if (transferCall && transferTarget?.displayName) {\n      return 'transferTarget';\n    }\n    return 'transferor';\n  }, [transferCall, transferTarget?.displayName]);\n\n  /* @conditional-compile-remove(call-transfer) */\n  useEffect(() => {\n    setAnnouncerString(strings.transferPageNoticeString);\n  }, [strings.transferPageNoticeString]);\n  let transferTileParticipant = transferor;\n  /* @conditional-compile-remove(call-transfer) */\n  if (pageSubject === 'transferTarget') {\n    transferTileParticipant = transferTarget;\n  }\n  let transferParticipantDisplayName = transferor?.displayName ?? /* @conditional-compile-remove(call-transfer) */strings.transferPageUnknownTransferorDisplayName;\n  /* @conditional-compile-remove(call-transfer) */\n  if (pageSubject === 'transferTarget') {\n    transferParticipantDisplayName = transferTarget?.displayName ?? strings.transferPageUnknownTransferTargetDisplayName;\n  }\n  return <Stack className={mergeStyles(pageContainer)}>\n      {/* @conditional-compile-remove(call-transfer) */\n    <Announcer announcementString={announcerString} ariaLive=\"polite\" />}\n      <CallArrangement complianceBannerProps={{\n      strings\n    }}\n    // Ignore errors from before current call. This avoids old errors from showing up when a user re-joins a call.\n    errorBarProps={props.options?.errorBar !== false && errorBarProps} callControlProps={{\n      options: callControlOptions,\n      increaseFlyoutItemSize: props.mobileView\n    }} mobileView={props.mobileView} modalLayerHostId={props.modalLayerHostId} onRenderGalleryContent={() => <TransferTile userId={transferTileParticipant ? toFlatCommunicationIdentifier(transferTileParticipant?.identifier) : undefined} displayName={transferParticipantDisplayName} initialsName={transferParticipantDisplayName}\n    /* @conditional-compile-remove(call-transfer) */ statusText={pageSubject === 'transferTarget' ? strings.transferPageTransferTargetText : strings.transferPageTransferorText} onFetchAvatarPersonaData={props.onFetchAvatarPersonaData} />} dataUiId={'transfer-page'} updateSidePaneRenderer={props.updateSidePaneRenderer} mobileChatTabHeader={props.mobileChatTabHeader} latestErrors={props.latestErrors} onDismissError={props.onDismissError} />\n    </Stack>;\n};\ninterface TransferTileProps {\n  /** React Child components. Child Components will show as overlay component in the VideoTile. */\n  children?: React.ReactNode;\n  /** User id for `onFetchAvatarPersonaData` callback to provide custom data to avatars rendered */\n  userId?: string;\n  /** Callback function that can be used to provide custom data to Persona Icon rendered */\n  onFetchAvatarPersonaData?: AvatarPersonaDataCallback;\n  /**\n   * Display name of the transferor or transfer target to be shown in the label.\n   * @remarks `displayName` is used to generate avatar initials if `initialsName` is not provided.\n   */\n  displayName?: string;\n  /**\n   * Name of the transferor or transfer target used to generate initials for the avatar. For example, a name\n   * `John Doe` will display `JD` as initials.\n   * @remarks `displayName` is used if this property is not specified.\n   */\n  initialsName?: string;\n  /** Optional property to set the status of the transfer process */\n  statusText?: string;\n}\nconst TransferTile = (props: TransferTileProps): JSX.Element => {\n  const {\n    displayName,\n    initialsName,\n    userId,\n    onFetchAvatarPersonaData,\n    statusText\n  } = props;\n  const [personaSize, setPersonaSize] = useState<number>();\n  const tileRef = useRef<HTMLDivElement>(null);\n  const observer = useRef(new ResizeObserver((entries): void => {\n    const {\n      width,\n      height\n    } = entries[0].contentRect;\n    const personaSize = Math.min(width, height) / 2;\n    setPersonaSize(Math.max(Math.min(personaSize, 150), 32));\n  }));\n  useLayoutEffect(() => {\n    if (tileRef.current) {\n      observer.current.observe(tileRef.current);\n    }\n    const currentObserver = observer.current;\n    return () => currentObserver.disconnect();\n  }, [observer, tileRef]);\n  const placeholderOptions = useMemo(() => ({\n    userId,\n    text: initialsName ?? displayName,\n    coinSize: personaSize,\n    styles: defaultPersonaStyles,\n    hidePersonaDetails: true\n  }), [userId, initialsName, displayName, personaSize]);\n  const defaultOnRenderAvatar = useCallback(() => {\n    return personaSize ? <AvatarPersona {...placeholderOptions} dataProvider={onFetchAvatarPersonaData} className={mergeStyles(avatarStyles)} /> : <></>;\n  }, [placeholderOptions, onFetchAvatarPersonaData, personaSize]);\n  const defaultAvatar = useMemo(() => defaultOnRenderAvatar(), [defaultOnRenderAvatar]);\n  return <div ref={tileRef} className={mergeStyles(tileContainerStyles)} data-is-focusable={true}>\n      <Stack className={mergeStyles(tileContentStyles)} tokens={{\n      childrenGap: '1rem'\n    }}>\n        <Stack horizontalAlign=\"center\" tokens={{\n        childrenGap: '0.5rem'\n      }}>\n          {defaultAvatar}\n          <Text className={mergeStyles(displayNameStyles)}>{displayName}</Text>\n        </Stack>\n        <Stack horizontal horizontalAlign=\"center\" verticalAlign=\"center\" tokens={{\n        childrenGap: '0.5rem'\n      }}>\n          <Spinner size={SpinnerSize.large} className={mergeStyles(spinnerStyles)} />\n          <Text className={mergeStyles(statusTextStyles)}>{statusText}</Text>\n        </Stack>\n      </Stack>\n    </div>;\n};"]}