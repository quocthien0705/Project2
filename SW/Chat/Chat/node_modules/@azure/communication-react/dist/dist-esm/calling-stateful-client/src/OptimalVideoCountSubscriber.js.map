{"version":3,"file":"OptimalVideoCountSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/OptimalVideoCountSubscriber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAWlC,sDAAsD;AACtD;;;GAGG;AACH,MAAM,OAAO,2BAA2B;IAItC,YAAY,IAIX;QAMO,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,8BAA8B,CAAC,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACpG,CAAC,CAAC;QACK,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACrG,CAAC,CAAC;QACM,6BAAwB,GAAG,GAAS,EAAE;YAC5C,IAAI,CAAC,4BAA4B,CAAC;gBAChC,qBAAqB,EAAE,IAAI,CAAC,8BAA8B,CAAC,iBAAiB;aAC7E,CAAC,CAAC;QACL,CAAC,CAAC;QACM,iCAA4B,GAAG,CAAC,yBAAwD,EAAQ,EAAE;YACxG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;QAC9G,CAAC,CAAC;QAlBA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,6BAA6B,CAAC;QACzE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CAeF;AAED,oCAAoC;AACpC,eAAe,EAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* @conditional-compile-remove(optimal-video-count) */\nimport { OptimalVideoCountCallFeature } from '@azure/communication-calling';\n/* @conditional-compile-remove(optimal-video-count) */\nimport { OptimalVideoCountFeatureState } from './CallClientState';\n/* @conditional-compile-remove(optimal-video-count) */\nimport { CallContext } from './CallContext';\n/* @conditional-compile-remove(optimal-video-count) */\nimport { CallIdRef } from './CallIdRef';\n\n/* @conditional-compile-remove(optimal-video-count) */\n/**\n * Subscribes to a Optimal Video Count Feature events and updates the call context appropriately.\n * @private\n */\nexport class OptimalVideoCountSubscriber {\n  private _callIdRef: CallIdRef;\n  private _context: CallContext;\n  private _localOptimalVideoCountFeature: OptimalVideoCountCallFeature;\n  constructor(args: {\n    callIdRef: CallIdRef;\n    context: CallContext;\n    localOptimalVideoCountFeature: OptimalVideoCountCallFeature;\n  }) {\n    this._callIdRef = args.callIdRef;\n    this._context = args.context;\n    this._localOptimalVideoCountFeature = args.localOptimalVideoCountFeature;\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._localOptimalVideoCountFeature.on('optimalVideoCountChanged', this.optimalVideoCountChanged);\n  };\n  public unsubscribe = (): void => {\n    this._localOptimalVideoCountFeature.off('optimalVideoCountChanged', this.optimalVideoCountChanged);\n  };\n  private optimalVideoCountChanged = (): void => {\n    this.updateOptimalVideoCountState({\n      maxRemoteVideoStreams: this._localOptimalVideoCountFeature.optimalVideoCount\n    });\n  };\n  private updateOptimalVideoCountState = (newOptimalVideoCountState: OptimalVideoCountFeatureState): void => {\n    this._context.setOptimalVideoCount(this._callIdRef.callId, newOptimalVideoCountState.maxRemoteVideoStreams);\n  };\n}\n\n// Exporting empty object for stable\nexport default {};"]}