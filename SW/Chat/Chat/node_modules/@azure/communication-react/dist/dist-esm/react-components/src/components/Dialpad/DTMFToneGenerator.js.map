{"version":3,"file":"DTMFToneGenerator.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/Dialpad/DTMFToneGenerator.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Class for playing individual DTMF Tones.\n *\n * @internal\n */\nexport class Tone {\n  private context: AudioContext;\n  private frequency1: number;\n  private frequency2: number;\n  private oscillatorNode1?: OscillatorNode;\n  private oscillatorNode2?: OscillatorNode;\n  private isPlaying: boolean = false;\n  constructor(context: AudioContext, frequency1: number, frequency2: number) {\n    this.context = context;\n    this.frequency1 = frequency1;\n    this.frequency2 = frequency2;\n  }\n\n  /**\n   * Function to play the tone. will create new ocillators because they are one use objects so we need to make\n   * new ones every time we play a tone.\n   */\n  public play = (): void => {\n    if (this.isPlaying) {\n      return;\n    }\n    const gainNode = this.context.createGain();\n    gainNode.gain.value = 0.1;\n    gainNode.connect(this.context.destination);\n    this.oscillatorNode1 = this.context.createOscillator();\n    this.oscillatorNode1.frequency.value = this.frequency1;\n    this.oscillatorNode1.connect(gainNode);\n    this.oscillatorNode2 = this.context.createOscillator();\n    this.oscillatorNode2.frequency.value = this.frequency2;\n    this.oscillatorNode2.connect(gainNode);\n    this.oscillatorNode1.start();\n    this.oscillatorNode2.start();\n    this.isPlaying = true;\n  };\n\n  /**\n   * Function to stop the tone.\n   */\n  public stop = (): void => {\n    if (this.oscillatorNode1 && this.oscillatorNode2) {\n      this.oscillatorNode1.stop();\n      this.oscillatorNode2.stop();\n      this.oscillatorNode1.disconnect();\n      this.oscillatorNode2.disconnect();\n      this.isPlaying = false;\n    }\n  };\n}\n\n/**\n * Mapping of the different dtmf frequencies that are needed for the creation of sound that\n * matches the dtmf tones.\n *\n * @internal\n */\nexport const dtmfFrequencies = {\n  '1': {\n    f1: 697,\n    f2: 1209\n  },\n  '2': {\n    f1: 697,\n    f2: 1336\n  },\n  '3': {\n    f1: 697,\n    f2: 1477\n  },\n  '4': {\n    f1: 770,\n    f2: 1209\n  },\n  '5': {\n    f1: 770,\n    f2: 1336\n  },\n  '6': {\n    f1: 770,\n    f2: 1477\n  },\n  '7': {\n    f1: 852,\n    f2: 1209\n  },\n  '8': {\n    f1: 852,\n    f2: 1336\n  },\n  '9': {\n    f1: 852,\n    f2: 1477\n  },\n  '*': {\n    f1: 941,\n    f2: 1209\n  },\n  '0': {\n    f1: 941,\n    f2: 1336\n  },\n  '#': {\n    f1: 941,\n    f2: 1477\n  }\n};\n\n/**\n * Key of the mapping of the different dtmf frequencies that are needed for the creation of sound that\n * matches the dtmf tones.\n *\n * @internal\n */\nexport type DtmfFrequenciesKeys = keyof typeof dtmfFrequencies;"]}