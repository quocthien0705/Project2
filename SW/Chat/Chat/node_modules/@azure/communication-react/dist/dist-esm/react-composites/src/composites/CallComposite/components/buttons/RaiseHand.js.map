{"version":3,"file":"RaiseHand.js","sourceRoot":"","sources":["../../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/buttons/RaiseHand.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAA0B,eAAe,EAAwB,+CAAmC;AAC3G,6CAA6C;AAC7C,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAGvC,6CAA6C;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,6CAA6C;AAC7C,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,6CAA6C;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,6CAA6C;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAC9D,6CAA6C;AAC7C,OAAO,EAAE,sBAAsB,EAAE,yDAA6C;AAE9E,6CAA6C;AAC7C,eAAe;AACf,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAQzB,EAAe,EAAE;IAChB,MAAM,oBAAoB,GAAI,WAAW,CAAC,eAAe,CAA0B,CAAC;IACpF,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,WAAC,OAAA,sBAAsB,CAAC,MAAA,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAA,EAAA,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACzF,IAAI,uBAAuB,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACvD,IAAI,sBAAsB,CAAC,UAAU,CAAC,EAAE,CAAC;QACvC,uBAAuB,GAAG,IAAI,CAAC;IACjC,CAAC;IACD,OAAO,oBAAC,eAAe,gCAAY,iCAAiC,IAAK,oBAAoB,IAAE,SAAS,EAAE,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE,QAAQ,EAAE,uBAAuB,IAAI,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC;AACrN,CAAC,CAAC;AAEF,6CAA6C;AAC7C,MAAM,UAAU,GAAG,CAAC,MAEnB,EAAW,EAAE;IACZ,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;QAChE,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,MAAM,CAAC,QAAQ,CAAC;AACzB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ControlBarButtonStyles, RaiseHandButton, RaiseHandButtonProps } from '@internal/react-components';\n/* @conditional-compile-remove(raise-hand) */\nimport React, { useMemo } from 'react';\n/* @conditional-compile-remove(raise-hand) */\nimport { CallControlDisplayType } from '../../../common/types/CommonCallControlOptions';\n/* @conditional-compile-remove(raise-hand) */\nimport { usePropsFor } from '../../hooks/usePropsFor';\n/* @conditional-compile-remove(raise-hand) */\nimport { concatButtonBaseStyles } from '../../styles/Buttons.styles';\n/* @conditional-compile-remove(raise-hand) */\nimport { useSelector } from '../../hooks/useSelector';\n/* @conditional-compile-remove(raise-hand) */\nimport { getCallStatus } from '../../selectors/baseSelectors';\n/* @conditional-compile-remove(raise-hand) */\nimport { _isInLobbyOrConnecting } from '@internal/calling-component-bindings';\n\n/* @conditional-compile-remove(raise-hand) */\n/** @private */\nexport const RaiseHand = (props: {\n  // The value of `CallControlOptions.raiseHandButton`.\n  option?: boolean | {\n    disabled: boolean;\n  };\n  displayType?: CallControlDisplayType;\n  styles?: ControlBarButtonStyles;\n  disabled?: boolean;\n}): JSX.Element => {\n  const raiseHandButtonProps = (usePropsFor(RaiseHandButton) as RaiseHandButtonProps);\n  const callStatus = useSelector(getCallStatus);\n  const styles = useMemo(() => concatButtonBaseStyles(props.styles ?? {}), [props.styles]);\n  let raiseHandButtonDisabled = isDisabled(props.option);\n  if (_isInLobbyOrConnecting(callStatus)) {\n    raiseHandButtonDisabled = true;\n  }\n  return <RaiseHandButton data-ui-id=\"call-composite-raisehand-button\" {...raiseHandButtonProps} showLabel={props.displayType !== 'compact'} disabled={raiseHandButtonDisabled || props.disabled} styles={styles} />;\n};\n\n/* @conditional-compile-remove(raise-hand) */\nconst isDisabled = (option?: boolean | {\n  disabled: boolean;\n}): boolean => {\n  if (option === undefined || option === true || option === false) {\n    return false;\n  }\n  return option.disabled;\n};"]}