{"version":3,"file":"AnnouncerMessage.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/Announcer/AnnouncerMessage.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,4GAA4G;AAE5G,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC/C,OAAO,EAAE,EAAE,IAAI,UAAU,EAAE,MAAM,MAAM,CAAC;AAExC,eAAe;AACf,MAAM,gBAAgB,GAAG,CAAC,KAMzB,EAAQ,EAAE;IACT,MAAM,EACJ,OAAO,EACP,QAAQ,EACR,cAAc,EACd,iBAAiB,EACjB,cAAc,EACf,GAAG,KAAK,CAAC;IACV,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;QAChC,IAAI,QAAQ,KAAK,WAAW,EAAE,CAAC;YAC7B,iBAAiB,CAAC,OAAO,IAAI,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,cAAc,CAAC,OAAO,IAAI,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,EAAE,CAAC,iBAAiB,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAC3D,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,EAAE,CAAC;QACX,OAAO,GAAG,EAAE;YACV,IAAI,cAAc,EAAE,CAAC;gBACnB,iBAAiB,CAAC,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;gBACpC,cAAc,CAAC,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACnC,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC,CAAC;IAC3E,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF,eAAe,gBAAgB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/// Adapted from: https://github.com/AlmeroSteyn/react-aria-live/blob/master/src/modules/AnnouncerMessage.js\n\nimport { useCallback, useEffect } from 'react';\nimport { v1 as createGUID } from 'uuid';\n\n/** @private */\nconst AnnouncerMessage = (props: {\n  message: string;\n  ariaLive: string;\n  clearOnUnmount?: boolean;\n  announceAssertive: (message: string, id: string) => void;\n  announcePolite: (message: string, id: string) => void;\n}): null => {\n  const {\n    message,\n    ariaLive,\n    clearOnUnmount,\n    announceAssertive,\n    announcePolite\n  } = props;\n  const announce = useCallback(() => {\n    if (ariaLive === 'assertive') {\n      announceAssertive(message || '', createGUID());\n    }\n    if (ariaLive === 'polite') {\n      announcePolite(message || '', createGUID());\n    }\n  }, [announceAssertive, announcePolite, ariaLive, message]);\n  useEffect(() => {\n    announce();\n    return () => {\n      if (clearOnUnmount) {\n        announceAssertive('', createGUID());\n        announcePolite('', createGUID());\n      }\n    };\n  }, [message, clearOnUnmount, announce, announceAssertive, announcePolite]);\n  return null;\n};\nexport default AnnouncerMessage;"]}