{"version":3,"file":"ResourceDownloadQueue.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/ResourceDownloadQueue.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\nimport { ChatContext } from './ChatContext';\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\nimport { ChatMessageWithStatus, ResourceFetchResult } from './types/ChatMessageWithStatus';\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\nimport type { CommunicationTokenCredential } from '@azure/communication-common';\ndeclare type CancellationDetails = {\n  src: string;\n  abortController: AbortController;\n};\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\n/**\n * @private\n */\nexport class ResourceDownloadQueue {\n  private _messagesNeedingResourceRetrieval: ChatMessageWithStatus[] = [];\n  private _context: ChatContext;\n  private isActive = false;\n  private _credential: CommunicationTokenCredential;\n  private _endpoint: string;\n  private _requestsToCancel: Record<string, CancellationDetails> = {};\n  constructor(context: ChatContext, authentication: {\n    credential: CommunicationTokenCredential;\n    endpoint: string;\n  }) {\n    this._context = context;\n    this._credential = authentication.credential;\n    this._endpoint = authentication.endpoint;\n  }\n  public containsMessageWithSameAttachments(message: ChatMessageWithStatus): boolean {\n    let contains = false;\n    const incomingAttachment = message.content?.attachments;\n    if (incomingAttachment) {\n      for (const m of this._messagesNeedingResourceRetrieval) {\n        const existingAttachment = m.content?.attachments ?? [];\n        contains = incomingAttachment.every((element, index) => element === existingAttachment[index]);\n        if (contains) {\n          break;\n        }\n      }\n    }\n    return contains;\n  }\n  public addMessage(message: ChatMessageWithStatus): void {\n    // make a copy of message and add to queue\n    const copy = {\n      ...message\n    };\n    this._messagesNeedingResourceRetrieval.push(copy);\n  }\n  public async startQueue(threadId: string, operation: ImageRequest, options?: {\n    singleUrl: string;\n  }): Promise<void> {\n    if (this.isActive) {\n      return;\n    }\n    while (this._messagesNeedingResourceRetrieval.length > 0) {\n      this.isActive = true;\n      let message = this._messagesNeedingResourceRetrieval.shift();\n      if (!message) {\n        this.isActive = false;\n        continue;\n      }\n      if (options) {\n        const singleUrl = options.singleUrl;\n        message = await this.downloadSingleUrl(message, singleUrl, operation);\n      } else {\n        message = await this.downloadAllPreviewUrls(message, operation);\n      }\n      this._context.setChatMessage(threadId, message);\n      this.isActive = false;\n    }\n  }\n  public cancelAllRequests(): void {\n    for (const key in this._requestsToCancel) {\n      this._requestsToCancel[key].abortController.abort();\n    }\n    this._requestsToCancel = {};\n  }\n  public cancelRequest(url: string): void {\n    if (this._requestsToCancel[url]) {\n      this._requestsToCancel[url].abortController.abort();\n      delete this._requestsToCancel[url];\n    }\n  }\n  private async downloadSingleUrl(message: ChatMessageWithStatus, resourceUrl: string, operation: ImageRequest): Promise<ChatMessageWithStatus> {\n    const response: ResourceFetchResult = {\n      sourceUrl: ''\n    };\n    try {\n      const abortController = new AbortController();\n      const blobUrl = await this.downloadResource(operation, resourceUrl, abortController);\n      response.sourceUrl = blobUrl;\n    } catch (error) {\n      response.error = (error as Error);\n      delete this._requestsToCancel[resourceUrl];\n    }\n    message = {\n      ...message,\n      resourceCache: {\n        ...message.resourceCache,\n        [resourceUrl]: response\n      }\n    };\n    return message;\n  }\n  private async downloadAllPreviewUrls(message: ChatMessageWithStatus, operation: ImageRequest): Promise<ChatMessageWithStatus> {\n    const attachments = message.content?.attachments;\n    if (message.type === 'html' && attachments) {\n      if (message.resourceCache === undefined) {\n        message.resourceCache = {};\n      }\n      for (const attachment of attachments) {\n        if (attachment.previewUrl && attachment.attachmentType === 'image') {\n          const response: ResourceFetchResult = {\n            sourceUrl: ''\n          };\n          try {\n            const abortController = new AbortController();\n            const blobUrl = await this.downloadResource(operation, attachment.previewUrl, abortController);\n            response.sourceUrl = blobUrl;\n          } catch (error) {\n            response.error = (error as Error);\n            delete this._requestsToCancel[attachment.previewUrl];\n          }\n          message.resourceCache[attachment.previewUrl] = response;\n        }\n      }\n    }\n    return message;\n  }\n  private async downloadResource(operation: ImageRequest, url: string, abortController: AbortController): Promise<string> {\n    this._requestsToCancel[url] = {\n      src: url,\n      abortController\n    };\n    const blobUrl = await operation(url, {\n      credential: this._credential,\n      endpoint: this._endpoint\n    }, {\n      abortController\n    });\n    delete this._requestsToCancel[url];\n    return blobUrl;\n  }\n}\n\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\n/**\n * @private\n */\nexport const fetchImageSource = async (src: string, authentication: {\n  credential: CommunicationTokenCredential;\n  endpoint: string;\n}, options: {\n  abortController: AbortController;\n  timeout?: number;\n}): Promise<string> => {\n  async function fetchWithAuthentication(url: string, token: string, options: {\n    abortController: AbortController;\n    timeout?: number;\n  }): Promise<Response> {\n    const headers = new Headers();\n    headers.append('Authorization', `Bearer ${token}`);\n    return await fetchWithTimeout(url, {\n      timeout: options.timeout,\n      headers,\n      abortController: options.abortController\n    });\n  }\n  async function fetchWithTimeout(resource: string | URL | Request, options: {\n    timeout?: number;\n    headers?: Headers;\n    abortController: AbortController;\n  }): Promise<Response> {\n    // default timeout is 30 seconds\n    const {\n      timeout = 30000,\n      abortController\n    } = options;\n    const id = setTimeout(() => {\n      abortController.abort();\n    }, timeout);\n    const response = await fetch(resource, {\n      ...options,\n      signal: abortController.signal\n    });\n    clearTimeout(id);\n    return response;\n  }\n  const fetchUrl = new URL(src);\n  const endpoint = new URL(authentication.endpoint);\n  let token = '';\n  if (fetchUrl.hostname === endpoint.hostname && fetchUrl.protocol === 'https:') {\n    token = (await authentication.credential.getToken()).token;\n  }\n  const response = await fetchWithAuthentication(src, token, options);\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n/* @conditional-compile-remove(teams-inline-images-and-file-sharing) */\ninterface ImageRequest {\n  (request: string, authentication: {\n    credential: CommunicationTokenCredential;\n    endpoint: string;\n  }, options: {\n    abortController: AbortController;\n    timeout?: number;\n  }): Promise<string>;\n}"]}