{"version":3,"file":"CallAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/CallAdapter.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AA4BlC;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAwB,CAAC,0BAA0B,EAAE,8BAA8B,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CallState, DeviceManagerState } from '@internal/calling-stateful-client';\n/* @conditional-compile-remove(close-captions) */\nimport { CaptionsInfo } from '@internal/calling-stateful-client';\n/* @conditional-compile-remove(video-background-effects) */\nimport type { BackgroundBlurConfig, BackgroundReplacementConfig } from '@azure/communication-calling';\n/* @conditional-compile-remove(capabilities) */\nimport type { CapabilitiesChangeInfo } from '@azure/communication-calling';\n/* @conditional-compile-remove(call-transfer) */\nimport { TransferEventArgs } from '@azure/communication-calling';\n/* @conditional-compile-remove(close-captions) */\nimport { StartCaptionsOptions } from '@azure/communication-calling';\nimport type { AudioDeviceInfo, VideoDeviceInfo, Call, PermissionConstraints, RemoteParticipant, StartCallOptions, MediaDiagnosticChangedEventArgs, NetworkDiagnosticChangedEventArgs, PropertyChangedEvent } from '@azure/communication-calling';\nimport { CreateVideoStreamViewResult, VideoStreamOptions } from '@internal/react-components';\nimport type { CommunicationIdentifierKind, MicrosoftTeamsAppIdentifier, UnknownIdentifier } from '@azure/communication-common';\nimport { DtmfTone } from '@azure/communication-calling';\nimport { CommunicationIdentifier } from '@azure/communication-common';\nimport type { AdapterState, Disposable, AdapterError, AdapterErrors } from '../../common/adapters';\n/* @conditional-compile-remove(video-background-effects) */\nimport { VideoBackgroundEffectsDependency } from '@internal/calling-component-bindings';\n/**\n * Major UI screens shown in the {@link CallComposite}.\n *\n * @public\n */\nexport type CallCompositePage = 'accessDeniedTeamsMeeting' | 'call' | 'configuration' | 'joinCallFailedDueToNoNetwork' | 'leftCall' | 'leaving' | 'lobby' | 'removedFromCall' | /* @conditional-compile-remove(call-transfer) */'transferring';\n\n/**\n * Subset of CallCompositePages that represent an end call state.\n * @private\n */\nexport const END_CALL_PAGES: CallCompositePage[] = ['accessDeniedTeamsMeeting', 'joinCallFailedDueToNoNetwork', 'leftCall', 'removedFromCall'];\n\n/**\n * {@link CommonCallAdapter} state for pure UI purposes.\n *\n * @public\n */\nexport type CallAdapterUiState = {\n  isLocalPreviewMicrophoneEnabled: boolean;\n  page: CallCompositePage;\n};\n\n/**\n * Identifier types for initiating a call using the CallAdapter\n * @public\n */\nexport type StartCallIdentifier = (MicrosoftTeamsAppIdentifier | UnknownIdentifier);\n\n/**\n * {@link CommonCallAdapter} state inferred from Azure Communication Services backend.\n *\n * @public\n */\nexport type CallAdapterClientState = {\n  userId: CommunicationIdentifierKind;\n  displayName?: string;\n  call?: CallState;\n  /* @conditional-compile-remove(calling-sounds) */\n  /**\n   * State to track who the original call went out to. will be undefined the call is not a outbound\n   * modality. This includes, groupCalls, Rooms calls, and Teams InteropMeetings.\n   */\n  targetCallees?: CommunicationIdentifier[];\n  devices: DeviceManagerState;\n  endedCall?: CallState;\n  isTeamsCall: boolean;\n  /* @conditional-compile-remove(rooms) */\n  /**\n   * State to track whether the call is a rooms call.\n   */\n  isRoomsCall: boolean;\n  /**\n   * Latest error encountered for each operation performed via the adapter.\n   */\n  latestErrors: AdapterErrors;\n  /**\n   * State to track whether the local participant's camera is on. To be used when creating a custom\n   * control bar with the CallComposite.\n   */\n  cameraStatus?: 'On' | 'Off';\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Default set of background images for background replacement effect.\n   */\n  videoBackgroundImages?: VideoBackgroundImage[];\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Dependency to be injected for video background effect.\n   */\n  onResolveVideoEffectDependency?: () => Promise<VideoBackgroundEffectsDependency>;\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * State to track the selected video background effect.\n   */\n  selectedVideoBackgroundEffect?: VideoBackgroundEffect;\n  /* @conditional-compile-remove(call-transfer) */\n  /**\n   * Call from transfer request accepted by local user\n   */\n  acceptedTransferCallState?: CallState;\n  /* @conditional-compile-remove(calling-sounds) */\n  /**\n   * State to track the sounds to be used in the call.\n   */\n  sounds?: CallingSounds;\n};\n\n/**\n * {@link CommonCallAdapter} state.\n *\n * @public\n */\nexport type CallAdapterState = CallAdapterUiState & CallAdapterClientState;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'participantsJoined' event.\n *\n * @public\n */\nexport type ParticipantsJoinedListener = (event: {\n  joined: RemoteParticipant[];\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'participantsLeft' event.\n *\n * @public\n */\nexport type ParticipantsLeftListener = (event: {\n  removed: RemoteParticipant[];\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isMuted' event.\n *\n * @public\n */\nexport type IsMutedChangedListener = (event: {\n  identifier: CommunicationIdentifierKind;\n  isMuted: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'callIdChanged' event.\n *\n * @public\n */\nexport type CallIdChangedListener = (event: {\n  callId: string;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isLocalScreenSharingActiveChanged' event.\n *\n * @public\n */\nexport type IsLocalScreenSharingActiveChangedListener = (event: {\n  isScreenSharingOn: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isSpeakingChanged' event.\n *\n * @public\n */\nexport type IsSpeakingChangedListener = (event: {\n  identifier: CommunicationIdentifierKind;\n  isSpeaking: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'displayNameChanged' event.\n *\n * @public\n */\nexport type DisplayNameChangedListener = (event: {\n  participantId: CommunicationIdentifierKind;\n  displayName: string;\n}) => void;\n\n/**\n * Payload for {@link CallEndedListener} containing details on the ended call.\n *\n * @public\n */\nexport type CallAdapterCallEndedEvent = {\n  callId: string;\n};\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'callEnded' event.\n *\n * @public\n */\nexport type CallEndedListener = (event: CallAdapterCallEndedEvent) => void;\n\n/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a media diagnostic.\n *\n * @public\n */\nexport type MediaDiagnosticChangedEvent = MediaDiagnosticChangedEventArgs & {\n  type: 'media';\n};\n\n/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a network diagnostic.\n *\n * @public\n */\nexport type NetworkDiagnosticChangedEvent = NetworkDiagnosticChangedEventArgs & {\n  type: 'network';\n};\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'diagnosticChanged' event.\n *\n * @public\n */\nexport type DiagnosticChangedEventListner = (event: MediaDiagnosticChangedEvent | NetworkDiagnosticChangedEvent) => void;\n\n/* @conditional-compile-remove(video-background-effects) */\n/**\n * Contains the attibutes of a background image like url, name etc.\n *\n * @public\n */\nexport interface VideoBackgroundImage {\n  /**\n   * key for unique identification of the custom background\n   */\n  key: string;\n  /**\n   * URL of the uploaded background image.\n   */\n  url: string;\n  /**\n   * Image name to be displayed.\n   */\n  tooltipText?: string;\n}\n\n/**\n * @public\n * Type for representing a custom sound to use for a calling event\n */\nexport type SoundEffect = {\n  /**\n   * Path to sound effect\n   */\n  url: string;\n};\n\n/**\n * @public\n * Type for representing a set of sounds to use for different calling events\n */\nexport type CallingSounds = {\n  /**\n   * Sound to be played when the call ends\n   */\n  callEnded?: SoundEffect;\n  /**\n   * Sound to be played when the call is ringing\n   */\n  callRinging?: SoundEffect;\n  /**\n   * Sound to be played when the call is rejected by the user being callede\n   */\n  callBusy?: SoundEffect;\n};\n\n/**\n * Options for setting microphone and camera state when joining a call\n * true = turn on the device when joining call\n * false = turn off the device when joining call\n * 'keep'/undefined = retain devices' precall state\n *\n * @public\n */\nexport interface JoinCallOptions {\n  /**\n   * microphone state when joining call\n   * true: turn on\n   * false: turn off\n   * 'keep': maintain precall state\n   */\n  microphoneOn?: boolean | 'keep';\n  /**\n   * camera state when joining call\n   * true: turn on\n   * false: turn off\n   * 'keep': maintain precall state\n   */\n  cameraOn?: boolean | 'keep';\n}\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'captionsReceived' event.\n *\n * @public\n */\nexport type CaptionsReceivedListener = (event: {\n  captionsInfo: CaptionsInfo;\n}) => void;\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'isCaptionsActiveChanged' event.\n *\n * @public\n */\nexport type IsCaptionsActiveChangedListener = (event: {\n  isActive: boolean;\n}) => void;\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'isCaptionLanguageChanged' event.\n *\n * @public\n */\nexport type IsCaptionLanguageChangedListener = (event: {\n  activeCaptionLanguage: string;\n}) => void;\n\n/* @conditional-compile-remove(close-captions) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'isSpokenLanguageChanged' event.\n *\n * @public\n */\nexport type IsSpokenLanguageChangedListener = (event: {\n  activeSpokenLanguage: string;\n}) => void;\n\n/* @conditional-compile-remove(call-transfer) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'transferRequested' event.\n *\n * @public\n */\nexport type TransferAcceptedListener = (event: TransferEventArgs) => void;\n\n/* @conditional-compile-remove(capabilities) */\n/**\n * Callback for {@link CallAdapterSubscribers} 'capabilitiesChanged' event.\n *\n * @public\n */\nexport type CapabilitiesChangedListener = (data: CapabilitiesChangeInfo) => void;\n/* @conditional-compile-remove(video-background-effects) */\n/**\n * Contains the attibutes of a selected video background effect\n *\n * @public\n */\nexport type VideoBackgroundEffect = VideoBackgroundNoEffect | VideoBackgroundBlurEffect | VideoBackgroundReplacementEffect;\n\n/**\n * Contains the attibutes to remove video background effect\n *\n * @public\n */\nexport interface VideoBackgroundNoEffect {\n  /**\n   * Name of effect to remove video background effect\n   */\n  effectName: 'none';\n}\n\n/* @conditional-compile-remove(video-background-effects) */\n/**\n * Contains the attibutes of the blur video background effect\n *\n * @public\n */\nexport interface VideoBackgroundBlurEffect extends BackgroundBlurConfig {\n  /**\n   * Name of effect to blur video background effect\n   */\n  effectName: 'blur';\n}\n\n/* @conditional-compile-remove(video-background-effects) */\n/**\n * Contains the attibutes of a selected replacement video background effect\n *\n * @public\n */\nexport interface VideoBackgroundReplacementEffect extends BackgroundReplacementConfig {\n  /**\n   * Name of effect to replace video background effect\n   */\n  effectName: 'replacement';\n  /**\n   * key for unique identification of the custom background\n   */\n  key?: string;\n}\n\n/**\n * Functionality for managing the current call.\n *\n * @public\n */\nexport interface CallAdapterCallOperations {\n  /**\n   * Leave the call\n   *\n   * @param forEveryone - Whether to remove all participants when leaving\n   *\n   * @public\n   */\n  leaveCall(forEveryone?: boolean): Promise<void>;\n  /**\n   * Start the camera\n   * This method will start rendering a local camera view when the call is not active\n   *\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  startCamera(options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Stop the camera\n   * This method will stop rendering a local camera view when the call is not active\n   *\n   * @public\n   */\n  stopCamera(): Promise<void>;\n  /**\n   * Mute the current user during the call or disable microphone locally\n   *\n   * @public\n   */\n  mute(): Promise<void>;\n  /**\n   * Unmute the current user during the call or enable microphone locally\n   *\n   * @public\n   */\n  unmute(): Promise<void>;\n  /**\n   * Start sharing the screen during a call.\n   *\n   * @public\n   */\n  startScreenShare(): Promise<void>;\n  /* @conditional-compile-remove(raise-hand) */\n  /**\n   * Raise hand for current user\n   *\n   * @public\n   */\n  raiseHand(): Promise<void>;\n  /* @conditional-compile-remove(raise-hand) */\n  /**\n   * lower hand for current user\n   *\n   * @public\n   */\n  lowerHand(): Promise<void>;\n  /**\n   * Stop sharing the screen\n   *\n   * @public\n   */\n  stopScreenShare(): Promise<void>;\n  /**\n   * Remove a participant from the call.\n   *\n   * @param userId - Id of the participant to be removed\n   *\n   * @public\n   */\n  removeParticipant(userId: string): Promise<void>;\n  /**\n   * Create the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to create the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  createStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>;\n  /**\n   * Dispose the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite\n   *\n   * @deprecated Use {@link disposeRemoteVideoStreamView}, {@link disposeLocalVideoStreamView} and {@link disposeRemoteVideoStreamView} instead.\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to dispose the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  disposeStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Dispose the html view for a screen share stream\n   *\n   * @remarks\n   * this method is implemented for composite\n   *\n   * @param remoteUserId - Id of the participant to dispose the screen share stream view for.\n   *\n   * @public\n   */\n  disposeScreenShareStreamView(remoteUserId: string): Promise<void>;\n  /**\n   * Dispose the html view for a remote video stream\n   *\n   * @param remoteUserId - Id of the participant to dispose\n   *\n   * @public\n   */\n  disposeRemoteVideoStreamView(remoteUserId: string): Promise<void>;\n  /**\n   * Dispose the html view for a local video stream\n   *\n   * @public\n   */\n  disposeLocalVideoStreamView(): Promise<void>;\n  /**\n   * send dtmf tone to another participant in a 1:1 PSTN call\n   *\n   * @public\n   */\n  sendDtmfTone(dtmfTone: DtmfTone): Promise<void>;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Function to Start captions\n   * @param options - options for start captions\n   */\n  startCaptions(options?: StartCaptionsOptions): Promise<void>;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Function to set caption language\n   * @param language - language set for caption\n   */\n  setCaptionLanguage(language: string): Promise<void>;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Function to set spoken language\n   * @param language - spoken language\n   */\n  setSpokenLanguage(language: string): Promise<void>;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Funtion to stop captions\n   */\n  stopCaptions(): Promise<void>;\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Start the video background effect.\n   *\n   * @public\n   */\n  startVideoBackgroundEffect(videoBackgroundEffect: VideoBackgroundEffect): Promise<void>;\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Stop the video background effect.\n   *\n   * @public\n   */\n  stopVideoBackgroundEffects(): Promise<void>;\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Override the background picker images for background replacement effect.\n   *\n   * @param backgroundImages - Array of custom background images.\n   *\n   * @public\n   */\n  updateBackgroundPickerImages(backgroundImages: VideoBackgroundImage[]): void;\n  /* @conditional-compile-remove(video-background-effects) */\n  /**\n   * Update the selected video background effect.\n   *\n   * @public\n   */\n  updateSelectedVideoBackgroundEffect(selectedVideoBackground: VideoBackgroundEffect): void;\n}\n\n/**\n * Functionality for managing devices within a call.\n *\n * @public\n */\nexport interface CallAdapterDeviceManagement {\n  /**\n   * Ask for permissions of devices.\n   *\n   * @remarks\n   * Browser permission window will pop up if permissions are not granted yet\n   *\n   * @param constrain - Define constraints for accessing local devices {@link @azure/communication-calling#PermissionConstraints }\n   *\n   * @public\n   */\n  askDevicePermission(constrain: PermissionConstraints): Promise<void>;\n  /**\n   * Query for available camera devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of video device information entities {@link @azure/communication-calling#VideoDeviceInfo }\n   *\n   * @public\n   */\n  queryCameras(): Promise<VideoDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  queryMicrophones(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  querySpeakers(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Set the camera to use in the call.\n   *\n   * @param sourceInfo - Camera device to choose, pick one returned by  {@link CallAdapterDeviceManagement#queryCameras }\n   * @param options - Options to control how the camera stream is rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  setCamera(sourceInfo: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Set the microphone to use in the call.\n   *\n   * @param sourceInfo - Microphone device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryMicrophones }\n   *\n   * @public\n   */\n  setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>;\n  /**\n   * Set the speaker to use in the call.\n   *\n   * @param sourceInfo - Speaker device to choose, pick one returned by {@link CallAdapterDeviceManagement#querySpeakers }\n   *\n   * @public\n   */\n  setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>;\n}\n\n/**\n * Call composite events that can be subscribed to.\n *\n * @public\n */\nexport interface CallAdapterSubscribers {\n  /**\n   * Subscribe function for 'participantsJoined' event.\n   */\n  on(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;\n  /**\n   * Subscribe function for 'participantsLeft' event.\n   */\n  on(event: 'participantsLeft', listener: ParticipantsLeftListener): void;\n  /**\n   * Subscribe function for 'isMutedChanged' event.\n   *\n   * @remarks\n   * The event will be triggered whenever current user or remote user mute state changed\n   *\n   */\n  on(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  /**\n   * Subscribe function for 'callIdChanged' event.\n   *\n   * @remarks\n   * The event will be triggered when callId of current user changed.\n   *\n   */\n  on(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  /**\n   * Subscribe function for 'isLocalScreenSharingActiveChanged' event.\n   */\n  on(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  /**\n   * Subscribe function for 'displayNameChanged' event.\n   */\n  on(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  /**\n   * Subscribe function for 'isSpeakingChanged' event.\n   */\n  on(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  /**\n   * Subscribe function for 'callEnded' event.\n   */\n  on(event: 'callEnded', listener: CallEndedListener): void;\n  /**\n   * Subscribe function for 'diagnosticChanged' event.\n   *\n   * This event fires whenever there is a change in user facing diagnostics about the ongoing call.\n   */\n  on(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;\n  /**\n   * Subscribe function for 'selectedMicrophoneChanged' event.\n   *\n   * This event fires whenever the user selects a new microphone device.\n   */\n  on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Subscribe function for 'selectedSpeakerChanged' event.\n   *\n   * This event fires whenever the user selects a new speaker device.\n   */\n  on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Subscribe function for 'error' event.\n   */\n  on(event: 'error', listener: (e: AdapterError) => void): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Subscribe function for 'captionsReceived' event.\n   */\n  on(event: 'captionsReceived', listener: CaptionsReceivedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Subscribe function for 'isCaptionsActiveChanged' event.\n   */\n  on(event: 'isCaptionsActiveChanged', listener: IsCaptionsActiveChangedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Subscribe function for 'isCaptionLanguageChanged' event.\n   */\n  on(event: 'isCaptionLanguageChanged', listener: IsCaptionLanguageChangedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Subscribe function for 'isSpokenLanguageChanged' event.\n   */\n  on(event: 'isSpokenLanguageChanged', listener: IsSpokenLanguageChangedListener): void;\n\n  /* @conditional-compile-remove(call-transfer) */\n  /**\n   * Subscribe function for 'transferRequested' event.\n   */\n  on(event: 'transferAccepted', listener: TransferAcceptedListener): void;\n  /* @conditional-compile-remove(capabilities) */\n  /**\n   * Subscribe function for 'capabilitiesChanged' event.\n   */\n  on(event: 'capabilitiesChanged', listener: CapabilitiesChangedListener): void;\n  /* @conditional-compile-remove(rooms) */\n  /**\n   * Subscribe function for 'roleChanged' event.\n   */\n  on(event: 'roleChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Unsubscribe function for 'participantsJoined' event.\n   */\n  off(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;\n  /**\n   * Unsubscribe function for 'participantsLeft' event.\n   */\n  off(event: 'participantsLeft', listener: ParticipantsLeftListener): void;\n  /**\n   * Unsubscribe function for 'isMutedChanged' event.\n   */\n  off(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  /**\n   * Unsubscribe function for 'callIdChanged' event.\n   */\n  off(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  /**\n   * Unsubscribe function for 'isLocalScreenSharingActiveChanged' event.\n   */\n  off(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  /**\n   * Unsubscribe function for 'displayNameChanged' event.\n   */\n  off(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  /**\n   * Unsubscribe function for 'isSpeakingChanged' event.\n   */\n  off(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  /**\n   * Unsubscribe function for 'callEnded' event.\n   */\n  off(event: 'callEnded', listener: CallEndedListener): void;\n  /**\n   * Unsubscribe function for 'diagnosticChanged' event.\n   */\n  off(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;\n  /**\n   * Unsubscribe function for 'selectedMicrophoneChanged' event.\n   */\n  off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Unsubscribe function for 'selectedSpeakerChanged' event.\n   */\n  off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Unsubscribe function for 'error' event.\n   */\n  off(event: 'error', listener: (e: AdapterError) => void): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Unsubscribe function for 'captionsReceived' event.\n   */\n  off(event: 'captionsReceived', listener: CaptionsReceivedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Unsubscribe function for 'isCaptionsActiveChanged' event.\n   */\n  off(event: 'isCaptionsActiveChanged', listener: IsCaptionsActiveChangedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Unsubscribe function for 'isCaptionLanguageChanged' event.\n   */\n  off(event: 'isCaptionLanguageChanged', listener: IsCaptionLanguageChangedListener): void;\n  /* @conditional-compile-remove(close-captions) */\n  /**\n   * Unsubscribe function for 'isSpokenLanguageChanged' event.\n   */\n  off(event: 'isSpokenLanguageChanged', listener: IsSpokenLanguageChangedListener): void;\n  /* @conditional-compile-remove(call-transfer) */\n  /**\n   * Unsubscribe function for 'transferRequested' event.\n   */\n  off(event: 'transferAccepted', listener: TransferAcceptedListener): void;\n  /* @conditional-compile-remove(capabilities) */\n  /**\n   * Unsubscribe function for 'capabilitiesChanged' event.\n   */\n  off(event: 'capabilitiesChanged', listener: CapabilitiesChangedListener): void;\n  /* @conditional-compile-remove(rooms) */\n  /**\n   * Unsubscribe function for 'roleChanged' event.\n   */\n  off(event: 'roleChanged', listener: PropertyChangedEvent): void;\n}\n\n// This type remains for non-breaking change reason\n/**\n * Functionality for managing the current call or start a new call\n * @deprecated CallAdapter interface will be flatten, consider using CallAdapter directly\n * @public\n */\nexport interface CallAdapterCallManagement extends CallAdapterCallOperations {\n  /**\n   * Join the call with microphone initially on/off.\n   * @deprecated Use joinCall(options?:JoinCallOptions) instead.\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): Call | undefined;\n\n  /**\n   * Join the call with options bag to set microphone/camera initial state when joining call\n   * true = turn on the device when joining call\n   * false = turn off the device when joining call\n   * 'keep'/undefined = retain devices' precall state\n   *\n   * @param options - param to set microphone/camera initially on/off/use precall state.\n   *\n   * @public\n   */\n  joinCall(options?: JoinCallOptions): Call | undefined;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): Call | undefined;\n}\n\n// TODO: Flatten the adapter structure\n/**\n * {@link CallComposite} Adapter interface.\n *\n * @public\n */\nexport interface CommonCallAdapter extends AdapterState<CallAdapterState>, Disposable, CallAdapterCallOperations, CallAdapterDeviceManagement, CallAdapterSubscribers {\n  /**\n   * Join the call with microphone initially on/off.\n   * @deprecated Use joinCall(options?:JoinCallOptions) instead.\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): void;\n  /**\n   * Join the call with options bag to set microphone/camera initial state when joining call\n   * true = turn on the device when joining call\n   * false = turn off the device when joining call\n   * 'keep'/undefined = retain devices' precall state\n   *\n   * @param options - param to set microphone/camera initially on/off/use precall state.\n   *\n   * @public\n   */\n  joinCall(options?: JoinCallOptions): void;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): void;\n  /**\n   * Start the call.\n   * @param participants - An array of {@link @azure/communication-common#CommunicationIdentifier} to be called\n   * @public\n   */\n  startCall(participants: StartCallIdentifier[], options?: StartCallOptions): void;\n}\n\n/**\n *  An Adapter interface specific for Azure Communication identity which extends {@link CommonCallAdapter}.\n *\n * @public\n */\nexport interface CallAdapter extends CommonCallAdapter {\n  /**\n   * Join the call with microphone initially on/off.\n   * @deprecated Use joinCall(options?:JoinCallOptions) instead.\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): Call | undefined;\n\n  /**\n   * Join the call with options bag to set microphone/camera initial state when joining call\n   * true = turn on the device when joining call\n   * false = turn off the device when joining call\n   * 'keep'/undefined = retain devices' precall state\n   *\n   * @param options - param to set microphone/camera initially on/off/use precall state.\n   *\n   * @public\n   */\n  joinCall(options?: JoinCallOptions): Call | undefined;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): Call | undefined;\n  /**\n   * Start the call.\n   * @param participants - An array of {@link @azure/communication-common#CommunicationIdentifier} to be called\n   * @public\n   */\n  startCall(participants: StartCallIdentifier[], options?: StartCallOptions): Call | undefined;\n}"]}