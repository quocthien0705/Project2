// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * @private
 */
export function callWithChatAdapterStateFromBackingStates(callAdapter, chatAdapter) {
    const callAdapterState = callAdapter.getState();
    const chatAdapterState = chatAdapter.getState();
    return {
        call: callAdapterState.call,
        chat: chatAdapterState.thread,
        userId: callAdapterState.userId,
        page: callAdapterState.page,
        displayName: callAdapterState.displayName,
        devices: callAdapterState.devices,
        isLocalPreviewMicrophoneEnabled: callAdapterState.isLocalPreviewMicrophoneEnabled,
        isTeamsCall: callAdapterState.isTeamsCall,
        latestCallErrors: callAdapterState.latestErrors,
        latestChatErrors: chatAdapterState.latestErrors,
        /* @conditional-compile-remove(video-background-effects) */
        videoBackgroundImages: callAdapterState.videoBackgroundImages,
        /* @conditional-compile-remove(video-background-effects) */
        onResolveVideoEffectDependency: callAdapterState.onResolveVideoEffectDependency,
        /* @conditional-compile-remove(video-background-effects) */
        selectedVideoBackgroundEffect: callAdapterState.selectedVideoBackgroundEffect
    };
}
/**
 * @private
 */
export function mergeChatAdapterStateIntoCallWithChatAdapterState(existingCallWithChatAdapterState, chatAdapterState) {
    return Object.assign(Object.assign({}, existingCallWithChatAdapterState), { chat: chatAdapterState.thread, latestChatErrors: chatAdapterState.latestErrors });
}
/**
 * @private
 */
export function mergeCallAdapterStateIntoCallWithChatAdapterState(existingCallWithChatAdapterState, callAdapterState) {
    return Object.assign(Object.assign({}, existingCallWithChatAdapterState), { userId: callAdapterState.userId, page: callAdapterState.page, displayName: callAdapterState.displayName, devices: callAdapterState.devices, call: callAdapterState.call, isLocalPreviewMicrophoneEnabled: callAdapterState.isLocalPreviewMicrophoneEnabled, isTeamsCall: callAdapterState.isTeamsCall, latestCallErrors: callAdapterState.latestErrors, 
        /* @conditional-compile-remove(video-background-effects) */
        videoBackgroundImages: callAdapterState.videoBackgroundImages, 
        /* @conditional-compile-remove(video-background-effects) */
        onResolveVideoEffectDependency: callAdapterState.onResolveVideoEffectDependency, 
        /* @conditional-compile-remove(video-background-effects) */
        selectedVideoBackgroundEffect: callAdapterState.selectedVideoBackgroundEffect });
}
//# sourceMappingURL=CallWithChatAdapterState.js.map