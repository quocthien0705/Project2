// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { useCallback, useMemo } from 'react';
import { useAdaptedSelector } from '../hooks/useAdaptedSelector';
import { useHandlers } from '../hooks/useHandlers';
import { LocalDeviceSettings } from '../components/LocalDeviceSettings';
import { StartCallButton } from '../components/StartCallButton';
import { devicePermissionSelector } from '../selectors/devicePermissionSelector';
import { useSelector } from '../hooks/useSelector';
import { DevicesButton, ErrorBar, useTheme } from "../../../../../react-components/src";
import { getCallingSelector } from "../../../../../calling-component-bindings/src";
import { Image, Panel, PanelType, Stack } from '@fluentui/react';
import { callDetailsContainerStyles, configurationCenteredContent, configurationSectionStyle, deviceConfigurationStackTokens, fillWidth, logoStyles, panelFocusProps, panelStyles, startCallButtonStyleDesktop } from '../styles/CallConfiguration.styles';
import { LocalPreview } from '../components/LocalPreview';
import { callDetailsStyleDesktop, callDetailsStyleMobile, configurationStackTokensDesktop, configurationStackTokensMobile, configurationContainerStyle, selectionContainerStyle, startCallButtonContainerStyleDesktop, startCallButtonContainerStyleMobile, startCallButtonStyleMobile, titleContainerStyleDesktop, titleContainerStyleMobile } from '../styles/CallConfiguration.styles';
import { useLocale } from '../../localization';
import { bannerNotificationStyles } from '../styles/CallPage.styles';
import { usePropsFor } from '../hooks/usePropsFor';
import { useAdapter } from '../adapter/CallAdapterProvider';
import { ConfigurationPageErrorBar } from '../components/ConfigurationPageErrorBar';
/* @conditional-compile-remove(video-background-effects) */
import { VIDEO_EFFECTS_SIDE_PANE_WIDTH_REM, useVideoEffectsPane } from '../components/SidePane/useVideoEffectsPane';
import { SidePane } from '../components/SidePane/SidePane';
/* @conditional-compile-remove(video-background-effects) */
import { useIsParticularSidePaneOpen } from '../components/SidePane/SidePaneProvider';
/* @conditional-compile-remove(video-background-effects) */
import { localVideoSelector } from '../../CallComposite/selectors/localVideoStreamSelector';
import { SvgWithWordWrapping } from '../components/SvgWithWordWrapping';
/**
 * @private
 */
export const ConfigurationPage = (props) => {
    var _a, _b, _c;
    const { startCallHandler, mobileView, modalLayerHostId } = props;
    const theme = useTheme();
    const options = useAdaptedSelector(getCallingSelector(DevicesButton));
    const localDeviceSettingsHandlers = useHandlers(LocalDeviceSettings);
    const { video: cameraPermissionGranted, audio: microphonePermissionGranted } = useSelector(devicePermissionSelector);
    const errorBarProps = usePropsFor(ErrorBar);
    const adapter = useAdapter();
    const deviceState = adapter.getState().devices;
    let disableStartCallButton = !microphonePermissionGranted || ((_a = deviceState.microphones) === null || _a === void 0 ? void 0 : _a.length) === 0;
    /* @conditional-compile-remove(rooms) */
    const role = (_b = adapter.getState().call) === null || _b === void 0 ? void 0 : _b.role;
    /* @conditional-compile-remove(video-background-effects) */
    const isCameraOn = useSelector(localVideoSelector).isAvailable;
    let filteredLatestErrors = props.latestErrors;
    /* @conditional-compile-remove(rooms) */
    // TODO: move this logic to the error bar selector once role is plumbed from the headless SDK
    if (role !== 'Consumer') {
        filteredLatestErrors = filteredLatestErrors.filter(e => e.type !== 'callCameraAccessDenied' && e.type !== 'callCameraAccessDeniedSafari');
    }
    /* @conditional-compile-remove(video-background-effects) */
    if ((useIsParticularSidePaneOpen('videoeffects') || !isCameraOn) && errorBarProps) {
        filteredLatestErrors = filteredLatestErrors.filter(e => e.type !== 'unableToStartVideoEffect');
    }
    /* @conditional-compile-remove(rooms) */
    if (role === 'Consumer') {
        // If user's role permissions do not allow access to the microphone button then DO NOT disable the start call button
        // because microphone device permission is not needed for the user's role
        disableStartCallButton = false;
    }
    const locale = useLocale();
    const title = locale.strings.call.configurationPageTitle.length > 0 ? React.createElement(Stack.Item, { className: mobileView ? titleContainerStyleMobile(theme) : titleContainerStyleDesktop(theme) },
        React.createElement(SvgWithWordWrapping, { width: mobileView ? 325 : 445, lineHeightPx: 16 * 1.5, bufferHeightPx: 16, text: locale.strings.call.configurationPageTitle })) : React.createElement(React.Fragment, null);
    const callDescription = locale.strings.call.configurationPageCallDetails && React.createElement(Stack.Item, { className: mobileView ? callDetailsStyleMobile(theme) : callDetailsStyleDesktop(theme) }, locale.strings.call.configurationPageCallDetails);
    let mobileWithPreview = mobileView;
    /* @conditional-compile-remove(rooms) */
    mobileWithPreview = mobileWithPreview && role !== 'Consumer'; // When permission API is not available, we want to show screen saying checking for access (disappears on its own)
    // then based on permission setting, we show permission denied or nothing
    /* @conditional-compile-remove(video-background-effects) */
    const { toggleVideoEffectsPane, closeVideoEffectsPane, isVideoEffectsPaneOpen } = useVideoEffectsPane(props.updateSidePaneRenderer, mobileView, props.latestErrors, props.onDismissError);
    const startCall = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        /* @conditional-compile-remove(video-background-effects) */
        closeVideoEffectsPane();
        startCallHandler();
    }), [startCallHandler, /* @conditional-compile-remove(video-background-effects) */ closeVideoEffectsPane]);
    const panelLayerProps = useMemo(() => ({
        hostId: modalLayerHostId
    }), [modalLayerHostId]);
    const filteredErrorBarProps = useMemo(() => (Object.assign(Object.assign({}, errorBarProps), { activeErrorMessages: filteredLatestErrors })), [errorBarProps, filteredLatestErrors]);
    const containerStyles = useMemo(() => {
        var _a;
        return configurationContainerStyle(!mobileView, /* @conditional-compile-remove(custom-branding) */ (_a = props.backgroundImage) === null || _a === void 0 ? void 0 : _a.url);
    }, [mobileView, /* @conditional-compile-remove(custom-branding) */ (_c = props.backgroundImage) === null || _c === void 0 ? void 0 : _c.url]);
    return React.createElement(Stack, { styles: containerStyles },
        React.createElement(Stack, { styles: bannerNotificationStyles },
            React.createElement(ConfigurationPageErrorBar, { errorBarProps: filteredErrorBarProps, onDismissError: props.onDismissError })),
        React.createElement(Stack, { verticalFill: true, grow: true, horizontal: true, className: fillWidth },
            React.createElement(Stack, { className: configurationCenteredContent(mobileWithPreview, /* @conditional-compile-remove(custom-branding) */ !!props.logo), verticalAlign: "center", verticalFill: mobileWithPreview, tokens: mobileWithPreview ? configurationStackTokensMobile : configurationStackTokensDesktop },
                React.createElement(Stack.Item, { styles: callDetailsContainerStyles },
                    React.createElement(Logo
                    /* @conditional-compile-remove(custom-branding) */ , { 
                        /* @conditional-compile-remove(custom-branding) */ logo: props.logo }),
                    title,
                    callDescription),
                React.createElement(Stack, { horizontal: !mobileWithPreview, horizontalAlign: mobileWithPreview ? 'stretch' : 'center', verticalFill: mobileWithPreview, tokens: deviceConfigurationStackTokens },
                    localPreviewTrampoline(mobileWithPreview, /* @conditional-compile-remove(rooms) */ !!(role === 'Consumer')),
                    React.createElement(Stack, { styles: mobileView ? undefined : configurationSectionStyle },
                        !mobileWithPreview && React.createElement(Stack, { className: mobileView ? undefined : selectionContainerStyle(theme, isSafariBrowserEnvironmentTrampoline()) },
                            React.createElement(LocalDeviceSettings, Object.assign({}, options, localDeviceSettingsHandlers, { cameraPermissionGranted: cameraPermissionGrantedTrampoline(cameraPermissionGranted), microphonePermissionGranted: micPermissionGrantedTrampoline(microphonePermissionGranted), onClickVideoEffects: toggleVideoEffectsPane }))),
                        React.createElement(Stack, { styles: mobileWithPreview ? startCallButtonContainerStyleMobile : startCallButtonContainerStyleDesktop, horizontalAlign: mobileWithPreview ? 'stretch' : 'end' },
                            React.createElement(StartCallButton, { className: mobileWithPreview ? startCallButtonStyleMobile : startCallButtonStyleDesktop, onClick: startCall, disabled: disableStartCallButton, hideIcon: true }))))),
            React.createElement(Panel
            /* @conditional-compile-remove(video-background-effects) */ , { 
                /* @conditional-compile-remove(video-background-effects) */ isOpen: isVideoEffectsPaneOpen, hasCloseButton: false, isBlocking: false, isHiddenOnDismiss: false, styles: panelStyles, focusTrapZoneProps: panelFocusProps, layerProps: panelLayerProps, type: PanelType.custom, 
                /* @conditional-compile-remove(video-background-effects) */ customWidth: `${VIDEO_EFFECTS_SIDE_PANE_WIDTH_REM}rem` },
                React.createElement(SidePane, { mobileView: props.mobileView, updateSidePaneRenderer: props.updateSidePaneRenderer, maxWidth: `${VIDEO_EFFECTS_SIDE_PANE_WIDTH_REM}rem`, minWidth: `${VIDEO_EFFECTS_SIDE_PANE_WIDTH_REM}rem` }))));
};
const localPreviewTrampoline = (mobileView, doNotShow) => {
    /* @conditional-compile-remove(rooms) */
    if (doNotShow) {
        return undefined;
    }
    return React.createElement(LocalPreview, { mobileView: mobileView, showDevicesButton: mobileView });
};
const cameraPermissionGrantedTrampoline = (cameraPermissionGranted, videoState) => {
    return cameraPermissionGranted;
};
const micPermissionGrantedTrampoline = (microphonePermissionGranted, audioState) => {
    return microphonePermissionGranted;
};
const Logo = (props) => {
    if (!props.logo) {
        return React.createElement(React.Fragment, null);
    }
    return React.createElement(Image, { styles: logoStyles(props.logo.shape), src: props.logo.url, alt: props.logo.alt });
};
const isSafariBrowserEnvironmentTrampoline = (environmentInfo) => {
    return false;
};
//# sourceMappingURL=ConfigurationPage.js.map