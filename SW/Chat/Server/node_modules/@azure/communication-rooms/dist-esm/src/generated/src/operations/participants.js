/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Participants operations. */
export class ParticipantsImpl {
    /**
     * Initialize a new instance of the class Participants class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get participants in a room.
     * @param roomId The id of the room to get participants from.
     * @param options The options parameters.
     */
    async list(roomId, options) {
        return tracingClient.withSpan("RoomsRestClient.list", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, options }, listOperationSpec);
        });
    }
    /**
     * Update participants in a room.
     * @param roomId The id of the room to update the participants in.
     * @param options The options parameters.
     */
    async update(roomId, options) {
        return tracingClient.withSpan("RoomsRestClient.update", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, options }, updateOperationSpec);
        });
    }
    /**
     * ListNext
     * @param roomId The id of the room to get participants from.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    async listNext(roomId, nextLink, options) {
        return tracingClient.withSpan("RoomsRestClient.listNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, nextLink, options }, listNextOperationSpec);
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/rooms/{roomId}/participants",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ParticipantsCollection
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.ParticipantsListExceptionHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roomId],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/rooms/{roomId}/participants",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } }
            }
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.ParticipantsUpdateExceptionHeaders
        }
    },
    requestBody: {
        parameterPath: { participants: ["options", "participants"] },
        mapper: Object.assign(Object.assign({}, Mappers.UpdateParticipantsRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roomId],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ParticipantsCollection
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.ParticipantsListNextExceptionHeaders
        }
    },
    urlParameters: [Parameters.endpoint, Parameters.roomId, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=participants.js.map