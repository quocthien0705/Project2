{"version":3,"file":"roomsClient.js","sourceRoot":"","sources":["../../src/roomsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  CommunicationIdentifier,\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\n\nimport { logger } from \"./logger\";\nimport { tracingClient } from \"./tracing\";\nimport { RoomsRestClient } from \"./generated/src\";\nimport {\n  mapCommunicationRoomToSDKModel,\n  mapRoomParticipantForRemoval,\n  mapRoomParticipantToRawId,\n  mapToRoomParticipantSDKModel,\n} from \"./models/mappers\";\nimport { CommunicationRoom, RoomParticipantPatch, RoomParticipant } from \"./models/models\";\nimport {\n  CreateRoomOptions,\n  DeleteRoomOptions,\n  GetRoomOptions,\n  ListParticipantsOptions,\n  ListRoomOptions,\n  RemoveParticipantsOptions,\n  RoomsClientOptions,\n  UpdateRoomOptions,\n  AddOrUpdateParticipantsOptions,\n} from \"./models/options\";\nimport { generateUuid } from \"./models/uuid\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * @internal\n * Checks whether the type of a value is RoomsClientOptions or not.\n * @param options - The value being checked.\n */\nconst isRoomsClientOptions = (options: any): options is RoomsClientOptions =>\n  !!options && !isKeyCredential(options);\n\n/**\n * @internal\n * Arguments for retrieving the next page of search results.\n */\ninterface ListPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/**\n * The Rooms service client.\n */\nexport class RoomsClient {\n  private readonly client: RoomsRestClient;\n\n  /**\n   * Initializes a new instance of the RoomsClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: RoomsClientOptions);\n\n  /**\n   * Initializes a new instance of the RoomsClient using a TokenCredential\n   * @param endpoint - The url of the Communication Services resource\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential from `@azure/identity` or AzureCommunicationTokenCredential from `@azure/communication-common` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: RoomsClientOptions\n  );\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: RoomsClientOptions | KeyCredential | TokenCredential,\n    maybeOptions: RoomsClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isRoomsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new RoomsRestClient(url, { endpoint: url, ...internalPipelineOptions });\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Creates a new room asynchronously.\n   * @param request - Request for creating a room.\n   * @param options - Operation options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async createRoom(options: CreateRoomOptions = {}): Promise<CommunicationRoom> {\n    const repeatabilityRequestId = generateUuid();\n    const repeatabilityFirstSent = new Date();\n    return tracingClient.withSpan(\"RoomsClient-CreateRoom\", options, async () => {\n      const room = await this.client.rooms.create({\n        ...options,\n        repeatabilityFirstSent: repeatabilityFirstSent,\n        repeatabilityRequestID: repeatabilityRequestId,\n        participants: mapRoomParticipantToRawId(options.participants),\n      });\n      return mapCommunicationRoomToSDKModel(room);\n    });\n  }\n\n  /**\n   * Updates a room asynchronously.\n   * @param roomId - ID of the room.\n   * @param request - Request for updating a room.\n   * @param options - Operational options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async updateRoom(\n    roomId: string,\n    options: UpdateRoomOptions = {}\n  ): Promise<CommunicationRoom> {\n    return tracingClient.withSpan(\"RoomsClient-UpdateRoom\", options, async () => {\n      const room = await this.client.rooms.update(roomId, options);\n      return mapCommunicationRoomToSDKModel(room);\n    });\n  }\n\n  /**\n   * Gets a room by id asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async getRoom(roomId: string, options: GetRoomOptions = {}): Promise<CommunicationRoom> {\n    return tracingClient.withSpan(\"RoomsClient-GetRoom\", options, async (updatedOptions) => {\n      const room = await this.client.rooms.get(roomId, updatedOptions);\n      return mapCommunicationRoomToSDKModel(room);\n    });\n  }\n\n  private async *listRoomsPage(\n    pageSettings: ListPageSettings,\n    options: ListRoomOptions = {}\n  ): AsyncIterableIterator<CommunicationRoom[]> {\n    if (!pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.rooms.list(options);\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((room) => mapCommunicationRoomToSDKModel(room));\n      }\n    }\n\n    while (pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.rooms.listNext(\n        pageSettings.continuationToken,\n        options\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((room) => mapCommunicationRoomToSDKModel(room));\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listRoomsAll(\n    options: ListRoomOptions = {}\n  ): AsyncIterableIterator<CommunicationRoom> {\n    for await (const page of this.listRoomsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of rooms\n   * @param options - Operational options\n   */\n  public listRooms(options: ListRoomOptions = {}): PagedAsyncIterableIterator<CommunicationRoom> {\n    const { span, updatedOptions } = tracingClient.startSpan(\"RoomsClient-ListRooms\", options);\n    try {\n      const iter = this.listRoomsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listRoomsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        error: e,\n        status: \"error\",\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a room by id asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   */\n  public async deleteRoom(roomId: string, options: DeleteRoomOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"RoomsClient-DeleteRoom\", options, async (updatedOptions) => {\n      await this.client.rooms.delete(roomId, updatedOptions);\n    });\n  }\n\n  private async *listParticipantsPage(\n    roomId: string,\n    pageSettings: ListPageSettings,\n    options: ListParticipantsOptions = {}\n  ): AsyncIterableIterator<RoomParticipant[]> {\n    if (!pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.participants.list(roomId, options);\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToRoomParticipantSDKModel, this);\n      }\n    }\n\n    while (pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.participants.listNext(\n        roomId,\n        pageSettings.continuationToken,\n        options\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToRoomParticipantSDKModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listParticipantsAll(\n    roomId: string,\n    options: ListParticipantsOptions = {}\n  ): AsyncIterableIterator<RoomParticipant> {\n    for await (const page of this.listParticipantsPage(roomId, {}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the participants of a room asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public listParticipants(\n    roomId: string,\n    options: ListParticipantsOptions = {}\n  ): PagedAsyncIterableIterator<RoomParticipant> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"RoomsClient-GetParticipants\",\n      options\n    );\n    try {\n      const iter = this.listParticipantsAll(roomId, updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listParticipantsPage(roomId, settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        error: e,\n        status: \"error\",\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the Participants in a Room asynchronously.\n   * Participant is added to room if they did not exist and updated if already in room.\n   * @param roomId - ID of the room.\n   * @param participants - List of participants to add or update.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async addOrUpdateParticipants(\n    roomId: string,\n    participants: RoomParticipantPatch[],\n    options: AddOrUpdateParticipantsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"RoomsClient-AddOrUpdateParticipants\",\n      options,\n      (updatedOptions) => {\n        this.client.participants.update(roomId, {\n          ...updatedOptions,\n          participants: mapRoomParticipantToRawId(participants),\n        });\n      }\n    );\n  }\n\n  /**\n   * Removes Participants from a Room asynchronously.\n   * @param roomId - ID of the room.\n   * @param participantIdentifiers - List of participants' communication identifiers to remove from room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async removeParticipants(\n    roomId: string,\n    participantIdentifiers: CommunicationIdentifier[],\n    options: RemoveParticipantsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\"RoomsClient-RemoveParticipants\", options, (updatedOptions) => {\n      this.client.participants.update(roomId, {\n        ...updatedOptions,\n        participants: mapRoomParticipantForRemoval(participantIdentifiers),\n      });\n    });\n  }\n}\n"]}