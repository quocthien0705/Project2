/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Rooms operations. */
export class RoomsImpl {
    /**
     * Initialize a new instance of the class Rooms class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new room.
     * @param options The options parameters.
     */
    async create(options) {
        return tracingClient.withSpan("RoomsRestClient.create", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ options }, createOperationSpec);
        });
    }
    /**
     * Retrieves all created rooms.
     * @param options The options parameters.
     */
    async list(options) {
        return tracingClient.withSpan("RoomsRestClient.list", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ options }, listOperationSpec);
        });
    }
    /**
     * Retrieves an existing room by id.
     * @param roomId The id of the room requested.
     * @param options The options parameters.
     */
    async get(roomId, options) {
        return tracingClient.withSpan("RoomsRestClient.get", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, options }, getOperationSpec);
        });
    }
    /**
     * Update a room with given changes.
     * @param roomId The id of the room requested.
     * @param options The options parameters.
     */
    async update(roomId, options) {
        return tracingClient.withSpan("RoomsRestClient.update", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, options }, updateOperationSpec);
        });
    }
    /**
     * Delete a room.
     * @param roomId The id of the room to be deleted.
     * @param options The options parameters.
     */
    async delete(roomId, options) {
        return tracingClient.withSpan("RoomsRestClient.delete", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ roomId, options }, deleteOperationSpec);
        });
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    async listNext(nextLink, options) {
        return tracingClient.withSpan("RoomsRestClient.listNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/rooms",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.RoomModel
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsCreateExceptionHeaders
        }
    },
    requestBody: {
        parameterPath: {
            validFrom: ["options", "validFrom"],
            validUntil: ["options", "validUntil"],
            pstnDialOutEnabled: ["options", "pstnDialOutEnabled"],
            participants: ["options", "participants"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CreateRoomRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.contentType,
        Parameters.accept,
        Parameters.repeatabilityRequestID,
        Parameters.repeatabilityFirstSent
    ],
    mediaType: "json",
    serializer
};
const listOperationSpec = {
    path: "/rooms",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoomsCollection
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsListExceptionHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoomModel
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsGetExceptionHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roomId],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.RoomModel
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsUpdateExceptionHeaders
        }
    },
    requestBody: {
        parameterPath: {
            validFrom: ["options", "validFrom"],
            validUntil: ["options", "validUntil"],
            pstnDialOutEnabled: ["options", "pstnDialOutEnabled"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.UpdateRoomRequest), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roomId],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsDeleteExceptionHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roomId],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoomsCollection
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.RoomsListNextExceptionHeaders
        }
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=rooms.js.map