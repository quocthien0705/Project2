import { CommonClientOptions } from '@azure/core-client';
import { CommunicationIdentifier } from '@azure/communication-common';
import { CommunicationIdentifierKind } from '@azure/communication-common';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { TokenCredential } from '@azure/core-auth';

/**
 * Options to update the participants of a room.
 */
export declare type AddOrUpdateParticipantsOptions = OperationOptions;

/** The meeting room. */
export declare interface CommunicationRoom {
    /** Unique identifier of a room. This id is server generated. */
    id: string;
    /** The timestamp when the room was created at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    createdOn: Date;
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil: Date;
    /** Set this flag to true if, at the time of the call, dial out to a PSTN number is enabled in a particular room. By default, this flag is set to false. */
    pstnDialOutEnabled: boolean;
}

/**
 * Options to create a room.
 */
export declare interface CreateRoomOptions extends OperationOptions {
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom?: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil?: Date;
    /** Set this flag to true if, at the time of the call, dial out to a PSTN number is enabled in a particular room. By default, this flag is set to false. */
    pstnDialOutEnabled?: boolean;
    /** Collection of participants invited to the room. */
    participants?: RoomParticipantPatch[];
}

/**
 * Options to delete a room.
 */
export declare type DeleteRoomOptions = OperationOptions;

/**
 * Options to get a room.
 */
export declare type GetRoomOptions = OperationOptions;

/**
 * Options to get the participants of a room.
 */
export declare type ListParticipantsOptions = OperationOptions;

/**
 * Options to get the list of a rooms.
 */
export declare type ListRoomOptions = OperationOptions;

/** The participant's role in the room */
export declare type ParticipantRole = "Presenter" | "Attendee" | "Consumer";

/**
 * Options to remove participants from a room.
 */
export declare type RemoveParticipantsOptions = OperationOptions;

/** A participant of the room. */
export declare interface RoomParticipant {
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.  */
    id: CommunicationIdentifierKind;
    /** Role name. */
    role: ParticipantRole;
}

/** A participant of the room. */
export declare interface RoomParticipantPatch {
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.  */
    id: CommunicationIdentifier;
    /** The role of a room participant. The default value is Attendee. */
    role?: ParticipantRole;
}

/**
 * The Rooms service client.
 */
export declare class RoomsClient {
    private readonly client;
    /**
     * Initializes a new instance of the RoomsClient class.
     * @param connectionString - Connection string to connect to an Azure Communication Service resource.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(connectionString: string, options?: RoomsClientOptions);
    /**
     * Initializes a new instance of the RoomsClient using a TokenCredential
     * @param endpoint - The url of the Communication Services resource
     * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential from `@azure/identity` or AzureCommunicationTokenCredential from `@azure/communication-common` to create a credential.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(endpoint: string, credential: KeyCredential | TokenCredential, options?: RoomsClientOptions);
    /**
     * Creates a new room asynchronously.
     * @param request - Request for creating a room.
     * @param options - Operation options.
     * @returns a RoomModel object with the values of the created room.
     */
    createRoom(options?: CreateRoomOptions): Promise<CommunicationRoom>;
    /**
     * Updates a room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating a room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    updateRoom(roomId: string, options?: UpdateRoomOptions): Promise<CommunicationRoom>;
    /**
     * Gets a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    getRoom(roomId: string, options?: GetRoomOptions): Promise<CommunicationRoom>;
    private listRoomsPage;
    private listRoomsAll;
    /**
     * Gets the list of rooms
     * @param options - Operational options
     */
    listRooms(options?: ListRoomOptions): PagedAsyncIterableIterator<CommunicationRoom>;
    /**
     * Deletes a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     */
    deleteRoom(roomId: string, options?: DeleteRoomOptions): Promise<void>;
    private listParticipantsPage;
    private listParticipantsAll;
    /**
     * Gets the participants of a room asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    listParticipants(roomId: string, options?: ListParticipantsOptions): PagedAsyncIterableIterator<RoomParticipant>;
    /**
     * Updates the Participants in a Room asynchronously.
     * Participant is added to room if they did not exist and updated if already in room.
     * @param roomId - ID of the room.
     * @param participants - List of participants to add or update.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    addOrUpdateParticipants(roomId: string, participants: RoomParticipantPatch[], options?: AddOrUpdateParticipantsOptions): Promise<void>;
    /**
     * Removes Participants from a Room asynchronously.
     * @param roomId - ID of the room.
     * @param participantIdentifiers - List of participants' communication identifiers to remove from room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    removeParticipants(roomId: string, participantIdentifiers: CommunicationIdentifier[], options?: RemoveParticipantsOptions): Promise<void>;
}

/**
 * Options to create rooms client.
 */
export declare interface RoomsClientOptions extends CommonClientOptions {
}

/**
 * Options to update a room.
 */
export declare interface UpdateRoomOptions extends OperationOptions {
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom?: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil?: Date;
    /** Set this flag to true if, at the time of the call, dial out to a PSTN number is enabled in a particular room. By default, this flag is set to false. */
    pstnDialOutEnabled?: boolean;
}

export { }
