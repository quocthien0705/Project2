{"version":3,"file":"index.js","sources":["../src/models/mappers.ts","../src/generated/src/tracing.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/chatThread.ts","../src/generated/src/operations/chat.ts","../src/generated/src/chatApiClient.ts","../src/models/logger.ts","../src/credential/communicationTokenCredentialPolicy.ts","../src/chatThreadClient.ts","../src/models/uuid.ts","../src/signaling/signalingClient.ts","../src/chatClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  SerializedCommunicationIdentifier,\n  deserializeCommunicationIdentifier,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\nimport * as RestModel from \"../generated/src/models\";\nimport { AddParticipantsRequest } from \"./requests\";\nimport { CreateChatThreadOptions } from \"./options\";\nimport {\n  ChatMessage,\n  ChatMessageContent,\n  ChatMessageReadReceipt,\n  ChatParticipant,\n  ChatThreadProperties,\n  CreateChatThreadResult,\n} from \"./models\";\n\nexport const mapToCreateChatThreadOptionsRestModel = (\n  options: CreateChatThreadOptions\n): RestModel.ChatCreateChatThreadOptionalParams => {\n  const { participants, idempotencyToken, ...rest } = options;\n  return {\n    repeatabilityRequestId: idempotencyToken,\n    ...rest,\n  };\n};\n\n/**\n * @internal\n * Mapping chat participant customer model to chat participant REST model\n */\nexport const mapToChatParticipantRestModel = (\n  chatParticipant: ChatParticipant\n): RestModel.ChatParticipant => {\n  const { id, ...rest } = chatParticipant;\n  return {\n    ...rest,\n    communicationIdentifier: serializeCommunicationIdentifier(id),\n  };\n};\n\n/**\n * @internal\n * Mapping add participants request to add chat participants request REST model\n */\nexport const mapToAddChatParticipantsRequestRestModel = (\n  addParticipantsRequest: AddParticipantsRequest\n): RestModel.AddChatParticipantsRequest => {\n  return {\n    participants: addParticipantsRequest.participants?.map((participant) =>\n      mapToChatParticipantRestModel(participant)\n    ),\n  };\n};\n\n/**\n * @internal\n * Mapping chat participant REST model to chat participant SDK model\n */\nexport const mapToChatParticipantSdkModel = (\n  chatParticipant: RestModel.ChatParticipant\n): ChatParticipant => {\n  const { communicationIdentifier, ...rest } = chatParticipant;\n  return {\n    ...rest,\n    id: deserializeCommunicationIdentifier(\n      communicationIdentifier as SerializedCommunicationIdentifier\n    ),\n  };\n};\n\n/**\n * @internal\n */\nexport const mapToChatContentSdkModel = (\n  content: RestModel.ChatMessageContent\n): ChatMessageContent => {\n  const { participants, initiatorCommunicationIdentifier, ...otherChatContents } = content;\n  let result: ChatMessageContent = { ...otherChatContents };\n  if (initiatorCommunicationIdentifier) {\n    const initiator = deserializeCommunicationIdentifier(\n      initiatorCommunicationIdentifier as SerializedCommunicationIdentifier\n    );\n    result = { ...result, initiator };\n  }\n  if (participants) {\n    result = {\n      ...result,\n      participants: participants?.map((participant) => mapToChatParticipantSdkModel(participant)),\n    };\n  }\n  return result;\n};\n\n/**\n * @internal\n * Mapping chat message REST model to chat message SDK model\n */\nexport const mapToChatMessageSdkModel = (chatMessage: RestModel.ChatMessage): ChatMessage => {\n  const { content, senderCommunicationIdentifier, ...otherChatMessage } = chatMessage;\n  let result: ChatMessage = { ...otherChatMessage };\n  if (content) {\n    result = {\n      ...result,\n      content: mapToChatContentSdkModel(content),\n    };\n  }\n  if (senderCommunicationIdentifier) {\n    const sender = deserializeCommunicationIdentifier(\n      senderCommunicationIdentifier as SerializedCommunicationIdentifier\n    );\n    result = { ...result, sender };\n  }\n  return result;\n};\n\n/**\n * @internal\n * Mapping chat messages collection REST model to chat message SDK model array\n */\nexport const mapToChatMessagesSdkModelArray = (\n  chatMessagesCollection: RestModel.ChatMessagesCollection\n): ChatMessage[] => {\n  return chatMessagesCollection.value?.map((chatMessage) => mapToChatMessageSdkModel(chatMessage));\n};\n\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToChatThreadPropertiesSdkModel = (\n  chatThread: RestModel.ChatThreadProperties\n): ChatThreadProperties => {\n  const { createdByCommunicationIdentifier, ...rest } = chatThread;\n  if (createdByCommunicationIdentifier) {\n    return {\n      ...rest,\n      createdBy: deserializeCommunicationIdentifier(\n        createdByCommunicationIdentifier as SerializedCommunicationIdentifier\n      ),\n    };\n  } else {\n    return { ...rest };\n  }\n};\n\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToCreateChatThreadResultSdkModel = (\n  result: RestModel.CreateChatThreadResult\n): CreateChatThreadResult => {\n  const { chatThread, ...rest } = result;\n  if (chatThread) {\n    return {\n      ...rest,\n      chatThread: mapToChatThreadPropertiesSdkModel(chatThread),\n    };\n  } else {\n    return { ...rest };\n  }\n};\n\n/**\n * @internal\n * Mapping read receipt REST model to read receipt SDK model\n */\nexport const mapToReadReceiptSdkModel = (\n  readReceipt: RestModel.ChatMessageReadReceipt\n): ChatMessageReadReceipt => {\n  const { senderCommunicationIdentifier, ...rest } = readReceipt;\n  return {\n    ...rest,\n    sender: deserializeCommunicationIdentifier(\n      senderCommunicationIdentifier as SerializedCommunicationIdentifier\n    ),\n  };\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { createTracingClient } from \"@azure/core-tracing\";\n\nexport const tracingClient = createTracingClient({\n  namespace: \"Azure.Communication\",\n  packageName: \"@azure/communication-chat\",\n  packageVersion: \"1.4.0\"\n});\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const ChatMessageReadReceiptsCollection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatMessageReadReceiptsCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatMessageReadReceipt\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatMessageReadReceipt: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatMessageReadReceipt\",\n    modelProperties: {\n      senderCommunicationIdentifier: {\n        serializedName: \"senderCommunicationIdentifier\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationIdentifierModel\"\n        }\n      },\n      chatMessageId: {\n        serializedName: \"chatMessageId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      readOn: {\n        serializedName: \"readOn\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommunicationIdentifierModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommunicationIdentifierModel\",\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      rawId: {\n        serializedName: \"rawId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      communicationUser: {\n        serializedName: \"communicationUser\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationUserIdentifierModel\"\n        }\n      },\n      phoneNumber: {\n        serializedName: \"phoneNumber\",\n        type: {\n          name: \"Composite\",\n          className: \"PhoneNumberIdentifierModel\"\n        }\n      },\n      microsoftTeamsUser: {\n        serializedName: \"microsoftTeamsUser\",\n        type: {\n          name: \"Composite\",\n          className: \"MicrosoftTeamsUserIdentifierModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommunicationUserIdentifierModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommunicationUserIdentifierModel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PhoneNumberIdentifierModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PhoneNumberIdentifierModel\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicrosoftTeamsUserIdentifierModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicrosoftTeamsUserIdentifierModel\",\n    modelProperties: {\n      userId: {\n        serializedName: \"userId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isAnonymous: {\n        serializedName: \"isAnonymous\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      cloud: {\n        serializedName: \"cloud\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommunicationErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommunicationErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ChatError\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatError\"\n            }\n          }\n        }\n      },\n      innerError: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ChatError\"\n        }\n      }\n    }\n  }\n};\n\nexport const SendReadReceiptRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SendReadReceiptRequest\",\n    modelProperties: {\n      chatMessageId: {\n        serializedName: \"chatMessageId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SendChatMessageRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SendChatMessageRequest\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderDisplayName: {\n        serializedName: \"senderDisplayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"text\",\n            \"html\",\n            \"topicUpdated\",\n            \"participantAdded\",\n            \"participantRemoved\"\n          ]\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const SendChatMessageResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SendChatMessageResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatMessagesCollection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatMessagesCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatMessage\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatMessage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatMessage\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"text\",\n            \"html\",\n            \"topicUpdated\",\n            \"participantAdded\",\n            \"participantRemoved\"\n          ]\n        }\n      },\n      sequenceId: {\n        serializedName: \"sequenceId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        type: {\n          name: \"Composite\",\n          className: \"ChatMessageContent\"\n        }\n      },\n      senderDisplayName: {\n        serializedName: \"senderDisplayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdOn\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      senderCommunicationIdentifier: {\n        serializedName: \"senderCommunicationIdentifier\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationIdentifierModel\"\n        }\n      },\n      deletedOn: {\n        serializedName: \"deletedOn\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      editedOn: {\n        serializedName: \"editedOn\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ChatMessageContent: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatMessageContent\",\n    modelProperties: {\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      topic: {\n        serializedName: \"topic\",\n        type: {\n          name: \"String\"\n        }\n      },\n      participants: {\n        serializedName: \"participants\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatParticipant\"\n            }\n          }\n        }\n      },\n      attachments: {\n        serializedName: \"attachments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatAttachment\"\n            }\n          }\n        }\n      },\n      initiatorCommunicationIdentifier: {\n        serializedName: \"initiatorCommunicationIdentifier\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationIdentifierModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatParticipant: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatParticipant\",\n    modelProperties: {\n      communicationIdentifier: {\n        serializedName: \"communicationIdentifier\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationIdentifierModel\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shareHistoryTime: {\n        serializedName: \"shareHistoryTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatAttachment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatAttachment\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      attachmentType: {\n        defaultValue: \"image\",\n        isConstant: true,\n        serializedName: \"attachmentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      previewUrl: {\n        serializedName: \"previewUrl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UpdateChatMessageRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UpdateChatMessageRequest\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ChatParticipantsCollection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatParticipantsCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatParticipant\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AddChatParticipantsRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AddChatParticipantsRequest\",\n    modelProperties: {\n      participants: {\n        serializedName: \"participants\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatParticipant\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AddChatParticipantsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AddChatParticipantsResult\",\n    modelProperties: {\n      invalidParticipants: {\n        serializedName: \"invalidParticipants\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CreateChatThreadRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateChatThreadRequest\",\n    modelProperties: {\n      topic: {\n        serializedName: \"topic\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      participants: {\n        serializedName: \"participants\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatParticipant\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CreateChatThreadResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateChatThreadResult\",\n    modelProperties: {\n      chatThread: {\n        serializedName: \"chatThread\",\n        type: {\n          name: \"Composite\",\n          className: \"ChatThreadProperties\"\n        }\n      },\n      invalidParticipants: {\n        serializedName: \"invalidParticipants\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ChatThreadProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatThreadProperties\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topic: {\n        serializedName: \"topic\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdOn\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      createdByCommunicationIdentifier: {\n        serializedName: \"createdByCommunicationIdentifier\",\n        type: {\n          name: \"Composite\",\n          className: \"CommunicationIdentifierModel\"\n        }\n      },\n      deletedOn: {\n        serializedName: \"deletedOn\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatThreadsItemCollection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatThreadsItemCollection\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ChatThreadItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChatThreadItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChatThreadItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topic: {\n        serializedName: \"topic\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deletedOn: {\n        serializedName: \"deletedOn\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastMessageReceivedOn: {\n        serializedName: \"lastMessageReceivedOn\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const UpdateChatThreadRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UpdateChatThreadRequest\",\n    modelProperties: {\n      topic: {\n        serializedName: \"topic\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SendTypingNotificationRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SendTypingNotificationRequest\",\n    modelProperties: {\n      senderDisplayName: {\n        serializedName: \"senderDisplayName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  SendReadReceiptRequest as SendReadReceiptRequestMapper,\n  SendChatMessageRequest as SendChatMessageRequestMapper,\n  UpdateChatMessageRequest as UpdateChatMessageRequestMapper,\n  CommunicationIdentifierModel as CommunicationIdentifierModelMapper,\n  AddChatParticipantsRequest as AddChatParticipantsRequestMapper,\n  UpdateChatThreadRequest as UpdateChatThreadRequestMapper,\n  SendTypingNotificationRequest as SendTypingNotificationRequestMapper,\n  CreateChatThreadRequest as CreateChatThreadRequestMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const chatThreadId: OperationURLParameter = {\n  parameterPath: \"chatThreadId\",\n  mapper: {\n    serializedName: \"chatThreadId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const maxPageSize: OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxPageSize\"],\n  mapper: {\n    serializedName: \"maxPageSize\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const skip: OperationQueryParameter = {\n  parameterPath: [\"options\", \"skip\"],\n  mapper: {\n    serializedName: \"skip\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2023-11-07\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sendReadReceiptRequest: OperationParameter = {\n  parameterPath: \"sendReadReceiptRequest\",\n  mapper: SendReadReceiptRequestMapper\n};\n\nexport const sendChatMessageRequest: OperationParameter = {\n  parameterPath: \"sendChatMessageRequest\",\n  mapper: SendChatMessageRequestMapper\n};\n\nexport const startTime: OperationQueryParameter = {\n  parameterPath: [\"options\", \"startTime\"],\n  mapper: {\n    serializedName: \"startTime\",\n    type: {\n      name: \"DateTime\"\n    }\n  }\n};\n\nexport const chatMessageId: OperationURLParameter = {\n  parameterPath: \"chatMessageId\",\n  mapper: {\n    serializedName: \"chatMessageId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/merge-patch+json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const updateChatMessageRequest: OperationParameter = {\n  parameterPath: \"updateChatMessageRequest\",\n  mapper: UpdateChatMessageRequestMapper\n};\n\nexport const participantCommunicationIdentifier: OperationParameter = {\n  parameterPath: \"participantCommunicationIdentifier\",\n  mapper: CommunicationIdentifierModelMapper\n};\n\nexport const addChatParticipantsRequest: OperationParameter = {\n  parameterPath: \"addChatParticipantsRequest\",\n  mapper: AddChatParticipantsRequestMapper\n};\n\nexport const updateChatThreadRequest: OperationParameter = {\n  parameterPath: \"updateChatThreadRequest\",\n  mapper: UpdateChatThreadRequestMapper\n};\n\nexport const sendTypingNotificationRequest: OperationParameter = {\n  parameterPath: [\"options\", \"sendTypingNotificationRequest\"],\n  mapper: SendTypingNotificationRequestMapper\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const createChatThreadRequest: OperationParameter = {\n  parameterPath: \"createChatThreadRequest\",\n  mapper: CreateChatThreadRequestMapper\n};\n\nexport const repeatabilityRequestId: OperationParameter = {\n  parameterPath: [\"options\", \"repeatabilityRequestId\"],\n  mapper: {\n    serializedName: \"repeatability-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing\";\nimport { ChatThread } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ChatApiClient } from \"../chatApiClient\";\nimport {\n  ChatThreadListChatReadReceiptsOptionalParams,\n  ChatThreadListChatReadReceiptsResponse,\n  SendReadReceiptRequest,\n  ChatThreadSendChatReadReceiptOptionalParams,\n  SendChatMessageRequest,\n  ChatThreadSendChatMessageOptionalParams,\n  ChatThreadSendChatMessageResponse,\n  ChatThreadListChatMessagesOptionalParams,\n  ChatThreadListChatMessagesResponse,\n  ChatThreadGetChatMessageOptionalParams,\n  ChatThreadGetChatMessageResponse,\n  UpdateChatMessageRequest,\n  ChatThreadUpdateChatMessageOptionalParams,\n  ChatThreadDeleteChatMessageOptionalParams,\n  ChatThreadListChatParticipantsOptionalParams,\n  ChatThreadListChatParticipantsResponse,\n  CommunicationIdentifierModel,\n  ChatThreadRemoveChatParticipantOptionalParams,\n  AddChatParticipantsRequest,\n  ChatThreadAddChatParticipantsOptionalParams,\n  ChatThreadAddChatParticipantsResponse,\n  UpdateChatThreadRequest,\n  ChatThreadUpdateChatThreadPropertiesOptionalParams,\n  ChatThreadGetChatThreadPropertiesOptionalParams,\n  ChatThreadGetChatThreadPropertiesResponse,\n  ChatThreadSendTypingNotificationOptionalParams,\n  ChatThreadListChatReadReceiptsNextOptionalParams,\n  ChatThreadListChatReadReceiptsNextResponse,\n  ChatThreadListChatMessagesNextOptionalParams,\n  ChatThreadListChatMessagesNextResponse,\n  ChatThreadListChatParticipantsNextOptionalParams,\n  ChatThreadListChatParticipantsNextResponse\n} from \"../models\";\n\n/** Class containing ChatThread operations. */\nexport class ChatThreadImpl implements ChatThread {\n  private readonly client: ChatApiClient;\n\n  /**\n   * Initialize a new instance of the class ChatThread class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ChatApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets chat message read receipts for a thread.\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param options The options parameters.\n   */\n  async listChatReadReceipts(\n    chatThreadId: string,\n    options?: ChatThreadListChatReadReceiptsOptionalParams\n  ): Promise<ChatThreadListChatReadReceiptsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatReadReceipts\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatReadReceiptsOperationSpec\n        ) as Promise<ChatThreadListChatReadReceiptsResponse>;\n      }\n    );\n  }\n\n  /**\n   * Sends a read receipt event to a thread, on behalf of a user.\n   * @param chatThreadId Thread id to send the read receipt event to.\n   * @param sendReadReceiptRequest Read receipt details.\n   * @param options The options parameters.\n   */\n  async sendChatReadReceipt(\n    chatThreadId: string,\n    sendReadReceiptRequest: SendReadReceiptRequest,\n    options?: ChatThreadSendChatReadReceiptOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendChatReadReceipt\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, sendReadReceiptRequest, options },\n          sendChatReadReceiptOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * Sends a message to a thread.\n   * @param chatThreadId The thread id to send the message to.\n   * @param sendChatMessageRequest Details of the message to send.\n   * @param options The options parameters.\n   */\n  async sendChatMessage(\n    chatThreadId: string,\n    sendChatMessageRequest: SendChatMessageRequest,\n    options?: ChatThreadSendChatMessageOptionalParams\n  ): Promise<ChatThreadSendChatMessageResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, sendChatMessageRequest, options },\n          sendChatMessageOperationSpec\n        ) as Promise<ChatThreadSendChatMessageResponse>;\n      }\n    );\n  }\n\n  /**\n   * Gets a list of messages from a thread.\n   * @param chatThreadId The thread id of the message.\n   * @param options The options parameters.\n   */\n  async listChatMessages(\n    chatThreadId: string,\n    options?: ChatThreadListChatMessagesOptionalParams\n  ): Promise<ChatThreadListChatMessagesResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatMessages\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatMessagesOperationSpec\n        ) as Promise<ChatThreadListChatMessagesResponse>;\n      }\n    );\n  }\n\n  /**\n   * Gets a message by id.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  async getChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    options?: ChatThreadGetChatMessageOptionalParams\n  ): Promise<ChatThreadGetChatMessageResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.getChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, options },\n          getChatMessageOperationSpec\n        ) as Promise<ChatThreadGetChatMessageResponse>;\n      }\n    );\n  }\n\n  /**\n   * Updates a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param updateChatMessageRequest Details of the request to update the message.\n   * @param options The options parameters.\n   */\n  async updateChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    updateChatMessageRequest: UpdateChatMessageRequest,\n    options?: ChatThreadUpdateChatMessageOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.updateChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, updateChatMessageRequest, options },\n          updateChatMessageOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * Deletes a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  async deleteChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    options?: ChatThreadDeleteChatMessageOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.deleteChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, options },\n          deleteChatMessageOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * Gets the participants of a thread.\n   * @param chatThreadId Thread id to get participants for.\n   * @param options The options parameters.\n   */\n  async listChatParticipants(\n    chatThreadId: string,\n    options?: ChatThreadListChatParticipantsOptionalParams\n  ): Promise<ChatThreadListChatParticipantsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatParticipants\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatParticipantsOperationSpec\n        ) as Promise<ChatThreadListChatParticipantsResponse>;\n      }\n    );\n  }\n\n  /**\n   * Remove a participant from a thread.\n   * @param chatThreadId Thread id to remove the participant from.\n   * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.\n   * @param options The options parameters.\n   */\n  async removeChatParticipant(\n    chatThreadId: string,\n    participantCommunicationIdentifier: CommunicationIdentifierModel,\n    options?: ChatThreadRemoveChatParticipantOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.removeChatParticipant\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, participantCommunicationIdentifier, options },\n          removeChatParticipantOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * Adds thread participants to a thread. If participants already exist, no change occurs.\n   * @param chatThreadId Id of the thread to add participants to.\n   * @param addChatParticipantsRequest Thread participants to be added to the thread.\n   * @param options The options parameters.\n   */\n  async addChatParticipants(\n    chatThreadId: string,\n    addChatParticipantsRequest: AddChatParticipantsRequest,\n    options?: ChatThreadAddChatParticipantsOptionalParams\n  ): Promise<ChatThreadAddChatParticipantsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.addChatParticipants\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, addChatParticipantsRequest, options },\n          addChatParticipantsOperationSpec\n        ) as Promise<ChatThreadAddChatParticipantsResponse>;\n      }\n    );\n  }\n\n  /**\n   * Updates a thread's properties.\n   * @param chatThreadId The id of the thread to update.\n   * @param updateChatThreadRequest Request payload for updating a chat thread.\n   * @param options The options parameters.\n   */\n  async updateChatThreadProperties(\n    chatThreadId: string,\n    updateChatThreadRequest: UpdateChatThreadRequest,\n    options?: ChatThreadUpdateChatThreadPropertiesOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.updateChatThreadProperties\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, updateChatThreadRequest, options },\n          updateChatThreadPropertiesOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * Gets a chat thread's properties.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  async getChatThreadProperties(\n    chatThreadId: string,\n    options?: ChatThreadGetChatThreadPropertiesOptionalParams\n  ): Promise<ChatThreadGetChatThreadPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.getChatThreadProperties\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          getChatThreadPropertiesOperationSpec\n        ) as Promise<ChatThreadGetChatThreadPropertiesResponse>;\n      }\n    );\n  }\n\n  /**\n   * Posts a typing event to a thread, on behalf of a user.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  async sendTypingNotification(\n    chatThreadId: string,\n    options?: ChatThreadSendTypingNotificationOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendTypingNotification\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          sendTypingNotificationOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * ListChatReadReceiptsNext\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.\n   * @param options The options parameters.\n   */\n  async listChatReadReceiptsNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatReadReceiptsNextOptionalParams\n  ): Promise<ChatThreadListChatReadReceiptsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatReadReceiptsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatReadReceiptsNextOperationSpec\n        ) as Promise<ChatThreadListChatReadReceiptsNextResponse>;\n      }\n    );\n  }\n\n  /**\n   * ListChatMessagesNext\n   * @param chatThreadId The thread id of the message.\n   * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.\n   * @param options The options parameters.\n   */\n  async listChatMessagesNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatMessagesNextOptionalParams\n  ): Promise<ChatThreadListChatMessagesNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatMessagesNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatMessagesNextOperationSpec\n        ) as Promise<ChatThreadListChatMessagesNextResponse>;\n      }\n    );\n  }\n\n  /**\n   * ListChatParticipantsNext\n   * @param chatThreadId Thread id to get participants for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.\n   * @param options The options parameters.\n   */\n  async listChatParticipantsNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatParticipantsNextOptionalParams\n  ): Promise<ChatThreadListChatParticipantsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatParticipantsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatParticipantsNextOperationSpec\n        ) as Promise<ChatThreadListChatParticipantsNextResponse>;\n      }\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listChatReadReceiptsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.skip,\n    Parameters.apiVersion\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendChatReadReceiptOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendReadReceiptRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst sendChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SendChatMessageResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatMessagesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.apiVersion,\n    Parameters.startTime\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessage\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.skip,\n    Parameters.apiVersion\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst removeChatParticipantOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.participantCommunicationIdentifier,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst addChatParticipantsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:add\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.AddChatParticipantsResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.addChatParticipantsRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateChatThreadPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.updateChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst getChatThreadPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadProperties\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendTypingNotificationOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/typing\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.sendTypingNotificationRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatReadReceiptsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatMessagesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatParticipantsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing\";\nimport { Chat } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ChatApiClient } from \"../chatApiClient\";\nimport {\n  CreateChatThreadRequest,\n  ChatCreateChatThreadOptionalParams,\n  ChatCreateChatThreadResponse,\n  ChatListChatThreadsOptionalParams,\n  ChatListChatThreadsResponse,\n  ChatDeleteChatThreadOptionalParams,\n  ChatListChatThreadsNextOptionalParams,\n  ChatListChatThreadsNextResponse\n} from \"../models\";\n\n/** Class containing Chat operations. */\nexport class ChatImpl implements Chat {\n  private readonly client: ChatApiClient;\n\n  /**\n   * Initialize a new instance of the class Chat class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ChatApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a chat thread.\n   * @param createChatThreadRequest Request payload for creating a chat thread.\n   * @param options The options parameters.\n   */\n  async createChatThread(\n    createChatThreadRequest: CreateChatThreadRequest,\n    options?: ChatCreateChatThreadOptionalParams\n  ): Promise<ChatCreateChatThreadResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.createChatThread\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { createChatThreadRequest, options },\n          createChatThreadOperationSpec\n        ) as Promise<ChatCreateChatThreadResponse>;\n      }\n    );\n  }\n\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options The options parameters.\n   */\n  async listChatThreads(\n    options?: ChatListChatThreadsOptionalParams\n  ): Promise<ChatListChatThreadsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatThreads\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { options },\n          listChatThreadsOperationSpec\n        ) as Promise<ChatListChatThreadsResponse>;\n      }\n    );\n  }\n\n  /**\n   * Deletes a thread.\n   * @param chatThreadId Id of the thread to be deleted.\n   * @param options The options parameters.\n   */\n  async deleteChatThread(\n    chatThreadId: string,\n    options?: ChatDeleteChatThreadOptionalParams\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.deleteChatThread\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          deleteChatThreadOperationSpec\n        ) as Promise<void>;\n      }\n    );\n  }\n\n  /**\n   * ListChatThreadsNext\n   * @param nextLink The nextLink from the previous successful call to the ListChatThreads method.\n   * @param options The options parameters.\n   */\n  async listChatThreadsNext(\n    nextLink: string,\n    options?: ChatListChatThreadsNextOptionalParams\n  ): Promise<ChatListChatThreadsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatThreadsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { nextLink, options },\n          listChatThreadsNextOperationSpec\n        ) as Promise<ChatListChatThreadsNextResponse>;\n      }\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createChatThreadOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.CreateChatThreadResult\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.createChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType,\n    Parameters.repeatabilityRequestId\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listChatThreadsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.apiVersion,\n    Parameters.startTime\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteChatThreadOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listChatThreadsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport { ChatThreadImpl, ChatImpl } from \"./operations\";\nimport { ChatThread, Chat } from \"./operationsInterfaces\";\nimport { ChatApiClientOptionalParams } from \"./models\";\n\nexport class ChatApiClient extends coreClient.ServiceClient {\n  endpoint: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the ChatApiClient class.\n   * @param endpoint The endpoint of the Azure Communication resource.\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: ChatApiClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: ChatApiClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-communication-chat/1.4.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{endpoint}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.endpoint = endpoint;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2023-11-07\";\n    this.chatThread = new ChatThreadImpl(this);\n    this.chat = new ChatImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  chatThread: ChatThread;\n  chat: Chat;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\nexport const logger = createClientLogger(\"communication-chat\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport {\n  BearerTokenAuthenticationPolicyOptions,\n  PipelinePolicy,\n  bearerTokenAuthenticationPolicy,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * Creates a new CommunicationTokenCredentialPolicy factory.\n *\n * @param credential - The CommunicationTokenCredential implementation that can supply the user credential.\n */\nexport const createCommunicationTokenCredentialPolicy = (\n  credential: CommunicationTokenCredential\n): PipelinePolicy => {\n  const policyOptions: BearerTokenAuthenticationPolicyOptions = {\n    credential: {\n      getToken: (_scopes, options) => credential.getToken({ abortSignal: options?.abortSignal }),\n    },\n    scopes: [],\n  };\n\n  return bearerTokenAuthenticationPolicy(policyOptions);\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { logger } from \"./models/logger\";\nimport {\n  CommunicationIdentifier,\n  CommunicationTokenCredential,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  AddParticipantsRequest,\n  SendMessageRequest,\n  SendReadReceiptRequest,\n} from \"./models/requests\";\n\nimport {\n  AddChatParticipantsResult,\n  ChatMessage,\n  ChatMessageReadReceipt,\n  ChatParticipant,\n  ChatThreadProperties,\n  ListPageSettings,\n  SendChatMessageResult,\n} from \"./models/models\";\nimport {\n  mapToAddChatParticipantsRequestRestModel,\n  mapToChatMessageSdkModel,\n  mapToChatParticipantSdkModel,\n  mapToChatThreadPropertiesSdkModel,\n  mapToReadReceiptSdkModel,\n} from \"./models/mappers\";\nimport {\n  AddParticipantsOptions,\n  ChatThreadClientOptions,\n  DeleteMessageOptions,\n  GetMessageOptions,\n  GetPropertiesOptions,\n  ListMessagesOptions,\n  ListParticipantsOptions,\n  ListReadReceiptsOptions,\n  RemoveParticipantOptions,\n  SendMessageOptions,\n  SendReadReceiptOptions,\n  SendTypingNotificationOptions,\n  UpdateMessageOptions,\n  UpdateTopicOptions,\n} from \"./models/options\";\nimport { ChatApiClient } from \"./generated/src\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy\";\nimport { tracingClient } from \"./generated/src/tracing\";\n\nconst minimumTypingIntervalInMilliSeconds: number = 8000;\n\n/**\n * The client to do chat operations\n */\nexport class ChatThreadClient {\n  /**\n   * Thread ID of the ChatThreadClient\n   */\n  readonly threadId: string;\n\n  private readonly tokenCredential: CommunicationTokenCredential;\n  private readonly client: ChatApiClient;\n\n  private timeOfLastTypingRequest: Date | undefined = undefined;\n\n  constructor(\n    private readonly endpoint: string,\n    threadId: string,\n    credential: CommunicationTokenCredential,\n    options: ChatThreadClientOptions = {}\n  ) {\n    this.threadId = threadId;\n    this.tokenCredential = credential;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new ChatApiClient(this.endpoint, {\n      endpoint: this.endpoint,\n      ...internalPipelineOptions,\n    });\n\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Gets a chat thread.\n   * Returns the chat thread.\n   * @param options -  Operation options.\n   */\n  public getProperties(options: GetPropertiesOptions = {}): Promise<ChatThreadProperties> {\n    return tracingClient.withSpan(\"ChatClient-GetProperties\", options, async (updatedOptions) => {\n      const result = await this.client.chatThread.getChatThreadProperties(\n        this.threadId,\n        updatedOptions\n      );\n      return mapToChatThreadPropertiesSdkModel(result);\n    });\n  }\n\n  /**\n   * Updates a thread's topic.\n   * @param topic - The topic needs to be updated to.\n   * @param options - Operation options.\n   */\n  public updateTopic(topic: string, options: UpdateTopicOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UpdateTopic\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chatThread.updateChatThreadProperties(\n          this.threadId,\n          { topic: topic },\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Sends a chat message to a thread identified by threadId.\n   * Returns the id of the created message.\n   * @param request - Request for sending a message.\n   * @param options - Operation options.\n   */\n  public sendMessage(\n    request: SendMessageRequest,\n    options: SendMessageOptions = {}\n  ): Promise<SendChatMessageResult> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendMessage\",\n      options,\n      async (updatedOptions) => {\n        // reset typing notification clock\n        this.timeOfLastTypingRequest = undefined;\n\n        const result = await this.client.chatThread.sendChatMessage(\n          this.threadId,\n          { ...request, ...options },\n          updatedOptions\n        );\n        return result;\n      }\n    );\n  }\n\n  /**\n   * Gets a chat message identified by messageId.\n   * Returns the specific message.\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public getMessage(messageId: string, options: GetMessageOptions = {}): Promise<ChatMessage> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-GetMessage\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.chatThread.getChatMessage(\n          this.threadId,\n          messageId,\n          updatedOptions\n        );\n        return mapToChatMessageSdkModel(result);\n      }\n    );\n  }\n\n  private async *listMessagesPage(\n    pageSettings: ListPageSettings,\n    options: ListMessagesOptions = {}\n  ): AsyncIterableIterator<ChatMessage[]> {\n    if (!pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessages(\n        this.threadId,\n        options\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      }\n    }\n\n    while (pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessagesNext(\n        this.threadId,\n        pageSettings.continuationToken,\n        options\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listMessagesAll(options: ListMessagesOptions): AsyncIterableIterator<ChatMessage> {\n    for await (const page of this.listMessagesPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of message from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listMessages(options: ListMessagesOptions = {}): PagedAsyncIterableIterator<ChatMessage> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListMessages\",\n      options\n    );\n\n    try {\n      const iter = this.listMessagesAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listMessagesPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public deleteMessage(messageId: string, options: DeleteMessageOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-DeleteMessage\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chatThread.deleteChatMessage(this.threadId, messageId, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Updates a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public async updateMessage(messageId: string, options: UpdateMessageOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UpdateMessage\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chatThread.updateChatMessage(\n          this.threadId,\n          messageId,\n          options,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Adds the details of chat participants belonging to the thread identified by threadId.\n   * @param request - Thread participants' details to add in the thread roster\n   * @param options - Operation options.\n   */\n  public async addParticipants(\n    request: AddParticipantsRequest,\n    options: AddParticipantsOptions = {}\n  ): Promise<AddChatParticipantsResult> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-AddParticipants\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.chatThread.addChatParticipants(\n          this.threadId,\n          mapToAddChatParticipantsRequestRestModel(request),\n          updatedOptions\n        );\n        return result;\n      }\n    );\n  }\n\n  private async *listParticipantsPage(\n    continuationState: ListPageSettings,\n    options: ListParticipantsOptions = {}\n  ): AsyncIterableIterator<ChatParticipant[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipants(\n        this.threadId,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipantsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listParticipantsAll(\n    options: ListParticipantsOptions\n  ): AsyncIterableIterator<ChatParticipant> {\n    for await (const page of this.listParticipantsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the participants of the thread identified by threadId.\n   * Returns the lists of the participants.\n   * @param options - Operation options.\n   */\n  public listParticipants(\n    options: ListParticipantsOptions = {}\n  ): PagedAsyncIterableIterator<ChatParticipant> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListParticipants\",\n      options\n    );\n\n    try {\n      const iter = this.listParticipantsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listParticipantsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes participant from the thread identified by threadId.\n   * @param participant - Thread participant to remove from the thread roster\n   * @param options - Operation options.\n   */\n  public async removeParticipant(\n    participant: CommunicationIdentifier,\n    options: RemoveParticipantOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-RemoveParticipant\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chatThread.removeChatParticipant(\n          this.threadId,\n          serializeCommunicationIdentifier(participant),\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Sends a typing notification to the thread.\n   * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval\n   * @param options - - Operation options\n   * @returns True if the typing message notification could be sent, otherwise false.\n   */\n  public async sendTypingNotification(\n    options: SendTypingNotificationOptions = {}\n  ): Promise<boolean> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendTypingNotification\",\n      options,\n      async (updatedOptions) => {\n        const dateNow = new Date();\n        const { senderDisplayName, ...restOptions } = updatedOptions;\n\n        if (this.canPostTypingNotification(dateNow)) {\n          this.timeOfLastTypingRequest = dateNow;\n\n          await this.client.chatThread.sendTypingNotification(this.threadId, {\n            sendTypingNotificationRequest: { senderDisplayName: senderDisplayName },\n            ...restOptions,\n          });\n          return true;\n        }\n\n        logger.info(`Typing Notification NOT Send. [thread_id=${this.threadId}]`);\n        return false;\n      }\n    );\n  }\n\n  /**\n   * Sends a read receipt to the thread identified by threadId.\n   * @param request - Request for sending a read receipt\n   * @param options - Operation options.\n   */\n  public async sendReadReceipt(\n    request: SendReadReceiptRequest,\n    options: SendReadReceiptOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendReadReceipt\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chatThread.sendChatReadReceipt(this.threadId, request, updatedOptions);\n      }\n    );\n  }\n\n  private async *listReadReceiptsPage(\n    continuationState: ListPageSettings,\n    options: ListReadReceiptsOptions = {}\n  ): AsyncIterableIterator<ChatMessageReadReceipt[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceipts(\n        this.threadId,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceiptsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listReadReceiptsAll(\n    options: ListReadReceiptsOptions\n  ): AsyncIterableIterator<ChatMessageReadReceipt> {\n    for await (const page of this.listReadReceiptsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of read receipt from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listReadReceipts(\n    options: ListReadReceiptsOptions = {}\n  ): PagedAsyncIterableIterator<ChatMessageReadReceipt> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListChatReadReceipts\",\n      options\n    );\n\n    try {\n      const iter = this.listReadReceiptsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listReadReceiptsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private canPostTypingNotification(dateNow: Date): boolean {\n    if (this.timeOfLastTypingRequest) {\n      const timeSinceLastRequestInMilliSeconds =\n        dateNow.getTime() - this.timeOfLastTypingRequest.getTime();\n\n      if (timeSinceLastRequestInMilliSeconds < minimumTypingIntervalInMilliSeconds) {\n        logger.info(`Typing interval check failed. [last_request=${this.timeOfLastTypingRequest}]`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuidv4 } from \"uuid\";\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n * @internal\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationSignalingClient, SignalingClient } from \"@azure/communication-signaling\";\nimport { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport { AzureLogger } from \"@azure/logger\";\n\nexport interface SignalingClientOptions {\n  environment?: string;\n  resourceEndpoint?: string;\n}\n\nexport const getSignalingClient = (\n  credential: CommunicationTokenCredential,\n  logger: AzureLogger,\n  options?: SignalingClientOptions\n): SignalingClient | undefined => {\n  if (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") {\n    // In React Native\n    return new CommunicationSignalingClient(credential, logger, {\n      environment: options?.environment ?? undefined,\n      resourceEndpoint: options?.resourceEndpoint ?? undefined,\n    });\n  }\n\n  // In node js\n  return undefined;\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  ChatClientOptions,\n  CreateChatThreadOptions,\n  DeleteChatThreadOptions,\n  ListChatThreadsOptions,\n} from \"./models/options\";\nimport {\n  ChatEventId,\n  ChatMessageDeletedEvent,\n  ChatMessageEditedEvent,\n  ChatMessageReceivedEvent,\n  ChatThreadCreatedEvent,\n  ChatThreadDeletedEvent,\n  ChatThreadPropertiesUpdatedEvent,\n  ParticipantsAddedEvent,\n  ParticipantsRemovedEvent,\n  ReadReceiptReceivedEvent,\n  TypingIndicatorReceivedEvent,\n} from \"./models/events\";\nimport { ChatThreadItem, CreateChatThreadResult, ListPageSettings } from \"./models/models\";\nimport {\n  ConnectionState,\n  SignalingClient,\n  SignalingClientOptions,\n} from \"@azure/communication-signaling\";\nimport {\n  mapToChatParticipantRestModel,\n  mapToCreateChatThreadOptionsRestModel,\n  mapToCreateChatThreadResultSdkModel,\n} from \"./models/mappers\";\n\nimport { ChatApiClient } from \"./generated/src\";\nimport { ChatThreadClient } from \"./chatThreadClient\";\nimport { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport { CreateChatThreadRequest } from \"./models/requests\";\nimport { EventEmitter } from \"events\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy\";\nimport { generateUuid } from \"./models/uuid\";\nimport { getSignalingClient } from \"./signaling/signalingClient\";\nimport { logger } from \"./models/logger\";\nimport { tracingClient } from \"./generated/src/tracing\";\n\ndeclare interface InternalChatClientOptions extends ChatClientOptions {\n  signalingClientOptions?: SignalingClientOptions;\n}\n\n/**\n * The client to do chat operations\n */\nexport class ChatClient {\n  private readonly tokenCredential: CommunicationTokenCredential;\n  private readonly clientOptions: InternalChatClientOptions;\n  private readonly client: ChatApiClient;\n  private readonly signalingClient: SignalingClient | undefined = undefined;\n  private readonly emitter = new EventEmitter();\n  private isRealtimeNotificationsStarted: boolean = false;\n\n  /**\n   * Creates an instance of the ChatClient for a given resource and user.\n   *\n   * @param endpoint - The url of the Communication Services resource.\n   * @param credential - The token credential. Use AzureCommunicationTokenCredential from \\@azure/communication-common to create a credential.\n   * @param options - Additional client options.\n   */\n  constructor(\n    private readonly endpoint: string,\n    credential: CommunicationTokenCredential,\n    options: ChatClientOptions = {}\n  ) {\n    this.tokenCredential = credential;\n    this.clientOptions = { ...options };\n    this.clientOptions.signalingClientOptions = {\n      ...this.clientOptions.signalingClientOptions,\n      resourceEndpoint: this.endpoint,\n    };\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new ChatApiClient(this.endpoint, {\n      endpoint: this.endpoint,\n      ...internalPipelineOptions,\n    });\n\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n\n    this.signalingClient = getSignalingClient(\n      credential,\n      logger,\n      this.clientOptions.signalingClientOptions\n    );\n  }\n\n  /**\n   * Returns ChatThreadClient with the specific thread id.\n   * @param threadId - Thread ID for the ChatThreadClient\n   */\n  public getChatThreadClient(threadId: string): ChatThreadClient {\n    return new ChatThreadClient(this.endpoint, threadId, this.tokenCredential, this.clientOptions);\n  }\n\n  /**\n   * Creates a chat thread.\n   * Returns thread client with the id of the created thread.\n   * @param request - Request for creating a chat thread.\n   * @param options - Operation options.\n   */\n  public async createChatThread(\n    request: CreateChatThreadRequest,\n    options: CreateChatThreadOptions = {}\n  ): Promise<CreateChatThreadResult> {\n    return tracingClient.withSpan(\n      \"ChatClient-CreateChatThread\",\n      options,\n      async (updatedOptions) => {\n        // We generate an UUID if the user does not provide an idempotencyToken value\n        updatedOptions.idempotencyToken = updatedOptions.idempotencyToken ?? generateUuid();\n        const updatedRestModelOptions = mapToCreateChatThreadOptionsRestModel(updatedOptions);\n\n        const result = await this.client.chat.createChatThread(\n          {\n            topic: request.topic,\n            participants: options.participants?.map((participant) =>\n              mapToChatParticipantRestModel(participant)\n            ),\n          },\n          updatedRestModelOptions\n        );\n        return mapToCreateChatThreadResultSdkModel(result);\n      }\n    );\n  }\n\n  private async *listChatThreadsPage(\n    continuationState: ListPageSettings,\n    options: ListChatThreadsOptions = {}\n  ): AsyncIterableIterator<ChatThreadItem[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chat.listChatThreads(options);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chat.listChatThreadsNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value;\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listChatThreadsAll(\n    options: ListChatThreadsOptions\n  ): AsyncIterableIterator<ChatThreadItem> {\n    for await (const page of this.listChatThreadsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options - List chat threads options.\n   */\n  public listChatThreads(\n    options: ListChatThreadsOptions = {}\n  ): PagedAsyncIterableIterator<ChatThreadItem> {\n    const { span, updatedOptions } = tracingClient.startSpan(\"ChatClient-ListChatThreads\", options);\n    try {\n      const iter = this.listChatThreadsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listChatThreadsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        error: e,\n        status: \"error\",\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a chat thread.\n   * @param threadId - The ID of the thread to delete.\n   * @param options -  Operation options.\n   */\n  public async deleteChatThread(\n    threadId: string,\n    options: DeleteChatThreadOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatClient-DeleteChatThread\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chat.deleteChatThread(threadId, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Start receiving realtime notifications.\n   * Call this function before subscribing to any event.\n   */\n  public async startRealtimeNotifications(): Promise<void> {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are not supported in node js.\");\n    }\n\n    if (this.isRealtimeNotificationsStarted) {\n      return;\n    }\n\n    this.isRealtimeNotificationsStarted = true;\n    await this.signalingClient.start();\n    this.subscribeToSignalingEvents();\n  }\n\n  /**\n   * Stop receiving realtime notifications.\n   * This function would unsubscribe to all events.\n   */\n  public async stopRealtimeNotifications(): Promise<void> {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are not supported in node js.\");\n    }\n\n    this.isRealtimeNotificationsStarted = false;\n    await this.signalingClient.stop();\n    this.emitter.removeAllListeners();\n  }\n\n  /**\n   * Subscribe function for chatMessageReceived.\n   * The initial sender will also receive this event.\n   * You need to call startRealtimeNotifications before subscribing to any event.\n   * @param event - The ChatMessageReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageReceived\", listener: (e: ChatMessageReceivedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatMessageEdited.\n   * The initial sender will also receive this event.\n   * @param event - The ChatMessageEditedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageEdited\", listener: (e: ChatMessageEditedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatMessageDeleted.\n   * The initial sender will also receive this event.\n   * @param event - The ChatMessageDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageDeleted\", listener: (e: ChatMessageDeletedEvent) => void): void;\n\n  /**\n   * Subscribe function for typingIndicatorReceived.\n   * The initial sender will also receive this event.\n   * @param event - The TypingIndicatorReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(\n    event: \"typingIndicatorReceived\",\n    listener: (e: TypingIndicatorReceivedEvent) => void\n  ): void;\n\n  /**\n   * Subscribe function for readReceiptReceived.\n   * @param event - The ReadReceiptReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"readReceiptReceived\", listener: (e: ReadReceiptReceivedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadCreated.\n   * @param event - The ChatThreadCreatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatThreadCreated\", listener: (e: ChatThreadCreatedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadDeleted.\n   * @param event - The ChatThreadDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatThreadDeleted\", listener: (e: ChatThreadDeletedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadPropertiesUpdated.\n   * @param event - The ChatThreadPropertiesUpdatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(\n    event: \"chatThreadPropertiesUpdated\",\n    listener: (e: ChatThreadPropertiesUpdatedEvent) => void\n  ): void;\n\n  /**\n   * Subscribe function for participantsAdded.\n   * @param event - The ParticipantsAddedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"participantsAdded\", listener: (e: ParticipantsAddedEvent) => void): void;\n\n  /**\n   * Subscribe function for participantsRemoved.\n   * @param event - The ParticipantsRemovedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"participantsRemoved\", listener: (e: ParticipantsRemovedEvent) => void): void;\n\n  /**\n   * Subscribe function for realTimeNotificationConnected.\n   * @param event - The realTimeNotificationConnected Event\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"realTimeNotificationConnected\", listener: () => void): void;\n\n  /**\n   * Subscribe function for realTimeNotificationDisconnected.\n   * @param event - The realTimeNotificationDisconnected Event\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"realTimeNotificationDisconnected\", listener: () => void): void;\n\n  public on(event: ChatEventId, listener: (e?: any) => void): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n    if (\n      !this.isRealtimeNotificationsStarted &&\n      event !== \"realTimeNotificationConnected\" &&\n      event !== \"realTimeNotificationDisconnected\"\n    ) {\n      throw new Error(\n        \"You must call startRealtimeNotifications before you can subscribe to events.\"\n      );\n    }\n\n    this.emitter.on(event, listener);\n  }\n\n  /**\n   * Unsubscribe from chatMessageReceived.\n   * @param event - The ChatMessageReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageReceived\", listener: (e: ChatMessageReceivedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatMessageEdited.\n   * @param event - The ChatMessageEditedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageEdited\", listener: (e: ChatMessageEditedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatMessageDeleted.\n   * @param event - The ChatMessageDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageDeleted\", listener: (e: ChatMessageDeletedEvent) => void): void;\n\n  /**\n   * Unsubscribe from typingIndicatorReceived.\n   * @param event - The TypingIndicatorReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(\n    event: \"typingIndicatorReceived\",\n    listener: (e: TypingIndicatorReceivedEvent) => void\n  ): void;\n\n  /**\n   * Unsubscribe from readReceiptReceived.\n   * @param event - The ReadReceiptReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"readReceiptReceived\", listener: (e: ReadReceiptReceivedEvent) => void): void;\n\n  /**\n   *  Unsubscribe from chatThreadCreated.\n   * @param event - The ChatThreadCreatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatThreadCreated\", listener: (e: ChatThreadCreatedEvent) => void): void;\n\n  /**\n   *  Unsubscribe from chatThreadDeleted.\n   * @param event - The ChatThreadDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatThreadDeleted\", listener: (e: ChatThreadDeletedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatThreadPropertiesUpdated.\n   * @param event - The ChatThreadPropertiesUpdatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(\n    event: \"chatThreadPropertiesUpdated\",\n    listener: (e: ChatThreadPropertiesUpdatedEvent) => void\n  ): void;\n\n  /**\n   * Unsubscribe from participantsAdded.\n   * @param event - The ParticipantsAddedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"participantsAdded\", listener: (e: ParticipantsAddedEvent) => void): void;\n\n  /**\n   * Unsubscribe from participantsRemoved.\n   * @param event - The ParticipantsRemovedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"participantsRemoved\", listener: (e: ParticipantsRemovedEvent) => void): void;\n\n  public off(event: ChatEventId, listener: (e: any) => void): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n\n    this.emitter.removeListener(event, listener);\n  }\n\n  private subscribeToSignalingEvents(): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n\n    this.signalingClient.on(\"connectionChanged\", (payload) => {\n      if (payload === ConnectionState.Connected) {\n        this.emitter.emit(\"realTimeNotificationConnected\");\n      } else if (payload === ConnectionState.Disconnected) {\n        this.emitter.emit(\"realTimeNotificationDisconnected\");\n      }\n    });\n\n    this.signalingClient.on(\"chatMessageReceived\", (payload) => {\n      this.emitter.emit(\"chatMessageReceived\", payload);\n    });\n\n    this.signalingClient.on(\"chatMessageEdited\", (payload) => {\n      this.emitter.emit(\"chatMessageEdited\", payload);\n    });\n\n    this.signalingClient.on(\"chatMessageDeleted\", (payload) => {\n      this.emitter.emit(\"chatMessageDeleted\", payload);\n    });\n\n    this.signalingClient.on(\"typingIndicatorReceived\", (payload) => {\n      this.emitter.emit(\"typingIndicatorReceived\", payload);\n    });\n\n    this.signalingClient.on(\"readReceiptReceived\", (payload) => {\n      this.emitter.emit(\"readReceiptReceived\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadCreated\", (payload) => {\n      this.emitter.emit(\"chatThreadCreated\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadDeleted\", (payload) => {\n      this.emitter.emit(\"chatThreadDeleted\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadPropertiesUpdated\", (payload) => {\n      this.emitter.emit(\"chatThreadPropertiesUpdated\", payload);\n    });\n\n    this.signalingClient.on(\"participantsAdded\", (payload) => {\n      this.emitter.emit(\"participantsAdded\", payload);\n    });\n\n    this.signalingClient.on(\"participantsRemoved\", (payload) => {\n      this.emitter.emit(\"participantsRemoved\", payload);\n    });\n  }\n}\n"],"names":["__rest","serializeCommunicationIdentifier","deserializeCommunicationIdentifier","createTracingClient","SendReadReceiptRequestMapper","SendChatMessageRequestMapper","UpdateChatMessageRequestMapper","CommunicationIdentifierModelMapper","AddChatParticipantsRequestMapper","UpdateChatThreadRequestMapper","SendTypingNotificationRequestMapper","CreateChatThreadRequestMapper","serializer","coreClient","Mappers.ChatMessageReadReceiptsCollection","Mappers.CommunicationErrorResponse","Parameters.maxPageSize","Parameters.skip","Parameters.apiVersion","Parameters.endpoint","Parameters.chatThreadId","Parameters.accept","Parameters.sendReadReceiptRequest","Parameters.contentType","Mappers.SendChatMessageResult","Parameters.sendChatMessageRequest","Mappers.ChatMessagesCollection","Parameters.startTime","Mappers.ChatMessage","Parameters.chatMessageId","Parameters.updateChatMessageRequest","Parameters.contentType1","Mappers.ChatParticipantsCollection","Parameters.participantCommunicationIdentifier","Mappers.AddChatParticipantsResult","Parameters.addChatParticipantsRequest","Parameters.updateChatThreadRequest","Mappers.ChatThreadProperties","Parameters.sendTypingNotificationRequest","Parameters.nextLink","Mappers.CreateChatThreadResult","Parameters.createChatThreadRequest","Parameters.repeatabilityRequestId","Mappers.ChatThreadsItemCollection","createClientLogger","bearerTokenAuthenticationPolicy","__await","__asyncValues","__asyncDelegator","uuidv4","CommunicationSignalingClient","EventEmitter"],"mappings":"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"}