{"version":3,"file":"chatThreadClient.js","sourceRoot":"","sources":["../../src/chatThreadClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { logger } from \"./models/logger\";\nimport {\n  CommunicationIdentifier,\n  CommunicationTokenCredential,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  AddParticipantsRequest,\n  SendMessageRequest,\n  SendReadReceiptRequest,\n} from \"./models/requests\";\n\nimport {\n  AddChatParticipantsResult,\n  ChatMessage,\n  ChatMessageReadReceipt,\n  ChatParticipant,\n  ChatThreadProperties,\n  ListPageSettings,\n  SendChatMessageResult,\n  UploadChatImageResult,\n} from \"./models/models\";\nimport {\n  mapToAddChatParticipantsRequestRestModel,\n  mapToChatMessageSdkModel,\n  mapToChatParticipantSdkModel,\n  mapToChatThreadPropertiesSdkModel,\n  mapToReadReceiptSdkModel,\n  mapToSendChatMessageRequestRestModel,\n  mapToUpdateChatMessageRequestRestModel,\n} from \"./models/mappers\";\nimport {\n  AddParticipantsOptions,\n  ChatThreadClientOptions,\n  DeleteMessageOptions,\n  GetMessageOptions,\n  GetPropertiesOptions,\n  ListMessagesOptions,\n  ListParticipantsOptions,\n  ListReadReceiptsOptions,\n  RemoveParticipantOptions,\n  SendMessageOptions,\n  SendReadReceiptOptions,\n  SendTypingNotificationOptions,\n  UpdateMessageOptions,\n  UpdateTopicOptions,\n  UpdateChatThreadPropertiesOptions,\n  DeleteImageOptions,\n  UploadImageOptions,\n  UploadImageStreamOptions,\n} from \"./models/options\";\nimport {\n  ChatApiClient,\n  ChatThreadGetChatThreadPropertiesOptionalParams,\n  ChatThreadUpdateChatThreadPropertiesOptionalParams,\n  ChatThreadSendChatMessageOptionalParams,\n  ChatThreadGetChatMessageOptionalParams,\n  ChatThreadDeleteChatMessageOptionalParams,\n  ChatThreadUpdateChatMessageOptionalParams,\n  ChatThreadAddChatParticipantsOptionalParams,\n  ChatThreadRemoveChatParticipantOptionalParams,\n  ChatThreadSendChatReadReceiptOptionalParams,\n  ChatThreadUploadChatImageOptionalParams,\n  ChatThreadDeleteChatImageOptionalParams,\n} from \"./generated/src\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { createXhrHttpClient, isReadableStream, isBlob } from \"./xhrHttpClient\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy\";\nimport { tracingClient } from \"./generated/src/tracing\";\n\nconst minimumTypingIntervalInMilliSeconds: number = 8000;\n\n/**\n * The client to do chat operations\n */\nexport class ChatThreadClient {\n  /**\n   * Thread ID of the ChatThreadClient\n   */\n  readonly threadId: string;\n\n  private readonly tokenCredential: CommunicationTokenCredential;\n  private readonly client: ChatApiClient;\n  private readonly xhrClient?: ChatApiClient;\n\n  private timeOfLastTypingRequest: Date | undefined = undefined;\n\n  constructor(\n    private readonly endpoint: string,\n    threadId: string,\n    credential: CommunicationTokenCredential,\n    options: ChatThreadClientOptions = {},\n  ) {\n    this.threadId = threadId;\n    this.tokenCredential = credential;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new ChatApiClient(this.endpoint, {\n      endpoint: this.endpoint,\n      ...internalPipelineOptions,\n    });\n\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n\n    if (typeof XMLHttpRequest !== \"undefined\") {\n      this.xhrClient = new ChatApiClient(this.endpoint, {\n        endpoint: this.endpoint,\n        ...internalPipelineOptions,\n        httpClient: createXhrHttpClient(),\n      });\n      this.xhrClient.pipeline.addPolicy(authPolicy);\n    }\n  }\n\n  /**\n   * Gets a chat thread.\n   * Returns the chat thread.\n   * @param options -  Operation options.\n   */\n  public getProperties(options: GetPropertiesOptions = {}): Promise<ChatThreadProperties> {\n    return tracingClient.withSpan(\n      \"ChatClient-GetProperties\",\n      options,\n      async (updatedOptions: ChatThreadGetChatThreadPropertiesOptionalParams | undefined) => {\n        const result = await this.client.chatThread.getChatThreadProperties(\n          this.threadId,\n          updatedOptions,\n        );\n        return mapToChatThreadPropertiesSdkModel(result);\n      },\n    );\n  }\n\n  /**\n   * Updates a thread's topic.\n   * @param topic - The topic needs to be updated to.\n   * @param options - Operation options.\n   */\n  public updateTopic(topic: string, options: UpdateTopicOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UpdateTopic\",\n      options,\n      async (updatedOptions: ChatThreadUpdateChatThreadPropertiesOptionalParams | undefined) => {\n        await this.client.chatThread.updateChatThreadProperties(\n          this.threadId,\n          { topic: topic },\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Updates a thread's properties.\n   * @param options - Operation options.\n   */\n  public updateProperties(options: UpdateChatThreadPropertiesOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UpdateProperties\",\n      options,\n      async (updatedOptions: ChatThreadUpdateChatThreadPropertiesOptionalParams | undefined) => {\n        await this.client.chatThread.updateChatThreadProperties(\n          this.threadId,\n          options,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Sends a chat message to a thread identified by threadId.\n   * Returns the id of the created message.\n   * @param request - Request for sending a message.\n   * @param options - Operation options.\n   */\n  public sendMessage(\n    request: SendMessageRequest,\n    options: SendMessageOptions = {},\n  ): Promise<SendChatMessageResult> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendMessage\",\n      options,\n      async (updatedOptions: ChatThreadSendChatMessageOptionalParams | undefined) => {\n        // reset typing notification clock\n        this.timeOfLastTypingRequest = undefined;\n\n        const result = await this.client.chatThread.sendChatMessage(\n          this.threadId,\n          mapToSendChatMessageRequestRestModel(request, options),\n          updatedOptions,\n        );\n        return result;\n      },\n    );\n  }\n\n  /**\n   * Gets a chat message identified by messageId.\n   * Returns the specific message.\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public getMessage(messageId: string, options: GetMessageOptions = {}): Promise<ChatMessage> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-GetMessage\",\n      options,\n      async (updatedOptions: ChatThreadGetChatMessageOptionalParams | undefined) => {\n        const result = await this.client.chatThread.getChatMessage(\n          this.threadId,\n          messageId,\n          updatedOptions,\n        );\n        return mapToChatMessageSdkModel(result);\n      },\n    );\n  }\n\n  private async *listMessagesPage(\n    pageSettings: ListPageSettings,\n    options: ListMessagesOptions = {},\n  ): AsyncIterableIterator<ChatMessage[]> {\n    if (!pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessages(\n        this.threadId,\n        options,\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      }\n    }\n\n    while (pageSettings.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatMessagesNext(\n        this.threadId,\n        pageSettings.continuationToken,\n        options,\n      );\n      pageSettings.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatMessageSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listMessagesAll(options: ListMessagesOptions): AsyncIterableIterator<ChatMessage> {\n    for await (const page of this.listMessagesPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of message from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listMessages(options: ListMessagesOptions = {}): PagedAsyncIterableIterator<ChatMessage> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListMessages\",\n      options,\n    );\n\n    try {\n      const iter = this.listMessagesAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listMessagesPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public deleteMessage(messageId: string, options: DeleteMessageOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-DeleteMessage\",\n      options,\n      async (updatedOptions: ChatThreadDeleteChatMessageOptionalParams | undefined) => {\n        await this.client.chatThread.deleteChatMessage(this.threadId, messageId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Updates a message identified by threadId and messageId\n   * @param messageId - The message id of the message.\n   * @param options - Operation options.\n   */\n  public async updateMessage(messageId: string, options: UpdateMessageOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UpdateMessage\",\n      options,\n      async (updatedOptions: ChatThreadUpdateChatMessageOptionalParams | undefined) => {\n        await this.client.chatThread.updateChatMessage(\n          this.threadId,\n          messageId,\n          mapToUpdateChatMessageRequestRestModel(options),\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Adds the details of chat participants belonging to the thread identified by threadId.\n   * @param request - Thread participants' details to add in the thread roster\n   * @param options - Operation options.\n   */\n  public async addParticipants(\n    request: AddParticipantsRequest,\n    options: AddParticipantsOptions = {},\n  ): Promise<AddChatParticipantsResult> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-AddParticipants\",\n      options,\n      async (updatedOptions: ChatThreadAddChatParticipantsOptionalParams | undefined) => {\n        const result = await this.client.chatThread.addChatParticipants(\n          this.threadId,\n          mapToAddChatParticipantsRequestRestModel(request),\n          updatedOptions,\n        );\n        return result;\n      },\n    );\n  }\n\n  private async *listParticipantsPage(\n    continuationState: ListPageSettings,\n    options: ListParticipantsOptions = {},\n  ): AsyncIterableIterator<ChatParticipant[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipants(\n        this.threadId,\n        options,\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatParticipantsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        options,\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToChatParticipantSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listParticipantsAll(\n    options: ListParticipantsOptions,\n  ): AsyncIterableIterator<ChatParticipant> {\n    for await (const page of this.listParticipantsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the participants of the thread identified by threadId.\n   * Returns the lists of the participants.\n   * @param options - Operation options.\n   */\n  public listParticipants(\n    options: ListParticipantsOptions = {},\n  ): PagedAsyncIterableIterator<ChatParticipant> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListParticipants\",\n      options,\n    );\n\n    try {\n      const iter = this.listParticipantsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listParticipantsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes participant from the thread identified by threadId.\n   * @param participant - Thread participant to remove from the thread roster\n   * @param options - Operation options.\n   */\n  public async removeParticipant(\n    participant: CommunicationIdentifier,\n    options: RemoveParticipantOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-RemoveParticipant\",\n      options,\n      async (updatedOptions: ChatThreadRemoveChatParticipantOptionalParams | undefined) => {\n        await this.client.chatThread.removeChatParticipant(\n          this.threadId,\n          serializeCommunicationIdentifier(participant),\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Sends a typing notification to the thread.\n   * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval\n   * @param options - - Operation options\n   * @returns True if the typing message notification could be sent, otherwise false.\n   */\n  public async sendTypingNotification(\n    options: SendTypingNotificationOptions = {},\n  ): Promise<boolean> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendTypingNotification\",\n      options,\n      async (updatedOptions: SendTypingNotificationOptions) => {\n        const dateNow = new Date();\n        const { senderDisplayName, ...restOptions } = updatedOptions;\n\n        if (this.canPostTypingNotification(dateNow)) {\n          this.timeOfLastTypingRequest = dateNow;\n\n          await this.client.chatThread.sendTypingNotification(this.threadId, {\n            sendTypingNotificationRequest: { senderDisplayName: senderDisplayName },\n            ...restOptions,\n          });\n          return true;\n        }\n\n        logger.info(`Typing Notification NOT Send. [thread_id=${this.threadId}]`);\n        return false;\n      },\n    );\n  }\n\n  /**\n   * Sends a read receipt to the thread identified by threadId.\n   * @param request - Request for sending a read receipt\n   * @param options - Operation options.\n   */\n  public async sendReadReceipt(\n    request: SendReadReceiptRequest,\n    options: SendReadReceiptOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-SendReadReceipt\",\n      options,\n      async (updatedOptions: ChatThreadSendChatReadReceiptOptionalParams | undefined) => {\n        await this.client.chatThread.sendChatReadReceipt(this.threadId, request, updatedOptions);\n      },\n    );\n  }\n\n  private async *listReadReceiptsPage(\n    continuationState: ListPageSettings,\n    options: ListReadReceiptsOptions = {},\n  ): AsyncIterableIterator<ChatMessageReadReceipt[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceipts(\n        this.threadId,\n        options,\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chatThread.listChatReadReceiptsNext(\n        this.threadId,\n        continuationState.continuationToken,\n        options,\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(mapToReadReceiptSdkModel, this);\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listReadReceiptsAll(\n    options: ListReadReceiptsOptions,\n  ): AsyncIterableIterator<ChatMessageReadReceipt> {\n    for await (const page of this.listReadReceiptsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of read receipt from a thread identified by threadId.\n   * Returns the list of the messages.\n   * @param options - Get messages options.\n   */\n  public listReadReceipts(\n    options: ListReadReceiptsOptions = {},\n  ): PagedAsyncIterableIterator<ChatMessageReadReceipt> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"ChatThreadClient-ListChatReadReceipts\",\n      options,\n    );\n\n    try {\n      const iter = this.listReadReceiptsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listReadReceiptsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private canPostTypingNotification(dateNow: Date): boolean {\n    if (this.timeOfLastTypingRequest) {\n      const timeSinceLastRequestInMilliSeconds =\n        dateNow.getTime() - this.timeOfLastTypingRequest.getTime();\n\n      if (timeSinceLastRequestInMilliSeconds < minimumTypingIntervalInMilliSeconds) {\n        logger.info(`Typing interval check failed. [last_request=${this.timeOfLastTypingRequest}]`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Uploads an chat image to a thread identified by threadId.\n   * Allowed image types \"jpg\", \"png\", \"gif\", \"heic\", \"webp\".\n   * Returns the id of the uploaded image.\n   * @param image - Request for uploading an image.\n   * @param imageFilename - The image's file name with file extension.\n   * @param options - Operation options.\n   */\n  public async uploadImage(\n    image: ArrayBuffer | Blob,\n    imageFilename: string,\n    options?: UploadImageOptions,\n  ): Promise<UploadChatImageResult>;\n\n  /**\n   * Uploads an chat image stream to a thread identified by threadId.\n   * Allowed image types \"jpg\", \"png\", \"gif\", \"heic\", \"webp\".\n   * Returns the id of the uploaded image.\n   * @param image - Request for uploading an image.\n   * @param imageFileName - The image's file name with file extension.\n   * @param imageBytesLength - The image's file length in bytes.\n   * @param options - Operation options.\n   */\n  public async uploadImage(\n    image: ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n    imageFileName: string,\n    imageBytesLength: number,\n    // eslint-disable-next-line\n    options?: UploadImageStreamOptions,\n  ): Promise<UploadChatImageResult>;\n\n  async uploadImage(\n    image: ArrayBuffer | Blob | ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n    imageFilename: string,\n    imageBytesLengthOrOptions?: number | UploadImageOptions,\n    options: UploadImageStreamOptions = {},\n  ): Promise<UploadChatImageResult> {\n    let uploadImageOptions = {};\n    if (imageBytesLengthOrOptions !== undefined) {\n      if (typeof imageBytesLengthOrOptions === \"number\") {\n        uploadImageOptions = { ...options, imageBytesLength: imageBytesLengthOrOptions };\n      } else {\n        uploadImageOptions = { ...options, ...imageBytesLengthOrOptions };\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"ChatThreadClient-UploadImage\",\n      uploadImageOptions,\n      async (updatedOptions: ChatThreadUploadChatImageOptionalParams | undefined) => {\n        let result: UploadChatImageResult;\n        if (\n          this.xhrClient && // is browser\n          ((!this.supportsReadableStream() && isReadableStream(image)) || // is readable stream but no support, need to convert\n            !isReadableStream(image))\n        ) {\n          // use xhrClient if (to support onUploadProgress)\n          // - is readable stream but no support => convert to ArrayBuffer (so will have content-length)\n          // - is not readable stream\n          result = await this.xhrClient.chatThread.uploadChatImage(\n            this.threadId,\n            isReadableStream(image) ? await this.getArrayBufferFromReadableStream(image) : image,\n            { imageFilename, ...updatedOptions },\n          );\n        } else {\n          // backend (node fetch client) or readable readable stream\n          // Backend (no browser) need to convert Blob/ReadableStream to ArrayBuffer\n          let chatImageFile = image;\n          if (isBlob(image)) {\n            chatImageFile = await this.getArrayBufferFromBlob(image);\n          } else if (isReadableStream(image)) {\n            chatImageFile = await this.getArrayBufferFromReadableStream(image);\n          }\n          result = await this.client.chatThread.uploadChatImage(this.threadId, chatImageFile, {\n            imageFilename,\n            ...updatedOptions,\n          });\n        }\n        return result;\n      },\n    );\n  }\n\n  /**\n   * Deletes an image identified by threadId and imageId\n   * @param imageId - The image id of the image.\n   * @param options - Operation options.\n   */\n  public deleteImage(imageId: string, options: DeleteImageOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatThreadClient-DeleteImage\",\n      options,\n      async (updatedOptions: ChatThreadDeleteChatImageOptionalParams | undefined) => {\n        await this.client.chatThread.deleteChatImage(this.threadId, imageId, updatedOptions);\n      },\n    );\n  }\n\n  private supportsReadableStream(): boolean {\n    let duplexAccessed = false;\n    const hasContentType = new Request(\"\", {\n      body: new ReadableStream(),\n      method: \"POST\",\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      get duplex() {\n        duplexAccessed = true;\n        return \"half\";\n      },\n    }).headers.has(\"Content-Type\");\n    return duplexAccessed && !hasContentType;\n  }\n\n  private async getArrayBufferFromReadableStream(\n    body: ReadableStream<Uint8Array>,\n  ): Promise<ArrayBuffer> {\n    const arrayBuffer = await new Response(body).arrayBuffer();\n    return new Uint8Array(arrayBuffer);\n  }\n\n  private async getArrayBufferFromBlob(body: Blob): Promise<ArrayBuffer> {\n    return new Uint8Array(await body.arrayBuffer());\n  }\n}\n"]}